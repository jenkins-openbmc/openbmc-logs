<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170510 08:29:54.673">
<suite name="Tests" id="s1" source="/tmp/root/14259/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:29:55.260">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:29:55.260" starttime="20170510 08:29:55.260" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:29:55.260">${has_host} = False</msg>
<status endtime="20170510 08:29:55.260" starttime="20170510 08:29:55.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:29:55.261" starttime="20170510 08:29:55.261" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:55.261" starttime="20170510 08:29:55.260" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:55.263">${port_num} = 22</msg>
<status endtime="20170510 08:29:55.263" starttime="20170510 08:29:55.262" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:55.263">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:29:55.263" starttime="20170510 08:29:55.263" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:55.264">${https_num} = 443</msg>
<status endtime="20170510 08:29:55.264" starttime="20170510 08:29:55.263" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:55.264">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:29:55.264" starttime="20170510 08:29:55.264" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:55.265" starttime="20170510 08:29:55.262" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:55.265" starttime="20170510 08:29:55.261" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:29:55.265">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:29:55.266" starttime="20170510 08:29:55.265" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:29:55.266">${has_port} = False</msg>
<status endtime="20170510 08:29:55.266" starttime="20170510 08:29:55.265" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:29:55.267" starttime="20170510 08:29:55.267" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:29:55.268" starttime="20170510 08:29:55.267" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:55.268" starttime="20170510 08:29:55.267" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:55.268" starttime="20170510 08:29:55.266" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:55.268">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:29:58.060">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:29:58.060" starttime="20170510 08:29:55.268" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.061" starttime="20170510 08:29:55.259" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:58.062">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170510 08:29:58.286">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:29:58.286">${output} = VERSION_ID="v1.99.5-21-g6fdb2b1"</msg>
<msg level="INFO" timestamp="20170510 08:29:58.286">${stderr} = </msg>
<status endtime="20170510 08:29:58.286" starttime="20170510 08:29:58.062" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.287">Length is 0</msg>
<status endtime="20170510 08:29:58.287" starttime="20170510 08:29:58.287" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.287">VERSION_ID="v1.99.5-21-g6fdb2b1"</msg>
<status endtime="20170510 08:29:58.287" starttime="20170510 08:29:58.287" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.287" starttime="20170510 08:29:58.061" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.288" starttime="20170510 08:29:58.061" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:58.289">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170510 08:29:58.614">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:29:58.614">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170510 08:29:58.614">${stderr} = </msg>
<status endtime="20170510 08:29:58.614" starttime="20170510 08:29:58.289" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.614">Length is 0</msg>
<status endtime="20170510 08:29:58.614" starttime="20170510 08:29:58.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:29:58.615">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170510 08:29:58.615" starttime="20170510 08:29:58.288" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.615">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170510 08:29:58.616" starttime="20170510 08:29:58.615" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.616" starttime="20170510 08:29:58.288" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.617" starttime="20170510 08:29:58.288" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:29:58.619">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:29:58.619" starttime="20170510 08:29:58.619" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:29:58.619">${has_host} = False</msg>
<status endtime="20170510 08:29:58.619" starttime="20170510 08:29:58.618" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:29:58.620" starttime="20170510 08:29:58.620" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.620" starttime="20170510 08:29:58.620" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:58.622">${port_num} = 22</msg>
<status endtime="20170510 08:29:58.622" starttime="20170510 08:29:58.622" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:58.622">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:29:58.622" starttime="20170510 08:29:58.622" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:29:58.623">${https_num} = 443</msg>
<status endtime="20170510 08:29:58.623" starttime="20170510 08:29:58.623" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.624">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:29:58.624" starttime="20170510 08:29:58.623" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.624" starttime="20170510 08:29:58.621" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.624" starttime="20170510 08:29:58.621" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:29:58.625">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:29:58.625" starttime="20170510 08:29:58.624" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:29:58.625">${has_port} = False</msg>
<status endtime="20170510 08:29:58.625" starttime="20170510 08:29:58.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:29:58.626" starttime="20170510 08:29:58.626" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:29:58.627" starttime="20170510 08:29:58.627" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.627" starttime="20170510 08:29:58.626" status="PASS"></status>
</kw>
<status endtime="20170510 08:29:58.627" starttime="20170510 08:29:58.625" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:29:58.628">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:30:00.531">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:30:00.531" starttime="20170510 08:29:58.627" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.531" starttime="20170510 08:29:58.618" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:00.532">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170510 08:30:00.599">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:30:00.599">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170510 08:30:00.599">${stderr} = </msg>
<status endtime="20170510 08:30:00.599" starttime="20170510 08:30:00.532" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:00.600">Length is 0</msg>
<status endtime="20170510 08:30:00.600" starttime="20170510 08:30:00.599" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:00.600">Length is 11</msg>
<status endtime="20170510 08:30:00.600" starttime="20170510 08:30:00.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:00.600">${bmc_model} = Witherspoon</msg>
<status endtime="20170510 08:30:00.600" starttime="20170510 08:29:58.617" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:00.601">BMC Model=Witherspoon</msg>
<status endtime="20170510 08:30:00.601" starttime="20170510 08:30:00.601" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.601" starttime="20170510 08:29:58.617" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.601" starttime="20170510 08:29:58.617" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:00.603">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:30:00.603" starttime="20170510 08:30:00.603" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:00.603">${has_host} = False</msg>
<status endtime="20170510 08:30:00.603" starttime="20170510 08:30:00.602" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:30:00.604" starttime="20170510 08:30:00.604" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.605" starttime="20170510 08:30:00.604" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:00.606">${port_num} = 22</msg>
<status endtime="20170510 08:30:00.606" starttime="20170510 08:30:00.606" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:00.606">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:30:00.606" starttime="20170510 08:30:00.606" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:00.607">${https_num} = 443</msg>
<status endtime="20170510 08:30:00.607" starttime="20170510 08:30:00.607" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:00.608">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:30:00.608" starttime="20170510 08:30:00.607" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.608" starttime="20170510 08:30:00.605" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.608" starttime="20170510 08:30:00.605" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:00.609">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:30:00.609" starttime="20170510 08:30:00.609" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:00.609">${has_port} = False</msg>
<status endtime="20170510 08:30:00.609" starttime="20170510 08:30:00.608" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:30:00.611" starttime="20170510 08:30:00.610" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:30:00.611" starttime="20170510 08:30:00.611" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.611" starttime="20170510 08:30:00.610" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:00.611" starttime="20170510 08:30:00.609" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:00.612">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:30:02.290">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:30:02.290" starttime="20170510 08:30:00.612" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.290" starttime="20170510 08:30:00.602" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.291">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170510 08:30:02.398">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:30:02.398">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170510 08:30:02.398">${stderr} = </msg>
<status endtime="20170510 08:30:02.398" starttime="20170510 08:30:02.291" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.398">Length is 0</msg>
<status endtime="20170510 08:30:02.398" starttime="20170510 08:30:02.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.399">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170510 08:30:02.399" starttime="20170510 08:30:02.290" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170510 08:30:02.399" starttime="20170510 08:30:02.399" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.400" starttime="20170510 08:30:00.602" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.400" starttime="20170510 08:30:00.601" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.400" starttime="20170510 08:29:55.258" status="PASS"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/root/14259/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/14259/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.480">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:02.480" starttime="20170510 08:30:02.479" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.481">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:02.481" starttime="20170510 08:30:02.480" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.482">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:02.482" starttime="20170510 08:30:02.481" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.482">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:02.482" starttime="20170510 08:30:02.482" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.680">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:02.680" starttime="20170510 08:30:02.483" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:02.681">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:02.681" starttime="20170510 08:30:02.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.681">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:02.681" starttime="20170510 08:30:02.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:02.682" starttime="20170510 08:30:02.682" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.682" starttime="20170510 08:30:02.479" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.682" starttime="20170510 08:30:02.479" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.682" starttime="20170510 08:30:02.478" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.687">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:02.688" starttime="20170510 08:30:02.687" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:02.688" starttime="20170510 08:30:02.688" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.689">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:02.689" starttime="20170510 08:30:02.688" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:02.690" starttime="20170510 08:30:02.689" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:02.888" starttime="20170510 08:30:02.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:02.888">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:02.888" starttime="20170510 08:30:02.690" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:02.889" starttime="20170510 08:30:02.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:02.890" starttime="20170510 08:30:02.889" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.890" starttime="20170510 08:30:02.686" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.890" starttime="20170510 08:30:02.686" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.890" starttime="20170510 08:30:02.685" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.890">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:02.891" starttime="20170510 08:30:02.890" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.893">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:02.893" starttime="20170510 08:30:02.892" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.894">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:02.894" starttime="20170510 08:30:02.894" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.895" starttime="20170510 08:30:02.893" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.895" starttime="20170510 08:30:02.891" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.895" starttime="20170510 08:30:02.891" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:02.962">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:02.962" starttime="20170510 08:30:02.895" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:02.964" starttime="20170510 08:30:02.963" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:02.965" starttime="20170510 08:30:02.965" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.965" starttime="20170510 08:30:02.964" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.965" starttime="20170510 08:30:02.963" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.965" starttime="20170510 08:30:02.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.966">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:02.966" starttime="20170510 08:30:02.685" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:02.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:02.966" starttime="20170510 08:30:02.966" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:02.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:02.967">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170510 08:30:02.967" starttime="20170510 08:30:02.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.968">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170510 08:30:02.968" starttime="20170510 08:30:02.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.968">${host_state} = Running</msg>
<status endtime="20170510 08:30:02.968" starttime="20170510 08:30:02.684" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:02.969">Running != Quiesced</msg>
<status endtime="20170510 08:30:02.969" starttime="20170510 08:30:02.969" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.969">${status} = False</msg>
<status endtime="20170510 08:30:02.969" starttime="20170510 08:30:02.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:02.969">${status} = False</msg>
<status endtime="20170510 08:30:02.969" starttime="20170510 08:30:02.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170510 08:30:02.970" starttime="20170510 08:30:02.970" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170510 08:30:02.971" starttime="20170510 08:30:02.970" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.979">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170510 08:30:02.979" starttime="20170510 08:30:02.971" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.986">${FFDC_DIR_PATH} = </msg>
<status endtime="20170510 08:30:02.986" starttime="20170510 08:30:02.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.995">${cur_time} = 2017-05-10 08:30:02:994671</msg>
<status endtime="20170510 08:30:02.995" starttime="20170510 08:30:02.994" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:02.996">${cur_time} = 20170510083002994671</msg>
<status endtime="20170510 08:30:02.996" starttime="20170510 08:30:02.995" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:02.996" starttime="20170510 08:30:02.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.002">${FFDC_TIME} = 20170510083002994671</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.004">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170510 08:30:03.004" starttime="20170510 08:30:03.003" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.004">${suite_name} = 20170510083002994671_TestsSecurityTestSsl</msg>
<status endtime="20170510 08:30:03.004" starttime="20170510 08:30:03.004" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.005">${test_name} = TestSSLConnection</msg>
<status endtime="20170510 08:30:03.005" starttime="20170510 08:30:03.004" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.005">${test_name} = 20170510083002994671_TestSSLConnection</msg>
<status endtime="20170510 08:30:03.006" starttime="20170510 08:30:03.005" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.006" starttime="20170510 08:30:03.003" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.006">${FFDC_DIR_PATH} = /tmp/root/14259/obmc-robot/logs/20170510083002994671_TestsSecurityTestSsl/20170510083002994671_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170510 08:30:03.010">${FFDC_PREFIX} = 20170510083002994671_</msg>
<status endtime="20170510 08:30:03.010" starttime="20170510 08:30:02.987" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.010" starttime="20170510 08:30:02.987" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170510 08:30:03.011" starttime="20170510 08:30:03.010" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.012" html="yes">Created directory '&lt;a href="file:///tmp/root/14259/obmc-robot/logs"&gt;/tmp/root/14259/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170510 08:30:03.012" starttime="20170510 08:30:03.011" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:03.013">File '/tmp/root/14259/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170510 08:30:03.013" starttime="20170510 08:30:03.012" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.013">${exist} = False</msg>
<status endtime="20170510 08:30:03.013" starttime="20170510 08:30:03.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.014" html="yes">Created file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/test_history.txt"&gt;/tmp/root/14259/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:30:03.014" starttime="20170510 08:30:03.014" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.014" starttime="20170510 08:30:03.013" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170510 08:30:03.015" starttime="20170510 08:30:03.014" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.016">${cur_time} = 2017-05-10 08:30:03:015619</msg>
<status endtime="20170510 08:30:03.016" starttime="20170510 08:30:03.015" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.016">${cur_time} = 20170510083003015619</msg>
<status endtime="20170510 08:30:03.016" starttime="20170510 08:30:03.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.017">${cur_time} = 20170510083003015619</msg>
<status endtime="20170510 08:30:03.017" starttime="20170510 08:30:03.015" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.018" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/test_history.txt"&gt;/tmp/root/14259/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:30:03.018" starttime="20170510 08:30:03.017" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.018" starttime="20170510 08:30:02.971" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.019" starttime="20170510 08:30:02.683" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170510 08:30:03.019" starttime="20170510 08:30:02.477" status="PASS" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170510 08:30:03.020">Delete All Sessions</msg>
<status endtime="20170510 08:30:03.020" starttime="20170510 08:30:03.020" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170510 08:30:03.020" starttime="20170510 08:30:02.402" status="PASS"></status>
</suite>
<status endtime="20170510 08:30:03.023" starttime="20170510 08:30:02.400" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/root/14259/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.060">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.060" starttime="20170510 08:30:03.060" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.061">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.061" starttime="20170510 08:30:03.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.061">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.061" starttime="20170510 08:30:03.059" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.063">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.063" starttime="20170510 08:30:03.062" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.063">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.063" starttime="20170510 08:30:03.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.064">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:30:03.064" starttime="20170510 08:30:03.062" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.064">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170510 08:30:03.064" starttime="20170510 08:30:03.064" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.072" starttime="20170510 08:30:03.065" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.078">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:30:03.081">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:30:03.081">${output} = /tmp/root/14259/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170510 08:30:03.081" starttime="20170510 08:30:03.072" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170510 08:30:03.092" starttime="20170510 08:30:03.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170510 08:30:03.093" starttime="20170510 08:30:03.093" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.094">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:30:03.094" starttime="20170510 08:30:03.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.094">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:30:03.094" starttime="20170510 08:30:03.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.095">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170510 08:30:03.095" starttime="20170510 08:30:03.095" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.104" starttime="20170510 08:30:03.095" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.108">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:30:03.119">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:30:03.120">${os_con_pid} = </msg>
<status endtime="20170510 08:30:03.120" starttime="20170510 08:30:03.105" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170510 08:30:03.129" starttime="20170510 08:30:03.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.130">${cmd_buf} = kill -9 </msg>
<status endtime="20170510 08:30:03.130" starttime="20170510 08:30:03.129" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.131" starttime="20170510 08:30:03.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.131">${rc} = None</msg>
<msg level="INFO" timestamp="20170510 08:30:03.131">${output} = None</msg>
<status endtime="20170510 08:30:03.132" starttime="20170510 08:30:03.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170510 08:30:03.132" starttime="20170510 08:30:03.132" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.133">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170510 08:30:03.133" starttime="20170510 08:30:03.132" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.140" starttime="20170510 08:30:03.133" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.143">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:30:03.147">${rc} = 1</msg>
<msg level="INFO" timestamp="20170510 08:30:03.147">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170510 08:30:03.147" starttime="20170510 08:30:03.140" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170510 08:30:03.158" starttime="20170510 08:30:03.149" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170510 08:30:03.159" starttime="20170510 08:30:03.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.159">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170510 08:30:03.159" starttime="20170510 08:30:03.061" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.160" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170510 08:30:03.160" starttime="20170510 08:30:03.160" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.161">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170510 08:30:03.161" starttime="20170510 08:30:03.161" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.168" starttime="20170510 08:30:03.161" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.171">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:30:03.176">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:30:03.177">${output} = /tmp/root/14259/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170510 08:30:03.177" starttime="20170510 08:30:03.169" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170510 08:30:03.186" starttime="20170510 08:30:03.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170510 08:30:03.187" starttime="20170510 08:30:03.186" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.188">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:30:03.188" starttime="20170510 08:30:03.187" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.188">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:30:03.188" starttime="20170510 08:30:03.161" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.189">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170510 08:30:03.189" starttime="20170510 08:30:03.188" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:30:03.196" starttime="20170510 08:30:03.189" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.206">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170510 08:30:03.209">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:30:03.209">${output} = </msg>
<status endtime="20170510 08:30:03.209" starttime="20170510 08:30:03.197" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170510 08:30:03.212" starttime="20170510 08:30:03.211" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.213" starttime="20170510 08:30:03.059" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.214">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.216">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170510 08:30:03.216" starttime="20170510 08:30:03.216" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.219">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170510 08:30:03.219" starttime="20170510 08:30:03.218" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.223">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:03.224" starttime="20170510 08:30:03.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.224">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:03.224" starttime="20170510 08:30:03.224" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.225">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:03.225" starttime="20170510 08:30:03.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:03.226" starttime="20170510 08:30:03.225" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:03.762" starttime="20170510 08:30:03.227" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:03.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:03.762">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:03.762" starttime="20170510 08:30:03.226" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:03.763" starttime="20170510 08:30:03.762" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:03.764" starttime="20170510 08:30:03.763" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.764" starttime="20170510 08:30:03.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.764" starttime="20170510 08:30:03.221" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.764" starttime="20170510 08:30:03.221" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.764">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170510 08:30:03.765" starttime="20170510 08:30:03.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.765">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:03.765" starttime="20170510 08:30:03.765" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170510 08:30:03.766" starttime="20170510 08:30:03.765" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:03.767">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170510 08:30:03.767" starttime="20170510 08:30:03.767" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:03.768">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170510 08:30:03.768" starttime="20170510 08:30:03.768" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.768" starttime="20170510 08:30:03.767" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:03.769" starttime="20170510 08:30:03.766" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.117">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170510 08:30:04.117">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:04.117" starttime="20170510 08:30:03.769" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.118">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:04.119" starttime="20170510 08:30:04.118" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:04.119">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:04.120" starttime="20170510 08:30:04.119" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:04.120" starttime="20170510 08:30:04.119" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:04.120" starttime="20170510 08:30:04.117" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:04.120">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:04.120" starttime="20170510 08:30:03.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:04.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:04.121" starttime="20170510 08:30:04.120" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.122">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:04.122">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:04.122">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170510 08:30:04.122" starttime="20170510 08:30:04.121" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:04.122" starttime="20170510 08:30:03.217" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170510 08:30:04.123" starttime="20170510 08:30:04.123" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:04.128">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:04.128" starttime="20170510 08:30:04.127" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.129">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:04.129" starttime="20170510 08:30:04.128" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.129">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:04.129" starttime="20170510 08:30:04.129" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:04.130">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:04.130" starttime="20170510 08:30:04.130" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:05.300">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:05.301" starttime="20170510 08:30:04.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:05.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:05.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:05.301" starttime="20170510 08:30:04.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:05.301">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:05.301" starttime="20170510 08:30:05.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:05.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:05.302" starttime="20170510 08:30:05.302" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.302" starttime="20170510 08:30:04.127" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.302" starttime="20170510 08:30:04.126" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.302" starttime="20170510 08:30:04.126" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:05.303">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:05.303" starttime="20170510 08:30:05.303" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:05.305">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:05.305" starttime="20170510 08:30:05.304" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:05.306">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:05.306" starttime="20170510 08:30:05.306" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.306" starttime="20170510 08:30:05.305" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.306" starttime="20170510 08:30:05.304" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:05.306" starttime="20170510 08:30:05.303" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:06.012">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:06.013">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:06.013" starttime="20170510 08:30:05.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:06.015">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:06.016" starttime="20170510 08:30:06.015" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:06.017">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:06.017" starttime="20170510 08:30:06.016" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:06.017" starttime="20170510 08:30:06.016" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:06.017" starttime="20170510 08:30:06.014" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:06.017" starttime="20170510 08:30:06.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:06.017">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:06.017" starttime="20170510 08:30:04.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:06.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:06.018" starttime="20170510 08:30:06.018" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:06.019">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:06.019">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:06.019">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170510 08:30:06.019" starttime="20170510 08:30:06.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:06.019">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170510 08:30:06.019" starttime="20170510 08:30:04.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:06.019">${host_state} = Running</msg>
<status endtime="20170510 08:30:06.019" starttime="20170510 08:30:04.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:06.020">Off != Running</msg>
<status endtime="20170510 08:30:06.020" starttime="20170510 08:30:06.020" status="FAIL"></status>
</kw>
<status endtime="20170510 08:30:06.020" starttime="20170510 08:30:04.124" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:16.025" starttime="20170510 08:30:16.025" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:16.026" starttime="20170510 08:30:16.026" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.027">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:16.027" starttime="20170510 08:30:16.026" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:16.027" starttime="20170510 08:30:16.027" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:16.221" starttime="20170510 08:30:16.028" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:16.221">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.221" starttime="20170510 08:30:16.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.222" starttime="20170510 08:30:16.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.223" starttime="20170510 08:30:16.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.223" starttime="20170510 08:30:16.024" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.223" starttime="20170510 08:30:16.024" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.223" starttime="20170510 08:30:16.023" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.223">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:16.223" starttime="20170510 08:30:16.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.226">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:16.226" starttime="20170510 08:30:16.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.226">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:16.227" starttime="20170510 08:30:16.226" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.227" starttime="20170510 08:30:16.226" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.227" starttime="20170510 08:30:16.224" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.227" starttime="20170510 08:30:16.224" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.290">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:16.291">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.291" starttime="20170510 08:30:16.227" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.292">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:16.292" starttime="20170510 08:30:16.292" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.293">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:16.293" starttime="20170510 08:30:16.293" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.293" starttime="20170510 08:30:16.293" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.294" starttime="20170510 08:30:16.291" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.294" starttime="20170510 08:30:16.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.294">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.294" starttime="20170510 08:30:16.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.295" starttime="20170510 08:30:16.294" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.295">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:16.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:16.295">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170510 08:30:16.295" starttime="20170510 08:30:16.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.296">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170510 08:30:16.296" starttime="20170510 08:30:16.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.296">${host_state} = Off</msg>
<status endtime="20170510 08:30:16.296" starttime="20170510 08:30:16.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170510 08:30:16.296" starttime="20170510 08:30:16.296" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.297" starttime="20170510 08:30:16.021" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.297" starttime="20170510 08:30:04.123" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.297" starttime="20170510 08:30:03.215" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.302">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:16.302" starttime="20170510 08:30:16.301" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:16.303" starttime="20170510 08:30:16.302" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.303">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:16.303" starttime="20170510 08:30:16.303" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:16.304" starttime="20170510 08:30:16.303" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:16.494" starttime="20170510 08:30:16.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:16.494">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.494" starttime="20170510 08:30:16.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.495">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.495" starttime="20170510 08:30:16.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.496" starttime="20170510 08:30:16.495" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.496" starttime="20170510 08:30:16.300" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.496" starttime="20170510 08:30:16.300" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.496" starttime="20170510 08:30:16.299" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.496">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:30:16.496" starttime="20170510 08:30:16.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.498">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:16.499" starttime="20170510 08:30:16.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.500">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:16.500" starttime="20170510 08:30:16.499" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.500" starttime="20170510 08:30:16.499" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.500" starttime="20170510 08:30:16.497" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.500" starttime="20170510 08:30:16.497" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.568">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:16.568">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.568" starttime="20170510 08:30:16.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.570">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:16.570" starttime="20170510 08:30:16.569" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.571">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:16.571" starttime="20170510 08:30:16.571" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.571" starttime="20170510 08:30:16.570" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.571" starttime="20170510 08:30:16.569" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.571" starttime="20170510 08:30:16.568" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.571">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.571" starttime="20170510 08:30:16.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.572" starttime="20170510 08:30:16.572" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.573">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:16.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:16.573">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170510 08:30:16.573" starttime="20170510 08:30:16.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.573">${state} = Off</msg>
<status endtime="20170510 08:30:16.573" starttime="20170510 08:30:16.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.573">${boot_progress} = Off</msg>
<status endtime="20170510 08:30:16.573" starttime="20170510 08:30:16.298" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170510 08:30:16.574" starttime="20170510 08:30:16.574" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.574" starttime="20170510 08:30:16.298" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.574" starttime="20170510 08:30:16.297" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.575">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170510 08:30:16.575" starttime="20170510 08:30:16.575" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.576">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170510 08:30:16.576" starttime="20170510 08:30:16.576" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:16.579" starttime="20170510 08:30:16.579" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:16.580" starttime="20170510 08:30:16.580" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.581">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:16.581" starttime="20170510 08:30:16.580" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:16.581" starttime="20170510 08:30:16.581" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.773">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:16.773" starttime="20170510 08:30:16.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:16.773">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:16.773">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:16.773" starttime="20170510 08:30:16.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.774">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.774" starttime="20170510 08:30:16.773" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:16.774" starttime="20170510 08:30:16.774" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.775" starttime="20170510 08:30:16.578" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.775" starttime="20170510 08:30:16.578" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.775" starttime="20170510 08:30:16.577" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.775">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170510 08:30:16.775" starttime="20170510 08:30:16.775" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:16.776" starttime="20170510 08:30:16.776" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170510 08:30:16.776" starttime="20170510 08:30:16.776" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:16.778">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170510 08:30:16.778" starttime="20170510 08:30:16.777" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:16.779">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170510 08:30:16.779" starttime="20170510 08:30:16.779" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.779" starttime="20170510 08:30:16.778" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:16.780" starttime="20170510 08:30:16.777" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.053">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170510 08:30:17.053">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:17.053" starttime="20170510 08:30:16.780" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.055">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:17.055" starttime="20170510 08:30:17.054" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:17.055">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:17.056" starttime="20170510 08:30:17.055" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:17.056" starttime="20170510 08:30:17.055" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:17.056" starttime="20170510 08:30:17.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:17.056">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:17.056" starttime="20170510 08:30:16.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:17.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:17.057" starttime="20170510 08:30:17.056" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.057">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:17.057">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:17.057">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170510 08:30:17.057" starttime="20170510 08:30:17.057" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:17.058" starttime="20170510 08:30:16.575" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170510 08:30:17.058" starttime="20170510 08:30:17.058" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:17.063">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:17.063" starttime="20170510 08:30:17.062" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:17.064" starttime="20170510 08:30:17.063" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.064">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:17.065" starttime="20170510 08:30:17.064" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:17.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:17.065" starttime="20170510 08:30:17.065" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.231">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:18.231" starttime="20170510 08:30:17.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:18.231">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:18.231">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:18.231" starttime="20170510 08:30:17.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.232">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:18.232" starttime="20170510 08:30:18.231" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:18.232" starttime="20170510 08:30:18.232" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.232" starttime="20170510 08:30:17.062" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.233" starttime="20170510 08:30:17.061" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.233" starttime="20170510 08:30:17.061" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:18.233">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:18.233" starttime="20170510 08:30:18.233" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:18.236">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:18.236" starttime="20170510 08:30:18.235" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.237">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:18.237" starttime="20170510 08:30:18.236" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.237" starttime="20170510 08:30:18.236" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.237" starttime="20170510 08:30:18.234" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.237" starttime="20170510 08:30:18.234" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:18.301">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:18.301">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:18.301" starttime="20170510 08:30:18.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:18.303">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:18.303" starttime="20170510 08:30:18.302" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.304">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:18.304" starttime="20170510 08:30:18.304" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.304" starttime="20170510 08:30:18.303" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.304" starttime="20170510 08:30:18.302" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:18.304" starttime="20170510 08:30:18.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:18.305">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:18.305" starttime="20170510 08:30:17.060" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:18.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:18.305" starttime="20170510 08:30:18.305" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:18.306">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:18.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:18.306">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170510 08:30:18.306" starttime="20170510 08:30:18.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:18.306">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170510 08:30:18.306" starttime="20170510 08:30:17.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:18.306">${host_state} = Off</msg>
<status endtime="20170510 08:30:18.307" starttime="20170510 08:30:17.059" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:18.307">Running != Off</msg>
<status endtime="20170510 08:30:18.307" starttime="20170510 08:30:18.307" status="FAIL"></status>
</kw>
<status endtime="20170510 08:30:18.307" starttime="20170510 08:30:17.059" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:28.313">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:28.313" starttime="20170510 08:30:28.312" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:28.314">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:28.314" starttime="20170510 08:30:28.313" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:28.314">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:28.314" starttime="20170510 08:30:28.314" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:28.315">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:28.315" starttime="20170510 08:30:28.315" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:29.971">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:29.971" starttime="20170510 08:30:28.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:29.971">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:29.971">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:29.971" starttime="20170510 08:30:28.315" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:29.972">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:29.972" starttime="20170510 08:30:29.971" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:29.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:29.973" starttime="20170510 08:30:29.972" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.973" starttime="20170510 08:30:28.312" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.973" starttime="20170510 08:30:28.311" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.973" starttime="20170510 08:30:28.311" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:29.973">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:29.973" starttime="20170510 08:30:29.973" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:29.976">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:29.976" starttime="20170510 08:30:29.975" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:29.976">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:29.977" starttime="20170510 08:30:29.976" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.977" starttime="20170510 08:30:29.976" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.977" starttime="20170510 08:30:29.974" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:29.977" starttime="20170510 08:30:29.974" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:30.803">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:30.804">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:30.804" starttime="20170510 08:30:29.977" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:30.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:30.806" starttime="20170510 08:30:30.805" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:30.806">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:30.806" starttime="20170510 08:30:30.806" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:30.807" starttime="20170510 08:30:30.806" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:30.807" starttime="20170510 08:30:30.805" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:30.807" starttime="20170510 08:30:30.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:30.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:30.807" starttime="20170510 08:30:28.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:30.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:30.808" starttime="20170510 08:30:30.807" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:30.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:30.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:30.808">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170510 08:30:30.808" starttime="20170510 08:30:30.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:30.809">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170510 08:30:30.809" starttime="20170510 08:30:28.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:30.809">${host_state} = Off</msg>
<status endtime="20170510 08:30:30.809" starttime="20170510 08:30:28.308" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:30.810">Running != Off</msg>
<status endtime="20170510 08:30:30.810" starttime="20170510 08:30:30.809" status="FAIL"></status>
</kw>
<status endtime="20170510 08:30:30.810" starttime="20170510 08:30:28.308" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:40.815">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:40.815" starttime="20170510 08:30:40.814" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:40.816">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:40.816" starttime="20170510 08:30:40.815" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:40.816">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:40.816" starttime="20170510 08:30:40.816" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:40.817">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:40.817" starttime="20170510 08:30:40.817" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.272">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:41.272" starttime="20170510 08:30:40.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:41.272">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:41.272">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:41.272" starttime="20170510 08:30:40.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.273">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:41.273" starttime="20170510 08:30:41.273" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:41.274" starttime="20170510 08:30:41.274" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.274" starttime="20170510 08:30:40.814" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.274" starttime="20170510 08:30:40.813" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.275" starttime="20170510 08:30:40.813" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.275">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:30:41.275" starttime="20170510 08:30:41.275" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.277">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:41.277" starttime="20170510 08:30:41.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.278">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:30:41.278" starttime="20170510 08:30:41.278" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.278" starttime="20170510 08:30:41.277" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.279" starttime="20170510 08:30:41.276" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.279" starttime="20170510 08:30:41.276" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.408">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:41.408">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:41.408" starttime="20170510 08:30:41.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.410">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:41.410" starttime="20170510 08:30:41.410" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.411">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:41.411" starttime="20170510 08:30:41.411" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.411" starttime="20170510 08:30:41.410" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.411" starttime="20170510 08:30:41.409" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.412" starttime="20170510 08:30:41.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:41.412">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:41.412" starttime="20170510 08:30:40.812" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:41.412" starttime="20170510 08:30:41.412" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.413">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:41.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:41.413">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170510 08:30:41.413" starttime="20170510 08:30:41.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:41.413">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170510 08:30:41.413" starttime="20170510 08:30:40.812" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:41.414">${host_state} = Running</msg>
<status endtime="20170510 08:30:41.414" starttime="20170510 08:30:40.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170510 08:30:41.414" starttime="20170510 08:30:41.414" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.414" starttime="20170510 08:30:40.811" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.414" starttime="20170510 08:30:17.058" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.415" starttime="20170510 08:30:16.574" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.419">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:41.420" starttime="20170510 08:30:41.418" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:41.420" starttime="20170510 08:30:41.420" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.421">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:41.421" starttime="20170510 08:30:41.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.421">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:41.421" starttime="20170510 08:30:41.421" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:41.877" starttime="20170510 08:30:41.422" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:41.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:41.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:41.877" starttime="20170510 08:30:41.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:41.878" starttime="20170510 08:30:41.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:41.879" starttime="20170510 08:30:41.878" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.879" starttime="20170510 08:30:41.418" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.879" starttime="20170510 08:30:41.418" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.879" starttime="20170510 08:30:41.417" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.880">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:30:41.880" starttime="20170510 08:30:41.879" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:41.882">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:41.882" starttime="20170510 08:30:41.881" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:41.883">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:41.883" starttime="20170510 08:30:41.883" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.883" starttime="20170510 08:30:41.882" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.883" starttime="20170510 08:30:41.881" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:41.883" starttime="20170510 08:30:41.880" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:42.022">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:42.023">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:42.023" starttime="20170510 08:30:41.883" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:42.024">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:42.025" starttime="20170510 08:30:42.024" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:42.025">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:42.026" starttime="20170510 08:30:42.025" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:42.026" starttime="20170510 08:30:42.025" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:42.026" starttime="20170510 08:30:42.024" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:42.026" starttime="20170510 08:30:42.023" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:42.026">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:42.026" starttime="20170510 08:30:41.416" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:42.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:42.027" starttime="20170510 08:30:42.026" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:42.027">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:42.027">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:42.027">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170510 08:30:42.027" starttime="20170510 08:30:42.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:42.028">${state} = Off</msg>
<status endtime="20170510 08:30:42.028" starttime="20170510 08:30:41.416" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:42.028">${boot_progress} = Off</msg>
<status endtime="20170510 08:30:42.028" starttime="20170510 08:30:41.416" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:42.029">Off != FW Progress, Starting OS</msg>
<status endtime="20170510 08:30:42.029" starttime="20170510 08:30:42.028" status="FAIL"></status>
</kw>
<status endtime="20170510 08:30:42.029" starttime="20170510 08:30:41.415" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.034">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:30:52.034" starttime="20170510 08:30:52.034" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.035">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:30:52.035" starttime="20170510 08:30:52.035" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.035">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:30:52.036" starttime="20170510 08:30:52.035" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:30:52.036" starttime="20170510 08:30:52.036" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:30:52.451" starttime="20170510 08:30:52.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:52.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:30:52.452">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:52.452" starttime="20170510 08:30:52.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:52.452" starttime="20170510 08:30:52.452" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:52.453" starttime="20170510 08:30:52.453" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.453" starttime="20170510 08:30:52.033" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.453" starttime="20170510 08:30:52.033" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.453" starttime="20170510 08:30:52.032" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.454">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:30:52.454" starttime="20170510 08:30:52.454" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.457">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:52.457" starttime="20170510 08:30:52.456" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.458">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:30:52.458" starttime="20170510 08:30:52.457" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.458" starttime="20170510 08:30:52.457" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.458" starttime="20170510 08:30:52.455" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.458" starttime="20170510 08:30:52.455" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.581">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:30:52.581">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:52.581" starttime="20170510 08:30:52.458" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.583">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:52.583" starttime="20170510 08:30:52.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.584">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:30:52.584" starttime="20170510 08:30:52.584" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.584" starttime="20170510 08:30:52.583" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.584" starttime="20170510 08:30:52.582" status="PASS"></status>
</kw>
<status endtime="20170510 08:30:52.584" starttime="20170510 08:30:52.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:52.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:30:52.585" starttime="20170510 08:30:52.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:30:52.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:30:52.586" starttime="20170510 08:30:52.585" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:30:52.586">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:30:52.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:30:52.587">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170510 08:30:52.587" starttime="20170510 08:30:52.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:52.587">${state} = Off</msg>
<status endtime="20170510 08:30:52.587" starttime="20170510 08:30:52.031" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:30:52.587">${boot_progress} = Off</msg>
<status endtime="20170510 08:30:52.587" starttime="20170510 08:30:52.030" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:30:52.588">Off != FW Progress, Starting OS</msg>
<status endtime="20170510 08:30:52.588" starttime="20170510 08:30:52.588" status="FAIL"></status>
</kw>
<status endtime="20170510 08:30:52.588" starttime="20170510 08:30:52.029" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.594">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:02.594" starttime="20170510 08:31:02.593" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:02.595" starttime="20170510 08:31:02.594" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.595">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:02.595" starttime="20170510 08:31:02.595" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:02.596" starttime="20170510 08:31:02.595" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:02.845" starttime="20170510 08:31:02.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:02.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:02.845">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:02.845" starttime="20170510 08:31:02.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:02.846" starttime="20170510 08:31:02.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:02.847" starttime="20170510 08:31:02.846" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.847" starttime="20170510 08:31:02.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.847" starttime="20170510 08:31:02.592" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.847" starttime="20170510 08:31:02.591" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.847">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:02.847" starttime="20170510 08:31:02.847" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.849">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:02.850" starttime="20170510 08:31:02.849" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.850">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:02.851" starttime="20170510 08:31:02.850" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.851" starttime="20170510 08:31:02.850" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.851" starttime="20170510 08:31:02.848" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.851" starttime="20170510 08:31:02.848" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.959">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:02.960">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:02.960" starttime="20170510 08:31:02.851" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.961">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:02.961" starttime="20170510 08:31:02.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.962">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:02.962" starttime="20170510 08:31:02.962" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.962" starttime="20170510 08:31:02.961" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.963" starttime="20170510 08:31:02.960" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:02.963" starttime="20170510 08:31:02.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:02.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:02.963" starttime="20170510 08:31:02.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:02.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:02.964" starttime="20170510 08:31:02.963" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:02.964">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:02.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:02.964">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:02.964" starttime="20170510 08:31:02.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:02.965">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:02.965" starttime="20170510 08:31:02.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:02.965">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:02.965" starttime="20170510 08:31:02.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:02.965">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:02.965" starttime="20170510 08:31:02.965" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:02.966" starttime="20170510 08:31:02.589" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:12.971">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:12.972" starttime="20170510 08:31:12.971" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:12.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:12.972" starttime="20170510 08:31:12.972" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:12.973">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:12.973" starttime="20170510 08:31:12.972" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:12.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:12.973" starttime="20170510 08:31:12.973" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.159">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:13.159" starttime="20170510 08:31:12.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:13.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:13.159">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:13.160" starttime="20170510 08:31:12.974" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.160">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:13.160" starttime="20170510 08:31:13.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:13.161" starttime="20170510 08:31:13.161" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.161" starttime="20170510 08:31:12.970" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.161" starttime="20170510 08:31:12.969" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.161" starttime="20170510 08:31:12.969" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:13.162">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:13.162" starttime="20170510 08:31:13.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:13.164">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:13.164" starttime="20170510 08:31:13.163" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.165">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:13.165" starttime="20170510 08:31:13.165" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.165" starttime="20170510 08:31:13.164" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.165" starttime="20170510 08:31:13.163" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.165" starttime="20170510 08:31:13.162" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:13.236">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:13.236">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:13.236" starttime="20170510 08:31:13.165" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:13.238">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:13.238" starttime="20170510 08:31:13.237" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.239">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:13.239" starttime="20170510 08:31:13.239" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.239" starttime="20170510 08:31:13.238" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.239" starttime="20170510 08:31:13.237" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:13.239" starttime="20170510 08:31:13.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:13.239">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:13.239" starttime="20170510 08:31:12.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:13.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:13.240" starttime="20170510 08:31:13.240" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:13.241">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:13.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:13.241">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:13.241" starttime="20170510 08:31:13.240" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:13.241">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:13.241" starttime="20170510 08:31:12.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:13.241">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:13.241" starttime="20170510 08:31:12.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:13.242">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:13.242" starttime="20170510 08:31:13.242" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:13.242" starttime="20170510 08:31:12.966" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.247">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:23.248" starttime="20170510 08:31:23.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:23.248" starttime="20170510 08:31:23.248" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.249">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:23.249" starttime="20170510 08:31:23.248" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:23.249" starttime="20170510 08:31:23.249" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:23.434" starttime="20170510 08:31:23.250" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:23.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:23.435">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:23.435" starttime="20170510 08:31:23.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:23.435" starttime="20170510 08:31:23.435" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:23.437" starttime="20170510 08:31:23.436" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.437" starttime="20170510 08:31:23.246" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.437" starttime="20170510 08:31:23.246" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.437" starttime="20170510 08:31:23.245" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.438">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:23.438" starttime="20170510 08:31:23.437" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.441">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:23.441" starttime="20170510 08:31:23.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.442">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:23.442" starttime="20170510 08:31:23.442" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.442" starttime="20170510 08:31:23.441" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.442" starttime="20170510 08:31:23.439" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.442" starttime="20170510 08:31:23.438" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.534">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:23.534">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:23.534" starttime="20170510 08:31:23.443" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.536">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:23.536" starttime="20170510 08:31:23.536" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.537">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:23.537" starttime="20170510 08:31:23.537" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.537" starttime="20170510 08:31:23.536" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.537" starttime="20170510 08:31:23.535" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:23.537" starttime="20170510 08:31:23.535" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:23.538">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:23.538" starttime="20170510 08:31:23.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:23.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:23.538" starttime="20170510 08:31:23.538" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:23.539">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:23.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:23.539">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:23.539" starttime="20170510 08:31:23.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:23.539">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:23.539" starttime="20170510 08:31:23.244" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:23.540">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:23.540" starttime="20170510 08:31:23.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:23.540">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:23.540" starttime="20170510 08:31:23.540" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:23.540" starttime="20170510 08:31:23.243" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.550">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:33.550" starttime="20170510 08:31:33.549" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:33.551" starttime="20170510 08:31:33.551" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.552">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:33.552" starttime="20170510 08:31:33.552" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:33.553" starttime="20170510 08:31:33.553" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.769">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:33.769" starttime="20170510 08:31:33.554" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:33.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:33.769">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:33.770" starttime="20170510 08:31:33.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.770">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:33.770" starttime="20170510 08:31:33.770" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:33.771" starttime="20170510 08:31:33.771" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.771" starttime="20170510 08:31:33.548" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.771" starttime="20170510 08:31:33.546" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.771" starttime="20170510 08:31:33.544" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.772">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:33.772" starttime="20170510 08:31:33.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.774">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:33.774" starttime="20170510 08:31:33.773" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.775">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:33.775" starttime="20170510 08:31:33.775" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.775" starttime="20170510 08:31:33.774" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.775" starttime="20170510 08:31:33.773" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.775" starttime="20170510 08:31:33.772" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.845">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:33.845">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:33.845" starttime="20170510 08:31:33.776" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.847">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:33.847" starttime="20170510 08:31:33.846" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.848">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:33.848" starttime="20170510 08:31:33.848" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.848" starttime="20170510 08:31:33.847" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.849" starttime="20170510 08:31:33.846" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:33.849" starttime="20170510 08:31:33.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:33.849">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:33.849" starttime="20170510 08:31:33.543" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:33.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:33.849" starttime="20170510 08:31:33.849" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:33.850">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:33.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:33.850">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:33.850" starttime="20170510 08:31:33.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:33.851">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:33.851" starttime="20170510 08:31:33.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:33.851">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:33.851" starttime="20170510 08:31:33.542" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:33.851">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:33.851" starttime="20170510 08:31:33.851" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:33.852" starttime="20170510 08:31:33.541" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:43.857">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:43.857" starttime="20170510 08:31:43.856" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:43.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:43.858" starttime="20170510 08:31:43.857" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:43.858">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:43.858" starttime="20170510 08:31:43.858" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:43.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:43.859" starttime="20170510 08:31:43.858" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.182">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:44.182" starttime="20170510 08:31:43.859" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:44.182">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:44.182">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:44.182" starttime="20170510 08:31:43.859" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.183">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:44.183" starttime="20170510 08:31:44.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:44.184" starttime="20170510 08:31:44.183" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.184" starttime="20170510 08:31:43.856" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.184" starttime="20170510 08:31:43.855" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.184" starttime="20170510 08:31:43.855" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:44.185">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:44.185" starttime="20170510 08:31:44.185" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:44.187">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:44.187" starttime="20170510 08:31:44.186" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.188">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:44.188" starttime="20170510 08:31:44.188" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.188" starttime="20170510 08:31:44.187" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.188" starttime="20170510 08:31:44.186" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.188" starttime="20170510 08:31:44.185" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:44.291">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:44.291">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:44.291" starttime="20170510 08:31:44.188" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:44.293">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:44.293" starttime="20170510 08:31:44.292" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.294">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:44.294" starttime="20170510 08:31:44.293" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.294" starttime="20170510 08:31:44.293" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.294" starttime="20170510 08:31:44.292" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:44.294" starttime="20170510 08:31:44.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:44.294">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:44.294" starttime="20170510 08:31:43.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:44.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:44.295" starttime="20170510 08:31:44.295" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:44.295">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:44.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:44.296">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:44.296" starttime="20170510 08:31:44.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:44.296">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:44.296" starttime="20170510 08:31:43.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:44.296">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:44.296" starttime="20170510 08:31:43.853" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:44.297">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:44.297" starttime="20170510 08:31:44.296" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:44.297" starttime="20170510 08:31:43.852" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:54.304">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:31:54.304" starttime="20170510 08:31:54.303" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:54.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:31:54.305" starttime="20170510 08:31:54.304" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:54.305">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:31:54.305" starttime="20170510 08:31:54.305" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:54.306">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:31:54.306" starttime="20170510 08:31:54.306" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:54.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:31:54.855" starttime="20170510 08:31:54.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:54.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:31:54.855">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:54.855" starttime="20170510 08:31:54.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:54.855">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:54.855" starttime="20170510 08:31:54.855" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:54.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:54.856" starttime="20170510 08:31:54.856" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.856" starttime="20170510 08:31:54.301" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.857" starttime="20170510 08:31:54.301" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.857" starttime="20170510 08:31:54.300" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:54.857">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:31:54.857" starttime="20170510 08:31:54.857" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:54.859">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:54.859" starttime="20170510 08:31:54.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:54.860">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:31:54.860" starttime="20170510 08:31:54.860" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.860" starttime="20170510 08:31:54.859" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.860" starttime="20170510 08:31:54.858" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:54.861" starttime="20170510 08:31:54.857" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:55.040">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:31:55.040">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:55.041" starttime="20170510 08:31:54.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:55.044">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:55.044" starttime="20170510 08:31:55.044" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:55.046">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:31:55.046" starttime="20170510 08:31:55.045" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:55.046" starttime="20170510 08:31:55.044" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:55.046" starttime="20170510 08:31:55.043" status="PASS"></status>
</kw>
<status endtime="20170510 08:31:55.046" starttime="20170510 08:31:55.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:55.046">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:31:55.046" starttime="20170510 08:31:54.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:31:55.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:31:55.047" starttime="20170510 08:31:55.046" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:31:55.047">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:31:55.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:31:55.048">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:31:55.048" starttime="20170510 08:31:55.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:55.048">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:55.048" starttime="20170510 08:31:54.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:31:55.048">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:31:55.048" starttime="20170510 08:31:54.298" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:31:55.049">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:31:55.049" starttime="20170510 08:31:55.048" status="FAIL"></status>
</kw>
<status endtime="20170510 08:31:55.049" starttime="20170510 08:31:54.298" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.054">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:05.054" starttime="20170510 08:32:05.053" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:05.055" starttime="20170510 08:32:05.054" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.055">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:05.055" starttime="20170510 08:32:05.055" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.056">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:05.056" starttime="20170510 08:32:05.056" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:05.241" starttime="20170510 08:32:05.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:05.241">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:05.241">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:05.241" starttime="20170510 08:32:05.056" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:05.242" starttime="20170510 08:32:05.241" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:05.243" starttime="20170510 08:32:05.242" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.243" starttime="20170510 08:32:05.053" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.243" starttime="20170510 08:32:05.053" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.243" starttime="20170510 08:32:05.052" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.244">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:05.244" starttime="20170510 08:32:05.243" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.246">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:05.246" starttime="20170510 08:32:05.245" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.247">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:05.247" starttime="20170510 08:32:05.246" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.247" starttime="20170510 08:32:05.246" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.247" starttime="20170510 08:32:05.244" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.247" starttime="20170510 08:32:05.244" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.314">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:05.314">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:05.314" starttime="20170510 08:32:05.247" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.316">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:05.316" starttime="20170510 08:32:05.315" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.317">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:05.317" starttime="20170510 08:32:05.317" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.317" starttime="20170510 08:32:05.316" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.317" starttime="20170510 08:32:05.315" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:05.317" starttime="20170510 08:32:05.315" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:05.317">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:05.318" starttime="20170510 08:32:05.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:05.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:05.318" starttime="20170510 08:32:05.318" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:05.319">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:05.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:05.319">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:05.319" starttime="20170510 08:32:05.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:05.319">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:05.319" starttime="20170510 08:32:05.051" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:05.319">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:05.319" starttime="20170510 08:32:05.050" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:05.320">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:05.320" starttime="20170510 08:32:05.320" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:05.320" starttime="20170510 08:32:05.050" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.325">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:15.326" starttime="20170510 08:32:15.325" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.326">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:15.326" starttime="20170510 08:32:15.326" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.327">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:15.327" starttime="20170510 08:32:15.327" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:15.328" starttime="20170510 08:32:15.327" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:15.518" starttime="20170510 08:32:15.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:15.518">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:15.518">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:15.518" starttime="20170510 08:32:15.328" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:15.519" starttime="20170510 08:32:15.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:15.520" starttime="20170510 08:32:15.519" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.520" starttime="20170510 08:32:15.324" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.520" starttime="20170510 08:32:15.324" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.520" starttime="20170510 08:32:15.323" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.521">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:15.521" starttime="20170510 08:32:15.520" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.523">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:15.523" starttime="20170510 08:32:15.522" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.524">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:15.524" starttime="20170510 08:32:15.523" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.524" starttime="20170510 08:32:15.523" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.524" starttime="20170510 08:32:15.521" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.524" starttime="20170510 08:32:15.521" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.591">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:15.591">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:15.591" starttime="20170510 08:32:15.524" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.593">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:15.593" starttime="20170510 08:32:15.592" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.593">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:15.594" starttime="20170510 08:32:15.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.594" starttime="20170510 08:32:15.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.594" starttime="20170510 08:32:15.592" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:15.594" starttime="20170510 08:32:15.591" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:15.594">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:15.594" starttime="20170510 08:32:15.322" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:15.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:15.595" starttime="20170510 08:32:15.595" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:15.596">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:15.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:15.596">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:15.596" starttime="20170510 08:32:15.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:15.596">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:15.596" starttime="20170510 08:32:15.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:15.596">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:15.596" starttime="20170510 08:32:15.321" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:15.597">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:15.597" starttime="20170510 08:32:15.597" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:15.597" starttime="20170510 08:32:15.321" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.602">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:25.602" starttime="20170510 08:32:25.602" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:25.603" starttime="20170510 08:32:25.603" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.604">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:25.604" starttime="20170510 08:32:25.603" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:25.604" starttime="20170510 08:32:25.604" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:25.791" starttime="20170510 08:32:25.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:25.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:25.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:25.791" starttime="20170510 08:32:25.604" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:25.792" starttime="20170510 08:32:25.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:25.793" starttime="20170510 08:32:25.792" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.793" starttime="20170510 08:32:25.601" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.793" starttime="20170510 08:32:25.601" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.793" starttime="20170510 08:32:25.600" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.794">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:25.794" starttime="20170510 08:32:25.793" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.796">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:25.796" starttime="20170510 08:32:25.795" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.797">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:25.797" starttime="20170510 08:32:25.796" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.797" starttime="20170510 08:32:25.796" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.797" starttime="20170510 08:32:25.795" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.797" starttime="20170510 08:32:25.794" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.864">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:25.865">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:25.865" starttime="20170510 08:32:25.797" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.866">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:25.866" starttime="20170510 08:32:25.866" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.867">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:25.867" starttime="20170510 08:32:25.867" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.867" starttime="20170510 08:32:25.866" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.868" starttime="20170510 08:32:25.865" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:25.868" starttime="20170510 08:32:25.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:25.868">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:25.868" starttime="20170510 08:32:25.599" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:25.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:25.868" starttime="20170510 08:32:25.868" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:25.869">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:25.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:25.869">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:25.869" starttime="20170510 08:32:25.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:25.869">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:25.869" starttime="20170510 08:32:25.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:25.870">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:25.870" starttime="20170510 08:32:25.598" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:25.870">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:25.870" starttime="20170510 08:32:25.870" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:25.871" starttime="20170510 08:32:25.598" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:35.876">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:35.876" starttime="20170510 08:32:35.875" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:35.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:35.877" starttime="20170510 08:32:35.877" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:35.877">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:35.878" starttime="20170510 08:32:35.877" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:35.878">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:35.878" starttime="20170510 08:32:35.878" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:36.069" starttime="20170510 08:32:35.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:36.069">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:36.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:36.069" starttime="20170510 08:32:35.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:36.070" starttime="20170510 08:32:36.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:36.071" starttime="20170510 08:32:36.070" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.071" starttime="20170510 08:32:35.875" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.071" starttime="20170510 08:32:35.874" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.071" starttime="20170510 08:32:35.873" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:36.072">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:36.072" starttime="20170510 08:32:36.072" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:36.074">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:36.074" starttime="20170510 08:32:36.073" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.075">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:36.075" starttime="20170510 08:32:36.075" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.075" starttime="20170510 08:32:36.074" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.075" starttime="20170510 08:32:36.073" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.075" starttime="20170510 08:32:36.072" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:36.144">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:36.144">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:36.144" starttime="20170510 08:32:36.076" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:36.150">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:36.150" starttime="20170510 08:32:36.148" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.153">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:36.154" starttime="20170510 08:32:36.152" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.155" starttime="20170510 08:32:36.150" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.155" starttime="20170510 08:32:36.147" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:36.155" starttime="20170510 08:32:36.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:36.156">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:36.156" starttime="20170510 08:32:35.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:36.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:36.158" starttime="20170510 08:32:36.157" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:36.160">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:36.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:36.160">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:36.160" starttime="20170510 08:32:36.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:36.161">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:36.161" starttime="20170510 08:32:35.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:36.162">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:36.162" starttime="20170510 08:32:35.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:36.164">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:36.165" starttime="20170510 08:32:36.163" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:36.165" starttime="20170510 08:32:35.871" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.170">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:46.171" starttime="20170510 08:32:46.170" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.171">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:46.171" starttime="20170510 08:32:46.171" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.172">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:46.172" starttime="20170510 08:32:46.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:46.173" starttime="20170510 08:32:46.172" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:46.667" starttime="20170510 08:32:46.173" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:46.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:46.668">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:46.668" starttime="20170510 08:32:46.173" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:46.668" starttime="20170510 08:32:46.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:46.670" starttime="20170510 08:32:46.669" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.670" starttime="20170510 08:32:46.169" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.670" starttime="20170510 08:32:46.169" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.671" starttime="20170510 08:32:46.168" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.671">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:46.671" starttime="20170510 08:32:46.671" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.674">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:46.674" starttime="20170510 08:32:46.673" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.676">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:46.676" starttime="20170510 08:32:46.675" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.676" starttime="20170510 08:32:46.675" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.676" starttime="20170510 08:32:46.673" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.676" starttime="20170510 08:32:46.672" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.821">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:46.821">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:46.821" starttime="20170510 08:32:46.677" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.823">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:46.823" starttime="20170510 08:32:46.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.824">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:46.824" starttime="20170510 08:32:46.824" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.824" starttime="20170510 08:32:46.824" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.825" starttime="20170510 08:32:46.822" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:46.825" starttime="20170510 08:32:46.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:46.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:46.825" starttime="20170510 08:32:46.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:46.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:46.826" starttime="20170510 08:32:46.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:46.826">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:46.826">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:46.826">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:46.826" starttime="20170510 08:32:46.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:46.826">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:46.827" starttime="20170510 08:32:46.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:46.827">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:46.827" starttime="20170510 08:32:46.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:46.827">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:46.827" starttime="20170510 08:32:46.827" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:46.828" starttime="20170510 08:32:46.166" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:56.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:32:56.833" starttime="20170510 08:32:56.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:56.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:32:56.834" starttime="20170510 08:32:56.833" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:56.834">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:32:56.834" starttime="20170510 08:32:56.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:56.835">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:32:56.835" starttime="20170510 08:32:56.835" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.482">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:32:57.482" starttime="20170510 08:32:56.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:57.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:32:57.482">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:57.483" starttime="20170510 08:32:56.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.483">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:57.483" starttime="20170510 08:32:57.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:57.484" starttime="20170510 08:32:57.483" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.484" starttime="20170510 08:32:56.831" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.484" starttime="20170510 08:32:56.831" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.484" starttime="20170510 08:32:56.830" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:57.485">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:32:57.485" starttime="20170510 08:32:57.484" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:57.487">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:57.487" starttime="20170510 08:32:57.486" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.488">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:32:57.488" starttime="20170510 08:32:57.487" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.488" starttime="20170510 08:32:57.487" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.488" starttime="20170510 08:32:57.486" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.488" starttime="20170510 08:32:57.485" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:57.673">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:32:57.674">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:57.674" starttime="20170510 08:32:57.488" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:57.676">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:57.676" starttime="20170510 08:32:57.675" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.677">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:32:57.677" starttime="20170510 08:32:57.677" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.678" starttime="20170510 08:32:57.676" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.678" starttime="20170510 08:32:57.674" status="PASS"></status>
</kw>
<status endtime="20170510 08:32:57.678" starttime="20170510 08:32:57.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:57.678">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:32:57.678" starttime="20170510 08:32:56.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:32:57.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:32:57.679" starttime="20170510 08:32:57.678" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:32:57.679">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:32:57.679">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:32:57.679">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:32:57.680" starttime="20170510 08:32:57.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:57.680">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:57.680" starttime="20170510 08:32:56.829" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:32:57.680">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:32:57.680" starttime="20170510 08:32:56.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:32:57.681">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:32:57.681" starttime="20170510 08:32:57.680" status="FAIL"></status>
</kw>
<status endtime="20170510 08:32:57.681" starttime="20170510 08:32:56.828" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.686">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:07.686" starttime="20170510 08:33:07.685" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:07.687" starttime="20170510 08:33:07.686" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.687">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:07.687" starttime="20170510 08:33:07.687" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:07.688" starttime="20170510 08:33:07.688" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:33:07.877" starttime="20170510 08:33:07.689" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:07.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:33:07.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:07.877" starttime="20170510 08:33:07.688" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:07.878" starttime="20170510 08:33:07.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:07.879" starttime="20170510 08:33:07.878" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.879" starttime="20170510 08:33:07.685" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.879" starttime="20170510 08:33:07.684" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.879" starttime="20170510 08:33:07.684" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.880">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:33:07.880" starttime="20170510 08:33:07.879" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.882">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:07.882" starttime="20170510 08:33:07.881" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.883">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:07.883" starttime="20170510 08:33:07.883" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.883" starttime="20170510 08:33:07.882" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.883" starttime="20170510 08:33:07.881" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.883" starttime="20170510 08:33:07.880" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.982">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:33:07.983">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:07.983" starttime="20170510 08:33:07.883" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.984">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:07.984" starttime="20170510 08:33:07.984" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.985">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:07.985" starttime="20170510 08:33:07.985" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.985" starttime="20170510 08:33:07.985" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.986" starttime="20170510 08:33:07.983" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:07.986" starttime="20170510 08:33:07.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:07.986">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:07.986" starttime="20170510 08:33:07.683" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:07.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:07.987" starttime="20170510 08:33:07.986" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:07.987">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:33:07.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:33:07.987">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:33:07.987" starttime="20170510 08:33:07.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:07.988">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:07.988" starttime="20170510 08:33:07.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:07.988">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:07.988" starttime="20170510 08:33:07.682" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:33:07.988">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:33:07.988" starttime="20170510 08:33:07.988" status="FAIL"></status>
</kw>
<status endtime="20170510 08:33:07.989" starttime="20170510 08:33:07.681" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:17.996">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:17.996" starttime="20170510 08:33:17.996" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:17.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:17.997" starttime="20170510 08:33:17.997" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:17.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:17.998" starttime="20170510 08:33:17.997" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:17.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:17.998" starttime="20170510 08:33:17.998" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.186">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:33:18.187" starttime="20170510 08:33:17.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:18.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:33:18.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:18.187" starttime="20170510 08:33:17.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.187">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:18.188" starttime="20170510 08:33:18.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:18.188" starttime="20170510 08:33:18.188" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.188" starttime="20170510 08:33:17.993" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.188" starttime="20170510 08:33:17.992" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.189" starttime="20170510 08:33:17.992" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:18.189">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:33:18.189" starttime="20170510 08:33:18.189" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:18.191">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:18.191" starttime="20170510 08:33:18.191" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.192">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:18.192" starttime="20170510 08:33:18.192" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.192" starttime="20170510 08:33:18.191" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.192" starttime="20170510 08:33:18.190" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.192" starttime="20170510 08:33:18.189" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:18.260">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:33:18.260">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:18.260" starttime="20170510 08:33:18.193" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:18.262">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:18.262" starttime="20170510 08:33:18.261" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.307">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:18.307" starttime="20170510 08:33:18.262" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.307" starttime="20170510 08:33:18.262" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.307" starttime="20170510 08:33:18.261" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:18.307" starttime="20170510 08:33:18.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:18.307">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:18.307" starttime="20170510 08:33:17.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:18.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:18.308" starttime="20170510 08:33:18.308" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:18.309">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:33:18.309">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:33:18.309">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:33:18.309" starttime="20170510 08:33:18.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:18.309">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:18.309" starttime="20170510 08:33:17.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:18.310">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:18.310" starttime="20170510 08:33:17.990" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:33:18.311">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:33:18.311" starttime="20170510 08:33:18.310" status="FAIL"></status>
</kw>
<status endtime="20170510 08:33:18.311" starttime="20170510 08:33:17.989" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.316">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:28.316" starttime="20170510 08:33:28.315" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:28.317" starttime="20170510 08:33:28.316" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.317">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:28.317" starttime="20170510 08:33:28.317" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:28.318" starttime="20170510 08:33:28.318" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.508">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:33:28.508" starttime="20170510 08:33:28.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:28.508">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:33:28.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:28.508" starttime="20170510 08:33:28.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.509">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:28.509" starttime="20170510 08:33:28.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:28.509" starttime="20170510 08:33:28.509" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.510" starttime="20170510 08:33:28.315" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.510" starttime="20170510 08:33:28.314" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.510" starttime="20170510 08:33:28.314" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.510">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:33:28.510" starttime="20170510 08:33:28.510" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.512">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:28.512" starttime="20170510 08:33:28.512" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.513">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:28.513" starttime="20170510 08:33:28.513" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.514" starttime="20170510 08:33:28.513" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.514" starttime="20170510 08:33:28.511" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.514" starttime="20170510 08:33:28.511" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.582">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:33:28.582">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:28.582" starttime="20170510 08:33:28.514" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.584">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:28.584" starttime="20170510 08:33:28.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.584">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:28.585" starttime="20170510 08:33:28.584" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.585" starttime="20170510 08:33:28.584" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.585" starttime="20170510 08:33:28.583" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:28.585" starttime="20170510 08:33:28.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:28.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:28.585" starttime="20170510 08:33:28.313" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:28.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:28.586" starttime="20170510 08:33:28.585" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:28.586">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:33:28.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:33:28.586">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:33:28.587" starttime="20170510 08:33:28.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:28.587">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:28.587" starttime="20170510 08:33:28.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:28.587">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:28.587" starttime="20170510 08:33:28.312" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:33:28.588">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:33:28.588" starttime="20170510 08:33:28.587" status="FAIL"></status>
</kw>
<status endtime="20170510 08:33:28.588" starttime="20170510 08:33:28.311" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.593">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:38.594" starttime="20170510 08:33:38.593" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:38.595" starttime="20170510 08:33:38.594" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.595">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:38.595" starttime="20170510 08:33:38.595" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:38.596" starttime="20170510 08:33:38.595" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:33:38.885" starttime="20170510 08:33:38.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:38.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:33:38.885">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:38.885" starttime="20170510 08:33:38.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:38.886" starttime="20170510 08:33:38.886" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:38.887" starttime="20170510 08:33:38.887" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.887" starttime="20170510 08:33:38.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.887" starttime="20170510 08:33:38.592" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.887" starttime="20170510 08:33:38.591" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.888">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:33:38.888" starttime="20170510 08:33:38.888" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.890">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:38.890" starttime="20170510 08:33:38.889" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.891">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:38.891" starttime="20170510 08:33:38.891" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.891" starttime="20170510 08:33:38.890" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.891" starttime="20170510 08:33:38.889" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.891" starttime="20170510 08:33:38.888" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.959">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:33:38.959">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:38.959" starttime="20170510 08:33:38.892" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.961">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:38.961" starttime="20170510 08:33:38.960" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.962">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:38.962" starttime="20170510 08:33:38.962" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.962" starttime="20170510 08:33:38.961" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.963" starttime="20170510 08:33:38.960" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:38.963" starttime="20170510 08:33:38.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:38.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:38.963" starttime="20170510 08:33:38.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:38.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:38.964" starttime="20170510 08:33:38.963" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:38.964">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:33:38.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:33:38.964">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:33:38.964" starttime="20170510 08:33:38.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:38.965">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:38.965" starttime="20170510 08:33:38.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:38.965">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:38.965" starttime="20170510 08:33:38.589" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:33:38.966">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:33:38.966" starttime="20170510 08:33:38.965" status="FAIL"></status>
</kw>
<status endtime="20170510 08:33:38.966" starttime="20170510 08:33:38.588" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:48.971">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:48.971" starttime="20170510 08:33:48.970" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:48.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:48.972" starttime="20170510 08:33:48.971" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:48.972">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:48.972" starttime="20170510 08:33:48.972" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:48.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:48.973" starttime="20170510 08:33:48.972" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:33:49.608" starttime="20170510 08:33:48.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:49.608">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:33:49.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:49.609" starttime="20170510 08:33:48.973" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.609">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:49.609" starttime="20170510 08:33:49.609" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:49.610" starttime="20170510 08:33:49.610" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.610" starttime="20170510 08:33:48.970" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.610" starttime="20170510 08:33:48.969" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.610" starttime="20170510 08:33:48.969" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:49.611">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:33:49.611" starttime="20170510 08:33:49.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:49.613">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:49.613" starttime="20170510 08:33:49.612" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.614">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:33:49.614" starttime="20170510 08:33:49.614" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.614" starttime="20170510 08:33:49.613" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.615" starttime="20170510 08:33:49.612" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.615" starttime="20170510 08:33:49.611" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:49.792">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:33:49.792">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:49.792" starttime="20170510 08:33:49.615" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:49.794">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:49.794" starttime="20170510 08:33:49.793" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.794">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:33:49.795" starttime="20170510 08:33:49.794" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.795" starttime="20170510 08:33:49.794" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.795" starttime="20170510 08:33:49.793" status="PASS"></status>
</kw>
<status endtime="20170510 08:33:49.795" starttime="20170510 08:33:49.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:49.795">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:33:49.795" starttime="20170510 08:33:48.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:49.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:33:49.796" starttime="20170510 08:33:49.795" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:49.796">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:33:49.796">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:33:49.796">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:33:49.796" starttime="20170510 08:33:49.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:49.797">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:49.797" starttime="20170510 08:33:48.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:33:49.797">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:33:49.797" starttime="20170510 08:33:48.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:33:49.798">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:33:49.798" starttime="20170510 08:33:49.797" status="FAIL"></status>
</kw>
<status endtime="20170510 08:33:49.798" starttime="20170510 08:33:48.966" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:33:59.803">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:33:59.804" starttime="20170510 08:33:59.803" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:59.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:33:59.804" starttime="20170510 08:33:59.804" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:59.805">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:33:59.805" starttime="20170510 08:33:59.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:33:59.805">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:33:59.806" starttime="20170510 08:33:59.805" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:00.020" starttime="20170510 08:33:59.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:00.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:00.021">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:00.021" starttime="20170510 08:33:59.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:00.021" starttime="20170510 08:34:00.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:00.022" starttime="20170510 08:34:00.022" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.022" starttime="20170510 08:33:59.802" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.022" starttime="20170510 08:33:59.801" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.022" starttime="20170510 08:33:59.801" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:00.023">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:00.023" starttime="20170510 08:34:00.023" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:00.025">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:00.025" starttime="20170510 08:34:00.024" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.026">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:00.026" starttime="20170510 08:34:00.026" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.026" starttime="20170510 08:34:00.025" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.026" starttime="20170510 08:34:00.024" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.026" starttime="20170510 08:34:00.023" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:00.093">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:00.094">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:00.094" starttime="20170510 08:34:00.027" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:00.096">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:00.096" starttime="20170510 08:34:00.095" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.096">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:00.097" starttime="20170510 08:34:00.096" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.097" starttime="20170510 08:34:00.096" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.097" starttime="20170510 08:34:00.094" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:00.097" starttime="20170510 08:34:00.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:00.097">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:00.097" starttime="20170510 08:33:59.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:00.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:00.098" starttime="20170510 08:34:00.097" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:00.098">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:00.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:00.098">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:00.099" starttime="20170510 08:34:00.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:00.099">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:00.099" starttime="20170510 08:33:59.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:00.099">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:00.099" starttime="20170510 08:33:59.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:00.100">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:00.100" starttime="20170510 08:34:00.099" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:00.100" starttime="20170510 08:33:59.798" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.105">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:34:10.105" starttime="20170510 08:34:10.104" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:34:10.106" starttime="20170510 08:34:10.105" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.106">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:34:10.106" starttime="20170510 08:34:10.106" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:34:10.107" starttime="20170510 08:34:10.107" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.297">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:10.297" starttime="20170510 08:34:10.108" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:10.297">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:10.297">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:10.297" starttime="20170510 08:34:10.107" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.298">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:10.298" starttime="20170510 08:34:10.297" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:10.299" starttime="20170510 08:34:10.298" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.299" starttime="20170510 08:34:10.104" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.299" starttime="20170510 08:34:10.103" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.299" starttime="20170510 08:34:10.103" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.299">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:10.299" starttime="20170510 08:34:10.299" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.301">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:10.301" starttime="20170510 08:34:10.301" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.303">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:10.303" starttime="20170510 08:34:10.302" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.303" starttime="20170510 08:34:10.302" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.303" starttime="20170510 08:34:10.300" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.303" starttime="20170510 08:34:10.300" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.374">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:10.374">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:10.374" starttime="20170510 08:34:10.303" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.376">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:10.376" starttime="20170510 08:34:10.375" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.376">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:10.377" starttime="20170510 08:34:10.376" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.377" starttime="20170510 08:34:10.376" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.377" starttime="20170510 08:34:10.375" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:10.377" starttime="20170510 08:34:10.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:10.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:10.377" starttime="20170510 08:34:10.102" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:10.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:10.378" starttime="20170510 08:34:10.377" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:10.378">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:10.378">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:10.378">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:10.378" starttime="20170510 08:34:10.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:10.379">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:10.379" starttime="20170510 08:34:10.101" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:10.379">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:10.379" starttime="20170510 08:34:10.101" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:10.380">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:10.380" starttime="20170510 08:34:10.379" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:10.380" starttime="20170510 08:34:10.100" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.389">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:34:20.389" starttime="20170510 08:34:20.389" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:34:20.390" starttime="20170510 08:34:20.390" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.391">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:34:20.391" starttime="20170510 08:34:20.390" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:34:20.391" starttime="20170510 08:34:20.391" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:20.584" starttime="20170510 08:34:20.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:20.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:20.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:20.585" starttime="20170510 08:34:20.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:20.585" starttime="20170510 08:34:20.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:20.586" starttime="20170510 08:34:20.586" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.586" starttime="20170510 08:34:20.388" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.586" starttime="20170510 08:34:20.387" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.587" starttime="20170510 08:34:20.387" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.587">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:20.587" starttime="20170510 08:34:20.587" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.589">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:20.589" starttime="20170510 08:34:20.589" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.590">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:20.590" starttime="20170510 08:34:20.590" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.590" starttime="20170510 08:34:20.589" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.591" starttime="20170510 08:34:20.588" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.591" starttime="20170510 08:34:20.587" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.659">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:20.659">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:20.659" starttime="20170510 08:34:20.591" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.662">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:20.662" starttime="20170510 08:34:20.661" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.663">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:20.663" starttime="20170510 08:34:20.662" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.663" starttime="20170510 08:34:20.662" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.663" starttime="20170510 08:34:20.660" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:20.663" starttime="20170510 08:34:20.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:20.663">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:20.663" starttime="20170510 08:34:20.386" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:20.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:20.664" starttime="20170510 08:34:20.663" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:20.664">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:20.664">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:20.665">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:20.665" starttime="20170510 08:34:20.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:20.665">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:20.665" starttime="20170510 08:34:20.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:20.665">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:20.665" starttime="20170510 08:34:20.385" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:20.666">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:20.666" starttime="20170510 08:34:20.665" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:20.666" starttime="20170510 08:34:20.384" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.671">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:34:30.672" starttime="20170510 08:34:30.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:34:30.672" starttime="20170510 08:34:30.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.673">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:34:30.673" starttime="20170510 08:34:30.672" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:34:30.673" starttime="20170510 08:34:30.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.855">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:30.855" starttime="20170510 08:34:30.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:30.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:30.855">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:30.855" starttime="20170510 08:34:30.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.856">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:30.856" starttime="20170510 08:34:30.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:30.857" starttime="20170510 08:34:30.856" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.857" starttime="20170510 08:34:30.670" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.857" starttime="20170510 08:34:30.670" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.857" starttime="20170510 08:34:30.669" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.857">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:30.858" starttime="20170510 08:34:30.857" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.860">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:30.860" starttime="20170510 08:34:30.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.861">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:30.861" starttime="20170510 08:34:30.860" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.861" starttime="20170510 08:34:30.860" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.861" starttime="20170510 08:34:30.858" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.861" starttime="20170510 08:34:30.858" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.929">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:30.930">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:30.930" starttime="20170510 08:34:30.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.931">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:30.931" starttime="20170510 08:34:30.931" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.932">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:30.932" starttime="20170510 08:34:30.932" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.932" starttime="20170510 08:34:30.931" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.932" starttime="20170510 08:34:30.930" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:30.933" starttime="20170510 08:34:30.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:30.933">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:30.933" starttime="20170510 08:34:30.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:30.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:30.933" starttime="20170510 08:34:30.933" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:30.934">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:30.934">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:30.934">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:30.934" starttime="20170510 08:34:30.934" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:30.934">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:30.935" starttime="20170510 08:34:30.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:30.935">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:30.935" starttime="20170510 08:34:30.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:30.935">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:30.935" starttime="20170510 08:34:30.935" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:30.936" starttime="20170510 08:34:30.667" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:40.941">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:34:40.942" starttime="20170510 08:34:40.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:40.942">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:34:40.942" starttime="20170510 08:34:40.942" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:40.943">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:34:40.943" starttime="20170510 08:34:40.943" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:40.943">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:34:40.944" starttime="20170510 08:34:40.943" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.304">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:41.304" starttime="20170510 08:34:40.944" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:41.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:41.304">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:41.304" starttime="20170510 08:34:40.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.305">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:41.305" starttime="20170510 08:34:41.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:41.306" starttime="20170510 08:34:41.305" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.306" starttime="20170510 08:34:40.940" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.306" starttime="20170510 08:34:40.939" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.306" starttime="20170510 08:34:40.939" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:41.307">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:41.307" starttime="20170510 08:34:41.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:41.309">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:41.309" starttime="20170510 08:34:41.308" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.310">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:41.310" starttime="20170510 08:34:41.310" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.310" starttime="20170510 08:34:41.309" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.310" starttime="20170510 08:34:41.308" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.310" starttime="20170510 08:34:41.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:41.430">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:41.430">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:41.430" starttime="20170510 08:34:41.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:41.434">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:41.434" starttime="20170510 08:34:41.431" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.435">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:41.435" starttime="20170510 08:34:41.434" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.435" starttime="20170510 08:34:41.434" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.435" starttime="20170510 08:34:41.431" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:41.435" starttime="20170510 08:34:41.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:41.435">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:41.435" starttime="20170510 08:34:40.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:41.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:41.436" starttime="20170510 08:34:41.436" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:41.437">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:41.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:41.437">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:41.437" starttime="20170510 08:34:41.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:41.437">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:41.437" starttime="20170510 08:34:40.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:41.437">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:41.437" starttime="20170510 08:34:40.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:41.438">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:41.438" starttime="20170510 08:34:41.438" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:41.438" starttime="20170510 08:34:40.936" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:51.443">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:34:51.444" starttime="20170510 08:34:51.443" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:51.444">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:34:51.444" starttime="20170510 08:34:51.444" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:51.445">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:34:51.445" starttime="20170510 08:34:51.445" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:51.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:34:51.446" starttime="20170510 08:34:51.445" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:51.868">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:34:51.868" starttime="20170510 08:34:51.446" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:51.868">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:34:51.868">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:51.869" starttime="20170510 08:34:51.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:51.869">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:51.869" starttime="20170510 08:34:51.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:51.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:51.870" starttime="20170510 08:34:51.869" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.870" starttime="20170510 08:34:51.442" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.870" starttime="20170510 08:34:51.442" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.871" starttime="20170510 08:34:51.441" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:51.871">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:34:51.871" starttime="20170510 08:34:51.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:51.873">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:51.873" starttime="20170510 08:34:51.872" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:51.874">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:34:51.874" starttime="20170510 08:34:51.874" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.874" starttime="20170510 08:34:51.873" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.875" starttime="20170510 08:34:51.872" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:51.875" starttime="20170510 08:34:51.871" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:52.044">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:34:52.045">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:52.045" starttime="20170510 08:34:51.875" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:52.046">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:52.046" starttime="20170510 08:34:52.046" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:52.047">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:34:52.047" starttime="20170510 08:34:52.047" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:52.047" starttime="20170510 08:34:52.047" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:52.048" starttime="20170510 08:34:52.045" status="PASS"></status>
</kw>
<status endtime="20170510 08:34:52.048" starttime="20170510 08:34:52.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:52.048">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:34:52.048" starttime="20170510 08:34:51.441" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:34:52.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:34:52.049" starttime="20170510 08:34:52.048" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:34:52.049">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:34:52.049">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:34:52.049">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:34:52.049" starttime="20170510 08:34:52.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:52.049">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:52.050" starttime="20170510 08:34:51.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:34:52.050">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:34:52.050" starttime="20170510 08:34:51.440" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:34:52.050">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:34:52.050" starttime="20170510 08:34:52.050" status="FAIL"></status>
</kw>
<status endtime="20170510 08:34:52.051" starttime="20170510 08:34:51.439" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.055">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:02.056" starttime="20170510 08:35:02.055" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.056">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:02.056" starttime="20170510 08:35:02.056" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.057">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:02.057" starttime="20170510 08:35:02.057" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.058">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:02.058" starttime="20170510 08:35:02.057" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:02.494" starttime="20170510 08:35:02.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:02.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:02.494">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:02.494" starttime="20170510 08:35:02.058" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:02.495" starttime="20170510 08:35:02.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:02.495" starttime="20170510 08:35:02.495" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.495" starttime="20170510 08:35:02.054" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.496" starttime="20170510 08:35:02.054" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.496" starttime="20170510 08:35:02.053" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.496">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:02.496" starttime="20170510 08:35:02.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.498">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:02.498" starttime="20170510 08:35:02.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.499">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:02.499" starttime="20170510 08:35:02.499" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.499" starttime="20170510 08:35:02.498" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.499" starttime="20170510 08:35:02.497" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.500" starttime="20170510 08:35:02.496" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.631">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:02.631">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:02.631" starttime="20170510 08:35:02.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.633">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:02.633" starttime="20170510 08:35:02.632" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.634">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:02.634" starttime="20170510 08:35:02.634" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.634" starttime="20170510 08:35:02.633" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.634" starttime="20170510 08:35:02.632" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:02.635" starttime="20170510 08:35:02.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:02.635">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:02.635" starttime="20170510 08:35:02.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:02.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:02.636" starttime="20170510 08:35:02.635" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:02.636">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:02.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:02.636">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:02.636" starttime="20170510 08:35:02.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:02.637">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:02.637" starttime="20170510 08:35:02.052" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:02.637">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:02.637" starttime="20170510 08:35:02.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:02.637">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:02.637" starttime="20170510 08:35:02.637" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:02.638" starttime="20170510 08:35:02.051" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:12.642">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:12.643" starttime="20170510 08:35:12.642" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:12.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:12.643" starttime="20170510 08:35:12.643" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:12.644">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:12.644" starttime="20170510 08:35:12.643" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:12.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:12.644" starttime="20170510 08:35:12.644" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:13.065" starttime="20170510 08:35:12.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:13.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:13.065">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:13.066" starttime="20170510 08:35:12.645" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:13.066" starttime="20170510 08:35:13.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:13.067" starttime="20170510 08:35:13.066" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.067" starttime="20170510 08:35:12.641" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.068" starttime="20170510 08:35:12.641" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.068" starttime="20170510 08:35:12.640" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:13.068">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:13.068" starttime="20170510 08:35:13.068" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:13.070">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:13.070" starttime="20170510 08:35:13.070" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.071">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:13.071" starttime="20170510 08:35:13.071" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.071" starttime="20170510 08:35:13.070" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.072" starttime="20170510 08:35:13.069" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.072" starttime="20170510 08:35:13.068" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:13.197">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:13.198">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:13.198" starttime="20170510 08:35:13.072" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:13.199">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:13.199" starttime="20170510 08:35:13.199" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.200">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:13.200" starttime="20170510 08:35:13.200" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.201" starttime="20170510 08:35:13.200" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.201" starttime="20170510 08:35:13.198" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:13.201" starttime="20170510 08:35:13.198" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:13.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:13.201" starttime="20170510 08:35:12.640" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:13.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:13.202" starttime="20170510 08:35:13.201" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:13.202">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:13.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:13.202">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:13.202" starttime="20170510 08:35:13.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:13.203">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:13.203" starttime="20170510 08:35:12.639" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:13.203">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:13.203" starttime="20170510 08:35:12.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:13.204">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:13.204" starttime="20170510 08:35:13.203" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:13.204" starttime="20170510 08:35:12.638" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.209">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:23.209" starttime="20170510 08:35:23.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:23.210" starttime="20170510 08:35:23.210" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.210">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:23.211" starttime="20170510 08:35:23.210" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:23.211" starttime="20170510 08:35:23.211" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.426">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:23.426" starttime="20170510 08:35:23.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:23.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:23.426">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:23.426" starttime="20170510 08:35:23.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:23.427" starttime="20170510 08:35:23.427" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:23.428" starttime="20170510 08:35:23.427" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.428" starttime="20170510 08:35:23.208" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.428" starttime="20170510 08:35:23.207" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.428" starttime="20170510 08:35:23.207" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.429">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:23.429" starttime="20170510 08:35:23.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.431">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:23.431" starttime="20170510 08:35:23.430" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.432">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:23.432" starttime="20170510 08:35:23.432" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.432" starttime="20170510 08:35:23.431" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.432" starttime="20170510 08:35:23.430" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.432" starttime="20170510 08:35:23.429" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.501">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:23.501">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:23.501" starttime="20170510 08:35:23.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.503">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:23.503" starttime="20170510 08:35:23.502" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.504">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:23.504" starttime="20170510 08:35:23.504" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.505" starttime="20170510 08:35:23.503" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.505" starttime="20170510 08:35:23.502" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:23.505" starttime="20170510 08:35:23.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:23.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:23.505" starttime="20170510 08:35:23.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:23.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:23.506" starttime="20170510 08:35:23.505" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:23.507">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:23.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:23.507">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:23.507" starttime="20170510 08:35:23.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:23.507">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:23.507" starttime="20170510 08:35:23.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:23.507">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:23.508" starttime="20170510 08:35:23.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:23.508">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:23.508" starttime="20170510 08:35:23.508" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:23.508" starttime="20170510 08:35:23.204" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.513">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:33.513" starttime="20170510 08:35:33.513" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:33.514" starttime="20170510 08:35:33.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.514">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:33.514" starttime="20170510 08:35:33.514" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:33.515" starttime="20170510 08:35:33.515" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.698">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:33.699" starttime="20170510 08:35:33.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:33.699">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:33.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:33.699" starttime="20170510 08:35:33.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.700">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:33.700" starttime="20170510 08:35:33.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:33.700" starttime="20170510 08:35:33.700" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.700" starttime="20170510 08:35:33.512" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.701" starttime="20170510 08:35:33.512" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.701" starttime="20170510 08:35:33.511" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.701">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:33.701" starttime="20170510 08:35:33.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.703">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:33.704" starttime="20170510 08:35:33.703" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.704">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:33.704" starttime="20170510 08:35:33.704" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.705" starttime="20170510 08:35:33.704" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.705" starttime="20170510 08:35:33.702" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.705" starttime="20170510 08:35:33.702" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.772">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:33.772">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:33.772" starttime="20170510 08:35:33.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.774">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:33.774" starttime="20170510 08:35:33.773" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.775">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:33.775" starttime="20170510 08:35:33.774" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.775" starttime="20170510 08:35:33.774" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.775" starttime="20170510 08:35:33.773" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:33.775" starttime="20170510 08:35:33.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:33.775">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:33.775" starttime="20170510 08:35:33.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:33.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:33.776" starttime="20170510 08:35:33.776" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:33.777">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:33.777">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:33.777">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:33.777" starttime="20170510 08:35:33.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:33.777">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:33.777" starttime="20170510 08:35:33.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:33.777">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:33.777" starttime="20170510 08:35:33.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:33.778">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:33.778" starttime="20170510 08:35:33.778" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:33.778" starttime="20170510 08:35:33.509" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:43.784">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:43.784" starttime="20170510 08:35:43.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:43.785">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:43.785" starttime="20170510 08:35:43.784" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:43.786">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:43.786" starttime="20170510 08:35:43.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:43.786">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:43.786" starttime="20170510 08:35:43.786" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:44.311" starttime="20170510 08:35:43.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:44.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:44.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:44.311" starttime="20170510 08:35:43.787" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:44.312" starttime="20170510 08:35:44.312" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:44.313" starttime="20170510 08:35:44.312" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.313" starttime="20170510 08:35:43.782" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.313" starttime="20170510 08:35:43.782" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.313" starttime="20170510 08:35:43.781" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:44.314">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:44.314" starttime="20170510 08:35:44.313" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:44.316">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:44.316" starttime="20170510 08:35:44.315" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.317">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:44.317" starttime="20170510 08:35:44.317" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.317" starttime="20170510 08:35:44.316" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.317" starttime="20170510 08:35:44.315" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.317" starttime="20170510 08:35:44.314" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:44.466">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:44.466">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:44.466" starttime="20170510 08:35:44.318" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:44.468">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:44.468" starttime="20170510 08:35:44.468" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.469">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:44.469" starttime="20170510 08:35:44.469" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.470" starttime="20170510 08:35:44.468" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.470" starttime="20170510 08:35:44.467" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:44.470" starttime="20170510 08:35:44.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:44.470">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:44.470" starttime="20170510 08:35:43.781" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:44.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:44.471" starttime="20170510 08:35:44.470" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:44.471">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:44.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:44.471">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:44.471" starttime="20170510 08:35:44.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:44.472">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:44.472" starttime="20170510 08:35:43.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:44.472">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:44.472" starttime="20170510 08:35:43.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:44.473">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:44.473" starttime="20170510 08:35:44.472" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:44.473" starttime="20170510 08:35:43.779" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.478">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:35:54.479" starttime="20170510 08:35:54.478" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.479">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:35:54.479" starttime="20170510 08:35:54.479" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.480">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:35:54.480" starttime="20170510 08:35:54.479" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.480">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:35:54.480" starttime="20170510 08:35:54.480" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:35:54.825" starttime="20170510 08:35:54.481" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:54.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:35:54.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:54.825" starttime="20170510 08:35:54.481" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:54.826" starttime="20170510 08:35:54.825" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:54.827" starttime="20170510 08:35:54.826" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.827" starttime="20170510 08:35:54.477" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.827" starttime="20170510 08:35:54.477" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.827" starttime="20170510 08:35:54.476" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.828">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:35:54.828" starttime="20170510 08:35:54.827" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.830">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:54.830" starttime="20170510 08:35:54.829" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.831">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:35:54.831" starttime="20170510 08:35:54.830" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.831" starttime="20170510 08:35:54.830" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.831" starttime="20170510 08:35:54.828" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.831" starttime="20170510 08:35:54.828" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.936">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:35:54.936">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:54.936" starttime="20170510 08:35:54.831" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.938">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:54.938" starttime="20170510 08:35:54.937" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.939">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:35:54.939" starttime="20170510 08:35:54.938" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.939" starttime="20170510 08:35:54.938" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.939" starttime="20170510 08:35:54.937" status="PASS"></status>
</kw>
<status endtime="20170510 08:35:54.939" starttime="20170510 08:35:54.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:54.939">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:35:54.939" starttime="20170510 08:35:54.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:35:54.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:35:54.940" starttime="20170510 08:35:54.940" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:35:54.940">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:35:54.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:35:54.941">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:35:54.941" starttime="20170510 08:35:54.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:54.941">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:54.941" starttime="20170510 08:35:54.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:35:54.941">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:35:54.941" starttime="20170510 08:35:54.474" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:35:54.942">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:35:54.942" starttime="20170510 08:35:54.941" status="FAIL"></status>
</kw>
<status endtime="20170510 08:35:54.942" starttime="20170510 08:35:54.473" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:04.947">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:04.947" starttime="20170510 08:36:04.947" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:04.948">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:04.948" starttime="20170510 08:36:04.948" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:04.949">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:04.949" starttime="20170510 08:36:04.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:04.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:04.949" starttime="20170510 08:36:04.949" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:05.128" starttime="20170510 08:36:04.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:05.128">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:05.129">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:05.129" starttime="20170510 08:36:04.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.129">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:05.129" starttime="20170510 08:36:05.129" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:05.130" starttime="20170510 08:36:05.130" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.130" starttime="20170510 08:36:04.946" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.130" starttime="20170510 08:36:04.945" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.130" starttime="20170510 08:36:04.945" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:05.131">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:05.131" starttime="20170510 08:36:05.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:05.133">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:05.133" starttime="20170510 08:36:05.132" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.134">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:05.134" starttime="20170510 08:36:05.134" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.134" starttime="20170510 08:36:05.133" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.134" starttime="20170510 08:36:05.132" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.134" starttime="20170510 08:36:05.131" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:05.209">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:05.209">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:05.209" starttime="20170510 08:36:05.135" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:05.211">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:05.211" starttime="20170510 08:36:05.211" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.214">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:05.214" starttime="20170510 08:36:05.214" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.214" starttime="20170510 08:36:05.211" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.214" starttime="20170510 08:36:05.210" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:05.214" starttime="20170510 08:36:05.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:05.215">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:05.215" starttime="20170510 08:36:04.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:05.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:05.215" starttime="20170510 08:36:05.215" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:05.216">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:05.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:05.216">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:05.216" starttime="20170510 08:36:05.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:05.216">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:05.216" starttime="20170510 08:36:04.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:05.217">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:05.217" starttime="20170510 08:36:04.943" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:05.217">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:05.217" starttime="20170510 08:36:05.217" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:05.218" starttime="20170510 08:36:04.942" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.222">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:15.223" starttime="20170510 08:36:15.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.223">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:15.223" starttime="20170510 08:36:15.223" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.224">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:15.224" starttime="20170510 08:36:15.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.224">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:15.224" starttime="20170510 08:36:15.224" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:15.432" starttime="20170510 08:36:15.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:15.432">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:15.433">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:15.433" starttime="20170510 08:36:15.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.433">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:15.433" starttime="20170510 08:36:15.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:15.434" starttime="20170510 08:36:15.434" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.434" starttime="20170510 08:36:15.221" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.435" starttime="20170510 08:36:15.221" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.435" starttime="20170510 08:36:15.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.435">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:15.435" starttime="20170510 08:36:15.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.437">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:15.437" starttime="20170510 08:36:15.437" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.438">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:15.438" starttime="20170510 08:36:15.438" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.439" starttime="20170510 08:36:15.438" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.439" starttime="20170510 08:36:15.436" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.439" starttime="20170510 08:36:15.435" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.507">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:15.507">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:15.507" starttime="20170510 08:36:15.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.509">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:15.509" starttime="20170510 08:36:15.509" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.510">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:15.510" starttime="20170510 08:36:15.510" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.510" starttime="20170510 08:36:15.509" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.510" starttime="20170510 08:36:15.508" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:15.511" starttime="20170510 08:36:15.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:15.511">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:15.511" starttime="20170510 08:36:15.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:15.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:15.512" starttime="20170510 08:36:15.511" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:15.512">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:15.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:15.512">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:15.512" starttime="20170510 08:36:15.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:15.513">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:15.513" starttime="20170510 08:36:15.219" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:15.513">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:15.513" starttime="20170510 08:36:15.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:15.513">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:15.514" starttime="20170510 08:36:15.513" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:15.514" starttime="20170510 08:36:15.218" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.519">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:25.519" starttime="20170510 08:36:25.518" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:25.520" starttime="20170510 08:36:25.519" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.520">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:25.520" starttime="20170510 08:36:25.520" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:25.521" starttime="20170510 08:36:25.521" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:25.701" starttime="20170510 08:36:25.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:25.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:25.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:25.701" starttime="20170510 08:36:25.521" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.702">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:25.702" starttime="20170510 08:36:25.702" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:25.703" starttime="20170510 08:36:25.702" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.703" starttime="20170510 08:36:25.517" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.703" starttime="20170510 08:36:25.517" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.703" starttime="20170510 08:36:25.516" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.704">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:25.704" starttime="20170510 08:36:25.703" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.706">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:25.707" starttime="20170510 08:36:25.706" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.708">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:25.708" starttime="20170510 08:36:25.708" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.708" starttime="20170510 08:36:25.707" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.708" starttime="20170510 08:36:25.705" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.708" starttime="20170510 08:36:25.704" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.819">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:25.819">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:25.819" starttime="20170510 08:36:25.708" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.821">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:25.821" starttime="20170510 08:36:25.820" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.822">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:25.822" starttime="20170510 08:36:25.821" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.822" starttime="20170510 08:36:25.821" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.822" starttime="20170510 08:36:25.820" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:25.822" starttime="20170510 08:36:25.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:25.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:25.823" starttime="20170510 08:36:25.516" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:25.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:25.823" starttime="20170510 08:36:25.823" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:25.824">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:25.824">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:25.824">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:25.824" starttime="20170510 08:36:25.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:25.824">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:25.824" starttime="20170510 08:36:25.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:25.824">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:25.824" starttime="20170510 08:36:25.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:25.825">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:25.825" starttime="20170510 08:36:25.825" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:25.825" starttime="20170510 08:36:25.514" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:35.830">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:35.831" starttime="20170510 08:36:35.830" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:35.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:35.831" starttime="20170510 08:36:35.831" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:35.832">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:35.832" starttime="20170510 08:36:35.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:35.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:35.832" starttime="20170510 08:36:35.832" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.011">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:36.011" starttime="20170510 08:36:35.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:36.011">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:36.012">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:36.012" starttime="20170510 08:36:35.833" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.012">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:36.012" starttime="20170510 08:36:36.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:36.013" starttime="20170510 08:36:36.013" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.014" starttime="20170510 08:36:35.829" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.014" starttime="20170510 08:36:35.829" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.014" starttime="20170510 08:36:35.828" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:36.014">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:36.014" starttime="20170510 08:36:36.014" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:36.016">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:36.016" starttime="20170510 08:36:36.016" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.017">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:36.017" starttime="20170510 08:36:36.017" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.018" starttime="20170510 08:36:36.017" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.018" starttime="20170510 08:36:36.015" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.018" starttime="20170510 08:36:36.015" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:36.087">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:36.088">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:36.088" starttime="20170510 08:36:36.018" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:36.089">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:36.089" starttime="20170510 08:36:36.089" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.090">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:36.090" starttime="20170510 08:36:36.090" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.090" starttime="20170510 08:36:36.089" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.091" starttime="20170510 08:36:36.088" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:36.091" starttime="20170510 08:36:36.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:36.091">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:36.091" starttime="20170510 08:36:35.827" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:36.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:36.091" starttime="20170510 08:36:36.091" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:36.092">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:36.092">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:36.092">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:36.092" starttime="20170510 08:36:36.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:36.092">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:36.092" starttime="20170510 08:36:35.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:36.093">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:36.093" starttime="20170510 08:36:35.826" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:36.094">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:36.094" starttime="20170510 08:36:36.093" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:36.094" starttime="20170510 08:36:35.826" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.099">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:46.100" starttime="20170510 08:36:46.099" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:46.101" starttime="20170510 08:36:46.100" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.101">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:46.101" starttime="20170510 08:36:46.101" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:46.102" starttime="20170510 08:36:46.102" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.447">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:46.447" starttime="20170510 08:36:46.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:46.447">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:46.447">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:46.448" starttime="20170510 08:36:46.102" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.448">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:46.448" starttime="20170510 08:36:46.448" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:46.449" starttime="20170510 08:36:46.448" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.449" starttime="20170510 08:36:46.098" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.449" starttime="20170510 08:36:46.098" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.449" starttime="20170510 08:36:46.097" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.450">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:46.450" starttime="20170510 08:36:46.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.452">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:46.452" starttime="20170510 08:36:46.451" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.453">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:46.453" starttime="20170510 08:36:46.453" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.453" starttime="20170510 08:36:46.452" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.453" starttime="20170510 08:36:46.451" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.453" starttime="20170510 08:36:46.450" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.560">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:46.560">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:46.560" starttime="20170510 08:36:46.453" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.561">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:46.561" starttime="20170510 08:36:46.561" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.563">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:46.563" starttime="20170510 08:36:46.562" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.563" starttime="20170510 08:36:46.562" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.563" starttime="20170510 08:36:46.560" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:46.563" starttime="20170510 08:36:46.560" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:46.564">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:46.564" starttime="20170510 08:36:46.096" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:46.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:46.564" starttime="20170510 08:36:46.564" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:46.565">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:46.565">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:46.565">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:46.565" starttime="20170510 08:36:46.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:46.565">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:46.565" starttime="20170510 08:36:46.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:46.565">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:46.565" starttime="20170510 08:36:46.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:46.566">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:46.566" starttime="20170510 08:36:46.566" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:46.566" starttime="20170510 08:36:46.095" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:56.572">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:36:56.572" starttime="20170510 08:36:56.571" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:56.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:36:56.573" starttime="20170510 08:36:56.572" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:56.573">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:36:56.573" starttime="20170510 08:36:56.573" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:56.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:36:56.574" starttime="20170510 08:36:56.573" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:36:57.120" starttime="20170510 08:36:56.575" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:57.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:36:57.120">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:57.120" starttime="20170510 08:36:56.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.120">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:57.121" starttime="20170510 08:36:57.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:57.121" starttime="20170510 08:36:57.121" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.121" starttime="20170510 08:36:56.571" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.121" starttime="20170510 08:36:56.570" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.122" starttime="20170510 08:36:56.570" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:57.122">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:36:57.122" starttime="20170510 08:36:57.122" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:57.124">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:57.124" starttime="20170510 08:36:57.124" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.125">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:36:57.125" starttime="20170510 08:36:57.125" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.125" starttime="20170510 08:36:57.125" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.126" starttime="20170510 08:36:57.123" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.126" starttime="20170510 08:36:57.123" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:57.288">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:36:57.288">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:57.288" starttime="20170510 08:36:57.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:57.290">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:57.290" starttime="20170510 08:36:57.290" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.291">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:36:57.291" starttime="20170510 08:36:57.291" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.291" starttime="20170510 08:36:57.290" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.291" starttime="20170510 08:36:57.289" status="PASS"></status>
</kw>
<status endtime="20170510 08:36:57.291" starttime="20170510 08:36:57.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:57.292">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:36:57.292" starttime="20170510 08:36:56.569" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:36:57.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:36:57.292" starttime="20170510 08:36:57.292" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:36:57.293">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:36:57.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:36:57.293">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:36:57.293" starttime="20170510 08:36:57.292" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:57.293">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:57.293" starttime="20170510 08:36:56.568" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:36:57.293">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:36:57.293" starttime="20170510 08:36:56.568" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:36:57.294">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:36:57.294" starttime="20170510 08:36:57.294" status="FAIL"></status>
</kw>
<status endtime="20170510 08:36:57.294" starttime="20170510 08:36:56.567" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.299">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:07.300" starttime="20170510 08:37:07.299" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:07.301" starttime="20170510 08:37:07.300" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.301">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:07.301" starttime="20170510 08:37:07.301" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:07.302" starttime="20170510 08:37:07.302" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.507">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:07.508" starttime="20170510 08:37:07.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:07.508">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:07.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:07.508" starttime="20170510 08:37:07.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.508">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:07.509" starttime="20170510 08:37:07.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:07.509" starttime="20170510 08:37:07.509" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.509" starttime="20170510 08:37:07.298" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.509" starttime="20170510 08:37:07.298" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.510" starttime="20170510 08:37:07.297" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.510">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:07.510" starttime="20170510 08:37:07.510" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.512">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:07.512" starttime="20170510 08:37:07.511" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.513">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:07.513" starttime="20170510 08:37:07.513" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.513" starttime="20170510 08:37:07.512" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.513" starttime="20170510 08:37:07.511" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.513" starttime="20170510 08:37:07.510" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.581">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:07.581">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:07.581" starttime="20170510 08:37:07.514" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.582">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:07.583" starttime="20170510 08:37:07.582" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.584">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:07.584" starttime="20170510 08:37:07.583" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.584" starttime="20170510 08:37:07.583" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.584" starttime="20170510 08:37:07.581" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:07.584" starttime="20170510 08:37:07.581" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:07.584">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:07.584" starttime="20170510 08:37:07.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:07.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:07.585" starttime="20170510 08:37:07.585" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:07.586">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:07.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:07.586">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:07.586" starttime="20170510 08:37:07.585" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:07.586">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:07.586" starttime="20170510 08:37:07.296" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:07.586">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:07.586" starttime="20170510 08:37:07.295" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:07.587">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:07.587" starttime="20170510 08:37:07.587" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:07.587" starttime="20170510 08:37:07.295" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.592">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:17.592" starttime="20170510 08:37:17.592" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:17.593" starttime="20170510 08:37:17.593" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.594">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:17.594" starttime="20170510 08:37:17.593" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.594">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:17.594" starttime="20170510 08:37:17.594" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:17.799" starttime="20170510 08:37:17.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:17.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:17.799">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:17.799" starttime="20170510 08:37:17.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:17.800" starttime="20170510 08:37:17.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:17.801" starttime="20170510 08:37:17.800" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.801" starttime="20170510 08:37:17.591" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.801" starttime="20170510 08:37:17.591" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.801" starttime="20170510 08:37:17.590" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.802">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:17.802" starttime="20170510 08:37:17.801" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.804">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:17.804" starttime="20170510 08:37:17.803" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.805">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:17.805" starttime="20170510 08:37:17.804" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.805" starttime="20170510 08:37:17.804" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.805" starttime="20170510 08:37:17.802" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.805" starttime="20170510 08:37:17.802" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.871">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:17.872">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:17.872" starttime="20170510 08:37:17.805" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.873">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:17.873" starttime="20170510 08:37:17.873" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.874">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:17.874" starttime="20170510 08:37:17.874" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.874" starttime="20170510 08:37:17.874" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.875" starttime="20170510 08:37:17.872" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:17.875" starttime="20170510 08:37:17.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:17.875">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:17.875" starttime="20170510 08:37:17.589" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:17.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:17.876" starttime="20170510 08:37:17.875" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:17.876">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:17.876">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:17.876">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:17.876" starttime="20170510 08:37:17.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:17.876">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:17.877" starttime="20170510 08:37:17.589" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:17.877">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:17.877" starttime="20170510 08:37:17.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:17.877">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:17.877" starttime="20170510 08:37:17.877" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:17.878" starttime="20170510 08:37:17.588" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:27.883">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:27.883" starttime="20170510 08:37:27.882" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:27.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:27.884" starttime="20170510 08:37:27.883" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:27.884">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:27.884" starttime="20170510 08:37:27.884" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:27.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:27.885" starttime="20170510 08:37:27.885" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:28.084" starttime="20170510 08:37:27.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:28.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:28.085">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:28.085" starttime="20170510 08:37:27.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:28.085" starttime="20170510 08:37:28.085" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:28.086" starttime="20170510 08:37:28.085" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.086" starttime="20170510 08:37:27.881" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.086" starttime="20170510 08:37:27.881" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.086" starttime="20170510 08:37:27.880" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:28.087">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:28.087" starttime="20170510 08:37:28.086" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:28.089">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:28.089" starttime="20170510 08:37:28.088" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.090">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:28.090" starttime="20170510 08:37:28.090" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.090" starttime="20170510 08:37:28.089" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.090" starttime="20170510 08:37:28.088" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.090" starttime="20170510 08:37:28.087" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:28.157">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:28.157">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:28.157" starttime="20170510 08:37:28.090" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:28.159">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:28.159" starttime="20170510 08:37:28.159" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.162">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:28.162" starttime="20170510 08:37:28.162" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.163" starttime="20170510 08:37:28.159" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.163" starttime="20170510 08:37:28.158" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:28.163" starttime="20170510 08:37:28.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:28.163">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:28.163" starttime="20170510 08:37:27.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:28.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:28.164" starttime="20170510 08:37:28.163" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:28.164">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:28.164">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:28.164">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:28.164" starttime="20170510 08:37:28.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:28.165">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:28.165" starttime="20170510 08:37:27.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:28.165">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:28.165" starttime="20170510 08:37:27.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:28.166">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:28.166" starttime="20170510 08:37:28.165" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:28.166" starttime="20170510 08:37:27.878" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.173">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:38.173" starttime="20170510 08:37:38.173" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:38.174" starttime="20170510 08:37:38.174" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.175">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:38.175" starttime="20170510 08:37:38.174" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.175">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:38.175" starttime="20170510 08:37:38.175" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:38.410" starttime="20170510 08:37:38.176" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:38.411">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:38.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:38.411" starttime="20170510 08:37:38.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:38.412" starttime="20170510 08:37:38.411" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:38.413" starttime="20170510 08:37:38.412" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.413" starttime="20170510 08:37:38.172" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.413" starttime="20170510 08:37:38.171" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.413" starttime="20170510 08:37:38.170" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.414">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:38.414" starttime="20170510 08:37:38.414" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.416">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:38.416" starttime="20170510 08:37:38.415" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.417">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:38.417" starttime="20170510 08:37:38.417" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.417" starttime="20170510 08:37:38.416" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.417" starttime="20170510 08:37:38.415" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.417" starttime="20170510 08:37:38.414" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.512">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:38.512">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:38.512" starttime="20170510 08:37:38.417" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.515">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:38.515" starttime="20170510 08:37:38.514" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.516">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:38.516" starttime="20170510 08:37:38.516" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.516" starttime="20170510 08:37:38.515" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.516" starttime="20170510 08:37:38.513" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:38.516" starttime="20170510 08:37:38.513" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:38.517">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:38.517" starttime="20170510 08:37:38.169" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:38.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:38.517" starttime="20170510 08:37:38.517" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:38.518">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:38.518">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:38.518">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:38.518" starttime="20170510 08:37:38.518" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:38.518">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:38.518" starttime="20170510 08:37:38.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:38.519">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:38.519" starttime="20170510 08:37:38.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:38.519">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:38.519" starttime="20170510 08:37:38.519" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:38.520" starttime="20170510 08:37:38.167" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:48.525">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:48.525" starttime="20170510 08:37:48.525" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:48.526">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:48.526" starttime="20170510 08:37:48.526" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:48.527">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:48.527" starttime="20170510 08:37:48.526" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:48.527">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:48.527" starttime="20170510 08:37:48.527" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:49.161" starttime="20170510 08:37:48.528" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:49.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:49.161">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:49.161" starttime="20170510 08:37:48.527" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.161">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:49.162" starttime="20170510 08:37:49.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:49.162" starttime="20170510 08:37:49.162" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.162" starttime="20170510 08:37:48.524" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.162" starttime="20170510 08:37:48.523" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.163" starttime="20170510 08:37:48.522" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:49.163">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:49.163" starttime="20170510 08:37:49.163" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:49.165">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:49.165" starttime="20170510 08:37:49.164" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.166">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:49.166" starttime="20170510 08:37:49.166" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.166" starttime="20170510 08:37:49.165" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.166" starttime="20170510 08:37:49.164" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.166" starttime="20170510 08:37:49.163" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:49.339">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:49.339">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:49.339" starttime="20170510 08:37:49.167" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:49.341">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:49.341" starttime="20170510 08:37:49.341" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.342">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:49.343" starttime="20170510 08:37:49.342" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.343" starttime="20170510 08:37:49.341" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.343" starttime="20170510 08:37:49.340" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:49.343" starttime="20170510 08:37:49.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:49.343">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:49.343" starttime="20170510 08:37:48.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:49.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:49.344" starttime="20170510 08:37:49.343" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:49.344">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:49.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:49.344">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:49.344" starttime="20170510 08:37:49.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:49.345">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:49.345" starttime="20170510 08:37:48.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:49.345">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:49.345" starttime="20170510 08:37:48.521" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:49.346">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:49.346" starttime="20170510 08:37:49.345" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:49.346" starttime="20170510 08:37:48.520" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.350">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:37:59.351" starttime="20170510 08:37:59.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.351">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:37:59.351" starttime="20170510 08:37:59.351" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.352">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:37:59.352" starttime="20170510 08:37:59.352" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:37:59.353" starttime="20170510 08:37:59.352" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.686">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:37:59.687" starttime="20170510 08:37:59.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:59.687">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:37:59.687">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:59.687" starttime="20170510 08:37:59.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.687">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:59.688" starttime="20170510 08:37:59.687" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:59.689" starttime="20170510 08:37:59.688" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.689" starttime="20170510 08:37:59.350" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.689" starttime="20170510 08:37:59.349" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.689" starttime="20170510 08:37:59.348" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.690">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:37:59.690" starttime="20170510 08:37:59.689" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.692">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:59.692" starttime="20170510 08:37:59.691" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.693">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:37:59.693" starttime="20170510 08:37:59.692" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.693" starttime="20170510 08:37:59.692" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.693" starttime="20170510 08:37:59.690" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.693" starttime="20170510 08:37:59.690" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.768">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:37:59.768">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:59.768" starttime="20170510 08:37:59.693" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.770">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:59.770" starttime="20170510 08:37:59.769" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.771">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:37:59.771" starttime="20170510 08:37:59.770" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.771" starttime="20170510 08:37:59.770" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.771" starttime="20170510 08:37:59.769" status="PASS"></status>
</kw>
<status endtime="20170510 08:37:59.771" starttime="20170510 08:37:59.768" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:59.771">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:37:59.771" starttime="20170510 08:37:59.348" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:37:59.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:37:59.772" starttime="20170510 08:37:59.771" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:37:59.772">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:37:59.772">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:37:59.773">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:37:59.773" starttime="20170510 08:37:59.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:59.773">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:59.773" starttime="20170510 08:37:59.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:37:59.773">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:37:59.773" starttime="20170510 08:37:59.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:37:59.774">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:37:59.774" starttime="20170510 08:37:59.773" status="FAIL"></status>
</kw>
<status endtime="20170510 08:37:59.774" starttime="20170510 08:37:59.346" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:09.779">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:38:09.779" starttime="20170510 08:38:09.779" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:09.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:38:09.780" starttime="20170510 08:38:09.780" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:09.781">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:38:09.781" starttime="20170510 08:38:09.780" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:09.781">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:38:09.781" starttime="20170510 08:38:09.781" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:09.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:38:09.962" starttime="20170510 08:38:09.782" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:09.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:38:09.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:09.963" starttime="20170510 08:38:09.782" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:09.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:09.963" starttime="20170510 08:38:09.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:09.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:09.964" starttime="20170510 08:38:09.963" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.964" starttime="20170510 08:38:09.778" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.964" starttime="20170510 08:38:09.777" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.964" starttime="20170510 08:38:09.777" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:09.965">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:38:09.965" starttime="20170510 08:38:09.964" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:09.967">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:09.967" starttime="20170510 08:38:09.966" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:09.968">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:09.968" starttime="20170510 08:38:09.968" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.968" starttime="20170510 08:38:09.967" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.968" starttime="20170510 08:38:09.966" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:09.968" starttime="20170510 08:38:09.965" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:10.044">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:38:10.044">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:10.044" starttime="20170510 08:38:09.968" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:10.047">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:10.047" starttime="20170510 08:38:10.046" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:10.048">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:10.048" starttime="20170510 08:38:10.047" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:10.048" starttime="20170510 08:38:10.047" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:10.048" starttime="20170510 08:38:10.045" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:10.048" starttime="20170510 08:38:10.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:10.048">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:10.049" starttime="20170510 08:38:09.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:10.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:10.049" starttime="20170510 08:38:10.049" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:10.050">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:38:10.050">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:38:10.050">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:38:10.050" starttime="20170510 08:38:10.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:10.050">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:10.050" starttime="20170510 08:38:09.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:10.050">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:10.051" starttime="20170510 08:38:09.775" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:38:10.051">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:38:10.051" starttime="20170510 08:38:10.051" status="FAIL"></status>
</kw>
<status endtime="20170510 08:38:10.051" starttime="20170510 08:38:09.774" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.056">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:38:20.056" starttime="20170510 08:38:20.055" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:38:20.057" starttime="20170510 08:38:20.056" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.057">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:38:20.057" starttime="20170510 08:38:20.057" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.058">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:38:20.058" starttime="20170510 08:38:20.058" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.238">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:38:20.238" starttime="20170510 08:38:20.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:20.238">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:38:20.238">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:20.238" starttime="20170510 08:38:20.058" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.239">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:20.239" starttime="20170510 08:38:20.239" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:20.240" starttime="20170510 08:38:20.239" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.240" starttime="20170510 08:38:20.055" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.240" starttime="20170510 08:38:20.055" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.240" starttime="20170510 08:38:20.054" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.241">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:38:20.241" starttime="20170510 08:38:20.240" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.243">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:20.243" starttime="20170510 08:38:20.242" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.244">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:20.244" starttime="20170510 08:38:20.243" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.244" starttime="20170510 08:38:20.243" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.244" starttime="20170510 08:38:20.241" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.244" starttime="20170510 08:38:20.241" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.312">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:38:20.312">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:20.312" starttime="20170510 08:38:20.244" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.313">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:20.314" starttime="20170510 08:38:20.313" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.314">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:20.314" starttime="20170510 08:38:20.314" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.315" starttime="20170510 08:38:20.314" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.315" starttime="20170510 08:38:20.312" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:20.315" starttime="20170510 08:38:20.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:20.315">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:20.315" starttime="20170510 08:38:20.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:20.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:20.316" starttime="20170510 08:38:20.315" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:20.316">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:38:20.316">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:38:20.316">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:38:20.316" starttime="20170510 08:38:20.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:20.317">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:20.317" starttime="20170510 08:38:20.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:20.317">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:20.317" starttime="20170510 08:38:20.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:38:20.317">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:38:20.318" starttime="20170510 08:38:20.317" status="FAIL"></status>
</kw>
<status endtime="20170510 08:38:20.318" starttime="20170510 08:38:20.052" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.323">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:38:30.324" starttime="20170510 08:38:30.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:38:30.324" starttime="20170510 08:38:30.324" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.325">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:38:30.325" starttime="20170510 08:38:30.325" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:38:30.326" starttime="20170510 08:38:30.325" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:38:30.506" starttime="20170510 08:38:30.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:30.507">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:38:30.507">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:30.507" starttime="20170510 08:38:30.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:30.507" starttime="20170510 08:38:30.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:30.508" starttime="20170510 08:38:30.508" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.508" starttime="20170510 08:38:30.322" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.508" starttime="20170510 08:38:30.322" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.508" starttime="20170510 08:38:30.321" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.509">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:38:30.509" starttime="20170510 08:38:30.509" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.511">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:30.511" starttime="20170510 08:38:30.510" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.512">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:30.512" starttime="20170510 08:38:30.512" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.512" starttime="20170510 08:38:30.511" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.512" starttime="20170510 08:38:30.510" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.513" starttime="20170510 08:38:30.509" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.580">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:38:30.580">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:30.580" starttime="20170510 08:38:30.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.582">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:30.582" starttime="20170510 08:38:30.582" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.583">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:30.584" starttime="20170510 08:38:30.583" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.584" starttime="20170510 08:38:30.582" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.584" starttime="20170510 08:38:30.581" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:30.584" starttime="20170510 08:38:30.581" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:30.584">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:30.584" starttime="20170510 08:38:30.320" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:30.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:30.585" starttime="20170510 08:38:30.584" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:30.585">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:38:30.585">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:38:30.585">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:38:30.586" starttime="20170510 08:38:30.585" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:30.586">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:30.586" starttime="20170510 08:38:30.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:30.586">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:30.586" starttime="20170510 08:38:30.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:38:30.587">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:38:30.587" starttime="20170510 08:38:30.586" status="FAIL"></status>
</kw>
<status endtime="20170510 08:38:30.587" starttime="20170510 08:38:30.318" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:40.595">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:38:40.595" starttime="20170510 08:38:40.594" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:40.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:38:40.596" starttime="20170510 08:38:40.595" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:40.596">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:38:40.596" starttime="20170510 08:38:40.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:40.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:38:40.597" starttime="20170510 08:38:40.596" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:40.976">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:38:40.976" starttime="20170510 08:38:40.598" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:40.976">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:38:40.976">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:40.976" starttime="20170510 08:38:40.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:40.977">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:40.977" starttime="20170510 08:38:40.977" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:40.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:40.978" starttime="20170510 08:38:40.978" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.978" starttime="20170510 08:38:40.594" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.978" starttime="20170510 08:38:40.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.978" starttime="20170510 08:38:40.592" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:40.979">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:38:40.979" starttime="20170510 08:38:40.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:40.981">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:40.981" starttime="20170510 08:38:40.980" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:40.982">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:40.982" starttime="20170510 08:38:40.982" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.982" starttime="20170510 08:38:40.981" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.982" starttime="20170510 08:38:40.980" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:40.982" starttime="20170510 08:38:40.979" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:41.159">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:38:41.159">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:41.160" starttime="20170510 08:38:40.983" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:41.161">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:41.161" starttime="20170510 08:38:41.161" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:41.162">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:41.162" starttime="20170510 08:38:41.162" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:41.162" starttime="20170510 08:38:41.162" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:41.163" starttime="20170510 08:38:41.160" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:41.163" starttime="20170510 08:38:41.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:41.163">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:41.163" starttime="20170510 08:38:40.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:41.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:41.164" starttime="20170510 08:38:41.163" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:41.164">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:38:41.164">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:38:41.164">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:38:41.164" starttime="20170510 08:38:41.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:41.165">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:41.165" starttime="20170510 08:38:40.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:41.165">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:41.165" starttime="20170510 08:38:40.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:38:41.165">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:38:41.165" starttime="20170510 08:38:41.165" status="FAIL"></status>
</kw>
<status endtime="20170510 08:38:41.166" starttime="20170510 08:38:40.589" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.171">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:38:51.171" starttime="20170510 08:38:51.171" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:38:51.172" starttime="20170510 08:38:51.172" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.173">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:38:51.173" starttime="20170510 08:38:51.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:38:51.173" starttime="20170510 08:38:51.173" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.738">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:38:51.738" starttime="20170510 08:38:51.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:51.738">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:38:51.739">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:51.739" starttime="20170510 08:38:51.173" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.739">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:51.739" starttime="20170510 08:38:51.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:51.740" starttime="20170510 08:38:51.739" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.740" starttime="20170510 08:38:51.170" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.740" starttime="20170510 08:38:51.169" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.740" starttime="20170510 08:38:51.169" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.741">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:38:51.741" starttime="20170510 08:38:51.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.743">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:51.743" starttime="20170510 08:38:51.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.744">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:38:51.744" starttime="20170510 08:38:51.744" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.744" starttime="20170510 08:38:51.743" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.744" starttime="20170510 08:38:51.742" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.744" starttime="20170510 08:38:51.741" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.911">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:38:51.911">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:51.912" starttime="20170510 08:38:51.744" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.913">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:51.913" starttime="20170510 08:38:51.913" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.916">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:38:51.917" starttime="20170510 08:38:51.916" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.917" starttime="20170510 08:38:51.914" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.917" starttime="20170510 08:38:51.912" status="PASS"></status>
</kw>
<status endtime="20170510 08:38:51.917" starttime="20170510 08:38:51.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:51.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:38:51.917" starttime="20170510 08:38:51.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:38:51.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:38:51.918" starttime="20170510 08:38:51.917" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:38:51.919">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:38:51.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:38:51.919">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:38:51.919" starttime="20170510 08:38:51.918" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:51.919">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:51.919" starttime="20170510 08:38:51.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:38:51.919">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:38:51.919" starttime="20170510 08:38:51.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:38:51.920">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:38:51.920" starttime="20170510 08:38:51.919" status="FAIL"></status>
</kw>
<status endtime="20170510 08:38:51.920" starttime="20170510 08:38:51.166" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:01.926">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:01.927" starttime="20170510 08:39:01.925" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:01.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:01.928" starttime="20170510 08:39:01.928" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:01.928">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:01.928" starttime="20170510 08:39:01.928" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:01.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:01.929" starttime="20170510 08:39:01.929" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:02.115" starttime="20170510 08:39:01.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:02.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:02.116">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:02.116" starttime="20170510 08:39:01.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:02.116" starttime="20170510 08:39:02.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:02.118" starttime="20170510 08:39:02.117" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.118" starttime="20170510 08:39:01.925" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.118" starttime="20170510 08:39:01.924" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.118" starttime="20170510 08:39:01.923" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:02.118">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:02.118" starttime="20170510 08:39:02.118" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:02.121">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:02.121" starttime="20170510 08:39:02.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.121">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:02.122" starttime="20170510 08:39:02.121" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.122" starttime="20170510 08:39:02.121" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.122" starttime="20170510 08:39:02.119" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.122" starttime="20170510 08:39:02.119" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:02.189">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:02.189">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:02.189" starttime="20170510 08:39:02.122" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:02.191">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:02.191" starttime="20170510 08:39:02.190" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.192">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:02.192" starttime="20170510 08:39:02.192" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.192" starttime="20170510 08:39:02.191" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.192" starttime="20170510 08:39:02.190" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:02.192" starttime="20170510 08:39:02.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:02.192">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:02.192" starttime="20170510 08:39:01.923" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:02.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:02.193" starttime="20170510 08:39:02.193" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:02.194">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:02.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:02.194">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:02.194" starttime="20170510 08:39:02.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:02.194">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:02.194" starttime="20170510 08:39:01.922" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:02.194">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:02.194" starttime="20170510 08:39:01.922" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:02.195">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:02.195" starttime="20170510 08:39:02.195" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:02.196" starttime="20170510 08:39:01.921" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.201">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:12.201" starttime="20170510 08:39:12.201" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:12.202" starttime="20170510 08:39:12.202" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.203">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:12.203" starttime="20170510 08:39:12.202" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:12.203" starttime="20170510 08:39:12.203" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:12.383" starttime="20170510 08:39:12.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:12.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:12.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:12.383" starttime="20170510 08:39:12.204" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:12.384" starttime="20170510 08:39:12.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:12.385" starttime="20170510 08:39:12.384" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.385" starttime="20170510 08:39:12.200" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.385" starttime="20170510 08:39:12.199" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.385" starttime="20170510 08:39:12.199" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.385">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:12.385" starttime="20170510 08:39:12.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.387">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:12.388" starttime="20170510 08:39:12.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.388">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:12.388" starttime="20170510 08:39:12.388" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.389" starttime="20170510 08:39:12.388" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.389" starttime="20170510 08:39:12.386" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.389" starttime="20170510 08:39:12.386" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.457">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:12.457">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:12.457" starttime="20170510 08:39:12.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.459">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:12.459" starttime="20170510 08:39:12.459" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.460">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:12.460" starttime="20170510 08:39:12.460" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.461" starttime="20170510 08:39:12.459" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.461" starttime="20170510 08:39:12.458" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:12.461" starttime="20170510 08:39:12.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:12.461">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:12.461" starttime="20170510 08:39:12.198" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:12.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:12.462" starttime="20170510 08:39:12.461" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:12.462">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:12.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:12.462">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:12.462" starttime="20170510 08:39:12.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:12.463">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:12.463" starttime="20170510 08:39:12.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:12.463">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:12.463" starttime="20170510 08:39:12.197" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:12.464">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:12.464" starttime="20170510 08:39:12.463" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:12.464" starttime="20170510 08:39:12.196" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.468">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:22.469" starttime="20170510 08:39:22.468" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:22.469" starttime="20170510 08:39:22.469" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.470">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:22.470" starttime="20170510 08:39:22.470" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.471">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:22.471" starttime="20170510 08:39:22.470" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.653">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:22.653" starttime="20170510 08:39:22.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:22.653">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:22.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:22.653" starttime="20170510 08:39:22.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.654">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:22.654" starttime="20170510 08:39:22.653" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:22.655" starttime="20170510 08:39:22.654" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.655" starttime="20170510 08:39:22.467" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.655" starttime="20170510 08:39:22.467" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.655" starttime="20170510 08:39:22.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.656">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:22.656" starttime="20170510 08:39:22.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.658">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:22.658" starttime="20170510 08:39:22.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.659">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:22.659" starttime="20170510 08:39:22.658" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.659" starttime="20170510 08:39:22.658" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.659" starttime="20170510 08:39:22.656" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.659" starttime="20170510 08:39:22.656" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.726">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:22.726">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:22.726" starttime="20170510 08:39:22.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.728">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:22.728" starttime="20170510 08:39:22.727" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.728">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:22.729" starttime="20170510 08:39:22.728" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.729" starttime="20170510 08:39:22.728" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.729" starttime="20170510 08:39:22.727" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:22.729" starttime="20170510 08:39:22.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:22.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:22.729" starttime="20170510 08:39:22.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:22.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:22.730" starttime="20170510 08:39:22.729" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:22.730">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:22.730">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:22.730">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:22.730" starttime="20170510 08:39:22.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:22.731">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:22.731" starttime="20170510 08:39:22.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:22.731">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:22.731" starttime="20170510 08:39:22.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:22.732">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:22.732" starttime="20170510 08:39:22.731" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:22.732" starttime="20170510 08:39:22.464" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.737">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:32.738" starttime="20170510 08:39:32.737" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.738">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:32.738" starttime="20170510 08:39:32.738" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.739">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:32.739" starttime="20170510 08:39:32.739" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.740">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:32.740" starttime="20170510 08:39:32.739" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:32.919" starttime="20170510 08:39:32.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:32.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:32.919">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:32.919" starttime="20170510 08:39:32.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:32.920" starttime="20170510 08:39:32.920" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:32.921" starttime="20170510 08:39:32.920" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.921" starttime="20170510 08:39:32.736" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.921" starttime="20170510 08:39:32.736" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.921" starttime="20170510 08:39:32.735" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.922">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:32.922" starttime="20170510 08:39:32.921" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.924">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:32.924" starttime="20170510 08:39:32.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.925">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:32.925" starttime="20170510 08:39:32.924" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.925" starttime="20170510 08:39:32.924" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.925" starttime="20170510 08:39:32.923" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.925" starttime="20170510 08:39:32.922" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.992">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:32.992">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:32.992" starttime="20170510 08:39:32.925" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.994">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:32.994" starttime="20170510 08:39:32.994" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.995">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:32.996" starttime="20170510 08:39:32.995" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.996" starttime="20170510 08:39:32.994" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.996" starttime="20170510 08:39:32.993" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:32.996" starttime="20170510 08:39:32.993" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:32.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:32.996" starttime="20170510 08:39:32.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:32.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:32.997" starttime="20170510 08:39:32.996" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:32.997">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:32.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:32.998">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:32.998" starttime="20170510 08:39:32.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:32.998">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:32.998" starttime="20170510 08:39:32.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:32.998">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:32.998" starttime="20170510 08:39:32.733" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:32.999">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:32.999" starttime="20170510 08:39:32.999" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:32.999" starttime="20170510 08:39:32.732" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.005">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:43.005" starttime="20170510 08:39:43.004" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:43.006" starttime="20170510 08:39:43.005" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.006">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:43.006" starttime="20170510 08:39:43.006" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:43.007" starttime="20170510 08:39:43.007" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:43.609" starttime="20170510 08:39:43.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:43.609">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:43.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:43.609" starttime="20170510 08:39:43.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:43.610" starttime="20170510 08:39:43.610" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:43.611" starttime="20170510 08:39:43.610" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.611" starttime="20170510 08:39:43.004" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.611" starttime="20170510 08:39:43.003" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.611" starttime="20170510 08:39:43.003" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.612">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:43.612" starttime="20170510 08:39:43.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.614">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:43.614" starttime="20170510 08:39:43.613" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.615">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:43.615" starttime="20170510 08:39:43.615" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.615" starttime="20170510 08:39:43.614" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.615" starttime="20170510 08:39:43.613" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.615" starttime="20170510 08:39:43.612" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.817">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:43.818">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:43.818" starttime="20170510 08:39:43.615" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.819">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:43.819" starttime="20170510 08:39:43.819" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.820">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:43.820" starttime="20170510 08:39:43.820" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.821" starttime="20170510 08:39:43.820" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.821" starttime="20170510 08:39:43.818" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:43.821" starttime="20170510 08:39:43.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:43.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:43.821" starttime="20170510 08:39:43.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:43.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:43.822" starttime="20170510 08:39:43.821" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:43.822">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:43.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:43.822">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:43.822" starttime="20170510 08:39:43.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:43.823">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:43.823" starttime="20170510 08:39:43.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:43.823">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:43.823" starttime="20170510 08:39:43.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:43.824">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:43.824" starttime="20170510 08:39:43.823" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:43.824" starttime="20170510 08:39:43.000" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:53.829">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:39:53.830" starttime="20170510 08:39:53.829" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:53.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:39:53.830" starttime="20170510 08:39:53.830" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:53.831">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:39:53.831" starttime="20170510 08:39:53.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:53.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:39:53.832" starttime="20170510 08:39:53.831" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:39:54.433" starttime="20170510 08:39:53.832" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:54.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:39:54.434">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:54.434" starttime="20170510 08:39:53.832" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:54.434" starttime="20170510 08:39:54.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:54.435" starttime="20170510 08:39:54.435" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.435" starttime="20170510 08:39:53.828" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.435" starttime="20170510 08:39:53.828" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.436" starttime="20170510 08:39:53.827" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:54.436">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:39:54.436" starttime="20170510 08:39:54.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:54.438">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:54.438" starttime="20170510 08:39:54.437" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.439">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:39:54.439" starttime="20170510 08:39:54.439" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.439" starttime="20170510 08:39:54.438" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.440" starttime="20170510 08:39:54.437" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.440" starttime="20170510 08:39:54.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:54.749">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:39:54.749">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:54.749" starttime="20170510 08:39:54.440" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:54.751">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:54.751" starttime="20170510 08:39:54.750" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.752">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:39:54.752" starttime="20170510 08:39:54.752" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.752" starttime="20170510 08:39:54.751" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.752" starttime="20170510 08:39:54.750" status="PASS"></status>
</kw>
<status endtime="20170510 08:39:54.752" starttime="20170510 08:39:54.749" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:54.753">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:39:54.753" starttime="20170510 08:39:53.826" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:39:54.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:39:54.753" starttime="20170510 08:39:54.753" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:39:54.754">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:39:54.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:39:54.754">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:39:54.754" starttime="20170510 08:39:54.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:54.754">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:54.754" starttime="20170510 08:39:53.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:39:54.755">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:39:54.755" starttime="20170510 08:39:53.825" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:39:54.755">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:39:54.755" starttime="20170510 08:39:54.755" status="FAIL"></status>
</kw>
<status endtime="20170510 08:39:54.755" starttime="20170510 08:39:53.825" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:04.760">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:04.760" starttime="20170510 08:40:04.760" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:04.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:04.761" starttime="20170510 08:40:04.761" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:04.762">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:04.762" starttime="20170510 08:40:04.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:04.762">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:04.762" starttime="20170510 08:40:04.762" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:04.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:04.952" starttime="20170510 08:40:04.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:04.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:04.952">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:04.952" starttime="20170510 08:40:04.763" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:04.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:04.953" starttime="20170510 08:40:04.952" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:04.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:04.953" starttime="20170510 08:40:04.953" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.953" starttime="20170510 08:40:04.759" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.953" starttime="20170510 08:40:04.759" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.954" starttime="20170510 08:40:04.758" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:04.954">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:40:04.954" starttime="20170510 08:40:04.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:04.956">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:04.957" starttime="20170510 08:40:04.956" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:04.958">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:04.958" starttime="20170510 08:40:04.957" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.958" starttime="20170510 08:40:04.957" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.958" starttime="20170510 08:40:04.955" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:04.958" starttime="20170510 08:40:04.954" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:05.026">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:05.026">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:05.026" starttime="20170510 08:40:04.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:05.028">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:05.028" starttime="20170510 08:40:05.027" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:05.029">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:05.029" starttime="20170510 08:40:05.029" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:05.029" starttime="20170510 08:40:05.028" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:05.029" starttime="20170510 08:40:05.027" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:05.029" starttime="20170510 08:40:05.026" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:05.029">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:05.029" starttime="20170510 08:40:04.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:05.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:05.030" starttime="20170510 08:40:05.030" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:05.031">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:05.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:05.031">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:40:05.031" starttime="20170510 08:40:05.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:05.031">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:05.031" starttime="20170510 08:40:04.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:05.031">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:05.031" starttime="20170510 08:40:04.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:05.032">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:05.032" starttime="20170510 08:40:05.032" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:05.033" starttime="20170510 08:40:04.756" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.038">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:15.038" starttime="20170510 08:40:15.037" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:15.039" starttime="20170510 08:40:15.038" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.039">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:15.039" starttime="20170510 08:40:15.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:15.040" starttime="20170510 08:40:15.039" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:15.221" starttime="20170510 08:40:15.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:15.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:15.221">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:15.221" starttime="20170510 08:40:15.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:15.222" starttime="20170510 08:40:15.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:15.223" starttime="20170510 08:40:15.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.223" starttime="20170510 08:40:15.036" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.223" starttime="20170510 08:40:15.036" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.223" starttime="20170510 08:40:15.035" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.224">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:40:15.224" starttime="20170510 08:40:15.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.226">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:15.226" starttime="20170510 08:40:15.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.226">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:15.227" starttime="20170510 08:40:15.226" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.227" starttime="20170510 08:40:15.226" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.227" starttime="20170510 08:40:15.224" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.227" starttime="20170510 08:40:15.224" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.295">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:15.295">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:15.295" starttime="20170510 08:40:15.227" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.297">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:15.297" starttime="20170510 08:40:15.296" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.300">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:15.300" starttime="20170510 08:40:15.299" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.300" starttime="20170510 08:40:15.297" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.300" starttime="20170510 08:40:15.296" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:15.300" starttime="20170510 08:40:15.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:15.300">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:15.300" starttime="20170510 08:40:15.035" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:15.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:15.301" starttime="20170510 08:40:15.301" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:15.302">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:15.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:15.302">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:40:15.302" starttime="20170510 08:40:15.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:15.302">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:15.302" starttime="20170510 08:40:15.034" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:15.302">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:15.302" starttime="20170510 08:40:15.034" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:15.303">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:15.303" starttime="20170510 08:40:15.303" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:15.303" starttime="20170510 08:40:15.033" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.308">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:25.308" starttime="20170510 08:40:25.308" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.309">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:25.309" starttime="20170510 08:40:25.309" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.309">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:25.310" starttime="20170510 08:40:25.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:25.310" starttime="20170510 08:40:25.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:25.491" starttime="20170510 08:40:25.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:25.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:25.491">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:25.491" starttime="20170510 08:40:25.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:25.492" starttime="20170510 08:40:25.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:25.493" starttime="20170510 08:40:25.492" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.493" starttime="20170510 08:40:25.307" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.493" starttime="20170510 08:40:25.307" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.493" starttime="20170510 08:40:25.306" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.493">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:40:25.494" starttime="20170510 08:40:25.493" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.496">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:25.496" starttime="20170510 08:40:25.495" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.497">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:25.497" starttime="20170510 08:40:25.497" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.497" starttime="20170510 08:40:25.496" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.497" starttime="20170510 08:40:25.494" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.497" starttime="20170510 08:40:25.494" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.564">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:25.564">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:25.564" starttime="20170510 08:40:25.497" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.566">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:25.566" starttime="20170510 08:40:25.566" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.567">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:25.567" starttime="20170510 08:40:25.567" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.567" starttime="20170510 08:40:25.566" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.567" starttime="20170510 08:40:25.565" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:25.567" starttime="20170510 08:40:25.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:25.568">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:25.568" starttime="20170510 08:40:25.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:25.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:25.568" starttime="20170510 08:40:25.568" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:25.569">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:25.569">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:25.569">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:40:25.569" starttime="20170510 08:40:25.568" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:25.569">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:25.569" starttime="20170510 08:40:25.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:25.570">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:25.570" starttime="20170510 08:40:25.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:25.570">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:25.570" starttime="20170510 08:40:25.570" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:25.570" starttime="20170510 08:40:25.304" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.576">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:35.576" starttime="20170510 08:40:35.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:35.577" starttime="20170510 08:40:35.577" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.578">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:35.578" starttime="20170510 08:40:35.577" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:35.578" starttime="20170510 08:40:35.578" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:35.788" starttime="20170510 08:40:35.579" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:35.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:35.788">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:35.788" starttime="20170510 08:40:35.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:35.789" starttime="20170510 08:40:35.788" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:35.790" starttime="20170510 08:40:35.789" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.790" starttime="20170510 08:40:35.574" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.790" starttime="20170510 08:40:35.574" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.790" starttime="20170510 08:40:35.573" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.790">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:40:35.791" starttime="20170510 08:40:35.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.793">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:35.793" starttime="20170510 08:40:35.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.794">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:35.794" starttime="20170510 08:40:35.793" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.794" starttime="20170510 08:40:35.793" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.794" starttime="20170510 08:40:35.791" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.794" starttime="20170510 08:40:35.791" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.860">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:35.860">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:35.860" starttime="20170510 08:40:35.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.862">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:35.862" starttime="20170510 08:40:35.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.863">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:35.864" starttime="20170510 08:40:35.863" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.864" starttime="20170510 08:40:35.862" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.864" starttime="20170510 08:40:35.861" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:35.864" starttime="20170510 08:40:35.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:35.864">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:35.864" starttime="20170510 08:40:35.573" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:35.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:35.865" starttime="20170510 08:40:35.864" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:35.865">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:35.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:35.865">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:40:35.865" starttime="20170510 08:40:35.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:35.866">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:35.866" starttime="20170510 08:40:35.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:35.866">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:35.866" starttime="20170510 08:40:35.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:35.867">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:35.867" starttime="20170510 08:40:35.866" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:35.867" starttime="20170510 08:40:35.571" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:45.873">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:45.873" starttime="20170510 08:40:45.872" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:45.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:45.874" starttime="20170510 08:40:45.874" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:45.874">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:45.875" starttime="20170510 08:40:45.874" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:45.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:45.875" starttime="20170510 08:40:45.875" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.288">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:46.288" starttime="20170510 08:40:45.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:46.288">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:46.288">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:46.288" starttime="20170510 08:40:45.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.289">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:46.289" starttime="20170510 08:40:46.289" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:46.290" starttime="20170510 08:40:46.289" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.290" starttime="20170510 08:40:45.872" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.291" starttime="20170510 08:40:45.871" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.291" starttime="20170510 08:40:45.871" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.291">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170510 08:40:46.291" starttime="20170510 08:40:46.291" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.293">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:46.293" starttime="20170510 08:40:46.293" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.294">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170510 08:40:46.294" starttime="20170510 08:40:46.294" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.295" starttime="20170510 08:40:46.294" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.295" starttime="20170510 08:40:46.292" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.295" starttime="20170510 08:40:46.292" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.456">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:46.456">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:46.456" starttime="20170510 08:40:46.295" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.458">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:46.458" starttime="20170510 08:40:46.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.459">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:46.459" starttime="20170510 08:40:46.458" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.459" starttime="20170510 08:40:46.458" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.459" starttime="20170510 08:40:46.457" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:46.459" starttime="20170510 08:40:46.456" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:46.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:46.459" starttime="20170510 08:40:45.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:46.460" starttime="20170510 08:40:46.459" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.460">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:46.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:46.461">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170510 08:40:46.461" starttime="20170510 08:40:46.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:46.461">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:46.461" starttime="20170510 08:40:45.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:46.461">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170510 08:40:46.461" starttime="20170510 08:40:45.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:46.462">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:46.462" starttime="20170510 08:40:46.461" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:46.462" starttime="20170510 08:40:45.868" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170510 08:40:46.462">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170510 08:40:46.462" starttime="20170510 08:30:41.415" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:46.463" starttime="20170510 08:30:03.214" status="FAIL"></status>
</kw>
<status endtime="20170510 08:40:46.463" starttime="20170510 08:30:03.213" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:46.468">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:40:46.468" starttime="20170510 08:40:46.468" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:40:46.469" starttime="20170510 08:40:46.468" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.469">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:40:46.469" starttime="20170510 08:40:46.469" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:46.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:40:46.470" starttime="20170510 08:40:46.470" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.097">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:40:47.097" starttime="20170510 08:40:46.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.098">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:47.098">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:47.098" starttime="20170510 08:40:46.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.098">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:47.098" starttime="20170510 08:40:47.098" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:47.099" starttime="20170510 08:40:47.099" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.099" starttime="20170510 08:40:46.467" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.099" starttime="20170510 08:40:46.466" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.099" starttime="20170510 08:40:46.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.100">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:40:47.100" starttime="20170510 08:40:47.100" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.102">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:40:47.102" starttime="20170510 08:40:47.101" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.103">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:40:47.103" starttime="20170510 08:40:47.103" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.103" starttime="20170510 08:40:47.102" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.104" starttime="20170510 08:40:47.101" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.104" starttime="20170510 08:40:47.100" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.275">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:40:47.275">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:47.275" starttime="20170510 08:40:47.104" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.277">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:47.277" starttime="20170510 08:40:47.277" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.279">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:40:47.279" starttime="20170510 08:40:47.278" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.279" starttime="20170510 08:40:47.277" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.279" starttime="20170510 08:40:47.276" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:47.279" starttime="20170510 08:40:47.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.279">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:40:47.279" starttime="20170510 08:40:46.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:40:47.280" starttime="20170510 08:40:47.280" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.280">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:40:47.280">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:40:47.281">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170510 08:40:47.281" starttime="20170510 08:40:47.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.281">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170510 08:40:47.281" starttime="20170510 08:40:46.464" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.281">${host_state} = Quiesced</msg>
<status endtime="20170510 08:40:47.281" starttime="20170510 08:40:46.464" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170510 08:40:47.282" starttime="20170510 08:40:47.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.282">${status} = True</msg>
<status endtime="20170510 08:40:47.282" starttime="20170510 08:40:47.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:47.283">${status} = True</msg>
<status endtime="20170510 08:40:47.283" starttime="20170510 08:40:46.464" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:47.636">Length is 10</msg>
<status endtime="20170510 08:40:47.636" starttime="20170510 08:40:47.636" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:47.641">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:40:50.758">${RC} = 0</msg>
<msg level="INFO" timestamp="20170510 08:40:50.758">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=107 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=107 ms
64 bytes from 9.3.86.161: icmp_seq=3 ...</msg>
<status endtime="20170510 08:40:50.758" starttime="20170510 08:40:47.637" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.762">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=107 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=107 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=108 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=108 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 107.261/107.860/108.426/0.542 ms</msg>
<status endtime="20170510 08:40:50.762" starttime="20170510 08:40:50.760" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170510 08:40:50.762" starttime="20170510 08:40:50.762" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.763" starttime="20170510 08:40:47.635" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.787">${cur_time} = 2017-05-10 08:40:50:786686</msg>
<status endtime="20170510 08:40:50.787" starttime="20170510 08:40:50.786" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.787">${cur_time} = 20170510084050786686</msg>
<status endtime="20170510 08:40:50.788" starttime="20170510 08:40:50.787" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.788" starttime="20170510 08:40:50.786" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:50.788">${FFDC_TIME} = 20170510084050786686</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.799">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170510 08:40:50.799" starttime="20170510 08:40:50.799" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.800">${suite_name} = 20170510084050786686_TestsTestBasicPoweron</msg>
<status endtime="20170510 08:40:50.800" starttime="20170510 08:40:50.799" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.800">${test_name} = PowerOnTest</msg>
<status endtime="20170510 08:40:50.800" starttime="20170510 08:40:50.800" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.801">${test_name} = 20170510084050786686_PowerOnTest</msg>
<status endtime="20170510 08:40:50.801" starttime="20170510 08:40:50.800" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.801" starttime="20170510 08:40:50.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:50.801">${FFDC_DIR_PATH} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170510 08:40:50.802">${FFDC_PREFIX} = 20170510084050786686_</msg>
<msg level="INFO" timestamp="20170510 08:40:50.829">${LOG_PREFIX} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.830" html="yes">Created directory '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.831" starttime="20170510 08:40:50.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:50.837">${FFDC_FILE_PATH} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.864" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.865" starttime="20170510 08:40:50.864" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.865" starttime="20170510 08:40:50.863" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.867" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.868" starttime="20170510 08:40:50.865" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.868" starttime="20170510 08:40:50.865" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.869" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.869" starttime="20170510 08:40:50.869" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.869" starttime="20170510 08:40:50.868" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.870" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.871" starttime="20170510 08:40:50.870" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.871" starttime="20170510 08:40:50.869" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.872" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.872" starttime="20170510 08:40:50.871" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.872" starttime="20170510 08:40:50.871" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.873" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.873" starttime="20170510 08:40:50.873" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.873" starttime="20170510 08:40:50.872" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.875" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.875" starttime="20170510 08:40:50.874" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.875" starttime="20170510 08:40:50.874" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.876" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.876" starttime="20170510 08:40:50.876" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.876" starttime="20170510 08:40:50.875" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.877" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.878" starttime="20170510 08:40:50.877" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.878" starttime="20170510 08:40:50.877" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.879" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.879" starttime="20170510 08:40:50.879" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.879" starttime="20170510 08:40:50.878" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.880" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.880" starttime="20170510 08:40:50.880" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.880" starttime="20170510 08:40:50.879" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.882" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.882" starttime="20170510 08:40:50.881" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.882" starttime="20170510 08:40:50.881" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.883" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:50.883" starttime="20170510 08:40:50.883" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.883" starttime="20170510 08:40:50.882" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:50.885">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:40:50.885" starttime="20170510 08:40:50.885" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:50.885">${has_host} = False</msg>
<status endtime="20170510 08:40:50.886" starttime="20170510 08:40:50.884" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:40:50.887" starttime="20170510 08:40:50.886" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.887" starttime="20170510 08:40:50.886" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.888">${port_num} = 22</msg>
<status endtime="20170510 08:40:50.888" starttime="20170510 08:40:50.888" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.889">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:40:50.889" starttime="20170510 08:40:50.889" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:50.890">${https_num} = 443</msg>
<status endtime="20170510 08:40:50.890" starttime="20170510 08:40:50.889" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.891">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:40:50.891" starttime="20170510 08:40:50.890" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.891" starttime="20170510 08:40:50.888" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.891" starttime="20170510 08:40:50.887" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:50.892">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:40:50.892" starttime="20170510 08:40:50.891" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:50.892">${has_port} = False</msg>
<status endtime="20170510 08:40:50.892" starttime="20170510 08:40:50.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:40:50.894" starttime="20170510 08:40:50.893" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:40:50.895" starttime="20170510 08:40:50.894" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.895" starttime="20170510 08:40:50.893" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:50.895" starttime="20170510 08:40:50.892" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:50.895">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:40:53.633">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:40:53.633" starttime="20170510 08:40:50.895" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:53.634" starttime="20170510 08:40:50.884" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:53.634">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170510 08:40:54.052">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:54.052">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170510 08:40:54.052">${stderr} = </msg>
<status endtime="20170510 08:40:54.052" starttime="20170510 08:40:53.634" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.053">Length is 0</msg>
<status endtime="20170510 08:40:54.053" starttime="20170510 08:40:54.052" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.053">Length is 11</msg>
<status endtime="20170510 08:40:54.053" starttime="20170510 08:40:54.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:54.054">${model_name} = Witherspoon</msg>
<status endtime="20170510 08:40:54.054" starttime="20170510 08:40:50.883" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.055" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.055" starttime="20170510 08:40:54.055" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.055" starttime="20170510 08:40:54.054" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.055" starttime="20170510 08:40:50.878" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.057" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.057" starttime="20170510 08:40:54.056" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.057" starttime="20170510 08:40:54.056" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.057">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170510 08:40:54.057" starttime="20170510 08:40:54.057" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.059" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.059" starttime="20170510 08:40:54.058" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.059" starttime="20170510 08:40:54.058" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.060" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.060" starttime="20170510 08:40:54.060" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.060" starttime="20170510 08:40:54.059" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.060" starttime="20170510 08:40:54.057" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.062" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.062" starttime="20170510 08:40:54.061" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.062" starttime="20170510 08:40:54.061" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.063" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.063" starttime="20170510 08:40:54.063" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.063" starttime="20170510 08:40:54.062" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.063" starttime="20170510 08:40:54.061" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.065" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.065" starttime="20170510 08:40:54.064" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.065" starttime="20170510 08:40:54.064" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.066" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.066" starttime="20170510 08:40:54.065" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.066" starttime="20170510 08:40:54.065" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.066" starttime="20170510 08:40:54.063" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.066" starttime="20170510 08:40:54.057" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.067" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:54.067" starttime="20170510 08:40:54.067" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.067" starttime="20170510 08:40:54.066" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.068" starttime="20170510 08:40:50.863" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.076">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170510 08:40:54.077" starttime="20170510 08:40:54.076" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.078">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump ...</msg>
<status endtime="20170510 08:40:54.078" starttime="20170510 08:40:54.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170510 08:40:54.079" starttime="20170510 08:40:54.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:54.079">@{ffdc_function_list} = [ FFDC Generic Report | BMC Specific Files | Get Request FFDC | OS FFDC | Core Files | SEL Log ]</msg>
<status endtime="20170510 08:40:54.079" starttime="20170510 08:40:54.078" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:40:54.081" starttime="20170510 08:40:54.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:54.081">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:54.081">${ret_values} = None</msg>
<status endtime="20170510 08:40:54.081" starttime="20170510 08:40:54.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:40:54.082" starttime="20170510 08:40:54.082" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:54.124">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:40:54.124" starttime="20170510 08:40:54.124" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:54.124">${has_host} = False</msg>
<status endtime="20170510 08:40:54.125" starttime="20170510 08:40:54.123" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:40:54.127" starttime="20170510 08:40:54.125" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.127" starttime="20170510 08:40:54.125" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.129">${port_num} = 22</msg>
<status endtime="20170510 08:40:54.129" starttime="20170510 08:40:54.129" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.130">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:40:54.130" starttime="20170510 08:40:54.129" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:54.130">${https_num} = 443</msg>
<status endtime="20170510 08:40:54.130" starttime="20170510 08:40:54.130" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.131">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:40:54.131" starttime="20170510 08:40:54.130" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.131" starttime="20170510 08:40:54.128" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.131" starttime="20170510 08:40:54.128" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:54.132">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:40:54.132" starttime="20170510 08:40:54.132" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:54.132">${has_port} = False</msg>
<status endtime="20170510 08:40:54.133" starttime="20170510 08:40:54.132" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:40:54.134" starttime="20170510 08:40:54.134" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:40:54.135" starttime="20170510 08:40:54.135" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.135" starttime="20170510 08:40:54.134" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:54.135" starttime="20170510 08:40:54.133" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:54.136">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:40:56.727">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:40:56.727" starttime="20170510 08:40:54.135" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.727" starttime="20170510 08:40:54.123" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:56.728">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170510 08:40:56.728" starttime="20170510 08:40:56.727" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:56.729">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170510 08:40:56.730" starttime="20170510 08:40:56.729" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:56.734">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170510 08:40:56.734" starttime="20170510 08:40:56.730" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:56.737" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:56.737" starttime="20170510 08:40:56.737" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.737" starttime="20170510 08:40:56.736" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:56.739" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:56.739" starttime="20170510 08:40:56.738" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.739" starttime="20170510 08:40:56.738" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:56.740" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:56.740" starttime="20170510 08:40:56.740" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.740" starttime="20170510 08:40:56.739" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:56.742" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:56.742" starttime="20170510 08:40:56.741" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.742" starttime="20170510 08:40:56.741" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.742" starttime="20170510 08:40:56.736" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:56.742" starttime="20170510 08:40:56.735" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:56.742">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.027">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.027">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Wed May 10 08:02:57 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170510 08:40:57.028">${stderr} = </msg>
<status endtime="20170510 08:40:57.028" starttime="20170510 08:40:56.742" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.034" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.034" starttime="20170510 08:40:57.033" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.034" starttime="20170510 08:40:57.033" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.034" starttime="20170510 08:40:57.028" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.034" starttime="20170510 08:40:56.734" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.034" starttime="20170510 08:40:56.734" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.037" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.037" starttime="20170510 08:40:57.037" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.038" starttime="20170510 08:40:57.036" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.039" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.039" starttime="20170510 08:40:57.038" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.039" starttime="20170510 08:40:57.038" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.040" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.040" starttime="20170510 08:40:57.040" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.040" starttime="20170510 08:40:57.039" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.041" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.041" starttime="20170510 08:40:57.041" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.042" starttime="20170510 08:40:57.040" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.042" starttime="20170510 08:40:57.036" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.042" starttime="20170510 08:40:57.036" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:57.042">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.391">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.391">${stdout} =  08:41:02 up 25 min,  load average: 1.32, 1.22, 1.19</msg>
<msg level="INFO" timestamp="20170510 08:40:57.391">${stderr} = </msg>
<status endtime="20170510 08:40:57.391" starttime="20170510 08:40:57.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.397" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.397" starttime="20170510 08:40:57.396" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.397" starttime="20170510 08:40:57.396" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.397" starttime="20170510 08:40:57.391" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.397" starttime="20170510 08:40:57.035" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.397" starttime="20170510 08:40:57.035" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.400" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.400" starttime="20170510 08:40:57.400" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.400" starttime="20170510 08:40:57.399" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.402" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.402" starttime="20170510 08:40:57.401" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.402" starttime="20170510 08:40:57.400" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.403" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.403" starttime="20170510 08:40:57.403" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.403" starttime="20170510 08:40:57.402" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.404" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.404" starttime="20170510 08:40:57.404" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.405" starttime="20170510 08:40:57.403" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.405" starttime="20170510 08:40:57.399" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.405" starttime="20170510 08:40:57.398" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:57.405">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.761">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:57.761">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170510 08:40:57.761">${stderr} = </msg>
<status endtime="20170510 08:40:57.761" starttime="20170510 08:40:57.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.767" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:57.766" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:57.766" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:57.761" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:57.397" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:57.397" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:56.734" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:56.728" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.767" starttime="20170510 08:40:56.728" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:57.768">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170510 08:40:57.768" starttime="20170510 08:40:57.768" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.769">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170510 08:40:57.769" starttime="20170510 08:40:57.769" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.772" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.772" starttime="20170510 08:40:57.772" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.772" starttime="20170510 08:40:57.771" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.774" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.774" starttime="20170510 08:40:57.773" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.774" starttime="20170510 08:40:57.772" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.775" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.775" starttime="20170510 08:40:57.775" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.775" starttime="20170510 08:40:57.774" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:57.776" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:57.776" starttime="20170510 08:40:57.776" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.776" starttime="20170510 08:40:57.775" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.777" starttime="20170510 08:40:57.771" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:57.777" starttime="20170510 08:40:57.770" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:57.777">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.239">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.239">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<msg level="INFO" timestamp="20170510 08:40:59.239">${stderr} = </msg>
<status endtime="20170510 08:40:59.239" starttime="20170510 08:40:57.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.246" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:59.245" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:59.244" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:59.240" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:57.770" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:57.769" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.246" starttime="20170510 08:40:57.769" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.247" starttime="20170510 08:40:57.768" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.247" starttime="20170510 08:40:57.767" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.248">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170510 08:40:59.248" starttime="20170510 08:40:59.247" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.248">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170510 08:40:59.249" starttime="20170510 08:40:59.248" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.252" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.252" starttime="20170510 08:40:59.252" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.253" starttime="20170510 08:40:59.251" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.254" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.254" starttime="20170510 08:40:59.253" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.254" starttime="20170510 08:40:59.253" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.255" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.255" starttime="20170510 08:40:59.255" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.255" starttime="20170510 08:40:59.254" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.257" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.257" starttime="20170510 08:40:59.256" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.257" starttime="20170510 08:40:59.255" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.257" starttime="20170510 08:40:59.250" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.257" starttime="20170510 08:40:59.250" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.258">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.326">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.326">${stdout} = </msg>
<msg level="INFO" timestamp="20170510 08:40:59.326">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170510 08:40:59.326" starttime="20170510 08:40:59.257" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.332" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.332" starttime="20170510 08:40:59.332" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.332" starttime="20170510 08:40:59.331" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.332" starttime="20170510 08:40:59.327" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.333" starttime="20170510 08:40:59.249" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.333" starttime="20170510 08:40:59.249" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.336" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.336" starttime="20170510 08:40:59.336" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.336" starttime="20170510 08:40:59.335" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.337" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.337" starttime="20170510 08:40:59.337" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.338" starttime="20170510 08:40:59.336" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.339" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.339" starttime="20170510 08:40:59.338" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.339" starttime="20170510 08:40:59.338" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.340" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.340" starttime="20170510 08:40:59.339" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.340" starttime="20170510 08:40:59.339" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.340" starttime="20170510 08:40:59.334" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.340" starttime="20170510 08:40:59.334" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.341">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.425">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:40:59.426">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-21"
VERSION_ID="v1.99.5-21-g6fdb2b1"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170510 08:40:59.426">${stderr} = </msg>
<status endtime="20170510 08:40:59.426" starttime="20170510 08:40:59.340" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.431" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:40:59.431" starttime="20170510 08:40:59.431" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.431" starttime="20170510 08:40:59.430" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.426" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.333" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.333" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.249" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.247" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:59.247" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:56.728" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:54.122" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:54.082" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:54.080" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.432" starttime="20170510 08:40:54.079" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:40:59.434" starttime="20170510 08:40:59.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:59.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:40:59.434">${ret_values} = None</msg>
<status endtime="20170510 08:40:59.434" starttime="20170510 08:40:59.433" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:40:59.435" starttime="20170510 08:40:59.435" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:59.471">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:40:59.472" starttime="20170510 08:40:59.471" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:59.472">${has_host} = False</msg>
<status endtime="20170510 08:40:59.472" starttime="20170510 08:40:59.471" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:40:59.473" starttime="20170510 08:40:59.472" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.473" starttime="20170510 08:40:59.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.481">${port_num} = 22</msg>
<status endtime="20170510 08:40:59.481" starttime="20170510 08:40:59.481" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.482">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:40:59.482" starttime="20170510 08:40:59.481" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:40:59.482">${https_num} = 443</msg>
<status endtime="20170510 08:40:59.482" starttime="20170510 08:40:59.482" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.483">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:40:59.483" starttime="20170510 08:40:59.482" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.483" starttime="20170510 08:40:59.480" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.483" starttime="20170510 08:40:59.473" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:40:59.484">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:40:59.484" starttime="20170510 08:40:59.484" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:40:59.485">${has_port} = False</msg>
<status endtime="20170510 08:40:59.485" starttime="20170510 08:40:59.484" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:40:59.487" starttime="20170510 08:40:59.487" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:40:59.488" starttime="20170510 08:40:59.487" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.488" starttime="20170510 08:40:59.486" status="PASS"></status>
</kw>
<status endtime="20170510 08:40:59.488" starttime="20170510 08:40:59.485" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:40:59.488">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.134">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:41:01.134" starttime="20170510 08:40:59.488" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.134" starttime="20170510 08:40:59.470" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.135">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170510 08:41:01.135" starttime="20170510 08:41:01.135" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.136">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status endtime="20170510 08:41:01.136" starttime="20170510 08:41:01.136" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.137">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_meminfo.txt</msg>
<status endtime="20170510 08:41:01.137" starttime="20170510 08:41:01.137" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170510 08:41:01.139" starttime="20170510 08:41:01.138" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.139">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.186">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.186">${stdout} = MemTotal:         432932 kB
MemFree:          271616 kB
MemAvailable:     313088 kB
Buffers:           10488 kB
Cached:            49724 kB
SwapCached:            0 kB
Active:           112784 kB
Inac...</msg>
<msg level="INFO" timestamp="20170510 08:41:01.186">${stderr} = </msg>
<status endtime="20170510 08:41:01.186" starttime="20170510 08:41:01.139" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:01.192" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_meminfo.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:01.192" starttime="20170510 08:41:01.192" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.193" starttime="20170510 08:41:01.191" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.193" starttime="20170510 08:41:01.186" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.193" starttime="20170510 08:41:01.137" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.193" starttime="20170510 08:41:01.136" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.194">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_procinfo.txt</msg>
<status endtime="20170510 08:41:01.194" starttime="20170510 08:41:01.193" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170510 08:41:01.195" starttime="20170510 08:41:01.195" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.196">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.280">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.281">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170510 08:41:01.281">${stderr} = </msg>
<status endtime="20170510 08:41:01.281" starttime="20170510 08:41:01.195" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:01.287" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_procinfo.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:01.287" starttime="20170510 08:41:01.286" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.287" starttime="20170510 08:41:01.285" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.287" starttime="20170510 08:41:01.281" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.287" starttime="20170510 08:41:01.194" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.287" starttime="20170510 08:41:01.193" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.288">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_dmesg.txt</msg>
<status endtime="20170510 08:41:01.288" starttime="20170510 08:41:01.287" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170510 08:41:01.290" starttime="20170510 08:41:01.290" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.291">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.359">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:41:01.360">${stdout} = aspeed-smc 1e620000.flash-controller: control register changed to: 00000640
platform 1e620000.flash-controller:flash@0: mx25l25635e (32768 Kbytes)
5 ofpart partitions found on MTD device bmc
Creating ...</msg>
<msg level="INFO" timestamp="20170510 08:41:01.360">${stderr} = </msg>
<status endtime="20170510 08:41:01.360" starttime="20170510 08:41:01.290" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:01.368" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_dmesg.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:01.368" starttime="20170510 08:41:01.367" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.368" starttime="20170510 08:41:01.366" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.368" starttime="20170510 08:41:01.360" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.368" starttime="20170510 08:41:01.288" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:01.368" starttime="20170510 08:41:01.287" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.369">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_journalctl.txt</msg>
<status endtime="20170510 08:41:01.369" starttime="20170510 08:41:01.369" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170510 08:41:01.370" starttime="20170510 08:41:01.370" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:01.371">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170510 08:41:05.845">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:41:05.847">${stdout} = -- Logs begin at Wed 2017-05-10 08:16:03 UTC, end at Wed 2017-05-10 08:41:05 UTC. --
May 10 08:16:03 witherspoon kernel: Booting Linux on physical CPU 0x0
May 10 08:16:03 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170510 08:41:05.847">${stderr} = </msg>
<status endtime="20170510 08:41:05.847" starttime="20170510 08:41:01.371" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:05.857" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_journalctl.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:05.857" starttime="20170510 08:41:05.855" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:05.857" starttime="20170510 08:41:05.852" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:05.857" starttime="20170510 08:41:05.848" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:05.857" starttime="20170510 08:41:01.369" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:05.857" starttime="20170510 08:41:01.369" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:05.858">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_proc_list.txt</msg>
<status endtime="20170510 08:41:05.858" starttime="20170510 08:41:05.858" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170510 08:41:05.860" starttime="20170510 08:41:05.859" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:05.860">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170510 08:41:06.161">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170510 08:41:06.161">${stdout} = Mem: 161440K used, 271492K free, 14724K shrd, 10488K buff, 49732K cached
CPU:   8% usr  25% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 1.29 1.23 1.20 1/128 2124
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170510 08:41:06.161">${stderr} = </msg>
<status endtime="20170510 08:41:06.161" starttime="20170510 08:41:05.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:06.169" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_proc_list.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:06.169" starttime="20170510 08:41:06.168" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.169" starttime="20170510 08:41:06.167" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.169" starttime="20170510 08:41:06.161" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.169" starttime="20170510 08:41:05.859" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.169" starttime="20170510 08:41:05.858" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:41:01.136" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:41:01.135" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:41:01.135" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:41:01.135" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:40:59.470" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:40:59.435" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:40:59.433" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.170" starttime="20170510 08:40:59.432" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:41:06.172" starttime="20170510 08:41:06.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:06.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:06.172">${ret_values} = None</msg>
<status endtime="20170510 08:41:06.172" starttime="20170510 08:41:06.171" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:41:06.173" starttime="20170510 08:41:06.172" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:06.215">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:41:06.215" starttime="20170510 08:41:06.214" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:06.215">${has_host} = False</msg>
<status endtime="20170510 08:41:06.215" starttime="20170510 08:41:06.214" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:41:06.216" starttime="20170510 08:41:06.216" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.216" starttime="20170510 08:41:06.215" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:06.218">${port_num} = 22</msg>
<status endtime="20170510 08:41:06.218" starttime="20170510 08:41:06.218" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:06.218">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:41:06.219" starttime="20170510 08:41:06.218" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:06.219">${https_num} = 443</msg>
<status endtime="20170510 08:41:06.219" starttime="20170510 08:41:06.219" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:06.220">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:41:06.220" starttime="20170510 08:41:06.219" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.220" starttime="20170510 08:41:06.217" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.220" starttime="20170510 08:41:06.217" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:06.221">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:41:06.221" starttime="20170510 08:41:06.221" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:06.221">${has_port} = False</msg>
<status endtime="20170510 08:41:06.221" starttime="20170510 08:41:06.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:41:06.223" starttime="20170510 08:41:06.223" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:41:06.224" starttime="20170510 08:41:06.223" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.224" starttime="20170510 08:41:06.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:06.224" starttime="20170510 08:41:06.222" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:06.224">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:41:07.870">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:41:07.870" starttime="20170510 08:41:06.224" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:07.870" starttime="20170510 08:41:06.213" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.871">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170510 08:41:07.871" starttime="20170510 08:41:07.871" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.873">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170510 08:41:07.873" starttime="20170510 08:41:07.873" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.875">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_inventory.txt</msg>
<status endtime="20170510 08:41:07.875" starttime="20170510 08:41:07.874" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:07.878">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:07.879" starttime="20170510 08:41:07.878" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.880">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:07.880" starttime="20170510 08:41:07.879" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.881">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:07.881" starttime="20170510 08:41:07.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:07.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:07.881" starttime="20170510 08:41:07.881" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:08.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:08.061" starttime="20170510 08:41:07.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:08.062">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:08.062">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:08.062" starttime="20170510 08:41:07.882" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:08.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:08.062" starttime="20170510 08:41:08.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:08.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:08.063" starttime="20170510 08:41:08.063" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:08.064" starttime="20170510 08:41:07.877" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:08.064" starttime="20170510 08:41:07.877" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:08.064" starttime="20170510 08:41:07.876" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:08.065">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170510 08:41:08.065" starttime="20170510 08:41:08.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:08.065" starttime="20170510 08:41:08.065" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.780">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:09.780">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:09.780" starttime="20170510 08:41:08.066" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:09.781" starttime="20170510 08:41:09.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:09.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:09.781" starttime="20170510 08:41:07.875" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:09.782" starttime="20170510 08:41:09.782" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:09.782">${status} = True</msg>
<status endtime="20170510 08:41:09.782" starttime="20170510 08:41:09.781" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170510 08:41:09.783" starttime="20170510 08:41:09.782" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.786">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:09.786">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170510 08:41:09.787">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status endtime="20170510 08:41:09.787" starttime="20170510 08:41:09.783" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.788" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_inventory.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:09.788" starttime="20170510 08:41:09.788" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:09.789" starttime="20170510 08:41:09.787" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:09.789" starttime="20170510 08:41:07.874" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.789">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_led.txt</msg>
<status endtime="20170510 08:41:09.789" starttime="20170510 08:41:09.789" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.792">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:09.792" starttime="20170510 08:41:09.792" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.793">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:09.793" starttime="20170510 08:41:09.793" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.794">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:09.794" starttime="20170510 08:41:09.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.794">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:09.795" starttime="20170510 08:41:09.794" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.975">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:09.975" starttime="20170510 08:41:09.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:09.975">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:09.976">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:09.976" starttime="20170510 08:41:09.795" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.976">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:09.976" starttime="20170510 08:41:09.976" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:09.977">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:09.977" starttime="20170510 08:41:09.977" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:09.977" starttime="20170510 08:41:09.791" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:09.977" starttime="20170510 08:41:09.791" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:09.977" starttime="20170510 08:41:09.790" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:09.978">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170510 08:41:09.978" starttime="20170510 08:41:09.978" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:09.979" starttime="20170510 08:41:09.978" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.064">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:10.064">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.064" starttime="20170510 08:41:09.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:10.065" starttime="20170510 08:41:10.064" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.065">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.065" starttime="20170510 08:41:09.789" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.066" starttime="20170510 08:41:10.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.066">${status} = True</msg>
<status endtime="20170510 08:41:10.066" starttime="20170510 08:41:10.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170510 08:41:10.067" starttime="20170510 08:41:10.066" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.067">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:10.067">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170510 08:41:10.067">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status endtime="20170510 08:41:10.067" starttime="20170510 08:41:10.067" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.069" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_led.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:10.069" starttime="20170510 08:41:10.068" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.069" starttime="20170510 08:41:10.068" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.069" starttime="20170510 08:41:09.789" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.070">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_sensor_list.txt</msg>
<status endtime="20170510 08:41:10.070" starttime="20170510 08:41:10.069" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.074">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:10.074" starttime="20170510 08:41:10.073" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.075">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:10.075" starttime="20170510 08:41:10.074" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.076">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:10.076" starttime="20170510 08:41:10.075" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.077">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:10.077" starttime="20170510 08:41:10.076" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:10.289" starttime="20170510 08:41:10.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:10.289">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.289" starttime="20170510 08:41:10.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.290">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.290" starttime="20170510 08:41:10.290" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.291" starttime="20170510 08:41:10.290" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.291" starttime="20170510 08:41:10.072" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.291" starttime="20170510 08:41:10.072" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.291" starttime="20170510 08:41:10.071" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.292">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170510 08:41:10.292" starttime="20170510 08:41:10.291" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:10.292" starttime="20170510 08:41:10.292" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.503">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:10.503">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.503" starttime="20170510 08:41:10.292" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:10.504" starttime="20170510 08:41:10.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.504">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.504" starttime="20170510 08:41:10.070" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.505" starttime="20170510 08:41:10.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.505">${status} = True</msg>
<status endtime="20170510 08:41:10.505" starttime="20170510 08:41:10.505" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170510 08:41:10.506" starttime="20170510 08:41:10.506" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.507">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:10.507">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170510 08:41:10.507">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170510 08:41:10.507" starttime="20170510 08:41:10.506" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.508" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_sensor_list.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:10.508" starttime="20170510 08:41:10.508" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.509" starttime="20170510 08:41:10.507" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.509" starttime="20170510 08:41:10.069" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.509">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_elog.txt</msg>
<status endtime="20170510 08:41:10.509" starttime="20170510 08:41:10.509" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:10.512" starttime="20170510 08:41:10.512" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:10.513" starttime="20170510 08:41:10.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.514">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:10.514" starttime="20170510 08:41:10.513" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:10.515" starttime="20170510 08:41:10.514" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:10.693" starttime="20170510 08:41:10.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:10.693">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.693" starttime="20170510 08:41:10.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.694" starttime="20170510 08:41:10.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.694" starttime="20170510 08:41:10.694" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.694" starttime="20170510 08:41:10.511" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.695" starttime="20170510 08:41:10.511" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.695" starttime="20170510 08:41:10.510" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.695">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170510 08:41:10.695" starttime="20170510 08:41:10.695" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:10.696" starttime="20170510 08:41:10.696" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.830">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:10.830">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.830" starttime="20170510 08:41:10.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:10.831" starttime="20170510 08:41:10.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.831">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:10.831" starttime="20170510 08:41:10.510" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:10.832" starttime="20170510 08:41:10.832" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:10.832">${status} = True</msg>
<status endtime="20170510 08:41:10.832" starttime="20170510 08:41:10.832" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170510 08:41:10.833" starttime="20170510 08:41:10.833" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.834">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 48 46 0a 00 00 00 04 51 4a 5a 4b 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494405082920, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 3d c4 b4 00 00 00 04 c1 3e 68 ea 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 a7 75 83 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 aa 7b f7 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 aa 8c bf 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 aa be 2e 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 d7 cc 4d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494405085977, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:10.834">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170510 08:41:10.834">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status endtime="20170510 08:41:10.835" starttime="20170510 08:41:10.833" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.836" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_elog.txt"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:10.836" starttime="20170510 08:41:10.836" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.837" starttime="20170510 08:41:10.835" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:10.837" starttime="20170510 08:41:10.509" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.837">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_BMC_record_log.txt</msg>
<status endtime="20170510 08:41:10.837" starttime="20170510 08:41:10.837" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:10.840">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:10.841" starttime="20170510 08:41:10.840" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:10.841" starttime="20170510 08:41:10.841" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.842">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:10.842" starttime="20170510 08:41:10.841" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:10.842">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:10.843" starttime="20170510 08:41:10.842" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:11.021" starttime="20170510 08:41:10.843" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:11.022">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:11.022" starttime="20170510 08:41:10.843" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:11.022" starttime="20170510 08:41:11.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:11.023" starttime="20170510 08:41:11.023" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.023" starttime="20170510 08:41:10.839" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.023" starttime="20170510 08:41:10.839" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.023" starttime="20170510 08:41:10.838" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:11.024">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170510 08:41:11.024" starttime="20170510 08:41:11.024" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:11.025" starttime="20170510 08:41:11.024" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:11.068">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:11.068">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170510 08:41:11.068" starttime="20170510 08:41:11.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:11.069" starttime="20170510 08:41:11.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.069">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170510 08:41:11.069" starttime="20170510 08:41:10.837" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170510 08:41:11.070">404 != 200</msg>
<status endtime="20170510 08:41:11.070" starttime="20170510 08:41:11.070" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.070">${status} = False</msg>
<status endtime="20170510 08:41:11.070" starttime="20170510 08:41:11.069" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170510 08:41:11.071">Continuing for loop from the next iteration.</msg>
<status endtime="20170510 08:41:11.071" starttime="20170510 08:41:11.071" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.071" starttime="20170510 08:41:11.071" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:10.837" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:07.873" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:07.872" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:07.872" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:07.871" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:06.209" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:06.173" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:06.170" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.072" starttime="20170510 08:41:06.170" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:41:11.074" starttime="20170510 08:41:11.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.074">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:11.074">${ret_values} = None</msg>
<status endtime="20170510 08:41:11.074" starttime="20170510 08:41:11.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:41:11.075" starttime="20170510 08:41:11.075" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.116">Returning from the enclosing user keyword.</msg>
<status endtime="20170510 08:41:11.116" starttime="20170510 08:41:11.116" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.116" starttime="20170510 08:41:11.115" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.116" starttime="20170510 08:41:11.075" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.116" starttime="20170510 08:41:11.072" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.116" starttime="20170510 08:41:11.072" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:41:11.119" starttime="20170510 08:41:11.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.119">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:11.119">${ret_values} = None</msg>
<status endtime="20170510 08:41:11.119" starttime="20170510 08:41:11.118" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:41:11.119" starttime="20170510 08:41:11.119" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:11.161">Dictionary does not contain key 'host'.</msg>
<status endtime="20170510 08:41:11.161" starttime="20170510 08:41:11.161" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.161">${has_host} = False</msg>
<status endtime="20170510 08:41:11.161" starttime="20170510 08:41:11.160" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170510 08:41:11.165" starttime="20170510 08:41:11.165" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.165" starttime="20170510 08:41:11.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:11.167">${port_num} = 22</msg>
<status endtime="20170510 08:41:11.167" starttime="20170510 08:41:11.167" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:11.167">${SSH_PORT} = 22</msg>
<status endtime="20170510 08:41:11.167" starttime="20170510 08:41:11.167" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:11.168">${https_num} = 443</msg>
<status endtime="20170510 08:41:11.168" starttime="20170510 08:41:11.168" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.169">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170510 08:41:11.169" starttime="20170510 08:41:11.168" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.169" starttime="20170510 08:41:11.166" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.169" starttime="20170510 08:41:11.166" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:11.170">Dictionary does not contain key 'port'.</msg>
<status endtime="20170510 08:41:11.170" starttime="20170510 08:41:11.170" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:11.170">${has_port} = False</msg>
<status endtime="20170510 08:41:11.170" starttime="20170510 08:41:11.169" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170510 08:41:11.172" starttime="20170510 08:41:11.172" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170510 08:41:11.173" starttime="20170510 08:41:11.172" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.173" starttime="20170510 08:41:11.171" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:11.173" starttime="20170510 08:41:11.171" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:11.173">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170510 08:41:12.826">Read output: root@witherspoon:~#</msg>
<status endtime="20170510 08:41:12.827" starttime="20170510 08:41:11.173" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:12.827" starttime="20170510 08:41:11.160" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:12.828">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170510 08:41:12.884">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170510 08:41:12.885">${core_files} = </msg>
<status endtime="20170510 08:41:12.885" starttime="20170510 08:41:12.827" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:12.885">@{core_list} = [ ]</msg>
<status endtime="20170510 08:41:12.885" starttime="20170510 08:41:12.885" status="PASS"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170510 08:41:12.903" starttime="20170510 08:41:12.886" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170510 08:41:13.549" starttime="20170510 08:41:12.904" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.549" starttime="20170510 08:41:12.904" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.549" starttime="20170510 08:41:12.903" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:12.886" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:13.550" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:11.159" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:11.120" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:11.117" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.550" starttime="20170510 08:41:11.117" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170510 08:41:13.552" starttime="20170510 08:41:13.552" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:13.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:13.552">${ret_values} = None</msg>
<status endtime="20170510 08:41:13.552" starttime="20170510 08:41:13.551" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170510 08:41:13.553" starttime="20170510 08:41:13.553" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.594">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:13.595" starttime="20170510 08:41:13.594" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:13.595" starttime="20170510 08:41:13.595" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.596">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:13.596" starttime="20170510 08:41:13.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:13.597" starttime="20170510 08:41:13.596" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:13.781" starttime="20170510 08:41:13.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:13.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:13.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:13.781" starttime="20170510 08:41:13.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:13.782" starttime="20170510 08:41:13.782" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:13.783" starttime="20170510 08:41:13.782" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.783" starttime="20170510 08:41:13.594" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.783" starttime="20170510 08:41:13.593" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:13.783" starttime="20170510 08:41:13.593" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.784">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170510 08:41:13.784" starttime="20170510 08:41:13.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:13.784" starttime="20170510 08:41:13.784" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.918">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:13.919">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:13.919" starttime="20170510 08:41:13.785" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:13.919" starttime="20170510 08:41:13.919" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:13.920">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:13.920" starttime="20170510 08:41:13.592" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:13.921" starttime="20170510 08:41:13.921" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:13.921">${status} = True</msg>
<status endtime="20170510 08:41:13.921" starttime="20170510 08:41:13.920" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170510 08:41:13.922" starttime="20170510 08:41:13.921" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.922">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 48 46 0a 00 00 00 04 51 4a 5a 4b 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494405082920, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 3d c4 b4 00 00 00 04 c1 3e 68 ea 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 a7 75 83 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 aa 7b f7 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 aa 8c bf 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 aa be 2e 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 d7 cc 4d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494405085977, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:13.923">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:13.923">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Message': u'org.open_power.Error.Host.Event.Event', u'Resolved': 0, u'associations': [], u'AdditionalDat...</msg>
<status endtime="20170510 08:41:13.923" starttime="20170510 08:41:13.922" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.924">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status endtime="20170510 08:41:13.924" starttime="20170510 08:41:13.923" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.925">${logpath} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel</msg>
<status endtime="20170510 08:41:13.925" starttime="20170510 08:41:13.924" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.926" html="yes">Created file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:13.926" starttime="20170510 08:41:13.925" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:13.929">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:13.930" starttime="20170510 08:41:13.929" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:13.930" starttime="20170510 08:41:13.930" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.931">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:13.931" starttime="20170510 08:41:13.930" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:13.931">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:13.931" starttime="20170510 08:41:13.931" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:14.123" starttime="20170510 08:41:13.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:14.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.124" starttime="20170510 08:41:13.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.125">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.125" starttime="20170510 08:41:14.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.126" starttime="20170510 08:41:14.125" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.126" starttime="20170510 08:41:13.928" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.126" starttime="20170510 08:41:13.928" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.126" starttime="20170510 08:41:13.927" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.127">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status endtime="20170510 08:41:14.127" starttime="20170510 08:41:14.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:14.128" starttime="20170510 08:41:14.127" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:14.213">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.213" starttime="20170510 08:41:14.128" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:14.214" starttime="20170510 08:41:14.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.215">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.215" starttime="20170510 08:41:13.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.216" starttime="20170510 08:41:14.215" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.217">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 48 46 0a 00 00 00 04 51 4a 5a 4b 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:14.217">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:14.217">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 48 46 0a 00 00 00 04 51 4a 5a 4b 42 00 00 07 00 00 00 ...</msg>
<status endtime="20170510 08:41:14.217" starttime="20170510 08:41:14.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.217">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 48 46 0a 00 00 00 04 51 4a 5a 4b 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status endtime="20170510 08:41:14.217" starttime="20170510 08:41:13.926" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.218">Length is 1</msg>
<msg level="INFO" timestamp="20170510 08:41:14.218">${length} = 1</msg>
<status endtime="20170510 08:41:14.218" starttime="20170510 08:41:14.218" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170510 08:41:14.219" starttime="20170510 08:41:14.219" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.221" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:14.221" starttime="20170510 08:41:14.220" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.221" starttime="20170510 08:41:14.220" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.223" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:14.223" starttime="20170510 08:41:14.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.223" starttime="20170510 08:41:14.222" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.223" starttime="20170510 08:41:13.926" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.228">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:14.229" starttime="20170510 08:41:14.228" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:14.230" starttime="20170510 08:41:14.229" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.231">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:14.231" starttime="20170510 08:41:14.230" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.232">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:14.232" starttime="20170510 08:41:14.232" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:14.433" starttime="20170510 08:41:14.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.433">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:14.433">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.433" starttime="20170510 08:41:14.233" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.433">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.434" starttime="20170510 08:41:14.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.434" starttime="20170510 08:41:14.434" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.435" starttime="20170510 08:41:14.227" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.435" starttime="20170510 08:41:14.226" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.435" starttime="20170510 08:41:14.225" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.436">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170510 08:41:14.436" starttime="20170510 08:41:14.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170510 08:41:14.437" starttime="20170510 08:41:14.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.530">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:14.530">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.530" starttime="20170510 08:41:14.437" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170510 08:41:14.531" starttime="20170510 08:41:14.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.531">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:14.531" starttime="20170510 08:41:14.224" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:14.532" starttime="20170510 08:41:14.532" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.533">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 3d c4 b4 00 00 00 04 c1 3e 68 ea 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 a7 75 83 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 aa 7b f7 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 aa 8c bf 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 aa be 2e 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 d7 cc 4d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:14.533">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:14.533">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 3d c4 b4 00 00 00 04 c1 3e 68 ea 42 00 00 08 00 00 00 ...</msg>
<status endtime="20170510 08:41:14.533" starttime="20170510 08:41:14.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.533">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 3d c4 b4 00 00 00 04 c1 3e 68 ea 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 ...</msg>
<status endtime="20170510 08:41:14.533" starttime="20170510 08:41:14.224" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.534">Length is 1</msg>
<msg level="INFO" timestamp="20170510 08:41:14.534">${length} = 1</msg>
<status endtime="20170510 08:41:14.534" starttime="20170510 08:41:14.534" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170510 08:41:14.534" starttime="20170510 08:41:14.534" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.536" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:14.536" starttime="20170510 08:41:14.535" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.536" starttime="20170510 08:41:14.535" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.537" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel"&gt;/tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/20170510084050786686_esel&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:14.537" starttime="20170510 08:41:14.537" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.537" starttime="20170510 08:41:14.536" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.537" starttime="20170510 08:41:14.224" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.537" starttime="20170510 08:41:13.926" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.541">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:41:14.545">${out} = </msg>
<status endtime="20170510 08:41:14.545" starttime="20170510 08:41:14.538" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:14.549">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170510 08:41:14.549" starttime="20170510 08:41:14.548" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:14.549">${status} = False</msg>
<status endtime="20170510 08:41:14.549" starttime="20170510 08:41:14.547" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.550">Returning from the enclosing user keyword.</msg>
<status endtime="20170510 08:41:14.550" starttime="20170510 08:41:14.550" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.551" starttime="20170510 08:41:13.591" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.551" starttime="20170510 08:41:13.553" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.551" starttime="20170510 08:41:13.551" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.551" starttime="20170510 08:41:13.550" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.552" starttime="20170510 08:40:54.079" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.552" starttime="20170510 08:40:54.077" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.552" starttime="20170510 08:40:54.077" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.552" starttime="20170510 08:40:54.077" status="PASS"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170510 08:41:14.710" starttime="20170510 08:41:14.552" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.711" starttime="20170510 08:40:54.076" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.711" starttime="20170510 08:40:47.283" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:14.711" starttime="20170510 08:40:47.283" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:14.717">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:14.718" starttime="20170510 08:41:14.717" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:14.718" starttime="20170510 08:41:14.718" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.719">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:14.719" starttime="20170510 08:41:14.718" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:14.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:14.719" starttime="20170510 08:41:14.719" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:15.106" starttime="20170510 08:41:14.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:15.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:15.106" starttime="20170510 08:41:14.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.106">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:15.107" starttime="20170510 08:41:15.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:15.107" starttime="20170510 08:41:15.107" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.108" starttime="20170510 08:41:14.716" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.108" starttime="20170510 08:41:14.716" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.108" starttime="20170510 08:41:14.715" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.108">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:41:15.108" starttime="20170510 08:41:15.108" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.111">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:15.111" starttime="20170510 08:41:15.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.112">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:15.112" starttime="20170510 08:41:15.111" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.112" starttime="20170510 08:41:15.111" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.112" starttime="20170510 08:41:15.109" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.112" starttime="20170510 08:41:15.109" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.175">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:15.175">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:15.176" starttime="20170510 08:41:15.112" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:15.177" starttime="20170510 08:41:15.177" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:15.178" starttime="20170510 08:41:15.178" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.178" starttime="20170510 08:41:15.177" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.179" starttime="20170510 08:41:15.176" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.179" starttime="20170510 08:41:15.176" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:15.179" starttime="20170510 08:41:14.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:15.179" starttime="20170510 08:41:15.179" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.180">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:15.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:15.180">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170510 08:41:15.180" starttime="20170510 08:41:15.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.180">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170510 08:41:15.181" starttime="20170510 08:41:14.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.181">${host_state} = Quiesced</msg>
<status endtime="20170510 08:41:15.181" starttime="20170510 08:41:14.713" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170510 08:41:15.182" starttime="20170510 08:41:15.181" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.182">${status} = True</msg>
<status endtime="20170510 08:41:15.182" starttime="20170510 08:41:15.181" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.182" starttime="20170510 08:41:14.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.182">${resp} = True</msg>
<status endtime="20170510 08:41:15.182" starttime="20170510 08:41:14.713" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.184">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170510 08:41:15.184" starttime="20170510 08:41:15.184" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.185">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170510 08:41:15.185" starttime="20170510 08:41:15.185" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:15.189" starttime="20170510 08:41:15.188" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:15.189" starttime="20170510 08:41:15.189" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.190">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:15.190" starttime="20170510 08:41:15.190" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:15.191" starttime="20170510 08:41:15.190" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.369">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:15.369" starttime="20170510 08:41:15.192" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:15.369">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:15.370">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:15.370" starttime="20170510 08:41:15.191" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.370">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:15.370" starttime="20170510 08:41:15.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:15.371" starttime="20170510 08:41:15.371" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.371" starttime="20170510 08:41:15.188" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.371" starttime="20170510 08:41:15.187" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.371" starttime="20170510 08:41:15.186" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.372">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170510 08:41:15.372" starttime="20170510 08:41:15.372" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:15.373" starttime="20170510 08:41:15.372" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170510 08:41:15.373" starttime="20170510 08:41:15.373" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:15.375">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170510 08:41:15.375" starttime="20170510 08:41:15.374" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:15.376">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170510 08:41:15.376" starttime="20170510 08:41:15.376" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.376" starttime="20170510 08:41:15.375" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:15.376" starttime="20170510 08:41:15.373" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.157">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170510 08:41:16.158">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:16.158" starttime="20170510 08:41:15.376" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.160">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:16.160" starttime="20170510 08:41:16.159" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:16.160">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:16.161" starttime="20170510 08:41:16.160" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:16.161" starttime="20170510 08:41:16.160" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:16.161" starttime="20170510 08:41:16.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:16.161">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:16.161" starttime="20170510 08:41:15.186" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:16.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:16.162" starttime="20170510 08:41:16.161" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.162">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:16.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:16.162">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170510 08:41:16.162" starttime="20170510 08:41:16.162" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:16.163" starttime="20170510 08:41:15.184" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170510 08:41:16.163" starttime="20170510 08:41:16.163" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:16.168">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:16.168" starttime="20170510 08:41:16.167" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.169">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:16.169" starttime="20170510 08:41:16.168" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.169">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:16.169" starttime="20170510 08:41:16.169" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:16.170">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:16.170" starttime="20170510 08:41:16.169" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:17.020" starttime="20170510 08:41:16.171" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:17.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:17.020">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:17.020" starttime="20170510 08:41:16.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:17.021" starttime="20170510 08:41:17.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:17.021" starttime="20170510 08:41:17.021" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.021" starttime="20170510 08:41:16.167" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.022" starttime="20170510 08:41:16.166" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.022" starttime="20170510 08:41:16.166" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:17.022">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:41:17.022" starttime="20170510 08:41:17.022" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:17.024">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:17.024" starttime="20170510 08:41:17.024" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.025">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:17.025" starttime="20170510 08:41:17.025" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.025" starttime="20170510 08:41:17.025" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.026" starttime="20170510 08:41:17.023" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.026" starttime="20170510 08:41:17.023" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:17.347">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:17.347">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:17.347" starttime="20170510 08:41:17.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:17.349">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:17.349" starttime="20170510 08:41:17.349" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.350">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:17.350" starttime="20170510 08:41:17.350" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.350" starttime="20170510 08:41:17.349" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.350" starttime="20170510 08:41:17.348" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:17.351" starttime="20170510 08:41:17.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:17.351">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:17.351" starttime="20170510 08:41:16.165" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:17.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:17.352" starttime="20170510 08:41:17.351" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:17.352">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:17.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:17.352">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170510 08:41:17.352" starttime="20170510 08:41:17.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:17.353">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170510 08:41:17.353" starttime="20170510 08:41:16.165" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:17.353">${host_state} = Quiesced</msg>
<status endtime="20170510 08:41:17.353" starttime="20170510 08:41:16.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170510 08:41:17.354">Off != Quiesced</msg>
<status endtime="20170510 08:41:17.354" starttime="20170510 08:41:17.353" status="FAIL"></status>
</kw>
<status endtime="20170510 08:41:17.354" starttime="20170510 08:41:16.164" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:27.359">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170510 08:41:27.360" starttime="20170510 08:41:27.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:27.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170510 08:41:27.360" starttime="20170510 08:41:27.360" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:27.361">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170510 08:41:27.361" starttime="20170510 08:41:27.361" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:27.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170510 08:41:27.362" starttime="20170510 08:41:27.361" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:28.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170510 08:41:28.742" starttime="20170510 08:41:27.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:28.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170510 08:41:28.742">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:28.742" starttime="20170510 08:41:27.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:28.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:28.743" starttime="20170510 08:41:28.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:28.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:28.743" starttime="20170510 08:41:28.743" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.744" starttime="20170510 08:41:27.358" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.744" starttime="20170510 08:41:27.358" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.744" starttime="20170510 08:41:27.357" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:28.744">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170510 08:41:28.744" starttime="20170510 08:41:28.744" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:28.747">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:28.747" starttime="20170510 08:41:28.746" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:28.748">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170510 08:41:28.748" starttime="20170510 08:41:28.747" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.748" starttime="20170510 08:41:28.747" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.748" starttime="20170510 08:41:28.745" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:28.748" starttime="20170510 08:41:28.745" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170510 08:41:34.539">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:34.539" starttime="20170510 08:41:28.748" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.541">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:34.541" starttime="20170510 08:41:34.540" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.542">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170510 08:41:34.542" starttime="20170510 08:41:34.542" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.543" starttime="20170510 08:41:34.541" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.543" starttime="20170510 08:41:34.540" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.543" starttime="20170510 08:41:34.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170510 08:41:34.543" starttime="20170510 08:41:27.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170510 08:41:34.544" starttime="20170510 08:41:34.543" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.544">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170510 08:41:34.544">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170510 08:41:34.544">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170510 08:41:34.544" starttime="20170510 08:41:34.544" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.545">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170510 08:41:34.545" starttime="20170510 08:41:27.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.545">${host_state} = Off</msg>
<status endtime="20170510 08:41:34.545" starttime="20170510 08:41:27.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:34.545" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:27.354" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:16.163" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:15.183" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.546">HOST is recovered from quiesced state</msg>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:34.546" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.546" starttime="20170510 08:41:15.183" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.547" starttime="20170510 08:41:15.183" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.547" starttime="20170510 08:41:14.712" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.547" starttime="20170510 08:41:14.712" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.555">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170510 08:41:34.555" starttime="20170510 08:41:34.547" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.556">${FFDC_DIR_PATH} = /tmp/root/14259/obmc-robot/logs/20170510084050786686_TestsTestBasicPoweron/20170510084050786686_PowerOnTest/</msg>
<status endtime="20170510 08:41:34.556" starttime="20170510 08:41:34.555" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170510 08:41:34.556" starttime="20170510 08:41:34.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170510 08:41:34.557" starttime="20170510 08:41:34.557" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.558" html="yes">Directory '&lt;a href="file:///tmp/root/14259/obmc-robot/logs"&gt;/tmp/root/14259/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170510 08:41:34.558" starttime="20170510 08:41:34.557" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.559" html="yes">File '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/test_history.txt"&gt;/tmp/root/14259/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170510 08:41:34.559" starttime="20170510 08:41:34.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.559">${exist} = True</msg>
<status endtime="20170510 08:41:34.559" starttime="20170510 08:41:34.558" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170510 08:41:34.560" starttime="20170510 08:41:34.559" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170510 08:41:34.560" starttime="20170510 08:41:34.560" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.561">${cur_time} = 2017-05-10 08:41:34:561057</msg>
<status endtime="20170510 08:41:34.561" starttime="20170510 08:41:34.561" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.562">${cur_time} = 20170510084134561057</msg>
<status endtime="20170510 08:41:34.562" starttime="20170510 08:41:34.562" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.562">${cur_time} = 20170510084134561057</msg>
<status endtime="20170510 08:41:34.562" starttime="20170510 08:41:34.560" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.563" html="yes">Appended to file '&lt;a href="file:///tmp/root/14259/obmc-robot/logs/test_history.txt"&gt;/tmp/root/14259/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170510 08:41:34.563" starttime="20170510 08:41:34.562" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.563" starttime="20170510 08:41:34.547" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.563" starttime="20170510 08:40:46.463" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.565">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:41:34.565" starttime="20170510 08:41:34.565" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.566">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:41:34.566" starttime="20170510 08:41:34.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.566">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170510 08:41:34.566" starttime="20170510 08:41:34.564" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.567">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170510 08:41:34.567" starttime="20170510 08:41:34.567" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:41:34.575" starttime="20170510 08:41:34.567" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.584">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:41:34.590">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:41:34.590">${output} = /tmp/root/14259/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170510 08:41:34.591" starttime="20170510 08:41:34.575" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170510 08:41:34.609" starttime="20170510 08:41:34.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170510 08:41:34.610" starttime="20170510 08:41:34.610" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.612">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:41:34.612" starttime="20170510 08:41:34.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.612">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170510 08:41:34.612" starttime="20170510 08:41:34.566" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.613">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170510 08:41:34.613" starttime="20170510 08:41:34.612" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:41:34.621" starttime="20170510 08:41:34.613" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.626">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:41:34.633">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:41:34.634">${os_con_pid} = 175</msg>
<status endtime="20170510 08:41:34.634" starttime="20170510 08:41:34.622" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170510 08:41:34.646" starttime="20170510 08:41:34.636" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.646">${cmd_buf} = kill -9 175</msg>
<status endtime="20170510 08:41:34.646" starttime="20170510 08:41:34.646" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:41:34.655" starttime="20170510 08:41:34.647" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.655" starttime="20170510 08:41:34.647" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.659">Running command 'kill -9 175 2&gt;&amp;1'.</msg>
<status endtime="20170510 08:41:34.662" starttime="20170510 08:41:34.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.663">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:41:34.664">${output} = </msg>
<status endtime="20170510 08:41:34.664" starttime="20170510 08:41:34.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170510 08:41:34.676" starttime="20170510 08:41:34.668" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.676" starttime="20170510 08:41:34.667" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.677">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170510 08:41:34.677" starttime="20170510 08:41:34.677" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170510 08:41:34.684" starttime="20170510 08:41:34.677" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170510 08:41:34.689">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170510 08:41:34.694">${rc} = 0</msg>
<msg level="INFO" timestamp="20170510 08:41:34.694">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170510 08:41:34.694" starttime="20170510 08:41:34.685" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170510 08:41:34.706" starttime="20170510 08:41:34.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170510 08:41:34.707" starttime="20170510 08:41:34.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170510 08:41:34.707">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170510 08:41:34.707" starttime="20170510 08:41:34.564" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170510 08:41:34.708">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37966|secure|SecureROM invalid - skipping functionality
 12.01424|ISTEP  6. 5
 12.69857|ISTEP  6. 6
 12.69948|ISTEP  6. 7
 13.46511|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.46513|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.76959|ISTEP  6. 8
 13.82158|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.82159|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.82175|ISTEP  6. 9
 14.45717|ISTEP  6.10
 14.50863|ISTEP  6.11
 14.50967|ISTEP  6.12
 14.76435|ISTEP  7. 2
 16.78008|ISTEP  7. 3
 17.42388|ISTEP  7. 4
 20.23753|ISTEP  7. 5
 20.31586|ISTEP  8. 1
 20.74548|ISTEP  8. 2
 20.79727|ISTEP  8. 3
 20.87519|ISTEP  8. 4
 31.28234|ISTEP  8. 5
 31.30777|ISTEP  8. 6
 31.31061|ISTEP  8. 7
 31.49740|ISTEP  8. 8
 31.52290|ISTEP  8. 9
 31.65032|ISTEP  8.10
 31.65181|ISTEP  8.11
 31.65261|ISTEP  8.12
 32.12796|ISTEP  8.13
 35.83241|ISTEP  8.14
 35.83473|ISTEP  8.15
 35.83635|ISTEP  8.16
 36.09748|ISTEP  8.17
 36.39281|================================================
 36.39282|Error reported by istep (0x1700) PLID 0x90000011
 36.41813|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.41814|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.41815|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.41816|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.41817|  UserData2  Target PEC HUID : 0x0000000000000000
 36.44353|------------------------------------------------
 36.44354|  Callout type             : Procedure Callout
 36.44355|  Procedure                : EPUB_PRC_HB_CODE
 36.44356|  Priority                 : SRCI_PRIORITY_HIGH
 36.44357|------------------------------------------------
 36.44358|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.44358|================================================
 37.45182|ISTEP  8.18
 37.45343|ISTEP  8.19
 37.46810|ISTEP  8.20
 37.47622|ISTEP  9. 1
 37.60385|ISTEP  9. 2
 38.71890|ISTEP  9. 3
 38.74480|ISTEP  9. 4
 39.08696|ISTEP  9. 5
 39.11298|ISTEP  9. 6
 39.16604|ISTEP  9. 7
 39.25537|ISTEP  9. 8
 39.28613|ISTEP 10. 1
 39.86422|ISTEP 10. 2
 39.96286|================================================
 39.96287|Error reported by i2c (0x0700) PLID 0x90000012
 39.98853|  Timed out waiting for command complete.
 39.98854|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 39.98855|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.01447|  UserData1  Status Register Value : 0x0001000000050001
 40.01448|  UserData2  Master Target : 0x0200ffff0190004d
 40.01449|------------------------------------------------
 40.01449|  Callout type             : Hardware Callout
 40.01450|  CPU id                   : 9
 40.01451|  Target                   : Physical:/Sys0/Node0/Proc1
 40.01452|  Deconfig State           : NO_DECONFIG
 40.01453|  GARD Error Type          : GARD_NULL
 40.01454|  Priority                 : SRCI_PRIORITY_HIGH
 40.01455|------------------------------------------------
 40.01456|  Callout type             : Procedure Callout
 40.01456|  Procedure                : EPUB_PRC_HB_CODE
 40.01457|  Priority                 : SRCI_PRIORITY_LOW
 40.01458|------------------------------------------------
 40.01459|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.01460|================================================
 42.74393|ISTEP 10. 3
 42.74632|ISTEP 11. 1
 42.77478|ISTEP 12. 1
 42.82694|ISTEP 13. 1
 42.98884|ISTEP 13. 2
 43.09480|ISTEP 13. 3
 43.16431|ISTEP 13. 4
 43.18873|ISTEP 13. 6
 43.39770|ISTEP 13. 7
 43.39934|ISTEP 13. 8
 45.30136|ISTEP 13. 9
 45.86911|ISTEP 13.10
 47.09838|ISTEP 13.11
 47.97750|ISTEP 13.12
 47.97993|ISTEP 13.13
 48.09605|ISTEP 14. 1
 65.56215|ISTEP 14. 2
 65.71930|ISTEP 14. 3
 65.85401|ISTEP 14. 4
 65.85671|ISTEP 14. 5
 66.21967|ISTEP 14. 6
 66.27694|ISTEP 14. 7</msg>
<status endtime="20170510 08:41:34.708" starttime="20170510 08:41:34.708" status="PASS"></status>
</kw>
<status endtime="20170510 08:41:34.709" starttime="20170510 08:40:46.463" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170510 08:41:34.709" starttime="20170510 08:30:03.058" status="FAIL" critical="yes">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170510 08:41:34.710" starttime="20170510 08:30:03.024" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170510 08:41:34.715" starttime="20170510 08:29:54.675" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
