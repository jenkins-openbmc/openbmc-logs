<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170630 17:42:18.451">
<suite id="s1" name="Tests" source="/tmp/fspcibld/21417/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:18.862">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:42:18.862" status="FAIL" endtime="20170630 17:42:18.863"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:18.863">${has_host} = False</msg>
<status starttime="20170630 17:42:18.862" status="PASS" endtime="20170630 17:42:18.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:42:18.863" status="PASS" endtime="20170630 17:42:18.864"></status>
</kw>
<status starttime="20170630 17:42:18.863" status="PASS" endtime="20170630 17:42:18.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:18.865">${port_num} = 22</msg>
<status starttime="20170630 17:42:18.865" status="PASS" endtime="20170630 17:42:18.865"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:18.866">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:42:18.865" status="PASS" endtime="20170630 17:42:18.866"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:18.866">${https_num} = 443</msg>
<status starttime="20170630 17:42:18.866" status="PASS" endtime="20170630 17:42:18.866"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:18.867">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:42:18.866" status="PASS" endtime="20170630 17:42:18.867"></status>
</kw>
<status starttime="20170630 17:42:18.865" status="PASS" endtime="20170630 17:42:18.867"></status>
</kw>
<status starttime="20170630 17:42:18.864" status="PASS" endtime="20170630 17:42:18.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:18.868">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:42:18.868" status="FAIL" endtime="20170630 17:42:18.868"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:18.868">${has_port} = False</msg>
<status starttime="20170630 17:42:18.867" status="PASS" endtime="20170630 17:42:18.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:42:18.870" status="PASS" endtime="20170630 17:42:18.870"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:42:18.870" status="PASS" endtime="20170630 17:42:18.870"></status>
</kw>
<status starttime="20170630 17:42:18.869" status="PASS" endtime="20170630 17:42:18.871"></status>
</kw>
<status starttime="20170630 17:42:18.868" status="PASS" endtime="20170630 17:42:18.871"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:18.871">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:42:20.574">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:42:18.871" status="PASS" endtime="20170630 17:42:20.574"></status>
</kw>
<status starttime="20170630 17:42:18.861" status="PASS" endtime="20170630 17:42:20.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:20.576">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170630 17:42:20.652">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:42:20.653">${output} = VERSION_ID="v1.99.7-71-g89a1a35"</msg>
<msg level="INFO" timestamp="20170630 17:42:20.653">${stderr} = </msg>
<status starttime="20170630 17:42:20.575" status="PASS" endtime="20170630 17:42:20.653"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:20.653">Length is 0</msg>
<status starttime="20170630 17:42:20.653" status="PASS" endtime="20170630 17:42:20.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:20.654">VERSION_ID="v1.99.7-71-g89a1a35"</msg>
<status starttime="20170630 17:42:20.654" status="PASS" endtime="20170630 17:42:20.654"></status>
</kw>
<status starttime="20170630 17:42:20.575" status="PASS" endtime="20170630 17:42:20.654"></status>
</kw>
<status starttime="20170630 17:42:20.575" status="PASS" endtime="20170630 17:42:20.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:20.656">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170630 17:42:20.843">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170630 17:42:20.843">${stdout} = </msg>
<msg level="INFO" timestamp="20170630 17:42:20.843">${stderr} = sh: line 1:  1111 Segmentation fault      (core dumped) /usr/sbin/pflash -r /tmp/out.txt -P VERSION
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170630 17:42:20.655" status="PASS" endtime="20170630 17:42:20.843"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:20.843">Length is 157</msg>
<msg level="FAIL" timestamp="20170630 17:42:20.844">'sh: line 1:  1111 Segmentation fault      (core dumped) /usr/sbin/pflash -r /tmp/out.txt -P VERSION
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170630 17:42:20.843" status="FAIL" endtime="20170630 17:42:20.844"></status>
</kw>
<status starttime="20170630 17:42:20.655" status="FAIL" endtime="20170630 17:42:20.844"></status>
</kw>
<status starttime="20170630 17:42:20.655" status="FAIL" endtime="20170630 17:42:20.844"></status>
</kw>
<status starttime="20170630 17:42:20.655" status="PASS" endtime="20170630 17:42:20.844"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:20.847">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:42:20.847" status="FAIL" endtime="20170630 17:42:20.847"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:20.847">${has_host} = False</msg>
<status starttime="20170630 17:42:20.846" status="PASS" endtime="20170630 17:42:20.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:42:20.848" status="PASS" endtime="20170630 17:42:20.848"></status>
</kw>
<status starttime="20170630 17:42:20.847" status="PASS" endtime="20170630 17:42:20.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:20.850">${port_num} = 22</msg>
<status starttime="20170630 17:42:20.849" status="PASS" endtime="20170630 17:42:20.850"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:20.850">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:42:20.850" status="PASS" endtime="20170630 17:42:20.850"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:20.851">${https_num} = 443</msg>
<status starttime="20170630 17:42:20.850" status="PASS" endtime="20170630 17:42:20.851"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:20.851">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:42:20.851" status="PASS" endtime="20170630 17:42:20.851"></status>
</kw>
<status starttime="20170630 17:42:20.849" status="PASS" endtime="20170630 17:42:20.852"></status>
</kw>
<status starttime="20170630 17:42:20.848" status="PASS" endtime="20170630 17:42:20.852"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:20.853">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:42:20.852" status="FAIL" endtime="20170630 17:42:20.853"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:20.853">${has_port} = False</msg>
<status starttime="20170630 17:42:20.852" status="PASS" endtime="20170630 17:42:20.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:42:20.854" status="PASS" endtime="20170630 17:42:20.855"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:42:20.855" status="PASS" endtime="20170630 17:42:20.855"></status>
</kw>
<status starttime="20170630 17:42:20.854" status="PASS" endtime="20170630 17:42:20.855"></status>
</kw>
<status starttime="20170630 17:42:20.853" status="PASS" endtime="20170630 17:42:20.855"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:20.856">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:42:22.637">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:42:20.855" status="PASS" endtime="20170630 17:42:22.637"></status>
</kw>
<status starttime="20170630 17:42:20.845" status="PASS" endtime="20170630 17:42:22.637"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:22.638">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170630 17:42:22.715">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:42:22.715">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170630 17:42:22.715">${stderr} = </msg>
<status starttime="20170630 17:42:22.637" status="PASS" endtime="20170630 17:42:22.715"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:22.716">Length is 0</msg>
<status starttime="20170630 17:42:22.715" status="PASS" endtime="20170630 17:42:22.716"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:22.716">Length is 11</msg>
<status starttime="20170630 17:42:22.716" status="PASS" endtime="20170630 17:42:22.716"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:22.716">${bmc_model} = Witherspoon</msg>
<status starttime="20170630 17:42:20.845" status="PASS" endtime="20170630 17:42:22.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:22.717">BMC Model=Witherspoon</msg>
<status starttime="20170630 17:42:22.717" status="PASS" endtime="20170630 17:42:22.717"></status>
</kw>
<status starttime="20170630 17:42:20.845" status="PASS" endtime="20170630 17:42:22.717"></status>
</kw>
<status starttime="20170630 17:42:20.844" status="PASS" endtime="20170630 17:42:22.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:22.719">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:42:22.719" status="FAIL" endtime="20170630 17:42:22.719"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:22.719">${has_host} = False</msg>
<status starttime="20170630 17:42:22.718" status="PASS" endtime="20170630 17:42:22.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:42:22.720" status="PASS" endtime="20170630 17:42:22.720"></status>
</kw>
<status starttime="20170630 17:42:22.720" status="PASS" endtime="20170630 17:42:22.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:22.722">${port_num} = 22</msg>
<status starttime="20170630 17:42:22.722" status="PASS" endtime="20170630 17:42:22.722"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:22.722">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:42:22.722" status="PASS" endtime="20170630 17:42:22.722"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:22.723">${https_num} = 443</msg>
<status starttime="20170630 17:42:22.723" status="PASS" endtime="20170630 17:42:22.723"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:22.724">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:42:22.723" status="PASS" endtime="20170630 17:42:22.724"></status>
</kw>
<status starttime="20170630 17:42:22.721" status="PASS" endtime="20170630 17:42:22.724"></status>
</kw>
<status starttime="20170630 17:42:22.721" status="PASS" endtime="20170630 17:42:22.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:22.725">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:42:22.725" status="FAIL" endtime="20170630 17:42:22.725"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:22.725">${has_port} = False</msg>
<status starttime="20170630 17:42:22.724" status="PASS" endtime="20170630 17:42:22.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:42:22.726" status="PASS" endtime="20170630 17:42:22.727"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:42:22.727" status="PASS" endtime="20170630 17:42:22.727"></status>
</kw>
<status starttime="20170630 17:42:22.726" status="PASS" endtime="20170630 17:42:22.727"></status>
</kw>
<status starttime="20170630 17:42:22.725" status="PASS" endtime="20170630 17:42:22.727"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:22.728">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:42:24.470">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:42:22.728" status="PASS" endtime="20170630 17:42:24.470"></status>
</kw>
<status starttime="20170630 17:42:22.718" status="PASS" endtime="20170630 17:42:24.470"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.472">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170630 17:42:24.548">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:42:24.548">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170630 17:42:24.549">${stderr} = </msg>
<status starttime="20170630 17:42:24.471" status="PASS" endtime="20170630 17:42:24.549"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.549">Length is 0</msg>
<status starttime="20170630 17:42:24.549" status="PASS" endtime="20170630 17:42:24.549"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:24.549">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170630 17:42:24.471" status="PASS" endtime="20170630 17:42:24.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170630 17:42:24.550" status="PASS" endtime="20170630 17:42:24.550"></status>
</kw>
<status starttime="20170630 17:42:22.718" status="PASS" endtime="20170630 17:42:24.550"></status>
</kw>
<status starttime="20170630 17:42:22.717" status="PASS" endtime="20170630 17:42:24.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170630 17:42:24.550" status="PASS" endtime="20170630 17:42:24.551"></status>
</kw>
<status starttime="20170630 17:42:18.861" status="PASS" endtime="20170630 17:42:24.551"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/21417/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/21417/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.629">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:24.629" status="PASS" endtime="20170630 17:42:24.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:24.631" status="PASS" endtime="20170630 17:42:24.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.632">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:24.632" status="PASS" endtime="20170630 17:42:24.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:24.633" status="PASS" endtime="20170630 17:42:24.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:24.634" status="PASS" endtime="20170630 17:42:24.817"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:24.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:24.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:24.633" status="PASS" endtime="20170630 17:42:24.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:24.818" status="PASS" endtime="20170630 17:42:24.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:24.819" status="PASS" endtime="20170630 17:42:24.819"></status>
</kw>
<status starttime="20170630 17:42:24.628" status="PASS" endtime="20170630 17:42:24.820"></status>
</kw>
<status starttime="20170630 17:42:24.628" status="PASS" endtime="20170630 17:42:24.820"></status>
</kw>
<status starttime="20170630 17:42:24.627" status="PASS" endtime="20170630 17:42:24.820"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:24.826">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:24.826" status="PASS" endtime="20170630 17:42:24.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:24.827" status="PASS" endtime="20170630 17:42:24.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.828">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:24.828" status="PASS" endtime="20170630 17:42:24.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:24.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:24.829" status="PASS" endtime="20170630 17:42:24.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.027">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:24.830" status="PASS" endtime="20170630 17:42:25.027"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:25.028">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:24.830" status="PASS" endtime="20170630 17:42:25.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:25.028" status="PASS" endtime="20170630 17:42:25.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:25.028" status="PASS" endtime="20170630 17:42:25.029"></status>
</kw>
<status starttime="20170630 17:42:24.825" status="PASS" endtime="20170630 17:42:25.029"></status>
</kw>
<status starttime="20170630 17:42:24.824" status="PASS" endtime="20170630 17:42:25.029"></status>
</kw>
<status starttime="20170630 17:42:24.824" status="PASS" endtime="20170630 17:42:25.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.030">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170630 17:42:25.030" status="PASS" endtime="20170630 17:42:25.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.033">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:25.031" status="PASS" endtime="20170630 17:42:25.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.034">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:25.034" status="PASS" endtime="20170630 17:42:25.034"></status>
</kw>
<status starttime="20170630 17:42:25.033" status="PASS" endtime="20170630 17:42:25.034"></status>
</kw>
<status starttime="20170630 17:42:25.031" status="PASS" endtime="20170630 17:42:25.034"></status>
</kw>
<status starttime="20170630 17:42:25.030" status="PASS" endtime="20170630 17:42:25.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:25.097">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:25.035" status="PASS" endtime="20170630 17:42:25.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.099">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:25.099" status="PASS" endtime="20170630 17:42:25.099"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.100">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:25.100" status="PASS" endtime="20170630 17:42:25.100"></status>
</kw>
<status starttime="20170630 17:42:25.099" status="PASS" endtime="20170630 17:42:25.100"></status>
</kw>
<status starttime="20170630 17:42:25.098" status="PASS" endtime="20170630 17:42:25.101"></status>
</kw>
<status starttime="20170630 17:42:25.098" status="PASS" endtime="20170630 17:42:25.101"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.101">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:24.823" status="PASS" endtime="20170630 17:42:25.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:25.101" status="PASS" endtime="20170630 17:42:25.101"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.102">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:25.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:25.102">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:25.102" status="PASS" endtime="20170630 17:42:25.102"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.102">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170630 17:42:24.822" status="PASS" endtime="20170630 17:42:25.102"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.103">${host_state} = Off</msg>
<status starttime="20170630 17:42:24.821" status="PASS" endtime="20170630 17:42:25.103"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:25.104">Off != Quiesced</msg>
<status starttime="20170630 17:42:25.103" status="FAIL" endtime="20170630 17:42:25.104"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.104">${status} = False</msg>
<status starttime="20170630 17:42:25.103" status="PASS" endtime="20170630 17:42:25.104"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.104">${status} = False</msg>
<status starttime="20170630 17:42:24.821" status="PASS" endtime="20170630 17:42:25.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170630 17:42:25.105" status="PASS" endtime="20170630 17:42:25.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170630 17:42:25.105" status="PASS" endtime="20170630 17:42:25.105"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.114">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170630 17:42:25.106" status="PASS" endtime="20170630 17:42:25.114"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.122">${FFDC_DIR_PATH} = </msg>
<status starttime="20170630 17:42:25.114" status="PASS" endtime="20170630 17:42:25.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.124">${cur_time} = 2017-06-30 17:42:25:123489</msg>
<status starttime="20170630 17:42:25.123" status="PASS" endtime="20170630 17:42:25.124"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.124">${cur_time} = 20170630174225123489</msg>
<status starttime="20170630 17:42:25.124" status="PASS" endtime="20170630 17:42:25.124"></status>
</kw>
<status starttime="20170630 17:42:25.123" status="PASS" endtime="20170630 17:42:25.124"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.128">${FFDC_TIME} = 20170630174225123489</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.129">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170630 17:42:25.129" status="PASS" endtime="20170630 17:42:25.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.130">${suite_name} = 20170630174225123489_TestsSecurityTestSsl</msg>
<status starttime="20170630 17:42:25.130" status="PASS" endtime="20170630 17:42:25.130"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.131">${test_name} = TestSSLConnection</msg>
<status starttime="20170630 17:42:25.130" status="PASS" endtime="20170630 17:42:25.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.132">${test_name} = 20170630174225123489_TestSSLConnection</msg>
<status starttime="20170630 17:42:25.131" status="PASS" endtime="20170630 17:42:25.132"></status>
</kw>
<status starttime="20170630 17:42:25.129" status="PASS" endtime="20170630 17:42:25.132"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.132">${FFDC_DIR_PATH} = /tmp/fspcibld/21417/obmc-robot/logs/20170630174225123489_TestsSecurityTestSsl/20170630174225123489_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170630 17:42:25.137">${FFDC_PREFIX} = 20170630174225123489_</msg>
<status starttime="20170630 17:42:25.123" status="PASS" endtime="20170630 17:42:25.137"></status>
</kw>
<status starttime="20170630 17:42:25.122" status="PASS" endtime="20170630 17:42:25.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170630 17:42:25.138" status="PASS" endtime="20170630 17:42:25.138"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.139" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs"&gt;/tmp/fspcibld/21417/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170630 17:42:25.139" status="PASS" endtime="20170630 17:42:25.139"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:25.141">File '/tmp/fspcibld/21417/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170630 17:42:25.140" status="FAIL" endtime="20170630 17:42:25.141"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.141">${exist} = False</msg>
<status starttime="20170630 17:42:25.140" status="PASS" endtime="20170630 17:42:25.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.142" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:42:25.142" status="PASS" endtime="20170630 17:42:25.142"></status>
</kw>
<status starttime="20170630 17:42:25.141" status="PASS" endtime="20170630 17:42:25.142"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170630 17:42:25.142" status="PASS" endtime="20170630 17:42:25.143"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.144">${cur_time} = 2017-06-30 17:42:25:143454</msg>
<status starttime="20170630 17:42:25.143" status="PASS" endtime="20170630 17:42:25.144"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.144">${cur_time} = 20170630174225143454</msg>
<status starttime="20170630 17:42:25.144" status="PASS" endtime="20170630 17:42:25.144"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.145">${cur_time} = 20170630174225143454</msg>
<status starttime="20170630 17:42:25.143" status="PASS" endtime="20170630 17:42:25.145"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.145" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:42:25.145" status="PASS" endtime="20170630 17:42:25.145"></status>
</kw>
<status starttime="20170630 17:42:25.106" status="PASS" endtime="20170630 17:42:25.146"></status>
</kw>
<status starttime="20170630 17:42:24.820" status="PASS" endtime="20170630 17:42:25.146"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20170630 17:42:24.626" status="PASS" endtime="20170630 17:42:25.146"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170630 17:42:25.147">Delete All Sessions</msg>
<status starttime="20170630 17:42:25.147" status="PASS" endtime="20170630 17:42:25.147"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170630 17:42:24.553" status="PASS" endtime="20170630 17:42:25.147"></status>
</suite>
<status starttime="20170630 17:42:24.551" status="PASS" endtime="20170630 17:42:25.149"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/21417/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.183">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.183" status="PASS" endtime="20170630 17:42:25.183"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.184">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.183" status="PASS" endtime="20170630 17:42:25.184"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.184">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.182" status="PASS" endtime="20170630 17:42:25.184"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.186">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.185" status="PASS" endtime="20170630 17:42:25.186"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.186">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.186" status="PASS" endtime="20170630 17:42:25.186"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.187">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:42:25.185" status="PASS" endtime="20170630 17:42:25.187"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.187">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170630 17:42:25.187" status="PASS" endtime="20170630 17:42:25.187"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:42:25.188" status="PASS" endtime="20170630 17:42:25.188"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.192">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:42:25.195">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:42:25.195">${output} = /tmp/fspcibld/21417/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170630 17:42:25.188" status="PASS" endtime="20170630 17:42:25.195"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170630 17:42:25.197" status="PASS" endtime="20170630 17:42:25.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170630 17:42:25.198" status="PASS" endtime="20170630 17:42:25.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.199">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:42:25.199" status="PASS" endtime="20170630 17:42:25.199"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.199">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:42:25.187" status="PASS" endtime="20170630 17:42:25.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.200">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170630 17:42:25.200" status="PASS" endtime="20170630 17:42:25.200"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:42:25.200" status="PASS" endtime="20170630 17:42:25.201"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.205">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:42:25.211">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:42:25.212">${os_con_pid} = </msg>
<status starttime="20170630 17:42:25.201" status="PASS" endtime="20170630 17:42:25.212"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170630 17:42:25.214" status="PASS" endtime="20170630 17:42:25.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.215">${cmd_buf} = kill -9 </msg>
<status starttime="20170630 17:42:25.215" status="PASS" endtime="20170630 17:42:25.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:42:25.216" status="PASS" endtime="20170630 17:42:25.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.217">${rc} = None</msg>
<msg level="INFO" timestamp="20170630 17:42:25.217">${output} = None</msg>
<status starttime="20170630 17:42:25.216" status="PASS" endtime="20170630 17:42:25.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170630 17:42:25.217" status="PASS" endtime="20170630 17:42:25.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:25.220">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status starttime="20170630 17:42:25.219" status="FAIL" endtime="20170630 17:42:25.220"></status>
</kw>
<status starttime="20170630 17:42:25.219" status="PASS" endtime="20170630 17:42:25.220"></status>
</kw>
<status starttime="20170630 17:42:25.218" status="PASS" endtime="20170630 17:42:25.220"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.220">${output} = </msg>
<status starttime="20170630 17:42:25.220" status="PASS" endtime="20170630 17:42:25.221"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.221">${loc_quiet} = 1</msg>
<status starttime="20170630 17:42:25.221" status="PASS" endtime="20170630 17:42:25.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170630 17:42:25.222" status="PASS" endtime="20170630 17:42:25.415"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.416">${rc} = 1</msg>
<msg level="INFO" timestamp="20170630 17:42:25.416">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170630 17:42:25.221" status="PASS" endtime="20170630 17:42:25.416"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.416">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170630 17:42:25.184" status="PASS" endtime="20170630 17:42:25.416"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.419" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170630 17:42:25.419" status="PASS" endtime="20170630 17:42:25.419"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.420">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170630 17:42:25.420" status="PASS" endtime="20170630 17:42:25.420"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:42:25.421" status="PASS" endtime="20170630 17:42:25.421"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.424">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:42:25.427">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:42:25.427">${output} = /tmp/fspcibld/21417/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170630 17:42:25.421" status="PASS" endtime="20170630 17:42:25.427"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170630 17:42:25.429" status="PASS" endtime="20170630 17:42:25.430"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170630 17:42:25.430" status="PASS" endtime="20170630 17:42:25.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.432">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:42:25.431" status="PASS" endtime="20170630 17:42:25.432"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.432">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:42:25.419" status="PASS" endtime="20170630 17:42:25.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.433">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170630 17:42:25.432" status="PASS" endtime="20170630 17:42:25.433"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:42:25.433" status="PASS" endtime="20170630 17:42:25.434"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.437">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170630 17:42:25.440">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:42:25.440">${output} = </msg>
<status starttime="20170630 17:42:25.434" status="PASS" endtime="20170630 17:42:25.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170630 17:42:25.442" status="PASS" endtime="20170630 17:42:25.445"></status>
</kw>
<status starttime="20170630 17:42:25.182" status="PASS" endtime="20170630 17:42:25.446"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.447">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.454">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170630 17:42:25.453" status="PASS" endtime="20170630 17:42:25.454"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.456">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170630 17:42:25.455" status="PASS" endtime="20170630 17:42:25.456"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.461">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:25.460" status="PASS" endtime="20170630 17:42:25.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:25.463" status="PASS" endtime="20170630 17:42:25.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.464">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:25.463" status="PASS" endtime="20170630 17:42:25.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:25.464" status="PASS" endtime="20170630 17:42:25.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:25.466" status="PASS" endtime="20170630 17:42:25.973"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:25.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:25.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:25.465" status="PASS" endtime="20170630 17:42:25.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:25.974" status="PASS" endtime="20170630 17:42:25.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:25.975" status="PASS" endtime="20170630 17:42:25.975"></status>
</kw>
<status starttime="20170630 17:42:25.459" status="PASS" endtime="20170630 17:42:25.975"></status>
</kw>
<status starttime="20170630 17:42:25.458" status="PASS" endtime="20170630 17:42:25.975"></status>
</kw>
<status starttime="20170630 17:42:25.457" status="PASS" endtime="20170630 17:42:25.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170630 17:42:25.976" status="PASS" endtime="20170630 17:42:25.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:25.976" status="PASS" endtime="20170630 17:42:25.977"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170630 17:42:25.977" status="PASS" endtime="20170630 17:42:25.977"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:25.979">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170630 17:42:25.978" status="PASS" endtime="20170630 17:42:25.979"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:25.980">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170630 17:42:25.980" status="PASS" endtime="20170630 17:42:25.980"></status>
</kw>
<status starttime="20170630 17:42:25.979" status="PASS" endtime="20170630 17:42:25.980"></status>
</kw>
<status starttime="20170630 17:42:25.977" status="PASS" endtime="20170630 17:42:25.980"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.483">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170630 17:42:26.484">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:25.981" status="PASS" endtime="20170630 17:42:26.484"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.485">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:26.484" status="PASS" endtime="20170630 17:42:26.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:26.486">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:26.486" status="PASS" endtime="20170630 17:42:26.486"></status>
</kw>
<status starttime="20170630 17:42:26.485" status="PASS" endtime="20170630 17:42:26.486"></status>
</kw>
<status starttime="20170630 17:42:26.484" status="PASS" endtime="20170630 17:42:26.487"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:26.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:25.456" status="PASS" endtime="20170630 17:42:26.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:26.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:26.487" status="PASS" endtime="20170630 17:42:26.488"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.488">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:26.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:26.488">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:26.488" status="PASS" endtime="20170630 17:42:26.488"></status>
</kw>
<status starttime="20170630 17:42:25.454" status="PASS" endtime="20170630 17:42:26.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170630 17:42:26.489" status="PASS" endtime="20170630 17:42:26.489"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:26.493">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:26.493" status="PASS" endtime="20170630 17:42:26.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:26.494" status="PASS" endtime="20170630 17:42:26.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.495">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:26.494" status="PASS" endtime="20170630 17:42:26.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:26.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:26.495" status="PASS" endtime="20170630 17:42:26.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:27.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:26.496" status="PASS" endtime="20170630 17:42:27.561"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:27.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:27.561">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:26.496" status="PASS" endtime="20170630 17:42:27.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:27.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:27.561" status="PASS" endtime="20170630 17:42:27.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:27.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:27.562" status="PASS" endtime="20170630 17:42:27.562"></status>
</kw>
<status starttime="20170630 17:42:26.492" status="PASS" endtime="20170630 17:42:27.563"></status>
</kw>
<status starttime="20170630 17:42:26.492" status="PASS" endtime="20170630 17:42:27.563"></status>
</kw>
<status starttime="20170630 17:42:26.492" status="PASS" endtime="20170630 17:42:27.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:27.563">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170630 17:42:27.563" status="PASS" endtime="20170630 17:42:27.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:27.565">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:27.565" status="PASS" endtime="20170630 17:42:27.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:27.566">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:27.566" status="PASS" endtime="20170630 17:42:27.567"></status>
</kw>
<status starttime="20170630 17:42:27.566" status="PASS" endtime="20170630 17:42:27.567"></status>
</kw>
<status starttime="20170630 17:42:27.564" status="PASS" endtime="20170630 17:42:27.567"></status>
</kw>
<status starttime="20170630 17:42:27.564" status="PASS" endtime="20170630 17:42:27.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.571">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:31.572">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:27.567" status="PASS" endtime="20170630 17:42:31.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.574">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:31.573" status="PASS" endtime="20170630 17:42:31.574"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.575">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:31.575" status="PASS" endtime="20170630 17:42:31.575"></status>
</kw>
<status starttime="20170630 17:42:31.574" status="PASS" endtime="20170630 17:42:31.575"></status>
</kw>
<status starttime="20170630 17:42:31.573" status="PASS" endtime="20170630 17:42:31.575"></status>
</kw>
<status starttime="20170630 17:42:31.572" status="PASS" endtime="20170630 17:42:31.575"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:31.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:26.491" status="PASS" endtime="20170630 17:42:31.576"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:31.576" status="PASS" endtime="20170630 17:42:31.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.577">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:31.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:31.577">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:31.577" status="PASS" endtime="20170630 17:42:31.577"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:31.577">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170630 17:42:26.490" status="PASS" endtime="20170630 17:42:31.577"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:31.578">${host_state} = Off</msg>
<status starttime="20170630 17:42:26.490" status="PASS" endtime="20170630 17:42:31.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170630 17:42:31.578" status="PASS" endtime="20170630 17:42:31.578"></status>
</kw>
<status starttime="20170630 17:42:26.490" status="PASS" endtime="20170630 17:42:31.578"></status>
</kw>
<status starttime="20170630 17:42:26.489" status="PASS" endtime="20170630 17:42:31.578"></status>
</kw>
<status starttime="20170630 17:42:25.452" status="PASS" endtime="20170630 17:42:31.578"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.583">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:31.583" status="PASS" endtime="20170630 17:42:31.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:31.584" status="PASS" endtime="20170630 17:42:31.584"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.585">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:31.584" status="PASS" endtime="20170630 17:42:31.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:31.585" status="PASS" endtime="20170630 17:42:31.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:31.586" status="PASS" endtime="20170630 17:42:31.762"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:31.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:31.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:31.586" status="PASS" endtime="20170630 17:42:31.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:31.762" status="PASS" endtime="20170630 17:42:31.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:31.763" status="PASS" endtime="20170630 17:42:31.763"></status>
</kw>
<status starttime="20170630 17:42:31.582" status="PASS" endtime="20170630 17:42:31.763"></status>
</kw>
<status starttime="20170630 17:42:31.582" status="PASS" endtime="20170630 17:42:31.763"></status>
</kw>
<status starttime="20170630 17:42:31.581" status="PASS" endtime="20170630 17:42:31.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.764">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:42:31.764" status="PASS" endtime="20170630 17:42:31.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:31.766">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:42:31.766" status="PASS" endtime="20170630 17:42:31.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:31.767">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:42:31.767" status="PASS" endtime="20170630 17:42:31.767"></status>
</kw>
<status starttime="20170630 17:42:31.766" status="PASS" endtime="20170630 17:42:31.767"></status>
</kw>
<status starttime="20170630 17:42:31.765" status="PASS" endtime="20170630 17:42:31.767"></status>
</kw>
<status starttime="20170630 17:42:31.764" status="PASS" endtime="20170630 17:42:31.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.648">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:32.649">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:31.768" status="PASS" endtime="20170630 17:42:32.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.651">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:32.650" status="PASS" endtime="20170630 17:42:32.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:32.651">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:32.651" status="PASS" endtime="20170630 17:42:32.652"></status>
</kw>
<status starttime="20170630 17:42:32.651" status="PASS" endtime="20170630 17:42:32.652"></status>
</kw>
<status starttime="20170630 17:42:32.650" status="PASS" endtime="20170630 17:42:32.652"></status>
</kw>
<status starttime="20170630 17:42:32.649" status="PASS" endtime="20170630 17:42:32.652"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:32.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:31.580" status="PASS" endtime="20170630 17:42:32.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:32.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:32.652" status="PASS" endtime="20170630 17:42:32.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.653">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:32.653">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:32.653">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:32.653" status="PASS" endtime="20170630 17:42:32.654"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:32.654">${state} = Off</msg>
<status starttime="20170630 17:42:31.580" status="PASS" endtime="20170630 17:42:32.654"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:32.654">${boot_progress} = Off</msg>
<status starttime="20170630 17:42:31.579" status="PASS" endtime="20170630 17:42:32.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170630 17:42:32.655" status="PASS" endtime="20170630 17:42:32.655"></status>
</kw>
<status starttime="20170630 17:42:31.579" status="PASS" endtime="20170630 17:42:32.655"></status>
</kw>
<status starttime="20170630 17:42:31.579" status="PASS" endtime="20170630 17:42:32.655"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.657">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170630 17:42:32.656" status="PASS" endtime="20170630 17:42:32.657"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.658">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170630 17:42:32.658" status="PASS" endtime="20170630 17:42:32.658"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:32.662">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:32.662" status="PASS" endtime="20170630 17:42:32.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.663">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:32.663" status="PASS" endtime="20170630 17:42:32.663"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.664">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:32.664" status="PASS" endtime="20170630 17:42:32.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:32.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:32.665" status="PASS" endtime="20170630 17:42:32.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:33.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:32.666" status="PASS" endtime="20170630 17:42:33.169"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:33.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:33.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:32.665" status="PASS" endtime="20170630 17:42:33.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:33.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:33.169" status="PASS" endtime="20170630 17:42:33.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:33.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:33.170" status="PASS" endtime="20170630 17:42:33.171"></status>
</kw>
<status starttime="20170630 17:42:32.661" status="PASS" endtime="20170630 17:42:33.171"></status>
</kw>
<status starttime="20170630 17:42:32.660" status="PASS" endtime="20170630 17:42:33.171"></status>
</kw>
<status starttime="20170630 17:42:32.660" status="PASS" endtime="20170630 17:42:33.171"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:33.172">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170630 17:42:33.171" status="PASS" endtime="20170630 17:42:33.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:33.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:33.172" status="PASS" endtime="20170630 17:42:33.172"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170630 17:42:33.173" status="PASS" endtime="20170630 17:42:33.173"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:33.174">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170630 17:42:33.174" status="PASS" endtime="20170630 17:42:33.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:33.175">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170630 17:42:33.175" status="PASS" endtime="20170630 17:42:33.176"></status>
</kw>
<status starttime="20170630 17:42:33.175" status="PASS" endtime="20170630 17:42:33.176"></status>
</kw>
<status starttime="20170630 17:42:33.173" status="PASS" endtime="20170630 17:42:33.176"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.093">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170630 17:42:34.093">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:33.176" status="PASS" endtime="20170630 17:42:34.094"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.095">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:34.094" status="PASS" endtime="20170630 17:42:34.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:34.096">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:34.095" status="PASS" endtime="20170630 17:42:34.096"></status>
</kw>
<status starttime="20170630 17:42:34.095" status="PASS" endtime="20170630 17:42:34.096"></status>
</kw>
<status starttime="20170630 17:42:34.094" status="PASS" endtime="20170630 17:42:34.096"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:34.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:32.659" status="PASS" endtime="20170630 17:42:34.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:34.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:34.097" status="PASS" endtime="20170630 17:42:34.097"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.097">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:34.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:34.098">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:34.097" status="PASS" endtime="20170630 17:42:34.098"></status>
</kw>
<status starttime="20170630 17:42:32.657" status="PASS" endtime="20170630 17:42:34.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170630 17:42:34.098" status="PASS" endtime="20170630 17:42:34.098"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:34.103">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:34.102" status="PASS" endtime="20170630 17:42:34.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.104">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:34.104" status="PASS" endtime="20170630 17:42:34.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.104">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:34.104" status="PASS" endtime="20170630 17:42:34.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:34.105">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:34.105" status="PASS" endtime="20170630 17:42:34.105"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:36.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:34.106" status="PASS" endtime="20170630 17:42:36.419"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:36.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:36.419">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:34.106" status="PASS" endtime="20170630 17:42:36.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:36.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:36.419" status="PASS" endtime="20170630 17:42:36.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:36.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:36.420" status="PASS" endtime="20170630 17:42:36.421"></status>
</kw>
<status starttime="20170630 17:42:34.102" status="PASS" endtime="20170630 17:42:36.421"></status>
</kw>
<status starttime="20170630 17:42:34.102" status="PASS" endtime="20170630 17:42:36.421"></status>
</kw>
<status starttime="20170630 17:42:34.101" status="PASS" endtime="20170630 17:42:36.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:36.422">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170630 17:42:36.421" status="PASS" endtime="20170630 17:42:36.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:36.424">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:36.423" status="PASS" endtime="20170630 17:42:36.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:36.424">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:36.424" status="PASS" endtime="20170630 17:42:36.425"></status>
</kw>
<status starttime="20170630 17:42:36.424" status="PASS" endtime="20170630 17:42:36.425"></status>
</kw>
<status starttime="20170630 17:42:36.422" status="PASS" endtime="20170630 17:42:36.425"></status>
</kw>
<status starttime="20170630 17:42:36.422" status="PASS" endtime="20170630 17:42:36.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:40.454">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:40.454">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:36.425" status="PASS" endtime="20170630 17:42:40.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:40.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:40.456" status="PASS" endtime="20170630 17:42:40.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:40.457">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:40.457" status="PASS" endtime="20170630 17:42:40.457"></status>
</kw>
<status starttime="20170630 17:42:40.457" status="PASS" endtime="20170630 17:42:40.458"></status>
</kw>
<status starttime="20170630 17:42:40.455" status="PASS" endtime="20170630 17:42:40.458"></status>
</kw>
<status starttime="20170630 17:42:40.455" status="PASS" endtime="20170630 17:42:40.458"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:40.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:34.100" status="PASS" endtime="20170630 17:42:40.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:40.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:40.458" status="PASS" endtime="20170630 17:42:40.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:40.459">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:40.459">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:40.459">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:40.459" status="PASS" endtime="20170630 17:42:40.459"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:40.460">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170630 17:42:34.100" status="PASS" endtime="20170630 17:42:40.460"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:40.460">${host_state} = Off</msg>
<status starttime="20170630 17:42:34.099" status="PASS" endtime="20170630 17:42:40.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:40.461">Running != Off</msg>
<status starttime="20170630 17:42:40.460" status="FAIL" endtime="20170630 17:42:40.461"></status>
</kw>
<status starttime="20170630 17:42:34.099" status="FAIL" endtime="20170630 17:42:40.461"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.466">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:50.465" status="PASS" endtime="20170630 17:42:50.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:50.466" status="PASS" endtime="20170630 17:42:50.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.467">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:50.467" status="PASS" endtime="20170630 17:42:50.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.468">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:50.468" status="PASS" endtime="20170630 17:42:50.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:50.469" status="PASS" endtime="20170630 17:42:50.759"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:50.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:50.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:50.468" status="PASS" endtime="20170630 17:42:50.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:50.760" status="PASS" endtime="20170630 17:42:50.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:50.761" status="PASS" endtime="20170630 17:42:50.761"></status>
</kw>
<status starttime="20170630 17:42:50.465" status="PASS" endtime="20170630 17:42:50.761"></status>
</kw>
<status starttime="20170630 17:42:50.465" status="PASS" endtime="20170630 17:42:50.761"></status>
</kw>
<status starttime="20170630 17:42:50.464" status="PASS" endtime="20170630 17:42:50.762"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.762">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170630 17:42:50.762" status="PASS" endtime="20170630 17:42:50.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.764">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:50.763" status="PASS" endtime="20170630 17:42:50.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.765">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:42:50.765" status="PASS" endtime="20170630 17:42:50.765"></status>
</kw>
<status starttime="20170630 17:42:50.764" status="PASS" endtime="20170630 17:42:50.765"></status>
</kw>
<status starttime="20170630 17:42:50.763" status="PASS" endtime="20170630 17:42:50.765"></status>
</kw>
<status starttime="20170630 17:42:50.762" status="PASS" endtime="20170630 17:42:50.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:50.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:50.766" status="PASS" endtime="20170630 17:42:50.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:50.964" status="PASS" endtime="20170630 17:42:50.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:50.965" status="PASS" endtime="20170630 17:42:50.966"></status>
</kw>
<status starttime="20170630 17:42:50.965" status="PASS" endtime="20170630 17:42:50.966"></status>
</kw>
<status starttime="20170630 17:42:50.964" status="PASS" endtime="20170630 17:42:50.966"></status>
</kw>
<status starttime="20170630 17:42:50.963" status="PASS" endtime="20170630 17:42:50.966"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:50.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:50.463" status="PASS" endtime="20170630 17:42:50.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:50.967" status="PASS" endtime="20170630 17:42:50.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:50.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:50.968">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:50.967" status="PASS" endtime="20170630 17:42:50.968"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:50.968">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170630 17:42:50.462" status="PASS" endtime="20170630 17:42:50.968"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:50.968">${host_state} = Running</msg>
<status starttime="20170630 17:42:50.462" status="PASS" endtime="20170630 17:42:50.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170630 17:42:50.969" status="PASS" endtime="20170630 17:42:50.969"></status>
</kw>
<status starttime="20170630 17:42:50.461" status="PASS" endtime="20170630 17:42:50.969"></status>
</kw>
<status starttime="20170630 17:42:34.099" status="PASS" endtime="20170630 17:42:50.969"></status>
</kw>
<status starttime="20170630 17:42:32.655" status="PASS" endtime="20170630 17:42:50.969"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:50.973">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:42:50.973" status="PASS" endtime="20170630 17:42:50.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:42:50.974" status="PASS" endtime="20170630 17:42:50.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:42:50.975" status="PASS" endtime="20170630 17:42:50.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:50.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:42:50.975" status="PASS" endtime="20170630 17:42:50.976"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.200">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:42:50.976" status="PASS" endtime="20170630 17:42:51.200"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:51.200">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:42:51.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:50.976" status="PASS" endtime="20170630 17:42:51.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.201">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:51.201" status="PASS" endtime="20170630 17:42:51.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:51.202" status="PASS" endtime="20170630 17:42:51.202"></status>
</kw>
<status starttime="20170630 17:42:50.973" status="PASS" endtime="20170630 17:42:51.202"></status>
</kw>
<status starttime="20170630 17:42:50.972" status="PASS" endtime="20170630 17:42:51.202"></status>
</kw>
<status starttime="20170630 17:42:50.972" status="PASS" endtime="20170630 17:42:51.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:51.203">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:42:51.203" status="PASS" endtime="20170630 17:42:51.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:51.206">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:42:51.205" status="PASS" endtime="20170630 17:42:51.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.208">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:42:51.207" status="PASS" endtime="20170630 17:42:51.208"></status>
</kw>
<status starttime="20170630 17:42:51.207" status="PASS" endtime="20170630 17:42:51.208"></status>
</kw>
<status starttime="20170630 17:42:51.205" status="PASS" endtime="20170630 17:42:51.208"></status>
</kw>
<status starttime="20170630 17:42:51.204" status="PASS" endtime="20170630 17:42:51.208"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:51.290">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:42:51.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:51.208" status="PASS" endtime="20170630 17:42:51.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:51.292">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:51.292" status="PASS" endtime="20170630 17:42:51.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.293">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:42:51.293" status="PASS" endtime="20170630 17:42:51.293"></status>
</kw>
<status starttime="20170630 17:42:51.292" status="PASS" endtime="20170630 17:42:51.294"></status>
</kw>
<status starttime="20170630 17:42:51.291" status="PASS" endtime="20170630 17:42:51.294"></status>
</kw>
<status starttime="20170630 17:42:51.291" status="PASS" endtime="20170630 17:42:51.294"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:51.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:42:50.971" status="PASS" endtime="20170630 17:42:51.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:42:51.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:42:51.294" status="PASS" endtime="20170630 17:42:51.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:42:51.295">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:42:51.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:42:51.295">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:42:51.295" status="PASS" endtime="20170630 17:42:51.295"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:51.296">${state} = Off</msg>
<status starttime="20170630 17:42:50.970" status="PASS" endtime="20170630 17:42:51.296"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:42:51.296">${boot_progress} = Off</msg>
<status starttime="20170630 17:42:50.970" status="PASS" endtime="20170630 17:42:51.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:42:51.296">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:42:51.296" status="FAIL" endtime="20170630 17:42:51.297"></status>
</kw>
<status starttime="20170630 17:42:50.970" status="FAIL" endtime="20170630 17:42:51.297"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.302">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:01.302" status="PASS" endtime="20170630 17:43:01.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:01.303" status="PASS" endtime="20170630 17:43:01.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:01.303" status="PASS" endtime="20170630 17:43:01.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:01.304" status="PASS" endtime="20170630 17:43:01.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:01.305" status="PASS" endtime="20170630 17:43:01.524"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:01.524">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:01.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:01.305" status="PASS" endtime="20170630 17:43:01.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:01.525" status="PASS" endtime="20170630 17:43:01.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:01.525" status="PASS" endtime="20170630 17:43:01.526"></status>
</kw>
<status starttime="20170630 17:43:01.301" status="PASS" endtime="20170630 17:43:01.526"></status>
</kw>
<status starttime="20170630 17:43:01.300" status="PASS" endtime="20170630 17:43:01.526"></status>
</kw>
<status starttime="20170630 17:43:01.300" status="PASS" endtime="20170630 17:43:01.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.527">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:01.526" status="PASS" endtime="20170630 17:43:01.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.529">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:01.528" status="PASS" endtime="20170630 17:43:01.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.530">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:01.530" status="PASS" endtime="20170630 17:43:01.530"></status>
</kw>
<status starttime="20170630 17:43:01.529" status="PASS" endtime="20170630 17:43:01.530"></status>
</kw>
<status starttime="20170630 17:43:01.528" status="PASS" endtime="20170630 17:43:01.530"></status>
</kw>
<status starttime="20170630 17:43:01.527" status="PASS" endtime="20170630 17:43:01.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.601">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:01.601">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:01.531" status="PASS" endtime="20170630 17:43:01.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.603">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:01.603" status="PASS" endtime="20170630 17:43:01.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.604">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:01.604" status="PASS" endtime="20170630 17:43:01.605"></status>
</kw>
<status starttime="20170630 17:43:01.603" status="PASS" endtime="20170630 17:43:01.605"></status>
</kw>
<status starttime="20170630 17:43:01.602" status="PASS" endtime="20170630 17:43:01.605"></status>
</kw>
<status starttime="20170630 17:43:01.602" status="PASS" endtime="20170630 17:43:01.605"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:01.605">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:01.299" status="PASS" endtime="20170630 17:43:01.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:01.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:01.605" status="PASS" endtime="20170630 17:43:01.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:01.606">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:01.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:01.606">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:01.606" status="PASS" endtime="20170630 17:43:01.606"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:01.607">${state} = Off</msg>
<status starttime="20170630 17:43:01.298" status="PASS" endtime="20170630 17:43:01.607"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:01.607">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:01.298" status="PASS" endtime="20170630 17:43:01.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:01.608">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:01.607" status="FAIL" endtime="20170630 17:43:01.608"></status>
</kw>
<status starttime="20170630 17:43:01.297" status="FAIL" endtime="20170630 17:43:01.608"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.613">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:11.613" status="PASS" endtime="20170630 17:43:11.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:11.614" status="PASS" endtime="20170630 17:43:11.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:11.614" status="PASS" endtime="20170630 17:43:11.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:11.615" status="PASS" endtime="20170630 17:43:11.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:11.616" status="PASS" endtime="20170630 17:43:11.842"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:11.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:11.842">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:11.616" status="PASS" endtime="20170630 17:43:11.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.843">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:11.842" status="PASS" endtime="20170630 17:43:11.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:11.843" status="PASS" endtime="20170630 17:43:11.844"></status>
</kw>
<status starttime="20170630 17:43:11.612" status="PASS" endtime="20170630 17:43:11.845"></status>
</kw>
<status starttime="20170630 17:43:11.612" status="PASS" endtime="20170630 17:43:11.845"></status>
</kw>
<status starttime="20170630 17:43:11.611" status="PASS" endtime="20170630 17:43:11.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.846">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:11.845" status="PASS" endtime="20170630 17:43:11.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.848">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:11.848" status="PASS" endtime="20170630 17:43:11.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.850">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:11.849" status="PASS" endtime="20170630 17:43:11.850"></status>
</kw>
<status starttime="20170630 17:43:11.849" status="PASS" endtime="20170630 17:43:11.850"></status>
</kw>
<status starttime="20170630 17:43:11.847" status="PASS" endtime="20170630 17:43:11.850"></status>
</kw>
<status starttime="20170630 17:43:11.846" status="PASS" endtime="20170630 17:43:11.850"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.925">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:11.925">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:11.851" status="PASS" endtime="20170630 17:43:11.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.927">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:11.927" status="PASS" endtime="20170630 17:43:11.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.928">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:11.928" status="PASS" endtime="20170630 17:43:11.928"></status>
</kw>
<status starttime="20170630 17:43:11.927" status="PASS" endtime="20170630 17:43:11.928"></status>
</kw>
<status starttime="20170630 17:43:11.926" status="PASS" endtime="20170630 17:43:11.928"></status>
</kw>
<status starttime="20170630 17:43:11.926" status="PASS" endtime="20170630 17:43:11.929"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:11.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:11.610" status="PASS" endtime="20170630 17:43:11.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:11.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:11.929" status="PASS" endtime="20170630 17:43:11.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:11.930">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:11.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:11.930">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:11.930" status="PASS" endtime="20170630 17:43:11.930"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:11.930">${state} = Off</msg>
<status starttime="20170630 17:43:11.610" status="PASS" endtime="20170630 17:43:11.931"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:11.931">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:11.609" status="PASS" endtime="20170630 17:43:11.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:11.931">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:11.931" status="FAIL" endtime="20170630 17:43:11.931"></status>
</kw>
<status starttime="20170630 17:43:11.608" status="FAIL" endtime="20170630 17:43:11.932"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:21.938">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:21.937" status="PASS" endtime="20170630 17:43:21.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:21.939">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:21.938" status="PASS" endtime="20170630 17:43:21.939"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:21.939">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:21.939" status="PASS" endtime="20170630 17:43:21.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:21.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:21.939" status="PASS" endtime="20170630 17:43:21.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:21.941" status="PASS" endtime="20170630 17:43:22.120"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:22.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:22.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:21.940" status="PASS" endtime="20170630 17:43:22.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.121">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:22.121" status="PASS" endtime="20170630 17:43:22.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:22.122" status="PASS" endtime="20170630 17:43:22.122"></status>
</kw>
<status starttime="20170630 17:43:21.936" status="PASS" endtime="20170630 17:43:22.122"></status>
</kw>
<status starttime="20170630 17:43:21.936" status="PASS" endtime="20170630 17:43:22.122"></status>
</kw>
<status starttime="20170630 17:43:21.935" status="PASS" endtime="20170630 17:43:22.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:22.123">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:22.123" status="PASS" endtime="20170630 17:43:22.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:22.126">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:22.124" status="PASS" endtime="20170630 17:43:22.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.126">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:22.126" status="PASS" endtime="20170630 17:43:22.127"></status>
</kw>
<status starttime="20170630 17:43:22.126" status="PASS" endtime="20170630 17:43:22.127"></status>
</kw>
<status starttime="20170630 17:43:22.124" status="PASS" endtime="20170630 17:43:22.127"></status>
</kw>
<status starttime="20170630 17:43:22.123" status="PASS" endtime="20170630 17:43:22.127"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:22.210">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:22.210">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:22.127" status="PASS" endtime="20170630 17:43:22.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:22.212">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:22.212" status="PASS" endtime="20170630 17:43:22.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.215">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:22.213" status="PASS" endtime="20170630 17:43:22.215"></status>
</kw>
<status starttime="20170630 17:43:22.212" status="PASS" endtime="20170630 17:43:22.215"></status>
</kw>
<status starttime="20170630 17:43:22.211" status="PASS" endtime="20170630 17:43:22.215"></status>
</kw>
<status starttime="20170630 17:43:22.211" status="PASS" endtime="20170630 17:43:22.215"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:22.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:21.934" status="PASS" endtime="20170630 17:43:22.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:22.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:22.216" status="PASS" endtime="20170630 17:43:22.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:22.217">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:22.217">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:22.217">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:22.217" status="PASS" endtime="20170630 17:43:22.217"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:22.217">${state} = Off</msg>
<status starttime="20170630 17:43:21.934" status="PASS" endtime="20170630 17:43:22.217"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:22.218">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:21.933" status="PASS" endtime="20170630 17:43:22.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:22.218">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:22.218" status="FAIL" endtime="20170630 17:43:22.218"></status>
</kw>
<status starttime="20170630 17:43:21.932" status="FAIL" endtime="20170630 17:43:22.218"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.224">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:32.223" status="PASS" endtime="20170630 17:43:32.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:32.224" status="PASS" endtime="20170630 17:43:32.225"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.225">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:32.225" status="PASS" endtime="20170630 17:43:32.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:32.225" status="PASS" endtime="20170630 17:43:32.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.427">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:32.227" status="PASS" endtime="20170630 17:43:32.427"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:32.427">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:32.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:32.226" status="PASS" endtime="20170630 17:43:32.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.428">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:32.427" status="PASS" endtime="20170630 17:43:32.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:32.428" status="PASS" endtime="20170630 17:43:32.428"></status>
</kw>
<status starttime="20170630 17:43:32.223" status="PASS" endtime="20170630 17:43:32.428"></status>
</kw>
<status starttime="20170630 17:43:32.222" status="PASS" endtime="20170630 17:43:32.429"></status>
</kw>
<status starttime="20170630 17:43:32.221" status="PASS" endtime="20170630 17:43:32.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.429">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:32.429" status="PASS" endtime="20170630 17:43:32.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.432">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:32.431" status="PASS" endtime="20170630 17:43:32.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.433">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:32.432" status="PASS" endtime="20170630 17:43:32.433"></status>
</kw>
<status starttime="20170630 17:43:32.432" status="PASS" endtime="20170630 17:43:32.433"></status>
</kw>
<status starttime="20170630 17:43:32.430" status="PASS" endtime="20170630 17:43:32.433"></status>
</kw>
<status starttime="20170630 17:43:32.430" status="PASS" endtime="20170630 17:43:32.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.516">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:32.516">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:32.433" status="PASS" endtime="20170630 17:43:32.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.518">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:32.517" status="PASS" endtime="20170630 17:43:32.518"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.519">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:32.519" status="PASS" endtime="20170630 17:43:32.519"></status>
</kw>
<status starttime="20170630 17:43:32.518" status="PASS" endtime="20170630 17:43:32.519"></status>
</kw>
<status starttime="20170630 17:43:32.517" status="PASS" endtime="20170630 17:43:32.519"></status>
</kw>
<status starttime="20170630 17:43:32.517" status="PASS" endtime="20170630 17:43:32.519"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:32.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:32.221" status="PASS" endtime="20170630 17:43:32.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:32.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:32.520" status="PASS" endtime="20170630 17:43:32.520"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:32.521">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:32.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:32.521">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:32.520" status="PASS" endtime="20170630 17:43:32.521"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:32.521">${state} = Off</msg>
<status starttime="20170630 17:43:32.220" status="PASS" endtime="20170630 17:43:32.521"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:32.522">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:32.220" status="PASS" endtime="20170630 17:43:32.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:32.522">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:32.522" status="FAIL" endtime="20170630 17:43:32.522"></status>
</kw>
<status starttime="20170630 17:43:32.219" status="FAIL" endtime="20170630 17:43:32.522"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.527">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:42.527" status="PASS" endtime="20170630 17:43:42.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.528">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:42.528" status="PASS" endtime="20170630 17:43:42.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.529">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:42.529" status="PASS" endtime="20170630 17:43:42.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.530">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:42.529" status="PASS" endtime="20170630 17:43:42.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:42.530" status="PASS" endtime="20170630 17:43:42.707"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:42.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:42.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:42.530" status="PASS" endtime="20170630 17:43:42.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:42.707" status="PASS" endtime="20170630 17:43:42.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:42.708" status="PASS" endtime="20170630 17:43:42.708"></status>
</kw>
<status starttime="20170630 17:43:42.526" status="PASS" endtime="20170630 17:43:42.709"></status>
</kw>
<status starttime="20170630 17:43:42.526" status="PASS" endtime="20170630 17:43:42.709"></status>
</kw>
<status starttime="20170630 17:43:42.525" status="PASS" endtime="20170630 17:43:42.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.710">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:42.709" status="PASS" endtime="20170630 17:43:42.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.712">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:42.711" status="PASS" endtime="20170630 17:43:42.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.713">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:42.712" status="PASS" endtime="20170630 17:43:42.713"></status>
</kw>
<status starttime="20170630 17:43:42.712" status="PASS" endtime="20170630 17:43:42.713"></status>
</kw>
<status starttime="20170630 17:43:42.710" status="PASS" endtime="20170630 17:43:42.713"></status>
</kw>
<status starttime="20170630 17:43:42.710" status="PASS" endtime="20170630 17:43:42.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.826">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:42.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:42.713" status="PASS" endtime="20170630 17:43:42.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.828">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:42.828" status="PASS" endtime="20170630 17:43:42.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.829">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:42.829" status="PASS" endtime="20170630 17:43:42.829"></status>
</kw>
<status starttime="20170630 17:43:42.828" status="PASS" endtime="20170630 17:43:42.829"></status>
</kw>
<status starttime="20170630 17:43:42.827" status="PASS" endtime="20170630 17:43:42.829"></status>
</kw>
<status starttime="20170630 17:43:42.827" status="PASS" endtime="20170630 17:43:42.829"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:42.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:42.525" status="PASS" endtime="20170630 17:43:42.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:42.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:42.830" status="PASS" endtime="20170630 17:43:42.830"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:42.831">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:42.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:42.831">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:42.830" status="PASS" endtime="20170630 17:43:42.831"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:42.831">${state} = Off</msg>
<status starttime="20170630 17:43:42.524" status="PASS" endtime="20170630 17:43:42.831"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:42.832">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:42.524" status="PASS" endtime="20170630 17:43:42.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:42.832">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:42.832" status="FAIL" endtime="20170630 17:43:42.832"></status>
</kw>
<status starttime="20170630 17:43:42.523" status="FAIL" endtime="20170630 17:43:42.832"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:52.838">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:43:52.838" status="PASS" endtime="20170630 17:43:52.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:52.839">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:43:52.839" status="PASS" endtime="20170630 17:43:52.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:52.840">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:43:52.839" status="PASS" endtime="20170630 17:43:52.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:52.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:43:52.840" status="PASS" endtime="20170630 17:43:52.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:43:52.841" status="PASS" endtime="20170630 17:43:53.016"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:53.017">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:43:53.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:52.841" status="PASS" endtime="20170630 17:43:53.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.017">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:53.017" status="PASS" endtime="20170630 17:43:53.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:53.018" status="PASS" endtime="20170630 17:43:53.018"></status>
</kw>
<status starttime="20170630 17:43:52.837" status="PASS" endtime="20170630 17:43:53.018"></status>
</kw>
<status starttime="20170630 17:43:52.836" status="PASS" endtime="20170630 17:43:53.018"></status>
</kw>
<status starttime="20170630 17:43:52.836" status="PASS" endtime="20170630 17:43:53.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:53.019">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:43:53.019" status="PASS" endtime="20170630 17:43:53.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:53.021">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:53.020" status="PASS" endtime="20170630 17:43:53.021"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.022">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:43:53.022" status="PASS" endtime="20170630 17:43:53.022"></status>
</kw>
<status starttime="20170630 17:43:53.021" status="PASS" endtime="20170630 17:43:53.022"></status>
</kw>
<status starttime="20170630 17:43:53.020" status="PASS" endtime="20170630 17:43:53.022"></status>
</kw>
<status starttime="20170630 17:43:53.019" status="PASS" endtime="20170630 17:43:53.022"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:53.092">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:43:53.092">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:53.023" status="PASS" endtime="20170630 17:43:53.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:53.094">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:53.093" status="PASS" endtime="20170630 17:43:53.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.095">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:43:53.095" status="PASS" endtime="20170630 17:43:53.095"></status>
</kw>
<status starttime="20170630 17:43:53.094" status="PASS" endtime="20170630 17:43:53.095"></status>
</kw>
<status starttime="20170630 17:43:53.093" status="PASS" endtime="20170630 17:43:53.095"></status>
</kw>
<status starttime="20170630 17:43:53.093" status="PASS" endtime="20170630 17:43:53.095"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:53.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:43:52.835" status="PASS" endtime="20170630 17:43:53.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:43:53.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:43:53.096" status="PASS" endtime="20170630 17:43:53.096"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:43:53.097">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:43:53.097">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:43:53.097">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:43:53.096" status="PASS" endtime="20170630 17:43:53.097"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:53.097">${state} = Off</msg>
<status starttime="20170630 17:43:52.834" status="PASS" endtime="20170630 17:43:53.097"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:43:53.097">${boot_progress} = Off</msg>
<status starttime="20170630 17:43:52.834" status="PASS" endtime="20170630 17:43:53.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:43:53.098">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:43:53.098" status="FAIL" endtime="20170630 17:43:53.098"></status>
</kw>
<status starttime="20170630 17:43:52.833" status="FAIL" endtime="20170630 17:43:53.098"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.103">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:03.103" status="PASS" endtime="20170630 17:44:03.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.104">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:03.104" status="PASS" endtime="20170630 17:44:03.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.105">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:03.104" status="PASS" endtime="20170630 17:44:03.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.105">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:03.105" status="PASS" endtime="20170630 17:44:03.105"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:03.106" status="PASS" endtime="20170630 17:44:03.301"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:03.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:03.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:03.106" status="PASS" endtime="20170630 17:44:03.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:03.301" status="PASS" endtime="20170630 17:44:03.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:03.302" status="PASS" endtime="20170630 17:44:03.302"></status>
</kw>
<status starttime="20170630 17:44:03.102" status="PASS" endtime="20170630 17:44:03.303"></status>
</kw>
<status starttime="20170630 17:44:03.102" status="PASS" endtime="20170630 17:44:03.303"></status>
</kw>
<status starttime="20170630 17:44:03.101" status="PASS" endtime="20170630 17:44:03.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.304">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:03.303" status="PASS" endtime="20170630 17:44:03.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.306">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:03.306" status="PASS" endtime="20170630 17:44:03.306"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.308">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:03.307" status="PASS" endtime="20170630 17:44:03.308"></status>
</kw>
<status starttime="20170630 17:44:03.307" status="PASS" endtime="20170630 17:44:03.308"></status>
</kw>
<status starttime="20170630 17:44:03.305" status="PASS" endtime="20170630 17:44:03.308"></status>
</kw>
<status starttime="20170630 17:44:03.304" status="PASS" endtime="20170630 17:44:03.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.380">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:03.380">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:03.308" status="PASS" endtime="20170630 17:44:03.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.381">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:03.381" status="PASS" endtime="20170630 17:44:03.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.382">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:03.382" status="PASS" endtime="20170630 17:44:03.382"></status>
</kw>
<status starttime="20170630 17:44:03.382" status="PASS" endtime="20170630 17:44:03.383"></status>
</kw>
<status starttime="20170630 17:44:03.380" status="PASS" endtime="20170630 17:44:03.383"></status>
</kw>
<status starttime="20170630 17:44:03.380" status="PASS" endtime="20170630 17:44:03.383"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:03.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:03.100" status="PASS" endtime="20170630 17:44:03.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:03.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:03.383" status="PASS" endtime="20170630 17:44:03.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:03.384">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:03.384">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:03.384">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:03.384" status="PASS" endtime="20170630 17:44:03.384"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:03.385">${state} = Off</msg>
<status starttime="20170630 17:44:03.100" status="PASS" endtime="20170630 17:44:03.385"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:03.385">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:03.099" status="PASS" endtime="20170630 17:44:03.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:03.385">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:03.385" status="FAIL" endtime="20170630 17:44:03.386"></status>
</kw>
<status starttime="20170630 17:44:03.099" status="FAIL" endtime="20170630 17:44:03.386"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.392">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:13.391" status="PASS" endtime="20170630 17:44:13.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:13.392" status="PASS" endtime="20170630 17:44:13.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.393">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:13.393" status="PASS" endtime="20170630 17:44:13.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.394">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:13.394" status="PASS" endtime="20170630 17:44:13.394"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:13.395" status="PASS" endtime="20170630 17:44:13.727"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:13.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:13.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:13.394" status="PASS" endtime="20170630 17:44:13.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:13.727" status="PASS" endtime="20170630 17:44:13.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:13.728" status="PASS" endtime="20170630 17:44:13.728"></status>
</kw>
<status starttime="20170630 17:44:13.390" status="PASS" endtime="20170630 17:44:13.729"></status>
</kw>
<status starttime="20170630 17:44:13.390" status="PASS" endtime="20170630 17:44:13.729"></status>
</kw>
<status starttime="20170630 17:44:13.389" status="PASS" endtime="20170630 17:44:13.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.729">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:13.729" status="PASS" endtime="20170630 17:44:13.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.732">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:13.731" status="PASS" endtime="20170630 17:44:13.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.733">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:13.733" status="PASS" endtime="20170630 17:44:13.733"></status>
</kw>
<status starttime="20170630 17:44:13.732" status="PASS" endtime="20170630 17:44:13.733"></status>
</kw>
<status starttime="20170630 17:44:13.730" status="PASS" endtime="20170630 17:44:13.733"></status>
</kw>
<status starttime="20170630 17:44:13.730" status="PASS" endtime="20170630 17:44:13.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.832">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:13.832">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:13.734" status="PASS" endtime="20170630 17:44:13.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.835">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:13.834" status="PASS" endtime="20170630 17:44:13.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.836">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:13.835" status="PASS" endtime="20170630 17:44:13.836"></status>
</kw>
<status starttime="20170630 17:44:13.835" status="PASS" endtime="20170630 17:44:13.836"></status>
</kw>
<status starttime="20170630 17:44:13.833" status="PASS" endtime="20170630 17:44:13.836"></status>
</kw>
<status starttime="20170630 17:44:13.833" status="PASS" endtime="20170630 17:44:13.836"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:13.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:13.388" status="PASS" endtime="20170630 17:44:13.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:13.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:13.837" status="PASS" endtime="20170630 17:44:13.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:13.838">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:13.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:13.838">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:13.838" status="PASS" endtime="20170630 17:44:13.838"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:13.839">${state} = Off</msg>
<status starttime="20170630 17:44:13.387" status="PASS" endtime="20170630 17:44:13.839"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:13.839">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:13.387" status="PASS" endtime="20170630 17:44:13.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:13.840">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:13.839" status="FAIL" endtime="20170630 17:44:13.840"></status>
</kw>
<status starttime="20170630 17:44:13.386" status="FAIL" endtime="20170630 17:44:13.840"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:23.845">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:23.844" status="PASS" endtime="20170630 17:44:23.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:23.846">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:23.845" status="PASS" endtime="20170630 17:44:23.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:23.846">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:23.846" status="PASS" endtime="20170630 17:44:23.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:23.847">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:23.847" status="PASS" endtime="20170630 17:44:23.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.042">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:23.848" status="PASS" endtime="20170630 17:44:24.042"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:24.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:24.042">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:23.847" status="PASS" endtime="20170630 17:44:24.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.043">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:24.043" status="PASS" endtime="20170630 17:44:24.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:24.043" status="PASS" endtime="20170630 17:44:24.044"></status>
</kw>
<status starttime="20170630 17:44:23.844" status="PASS" endtime="20170630 17:44:24.044"></status>
</kw>
<status starttime="20170630 17:44:23.843" status="PASS" endtime="20170630 17:44:24.044"></status>
</kw>
<status starttime="20170630 17:44:23.843" status="PASS" endtime="20170630 17:44:24.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:24.045">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:24.045" status="PASS" endtime="20170630 17:44:24.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:24.047">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:24.047" status="PASS" endtime="20170630 17:44:24.047"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.048">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:24.048" status="PASS" endtime="20170630 17:44:24.048"></status>
</kw>
<status starttime="20170630 17:44:24.047" status="PASS" endtime="20170630 17:44:24.048"></status>
</kw>
<status starttime="20170630 17:44:24.046" status="PASS" endtime="20170630 17:44:24.049"></status>
</kw>
<status starttime="20170630 17:44:24.045" status="PASS" endtime="20170630 17:44:24.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:24.115">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:24.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:24.049" status="PASS" endtime="20170630 17:44:24.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:24.117">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:24.116" status="PASS" endtime="20170630 17:44:24.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.118">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:24.117" status="PASS" endtime="20170630 17:44:24.118"></status>
</kw>
<status starttime="20170630 17:44:24.117" status="PASS" endtime="20170630 17:44:24.118"></status>
</kw>
<status starttime="20170630 17:44:24.116" status="PASS" endtime="20170630 17:44:24.118"></status>
</kw>
<status starttime="20170630 17:44:24.115" status="PASS" endtime="20170630 17:44:24.118"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:24.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:23.842" status="PASS" endtime="20170630 17:44:24.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:24.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:24.118" status="PASS" endtime="20170630 17:44:24.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:24.119">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:24.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:24.120">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:24.119" status="PASS" endtime="20170630 17:44:24.120"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:24.120">${state} = Off</msg>
<status starttime="20170630 17:44:23.841" status="PASS" endtime="20170630 17:44:24.120"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:24.120">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:23.841" status="PASS" endtime="20170630 17:44:24.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:24.121">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:24.120" status="FAIL" endtime="20170630 17:44:24.121"></status>
</kw>
<status starttime="20170630 17:44:23.840" status="FAIL" endtime="20170630 17:44:24.121"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.126">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:34.125" status="PASS" endtime="20170630 17:44:34.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:34.127" status="PASS" endtime="20170630 17:44:34.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.128">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:34.127" status="PASS" endtime="20170630 17:44:34.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:34.128" status="PASS" endtime="20170630 17:44:34.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:34.129" status="PASS" endtime="20170630 17:44:34.350"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:34.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:34.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:34.129" status="PASS" endtime="20170630 17:44:34.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.351">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:34.350" status="PASS" endtime="20170630 17:44:34.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:34.351" status="PASS" endtime="20170630 17:44:34.352"></status>
</kw>
<status starttime="20170630 17:44:34.125" status="PASS" endtime="20170630 17:44:34.352"></status>
</kw>
<status starttime="20170630 17:44:34.124" status="PASS" endtime="20170630 17:44:34.352"></status>
</kw>
<status starttime="20170630 17:44:34.124" status="PASS" endtime="20170630 17:44:34.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.353">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:34.353" status="PASS" endtime="20170630 17:44:34.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.356">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:34.355" status="PASS" endtime="20170630 17:44:34.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.357">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:34.357" status="PASS" endtime="20170630 17:44:34.357"></status>
</kw>
<status starttime="20170630 17:44:34.356" status="PASS" endtime="20170630 17:44:34.357"></status>
</kw>
<status starttime="20170630 17:44:34.354" status="PASS" endtime="20170630 17:44:34.357"></status>
</kw>
<status starttime="20170630 17:44:34.354" status="PASS" endtime="20170630 17:44:34.358"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.448">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:34.448">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:34.358" status="PASS" endtime="20170630 17:44:34.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.450">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:34.450" status="PASS" endtime="20170630 17:44:34.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.451">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:34.451" status="PASS" endtime="20170630 17:44:34.451"></status>
</kw>
<status starttime="20170630 17:44:34.450" status="PASS" endtime="20170630 17:44:34.451"></status>
</kw>
<status starttime="20170630 17:44:34.449" status="PASS" endtime="20170630 17:44:34.452"></status>
</kw>
<status starttime="20170630 17:44:34.449" status="PASS" endtime="20170630 17:44:34.452"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:34.452">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:34.123" status="PASS" endtime="20170630 17:44:34.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:34.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:34.452" status="PASS" endtime="20170630 17:44:34.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:34.453">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:34.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:34.453">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:34.453" status="PASS" endtime="20170630 17:44:34.453"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:34.454">${state} = Off</msg>
<status starttime="20170630 17:44:34.122" status="PASS" endtime="20170630 17:44:34.454"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:34.454">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:34.122" status="PASS" endtime="20170630 17:44:34.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:34.454">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:34.454" status="FAIL" endtime="20170630 17:44:34.455"></status>
</kw>
<status starttime="20170630 17:44:34.121" status="FAIL" endtime="20170630 17:44:34.455"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.460">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:44.460" status="PASS" endtime="20170630 17:44:44.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:44.461" status="PASS" endtime="20170630 17:44:44.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.461">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:44.461" status="PASS" endtime="20170630 17:44:44.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.462">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:44.462" status="PASS" endtime="20170630 17:44:44.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:44.463" status="PASS" endtime="20170630 17:44:44.672"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:44.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:44.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:44.462" status="PASS" endtime="20170630 17:44:44.672"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:44.672" status="PASS" endtime="20170630 17:44:44.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:44.673" status="PASS" endtime="20170630 17:44:44.673"></status>
</kw>
<status starttime="20170630 17:44:44.459" status="PASS" endtime="20170630 17:44:44.674"></status>
</kw>
<status starttime="20170630 17:44:44.459" status="PASS" endtime="20170630 17:44:44.674"></status>
</kw>
<status starttime="20170630 17:44:44.458" status="PASS" endtime="20170630 17:44:44.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.674">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:44.674" status="PASS" endtime="20170630 17:44:44.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.677">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:44.676" status="PASS" endtime="20170630 17:44:44.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.678">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:44.678" status="PASS" endtime="20170630 17:44:44.678"></status>
</kw>
<status starttime="20170630 17:44:44.677" status="PASS" endtime="20170630 17:44:44.678"></status>
</kw>
<status starttime="20170630 17:44:44.675" status="PASS" endtime="20170630 17:44:44.678"></status>
</kw>
<status starttime="20170630 17:44:44.675" status="PASS" endtime="20170630 17:44:44.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.745">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:44.745">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:44.679" status="PASS" endtime="20170630 17:44:44.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.747">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:44.746" status="PASS" endtime="20170630 17:44:44.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.748">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:44.747" status="PASS" endtime="20170630 17:44:44.748"></status>
</kw>
<status starttime="20170630 17:44:44.747" status="PASS" endtime="20170630 17:44:44.748"></status>
</kw>
<status starttime="20170630 17:44:44.746" status="PASS" endtime="20170630 17:44:44.748"></status>
</kw>
<status starttime="20170630 17:44:44.745" status="PASS" endtime="20170630 17:44:44.748"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:44.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:44.457" status="PASS" endtime="20170630 17:44:44.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:44.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:44.749" status="PASS" endtime="20170630 17:44:44.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:44.749">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:44.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:44.750">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:44.749" status="PASS" endtime="20170630 17:44:44.750"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:44.750">${state} = Off</msg>
<status starttime="20170630 17:44:44.456" status="PASS" endtime="20170630 17:44:44.750"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:44.750">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:44.456" status="PASS" endtime="20170630 17:44:44.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:44.751">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:44.750" status="FAIL" endtime="20170630 17:44:44.751"></status>
</kw>
<status starttime="20170630 17:44:44.455" status="FAIL" endtime="20170630 17:44:44.751"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:54.756">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:44:54.755" status="PASS" endtime="20170630 17:44:54.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:54.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:44:54.756" status="PASS" endtime="20170630 17:44:54.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:54.757">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:44:54.757" status="PASS" endtime="20170630 17:44:54.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:54.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:44:54.758" status="PASS" endtime="20170630 17:44:54.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:54.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:44:54.759" status="PASS" endtime="20170630 17:44:54.936"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:54.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:44:54.936">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:54.758" status="PASS" endtime="20170630 17:44:54.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:54.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:54.937" status="PASS" endtime="20170630 17:44:54.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:54.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:54.937" status="PASS" endtime="20170630 17:44:54.938"></status>
</kw>
<status starttime="20170630 17:44:54.755" status="PASS" endtime="20170630 17:44:54.938"></status>
</kw>
<status starttime="20170630 17:44:54.754" status="PASS" endtime="20170630 17:44:54.938"></status>
</kw>
<status starttime="20170630 17:44:54.754" status="PASS" endtime="20170630 17:44:54.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:54.939">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:44:54.938" status="PASS" endtime="20170630 17:44:54.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:54.941">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:54.940" status="PASS" endtime="20170630 17:44:54.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:54.942">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:44:54.941" status="PASS" endtime="20170630 17:44:54.942"></status>
</kw>
<status starttime="20170630 17:44:54.941" status="PASS" endtime="20170630 17:44:54.942"></status>
</kw>
<status starttime="20170630 17:44:54.939" status="PASS" endtime="20170630 17:44:54.942"></status>
</kw>
<status starttime="20170630 17:44:54.939" status="PASS" endtime="20170630 17:44:54.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:55.039">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:44:55.040">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:54.942" status="PASS" endtime="20170630 17:44:55.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:55.041">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:55.041" status="PASS" endtime="20170630 17:44:55.041"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:55.042">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:44:55.042" status="PASS" endtime="20170630 17:44:55.042"></status>
</kw>
<status starttime="20170630 17:44:55.042" status="PASS" endtime="20170630 17:44:55.043"></status>
</kw>
<status starttime="20170630 17:44:55.040" status="PASS" endtime="20170630 17:44:55.043"></status>
</kw>
<status starttime="20170630 17:44:55.040" status="PASS" endtime="20170630 17:44:55.043"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:55.043">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:44:54.753" status="PASS" endtime="20170630 17:44:55.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:44:55.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:44:55.043" status="PASS" endtime="20170630 17:44:55.044"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:44:55.044">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:44:55.044">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:44:55.044">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:44:55.044" status="PASS" endtime="20170630 17:44:55.044"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:55.045">${state} = Off</msg>
<status starttime="20170630 17:44:54.753" status="PASS" endtime="20170630 17:44:55.045"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:44:55.045">${boot_progress} = Off</msg>
<status starttime="20170630 17:44:54.752" status="PASS" endtime="20170630 17:44:55.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:44:55.046">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:44:55.045" status="FAIL" endtime="20170630 17:44:55.046"></status>
</kw>
<status starttime="20170630 17:44:54.752" status="FAIL" endtime="20170630 17:44:55.046"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.051">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:05.051" status="PASS" endtime="20170630 17:45:05.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:05.052" status="PASS" endtime="20170630 17:45:05.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.053">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:05.052" status="PASS" endtime="20170630 17:45:05.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.053">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:05.053" status="PASS" endtime="20170630 17:45:05.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.238">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:05.054" status="PASS" endtime="20170630 17:45:05.239"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:05.239">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:05.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:05.054" status="PASS" endtime="20170630 17:45:05.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.239">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:05.239" status="PASS" endtime="20170630 17:45:05.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:05.240" status="PASS" endtime="20170630 17:45:05.240"></status>
</kw>
<status starttime="20170630 17:45:05.050" status="PASS" endtime="20170630 17:45:05.240"></status>
</kw>
<status starttime="20170630 17:45:05.049" status="PASS" endtime="20170630 17:45:05.241"></status>
</kw>
<status starttime="20170630 17:45:05.049" status="PASS" endtime="20170630 17:45:05.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.241">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:05.241" status="PASS" endtime="20170630 17:45:05.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.243">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:05.243" status="PASS" endtime="20170630 17:45:05.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.244">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:05.244" status="PASS" endtime="20170630 17:45:05.244"></status>
</kw>
<status starttime="20170630 17:45:05.243" status="PASS" endtime="20170630 17:45:05.244"></status>
</kw>
<status starttime="20170630 17:45:05.242" status="PASS" endtime="20170630 17:45:05.245"></status>
</kw>
<status starttime="20170630 17:45:05.242" status="PASS" endtime="20170630 17:45:05.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.348">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:05.348">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:05.245" status="PASS" endtime="20170630 17:45:05.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.350">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:05.350" status="PASS" endtime="20170630 17:45:05.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.352">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:05.351" status="PASS" endtime="20170630 17:45:05.352"></status>
</kw>
<status starttime="20170630 17:45:05.351" status="PASS" endtime="20170630 17:45:05.352"></status>
</kw>
<status starttime="20170630 17:45:05.349" status="PASS" endtime="20170630 17:45:05.352"></status>
</kw>
<status starttime="20170630 17:45:05.349" status="PASS" endtime="20170630 17:45:05.352"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:05.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:05.048" status="PASS" endtime="20170630 17:45:05.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:05.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:05.353" status="PASS" endtime="20170630 17:45:05.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:05.354">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:05.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:05.354">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:05.353" status="PASS" endtime="20170630 17:45:05.354"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:05.354">${state} = Off</msg>
<status starttime="20170630 17:45:05.047" status="PASS" endtime="20170630 17:45:05.354"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:05.354">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:05.047" status="PASS" endtime="20170630 17:45:05.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:05.355">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:05.354" status="FAIL" endtime="20170630 17:45:05.355"></status>
</kw>
<status starttime="20170630 17:45:05.046" status="FAIL" endtime="20170630 17:45:05.355"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.360">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:15.360" status="PASS" endtime="20170630 17:45:15.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:15.361" status="PASS" endtime="20170630 17:45:15.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.362">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:15.362" status="PASS" endtime="20170630 17:45:15.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:15.362" status="PASS" endtime="20170630 17:45:15.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:15.363" status="PASS" endtime="20170630 17:45:15.541"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:15.541">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:15.541">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:15.363" status="PASS" endtime="20170630 17:45:15.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.541">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:15.541" status="PASS" endtime="20170630 17:45:15.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:15.542" status="PASS" endtime="20170630 17:45:15.542"></status>
</kw>
<status starttime="20170630 17:45:15.359" status="PASS" endtime="20170630 17:45:15.542"></status>
</kw>
<status starttime="20170630 17:45:15.359" status="PASS" endtime="20170630 17:45:15.542"></status>
</kw>
<status starttime="20170630 17:45:15.358" status="PASS" endtime="20170630 17:45:15.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.543">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:15.543" status="PASS" endtime="20170630 17:45:15.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.546">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:15.545" status="PASS" endtime="20170630 17:45:15.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.547">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:15.546" status="PASS" endtime="20170630 17:45:15.547"></status>
</kw>
<status starttime="20170630 17:45:15.546" status="PASS" endtime="20170630 17:45:15.547"></status>
</kw>
<status starttime="20170630 17:45:15.544" status="PASS" endtime="20170630 17:45:15.547"></status>
</kw>
<status starttime="20170630 17:45:15.543" status="PASS" endtime="20170630 17:45:15.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.613">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:15.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:15.547" status="PASS" endtime="20170630 17:45:15.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.615">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:15.615" status="PASS" endtime="20170630 17:45:15.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.616">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:15.616" status="PASS" endtime="20170630 17:45:15.616"></status>
</kw>
<status starttime="20170630 17:45:15.615" status="PASS" endtime="20170630 17:45:15.616"></status>
</kw>
<status starttime="20170630 17:45:15.614" status="PASS" endtime="20170630 17:45:15.616"></status>
</kw>
<status starttime="20170630 17:45:15.614" status="PASS" endtime="20170630 17:45:15.617"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:15.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:15.357" status="PASS" endtime="20170630 17:45:15.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:15.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:15.617" status="PASS" endtime="20170630 17:45:15.617"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:15.618">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:15.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:15.618">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:15.618" status="PASS" endtime="20170630 17:45:15.618"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:15.618">${state} = Off</msg>
<status starttime="20170630 17:45:15.357" status="PASS" endtime="20170630 17:45:15.618"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:15.619">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:15.356" status="PASS" endtime="20170630 17:45:15.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:15.619">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:15.619" status="FAIL" endtime="20170630 17:45:15.619"></status>
</kw>
<status starttime="20170630 17:45:15.356" status="FAIL" endtime="20170630 17:45:15.620"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.624">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:25.624" status="PASS" endtime="20170630 17:45:25.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.626">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:25.626" status="PASS" endtime="20170630 17:45:25.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.626">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:25.626" status="PASS" endtime="20170630 17:45:25.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.627">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:25.627" status="PASS" endtime="20170630 17:45:25.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:25.628" status="PASS" endtime="20170630 17:45:25.805"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:25.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:25.805">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:25.627" status="PASS" endtime="20170630 17:45:25.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:25.806" status="PASS" endtime="20170630 17:45:25.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:25.806" status="PASS" endtime="20170630 17:45:25.807"></status>
</kw>
<status starttime="20170630 17:45:25.624" status="PASS" endtime="20170630 17:45:25.807"></status>
</kw>
<status starttime="20170630 17:45:25.623" status="PASS" endtime="20170630 17:45:25.807"></status>
</kw>
<status starttime="20170630 17:45:25.622" status="PASS" endtime="20170630 17:45:25.807"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.808">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:25.807" status="PASS" endtime="20170630 17:45:25.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.810">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:25.809" status="PASS" endtime="20170630 17:45:25.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.811">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:25.810" status="PASS" endtime="20170630 17:45:25.811"></status>
</kw>
<status starttime="20170630 17:45:25.810" status="PASS" endtime="20170630 17:45:25.811"></status>
</kw>
<status starttime="20170630 17:45:25.808" status="PASS" endtime="20170630 17:45:25.811"></status>
</kw>
<status starttime="20170630 17:45:25.808" status="PASS" endtime="20170630 17:45:25.811"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.884">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:25.885">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:25.811" status="PASS" endtime="20170630 17:45:25.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.886">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:25.886" status="PASS" endtime="20170630 17:45:25.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.887">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:25.887" status="PASS" endtime="20170630 17:45:25.887"></status>
</kw>
<status starttime="20170630 17:45:25.886" status="PASS" endtime="20170630 17:45:25.887"></status>
</kw>
<status starttime="20170630 17:45:25.885" status="PASS" endtime="20170630 17:45:25.888"></status>
</kw>
<status starttime="20170630 17:45:25.885" status="PASS" endtime="20170630 17:45:25.888"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:25.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:25.622" status="PASS" endtime="20170630 17:45:25.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:25.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:25.888" status="PASS" endtime="20170630 17:45:25.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:25.889">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:25.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:25.889">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:25.889" status="PASS" endtime="20170630 17:45:25.889"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:25.890">${state} = Off</msg>
<status starttime="20170630 17:45:25.621" status="PASS" endtime="20170630 17:45:25.890"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:25.890">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:25.621" status="PASS" endtime="20170630 17:45:25.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:25.891">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:25.890" status="FAIL" endtime="20170630 17:45:25.891"></status>
</kw>
<status starttime="20170630 17:45:25.620" status="FAIL" endtime="20170630 17:45:25.891"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:35.896">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:35.895" status="PASS" endtime="20170630 17:45:35.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:35.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:35.896" status="PASS" endtime="20170630 17:45:35.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:35.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:35.897" status="PASS" endtime="20170630 17:45:35.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:35.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:35.897" status="PASS" endtime="20170630 17:45:35.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:35.898" status="PASS" endtime="20170630 17:45:36.076"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:36.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:36.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:35.898" status="PASS" endtime="20170630 17:45:36.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:36.076" status="PASS" endtime="20170630 17:45:36.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:36.077" status="PASS" endtime="20170630 17:45:36.077"></status>
</kw>
<status starttime="20170630 17:45:35.895" status="PASS" endtime="20170630 17:45:36.078"></status>
</kw>
<status starttime="20170630 17:45:35.894" status="PASS" endtime="20170630 17:45:36.078"></status>
</kw>
<status starttime="20170630 17:45:35.894" status="PASS" endtime="20170630 17:45:36.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:36.078">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:36.078" status="PASS" endtime="20170630 17:45:36.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:36.080">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:36.080" status="PASS" endtime="20170630 17:45:36.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.081">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:36.081" status="PASS" endtime="20170630 17:45:36.081"></status>
</kw>
<status starttime="20170630 17:45:36.081" status="PASS" endtime="20170630 17:45:36.081"></status>
</kw>
<status starttime="20170630 17:45:36.079" status="PASS" endtime="20170630 17:45:36.082"></status>
</kw>
<status starttime="20170630 17:45:36.079" status="PASS" endtime="20170630 17:45:36.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:36.148">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:36.148">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:36.082" status="PASS" endtime="20170630 17:45:36.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:36.150">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:36.150" status="PASS" endtime="20170630 17:45:36.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.151">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:36.151" status="PASS" endtime="20170630 17:45:36.151"></status>
</kw>
<status starttime="20170630 17:45:36.150" status="PASS" endtime="20170630 17:45:36.151"></status>
</kw>
<status starttime="20170630 17:45:36.149" status="PASS" endtime="20170630 17:45:36.151"></status>
</kw>
<status starttime="20170630 17:45:36.149" status="PASS" endtime="20170630 17:45:36.151"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:36.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:35.893" status="PASS" endtime="20170630 17:45:36.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:36.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:36.152" status="PASS" endtime="20170630 17:45:36.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:36.153">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:36.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:36.153">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:36.153" status="PASS" endtime="20170630 17:45:36.153"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:36.154">${state} = Off</msg>
<status starttime="20170630 17:45:35.892" status="PASS" endtime="20170630 17:45:36.154"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:36.154">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:35.892" status="PASS" endtime="20170630 17:45:36.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:36.155">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:36.155" status="FAIL" endtime="20170630 17:45:36.155"></status>
</kw>
<status starttime="20170630 17:45:35.891" status="FAIL" endtime="20170630 17:45:36.155"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.160">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:46.159" status="PASS" endtime="20170630 17:45:46.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:46.160" status="PASS" endtime="20170630 17:45:46.161"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.161">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:46.161" status="PASS" endtime="20170630 17:45:46.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.162">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:46.161" status="PASS" endtime="20170630 17:45:46.162"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.339">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:46.163" status="PASS" endtime="20170630 17:45:46.340"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:46.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:46.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:46.162" status="PASS" endtime="20170630 17:45:46.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.340">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:46.340" status="PASS" endtime="20170630 17:45:46.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:46.341" status="PASS" endtime="20170630 17:45:46.341"></status>
</kw>
<status starttime="20170630 17:45:46.159" status="PASS" endtime="20170630 17:45:46.341"></status>
</kw>
<status starttime="20170630 17:45:46.158" status="PASS" endtime="20170630 17:45:46.341"></status>
</kw>
<status starttime="20170630 17:45:46.158" status="PASS" endtime="20170630 17:45:46.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.342">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:46.342" status="PASS" endtime="20170630 17:45:46.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.344">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:46.343" status="PASS" endtime="20170630 17:45:46.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.345">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:46.345" status="PASS" endtime="20170630 17:45:46.345"></status>
</kw>
<status starttime="20170630 17:45:46.344" status="PASS" endtime="20170630 17:45:46.345"></status>
</kw>
<status starttime="20170630 17:45:46.343" status="PASS" endtime="20170630 17:45:46.345"></status>
</kw>
<status starttime="20170630 17:45:46.342" status="PASS" endtime="20170630 17:45:46.345"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.411">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:46.411">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:46.346" status="PASS" endtime="20170630 17:45:46.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.413">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:46.413" status="PASS" endtime="20170630 17:45:46.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.414">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:46.414" status="PASS" endtime="20170630 17:45:46.414"></status>
</kw>
<status starttime="20170630 17:45:46.413" status="PASS" endtime="20170630 17:45:46.415"></status>
</kw>
<status starttime="20170630 17:45:46.412" status="PASS" endtime="20170630 17:45:46.415"></status>
</kw>
<status starttime="20170630 17:45:46.412" status="PASS" endtime="20170630 17:45:46.415"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:46.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:46.157" status="PASS" endtime="20170630 17:45:46.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:46.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:46.415" status="PASS" endtime="20170630 17:45:46.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:46.416">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:46.416">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:46.417">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:46.416" status="PASS" endtime="20170630 17:45:46.417"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:46.417">${state} = Off</msg>
<status starttime="20170630 17:45:46.157" status="PASS" endtime="20170630 17:45:46.417"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:46.417">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:46.156" status="PASS" endtime="20170630 17:45:46.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:46.418">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:46.417" status="FAIL" endtime="20170630 17:45:46.418"></status>
</kw>
<status starttime="20170630 17:45:46.156" status="FAIL" endtime="20170630 17:45:46.418"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.423">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:45:56.423" status="PASS" endtime="20170630 17:45:56.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.424">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:45:56.424" status="PASS" endtime="20170630 17:45:56.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.425">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:45:56.424" status="PASS" endtime="20170630 17:45:56.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.425">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:45:56.425" status="PASS" endtime="20170630 17:45:56.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.601">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:45:56.426" status="PASS" endtime="20170630 17:45:56.601"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:56.601">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:45:56.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:56.426" status="PASS" endtime="20170630 17:45:56.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.602">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:56.602" status="PASS" endtime="20170630 17:45:56.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:56.602" status="PASS" endtime="20170630 17:45:56.603"></status>
</kw>
<status starttime="20170630 17:45:56.422" status="PASS" endtime="20170630 17:45:56.603"></status>
</kw>
<status starttime="20170630 17:45:56.421" status="PASS" endtime="20170630 17:45:56.603"></status>
</kw>
<status starttime="20170630 17:45:56.421" status="PASS" endtime="20170630 17:45:56.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.604">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:45:56.603" status="PASS" endtime="20170630 17:45:56.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.606">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:56.605" status="PASS" endtime="20170630 17:45:56.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.607">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:45:56.607" status="PASS" endtime="20170630 17:45:56.607"></status>
</kw>
<status starttime="20170630 17:45:56.606" status="PASS" endtime="20170630 17:45:56.607"></status>
</kw>
<status starttime="20170630 17:45:56.605" status="PASS" endtime="20170630 17:45:56.607"></status>
</kw>
<status starttime="20170630 17:45:56.604" status="PASS" endtime="20170630 17:45:56.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.674">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:45:56.675">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:56.607" status="PASS" endtime="20170630 17:45:56.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.676">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:56.676" status="PASS" endtime="20170630 17:45:56.676"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.678">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:45:56.677" status="PASS" endtime="20170630 17:45:56.678"></status>
</kw>
<status starttime="20170630 17:45:56.676" status="PASS" endtime="20170630 17:45:56.678"></status>
</kw>
<status starttime="20170630 17:45:56.675" status="PASS" endtime="20170630 17:45:56.678"></status>
</kw>
<status starttime="20170630 17:45:56.675" status="PASS" endtime="20170630 17:45:56.678"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:56.678">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:45:56.420" status="PASS" endtime="20170630 17:45:56.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:45:56.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:45:56.679" status="PASS" endtime="20170630 17:45:56.679"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:45:56.680">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:45:56.680">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:45:56.680">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:45:56.679" status="PASS" endtime="20170630 17:45:56.680"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:56.680">${state} = Off</msg>
<status starttime="20170630 17:45:56.419" status="PASS" endtime="20170630 17:45:56.680"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:45:56.680">${boot_progress} = Off</msg>
<status starttime="20170630 17:45:56.419" status="PASS" endtime="20170630 17:45:56.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:45:56.681">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:45:56.681" status="FAIL" endtime="20170630 17:45:56.681"></status>
</kw>
<status starttime="20170630 17:45:56.418" status="FAIL" endtime="20170630 17:45:56.681"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:06.686">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:06.686" status="PASS" endtime="20170630 17:46:06.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:06.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:06.687" status="PASS" endtime="20170630 17:46:06.687"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:06.688">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:06.688" status="PASS" endtime="20170630 17:46:06.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:06.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:06.688" status="PASS" endtime="20170630 17:46:06.689"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:06.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:06.689" status="PASS" endtime="20170630 17:46:06.973"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:06.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:06.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:06.689" status="PASS" endtime="20170630 17:46:06.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:06.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:06.974" status="PASS" endtime="20170630 17:46:06.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:06.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:06.975" status="PASS" endtime="20170630 17:46:06.975"></status>
</kw>
<status starttime="20170630 17:46:06.686" status="PASS" endtime="20170630 17:46:06.975"></status>
</kw>
<status starttime="20170630 17:46:06.685" status="PASS" endtime="20170630 17:46:06.975"></status>
</kw>
<status starttime="20170630 17:46:06.684" status="PASS" endtime="20170630 17:46:06.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:06.976">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:06.976" status="PASS" endtime="20170630 17:46:06.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:06.979">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:06.978" status="PASS" endtime="20170630 17:46:06.979"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:06.979">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:06.979" status="PASS" endtime="20170630 17:46:06.980"></status>
</kw>
<status starttime="20170630 17:46:06.979" status="PASS" endtime="20170630 17:46:06.980"></status>
</kw>
<status starttime="20170630 17:46:06.977" status="PASS" endtime="20170630 17:46:06.980"></status>
</kw>
<status starttime="20170630 17:46:06.977" status="PASS" endtime="20170630 17:46:06.980"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:07.058">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:07.058">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:06.980" status="PASS" endtime="20170630 17:46:07.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:07.060">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:07.059" status="PASS" endtime="20170630 17:46:07.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:07.061">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:07.060" status="PASS" endtime="20170630 17:46:07.061"></status>
</kw>
<status starttime="20170630 17:46:07.060" status="PASS" endtime="20170630 17:46:07.061"></status>
</kw>
<status starttime="20170630 17:46:07.059" status="PASS" endtime="20170630 17:46:07.061"></status>
</kw>
<status starttime="20170630 17:46:07.058" status="PASS" endtime="20170630 17:46:07.061"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:07.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:06.684" status="PASS" endtime="20170630 17:46:07.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:07.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:07.061" status="PASS" endtime="20170630 17:46:07.062"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:07.062">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:07.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:07.063">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:07.062" status="PASS" endtime="20170630 17:46:07.063"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:07.063">${state} = Off</msg>
<status starttime="20170630 17:46:06.683" status="PASS" endtime="20170630 17:46:07.063"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:07.063">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:06.683" status="PASS" endtime="20170630 17:46:07.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:07.064">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:07.063" status="FAIL" endtime="20170630 17:46:07.064"></status>
</kw>
<status starttime="20170630 17:46:06.682" status="FAIL" endtime="20170630 17:46:07.064"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.069">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:17.069" status="PASS" endtime="20170630 17:46:17.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:17.070" status="PASS" endtime="20170630 17:46:17.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.071">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:17.071" status="PASS" endtime="20170630 17:46:17.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:17.072" status="PASS" endtime="20170630 17:46:17.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:17.073" status="PASS" endtime="20170630 17:46:17.311"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:17.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:17.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:17.072" status="PASS" endtime="20170630 17:46:17.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:17.312" status="PASS" endtime="20170630 17:46:17.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:17.313" status="PASS" endtime="20170630 17:46:17.313"></status>
</kw>
<status starttime="20170630 17:46:17.068" status="PASS" endtime="20170630 17:46:17.313"></status>
</kw>
<status starttime="20170630 17:46:17.068" status="PASS" endtime="20170630 17:46:17.313"></status>
</kw>
<status starttime="20170630 17:46:17.067" status="PASS" endtime="20170630 17:46:17.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.314">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:17.314" status="PASS" endtime="20170630 17:46:17.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.316">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:17.315" status="PASS" endtime="20170630 17:46:17.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.317">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:17.317" status="PASS" endtime="20170630 17:46:17.317"></status>
</kw>
<status starttime="20170630 17:46:17.316" status="PASS" endtime="20170630 17:46:17.317"></status>
</kw>
<status starttime="20170630 17:46:17.315" status="PASS" endtime="20170630 17:46:17.317"></status>
</kw>
<status starttime="20170630 17:46:17.314" status="PASS" endtime="20170630 17:46:17.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.383">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:17.383">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:17.317" status="PASS" endtime="20170630 17:46:17.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.385">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:17.385" status="PASS" endtime="20170630 17:46:17.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.386">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:17.386" status="PASS" endtime="20170630 17:46:17.386"></status>
</kw>
<status starttime="20170630 17:46:17.385" status="PASS" endtime="20170630 17:46:17.386"></status>
</kw>
<status starttime="20170630 17:46:17.384" status="PASS" endtime="20170630 17:46:17.386"></status>
</kw>
<status starttime="20170630 17:46:17.384" status="PASS" endtime="20170630 17:46:17.386"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:17.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:17.066" status="PASS" endtime="20170630 17:46:17.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:17.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:17.387" status="PASS" endtime="20170630 17:46:17.387"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:17.388">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:17.388">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:17.388">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:17.388" status="PASS" endtime="20170630 17:46:17.388"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:17.388">${state} = Off</msg>
<status starttime="20170630 17:46:17.066" status="PASS" endtime="20170630 17:46:17.388"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:17.389">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:17.065" status="PASS" endtime="20170630 17:46:17.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:17.389">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:17.389" status="FAIL" endtime="20170630 17:46:17.389"></status>
</kw>
<status starttime="20170630 17:46:17.065" status="FAIL" endtime="20170630 17:46:17.390"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.396">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:27.395" status="PASS" endtime="20170630 17:46:27.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:27.396" status="PASS" endtime="20170630 17:46:27.397"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.397">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:27.397" status="PASS" endtime="20170630 17:46:27.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.398">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:27.398" status="PASS" endtime="20170630 17:46:27.398"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.607">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:27.399" status="PASS" endtime="20170630 17:46:27.607"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:27.607">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:27.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:27.398" status="PASS" endtime="20170630 17:46:27.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.608">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:27.607" status="PASS" endtime="20170630 17:46:27.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:27.608" status="PASS" endtime="20170630 17:46:27.608"></status>
</kw>
<status starttime="20170630 17:46:27.395" status="PASS" endtime="20170630 17:46:27.608"></status>
</kw>
<status starttime="20170630 17:46:27.394" status="PASS" endtime="20170630 17:46:27.609"></status>
</kw>
<status starttime="20170630 17:46:27.394" status="PASS" endtime="20170630 17:46:27.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.609">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:27.609" status="PASS" endtime="20170630 17:46:27.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.611">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:27.611" status="PASS" endtime="20170630 17:46:27.611"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.612">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:27.612" status="PASS" endtime="20170630 17:46:27.612"></status>
</kw>
<status starttime="20170630 17:46:27.611" status="PASS" endtime="20170630 17:46:27.612"></status>
</kw>
<status starttime="20170630 17:46:27.610" status="PASS" endtime="20170630 17:46:27.613"></status>
</kw>
<status starttime="20170630 17:46:27.610" status="PASS" endtime="20170630 17:46:27.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.708">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:27.708">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:27.613" status="PASS" endtime="20170630 17:46:27.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.710">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:27.710" status="PASS" endtime="20170630 17:46:27.710"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.711">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:27.711" status="PASS" endtime="20170630 17:46:27.711"></status>
</kw>
<status starttime="20170630 17:46:27.710" status="PASS" endtime="20170630 17:46:27.711"></status>
</kw>
<status starttime="20170630 17:46:27.709" status="PASS" endtime="20170630 17:46:27.711"></status>
</kw>
<status starttime="20170630 17:46:27.709" status="PASS" endtime="20170630 17:46:27.711"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:27.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:27.393" status="PASS" endtime="20170630 17:46:27.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:27.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:27.712" status="PASS" endtime="20170630 17:46:27.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:27.713">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:27.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:27.713">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:27.713" status="PASS" endtime="20170630 17:46:27.713"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:27.713">${state} = Off</msg>
<status starttime="20170630 17:46:27.391" status="PASS" endtime="20170630 17:46:27.713"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:27.714">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:27.390" status="PASS" endtime="20170630 17:46:27.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:27.714">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:27.714" status="FAIL" endtime="20170630 17:46:27.714"></status>
</kw>
<status starttime="20170630 17:46:27.390" status="FAIL" endtime="20170630 17:46:27.714"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:37.719">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:37.719" status="PASS" endtime="20170630 17:46:37.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:37.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:37.720" status="PASS" endtime="20170630 17:46:37.721"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:37.721">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:37.721" status="PASS" endtime="20170630 17:46:37.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:37.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:37.721" status="PASS" endtime="20170630 17:46:37.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:37.967">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:37.723" status="PASS" endtime="20170630 17:46:37.967"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:37.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:37.968">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:37.722" status="PASS" endtime="20170630 17:46:37.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:37.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:37.968" status="PASS" endtime="20170630 17:46:37.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:37.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:37.969" status="PASS" endtime="20170630 17:46:37.969"></status>
</kw>
<status starttime="20170630 17:46:37.718" status="PASS" endtime="20170630 17:46:37.969"></status>
</kw>
<status starttime="20170630 17:46:37.718" status="PASS" endtime="20170630 17:46:37.969"></status>
</kw>
<status starttime="20170630 17:46:37.717" status="PASS" endtime="20170630 17:46:37.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:37.970">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:37.970" status="PASS" endtime="20170630 17:46:37.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:37.972">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:37.971" status="PASS" endtime="20170630 17:46:37.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:37.973">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:37.973" status="PASS" endtime="20170630 17:46:37.973"></status>
</kw>
<status starttime="20170630 17:46:37.972" status="PASS" endtime="20170630 17:46:37.973"></status>
</kw>
<status starttime="20170630 17:46:37.971" status="PASS" endtime="20170630 17:46:37.973"></status>
</kw>
<status starttime="20170630 17:46:37.970" status="PASS" endtime="20170630 17:46:37.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:38.040">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:38.040">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:37.974" status="PASS" endtime="20170630 17:46:38.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:38.042">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:38.042" status="PASS" endtime="20170630 17:46:38.042"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:38.043">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:38.043" status="PASS" endtime="20170630 17:46:38.043"></status>
</kw>
<status starttime="20170630 17:46:38.042" status="PASS" endtime="20170630 17:46:38.043"></status>
</kw>
<status starttime="20170630 17:46:38.041" status="PASS" endtime="20170630 17:46:38.043"></status>
</kw>
<status starttime="20170630 17:46:38.041" status="PASS" endtime="20170630 17:46:38.044"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:38.044">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:37.717" status="PASS" endtime="20170630 17:46:38.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:38.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:38.044" status="PASS" endtime="20170630 17:46:38.045"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:38.045">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:38.045">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:38.045">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:38.045" status="PASS" endtime="20170630 17:46:38.045"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:38.045">${state} = Off</msg>
<status starttime="20170630 17:46:37.716" status="PASS" endtime="20170630 17:46:38.046"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:38.046">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:37.716" status="PASS" endtime="20170630 17:46:38.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:38.046">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:38.046" status="FAIL" endtime="20170630 17:46:38.046"></status>
</kw>
<status starttime="20170630 17:46:37.715" status="FAIL" endtime="20170630 17:46:38.047"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.052">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:48.051" status="PASS" endtime="20170630 17:46:48.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:48.052" status="PASS" endtime="20170630 17:46:48.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.053">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:48.053" status="PASS" endtime="20170630 17:46:48.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:48.054" status="PASS" endtime="20170630 17:46:48.054"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.315">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:48.055" status="PASS" endtime="20170630 17:46:48.315"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:48.315">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:48.315">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:48.054" status="PASS" endtime="20170630 17:46:48.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.316">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:48.316" status="PASS" endtime="20170630 17:46:48.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:48.316" status="PASS" endtime="20170630 17:46:48.317"></status>
</kw>
<status starttime="20170630 17:46:48.051" status="PASS" endtime="20170630 17:46:48.317"></status>
</kw>
<status starttime="20170630 17:46:48.051" status="PASS" endtime="20170630 17:46:48.317"></status>
</kw>
<status starttime="20170630 17:46:48.050" status="PASS" endtime="20170630 17:46:48.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.318">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:48.317" status="PASS" endtime="20170630 17:46:48.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.320">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:48.319" status="PASS" endtime="20170630 17:46:48.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.321">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:48.321" status="PASS" endtime="20170630 17:46:48.321"></status>
</kw>
<status starttime="20170630 17:46:48.320" status="PASS" endtime="20170630 17:46:48.321"></status>
</kw>
<status starttime="20170630 17:46:48.319" status="PASS" endtime="20170630 17:46:48.321"></status>
</kw>
<status starttime="20170630 17:46:48.318" status="PASS" endtime="20170630 17:46:48.321"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.388">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:48.388">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:48.321" status="PASS" endtime="20170630 17:46:48.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.390">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:48.389" status="PASS" endtime="20170630 17:46:48.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.391">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:48.391" status="PASS" endtime="20170630 17:46:48.391"></status>
</kw>
<status starttime="20170630 17:46:48.390" status="PASS" endtime="20170630 17:46:48.391"></status>
</kw>
<status starttime="20170630 17:46:48.389" status="PASS" endtime="20170630 17:46:48.391"></status>
</kw>
<status starttime="20170630 17:46:48.389" status="PASS" endtime="20170630 17:46:48.391"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:48.391">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:48.049" status="PASS" endtime="20170630 17:46:48.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:48.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:48.392" status="PASS" endtime="20170630 17:46:48.392"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:48.393">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:48.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:48.393">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:48.392" status="PASS" endtime="20170630 17:46:48.393"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:48.393">${state} = Off</msg>
<status starttime="20170630 17:46:48.048" status="PASS" endtime="20170630 17:46:48.393"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:48.393">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:48.048" status="PASS" endtime="20170630 17:46:48.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:48.394">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:48.394" status="FAIL" endtime="20170630 17:46:48.394"></status>
</kw>
<status starttime="20170630 17:46:48.047" status="FAIL" endtime="20170630 17:46:48.394"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.399">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:46:58.398" status="PASS" endtime="20170630 17:46:58.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.400">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:46:58.399" status="PASS" endtime="20170630 17:46:58.400"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.400">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:46:58.400" status="PASS" endtime="20170630 17:46:58.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.401">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:46:58.401" status="PASS" endtime="20170630 17:46:58.401"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:46:58.402" status="PASS" endtime="20170630 17:46:58.665"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:58.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:46:58.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:58.401" status="PASS" endtime="20170630 17:46:58.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.666">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:58.666" status="PASS" endtime="20170630 17:46:58.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:58.666" status="PASS" endtime="20170630 17:46:58.667"></status>
</kw>
<status starttime="20170630 17:46:58.398" status="PASS" endtime="20170630 17:46:58.667"></status>
</kw>
<status starttime="20170630 17:46:58.397" status="PASS" endtime="20170630 17:46:58.667"></status>
</kw>
<status starttime="20170630 17:46:58.397" status="PASS" endtime="20170630 17:46:58.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.668">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:46:58.667" status="PASS" endtime="20170630 17:46:58.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.670">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:58.669" status="PASS" endtime="20170630 17:46:58.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.670">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:46:58.670" status="PASS" endtime="20170630 17:46:58.671"></status>
</kw>
<status starttime="20170630 17:46:58.670" status="PASS" endtime="20170630 17:46:58.671"></status>
</kw>
<status starttime="20170630 17:46:58.668" status="PASS" endtime="20170630 17:46:58.671"></status>
</kw>
<status starttime="20170630 17:46:58.668" status="PASS" endtime="20170630 17:46:58.671"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.737">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:46:58.738">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:58.671" status="PASS" endtime="20170630 17:46:58.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.739">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:58.739" status="PASS" endtime="20170630 17:46:58.739"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.740">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:46:58.740" status="PASS" endtime="20170630 17:46:58.740"></status>
</kw>
<status starttime="20170630 17:46:58.739" status="PASS" endtime="20170630 17:46:58.741"></status>
</kw>
<status starttime="20170630 17:46:58.738" status="PASS" endtime="20170630 17:46:58.741"></status>
</kw>
<status starttime="20170630 17:46:58.738" status="PASS" endtime="20170630 17:46:58.741"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:58.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:46:58.396" status="PASS" endtime="20170630 17:46:58.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:46:58.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:46:58.741" status="PASS" endtime="20170630 17:46:58.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:46:58.742">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:46:58.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:46:58.742">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:46:58.742" status="PASS" endtime="20170630 17:46:58.742"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:58.743">${state} = Off</msg>
<status starttime="20170630 17:46:58.396" status="PASS" endtime="20170630 17:46:58.743"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:46:58.743">${boot_progress} = Off</msg>
<status starttime="20170630 17:46:58.395" status="PASS" endtime="20170630 17:46:58.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:46:58.743">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:46:58.743" status="FAIL" endtime="20170630 17:46:58.744"></status>
</kw>
<status starttime="20170630 17:46:58.395" status="FAIL" endtime="20170630 17:46:58.744"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:08.749">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:47:08.748" status="PASS" endtime="20170630 17:47:08.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:08.750">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:47:08.749" status="PASS" endtime="20170630 17:47:08.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:08.750">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:47:08.750" status="PASS" endtime="20170630 17:47:08.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:08.751">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:47:08.751" status="PASS" endtime="20170630 17:47:08.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:47:08.752" status="PASS" endtime="20170630 17:47:09.035"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:09.035">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:47:09.035">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:08.751" status="PASS" endtime="20170630 17:47:09.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:09.035" status="PASS" endtime="20170630 17:47:09.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:09.036" status="PASS" endtime="20170630 17:47:09.036"></status>
</kw>
<status starttime="20170630 17:47:08.748" status="PASS" endtime="20170630 17:47:09.036"></status>
</kw>
<status starttime="20170630 17:47:08.747" status="PASS" endtime="20170630 17:47:09.036"></status>
</kw>
<status starttime="20170630 17:47:08.746" status="PASS" endtime="20170630 17:47:09.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:09.037">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:47:09.037" status="PASS" endtime="20170630 17:47:09.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:09.039">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:09.039" status="PASS" endtime="20170630 17:47:09.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.040">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:09.040" status="PASS" endtime="20170630 17:47:09.040"></status>
</kw>
<status starttime="20170630 17:47:09.039" status="PASS" endtime="20170630 17:47:09.040"></status>
</kw>
<status starttime="20170630 17:47:09.038" status="PASS" endtime="20170630 17:47:09.040"></status>
</kw>
<status starttime="20170630 17:47:09.037" status="PASS" endtime="20170630 17:47:09.041"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:09.182">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:47:09.182">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:09.041" status="PASS" endtime="20170630 17:47:09.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:09.184">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:09.184" status="PASS" endtime="20170630 17:47:09.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.185">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:09.185" status="PASS" endtime="20170630 17:47:09.185"></status>
</kw>
<status starttime="20170630 17:47:09.184" status="PASS" endtime="20170630 17:47:09.186"></status>
</kw>
<status starttime="20170630 17:47:09.183" status="PASS" endtime="20170630 17:47:09.186"></status>
</kw>
<status starttime="20170630 17:47:09.183" status="PASS" endtime="20170630 17:47:09.186"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:09.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:08.746" status="PASS" endtime="20170630 17:47:09.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:09.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:09.186" status="PASS" endtime="20170630 17:47:09.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:09.187">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:47:09.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:47:09.187">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:47:09.187" status="PASS" endtime="20170630 17:47:09.187"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:09.188">${state} = Off</msg>
<status starttime="20170630 17:47:08.745" status="PASS" endtime="20170630 17:47:09.188"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:09.188">${boot_progress} = Off</msg>
<status starttime="20170630 17:47:08.745" status="PASS" endtime="20170630 17:47:09.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:47:09.188">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:47:09.188" status="FAIL" endtime="20170630 17:47:09.189"></status>
</kw>
<status starttime="20170630 17:47:08.744" status="FAIL" endtime="20170630 17:47:09.189"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.193">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:47:19.193" status="PASS" endtime="20170630 17:47:19.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.194">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:47:19.194" status="PASS" endtime="20170630 17:47:19.194"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.195">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:47:19.194" status="PASS" endtime="20170630 17:47:19.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:47:19.195" status="PASS" endtime="20170630 17:47:19.195"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:47:19.196" status="PASS" endtime="20170630 17:47:19.390"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:19.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:47:19.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:19.196" status="PASS" endtime="20170630 17:47:19.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:19.390" status="PASS" endtime="20170630 17:47:19.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:19.391" status="PASS" endtime="20170630 17:47:19.391"></status>
</kw>
<status starttime="20170630 17:47:19.192" status="PASS" endtime="20170630 17:47:19.392"></status>
</kw>
<status starttime="20170630 17:47:19.192" status="PASS" endtime="20170630 17:47:19.392"></status>
</kw>
<status starttime="20170630 17:47:19.191" status="PASS" endtime="20170630 17:47:19.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.392">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:47:19.392" status="PASS" endtime="20170630 17:47:19.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.394">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:19.394" status="PASS" endtime="20170630 17:47:19.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.395">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:19.395" status="PASS" endtime="20170630 17:47:19.395"></status>
</kw>
<status starttime="20170630 17:47:19.395" status="PASS" endtime="20170630 17:47:19.396"></status>
</kw>
<status starttime="20170630 17:47:19.393" status="PASS" endtime="20170630 17:47:19.396"></status>
</kw>
<status starttime="20170630 17:47:19.393" status="PASS" endtime="20170630 17:47:19.396"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.507">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:47:19.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:19.396" status="PASS" endtime="20170630 17:47:19.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.509">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:19.508" status="PASS" endtime="20170630 17:47:19.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.509">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:19.509" status="PASS" endtime="20170630 17:47:19.510"></status>
</kw>
<status starttime="20170630 17:47:19.509" status="PASS" endtime="20170630 17:47:19.510"></status>
</kw>
<status starttime="20170630 17:47:19.508" status="PASS" endtime="20170630 17:47:19.510"></status>
</kw>
<status starttime="20170630 17:47:19.507" status="PASS" endtime="20170630 17:47:19.510"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:19.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:19.190" status="PASS" endtime="20170630 17:47:19.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:19.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:19.510" status="PASS" endtime="20170630 17:47:19.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:19.511">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:47:19.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:47:19.512">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:47:19.511" status="PASS" endtime="20170630 17:47:19.512"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:19.512">${state} = Off</msg>
<status starttime="20170630 17:47:19.190" status="PASS" endtime="20170630 17:47:19.512"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:19.512">${boot_progress} = Off</msg>
<status starttime="20170630 17:47:19.189" status="PASS" endtime="20170630 17:47:19.512"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:47:19.513">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:47:19.512" status="FAIL" endtime="20170630 17:47:19.513"></status>
</kw>
<status starttime="20170630 17:47:19.189" status="FAIL" endtime="20170630 17:47:19.513"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.518">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:47:29.518" status="PASS" endtime="20170630 17:47:29.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:47:29.518" status="PASS" endtime="20170630 17:47:29.519"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:47:29.519" status="PASS" endtime="20170630 17:47:29.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:47:29.520" status="PASS" endtime="20170630 17:47:29.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.731">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:47:29.521" status="PASS" endtime="20170630 17:47:29.731"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:29.731">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:47:29.731">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:29.520" status="PASS" endtime="20170630 17:47:29.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.732">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:29.731" status="PASS" endtime="20170630 17:47:29.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:29.732" status="PASS" endtime="20170630 17:47:29.732"></status>
</kw>
<status starttime="20170630 17:47:29.517" status="PASS" endtime="20170630 17:47:29.733"></status>
</kw>
<status starttime="20170630 17:47:29.516" status="PASS" endtime="20170630 17:47:29.733"></status>
</kw>
<status starttime="20170630 17:47:29.516" status="PASS" endtime="20170630 17:47:29.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.733">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:47:29.733" status="PASS" endtime="20170630 17:47:29.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.736">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:29.735" status="PASS" endtime="20170630 17:47:29.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.737">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:29.736" status="PASS" endtime="20170630 17:47:29.737"></status>
</kw>
<status starttime="20170630 17:47:29.736" status="PASS" endtime="20170630 17:47:29.737"></status>
</kw>
<status starttime="20170630 17:47:29.734" status="PASS" endtime="20170630 17:47:29.737"></status>
</kw>
<status starttime="20170630 17:47:29.734" status="PASS" endtime="20170630 17:47:29.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.803">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:47:29.803">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:29.737" status="PASS" endtime="20170630 17:47:29.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.805">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:29.804" status="PASS" endtime="20170630 17:47:29.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.806">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:29.806" status="PASS" endtime="20170630 17:47:29.806"></status>
</kw>
<status starttime="20170630 17:47:29.805" status="PASS" endtime="20170630 17:47:29.806"></status>
</kw>
<status starttime="20170630 17:47:29.804" status="PASS" endtime="20170630 17:47:29.806"></status>
</kw>
<status starttime="20170630 17:47:29.803" status="PASS" endtime="20170630 17:47:29.806"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:29.806">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:29.515" status="PASS" endtime="20170630 17:47:29.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:29.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:29.807" status="PASS" endtime="20170630 17:47:29.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:29.808">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:47:29.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:47:29.808">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:47:29.807" status="PASS" endtime="20170630 17:47:29.808"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:29.808">${state} = Off</msg>
<status starttime="20170630 17:47:29.514" status="PASS" endtime="20170630 17:47:29.808"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:29.808">${boot_progress} = Off</msg>
<status starttime="20170630 17:47:29.514" status="PASS" endtime="20170630 17:47:29.808"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:47:29.809">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:47:29.809" status="FAIL" endtime="20170630 17:47:29.809"></status>
</kw>
<status starttime="20170630 17:47:29.513" status="FAIL" endtime="20170630 17:47:29.809"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:39.814">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:47:39.813" status="PASS" endtime="20170630 17:47:39.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:39.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:47:39.814" status="PASS" endtime="20170630 17:47:39.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:39.815">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:47:39.815" status="PASS" endtime="20170630 17:47:39.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:39.816">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:47:39.816" status="PASS" endtime="20170630 17:47:39.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.025">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:47:39.817" status="PASS" endtime="20170630 17:47:40.026"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:40.026">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:47:40.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:39.816" status="PASS" endtime="20170630 17:47:40.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:40.026" status="PASS" endtime="20170630 17:47:40.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:40.027" status="PASS" endtime="20170630 17:47:40.027"></status>
</kw>
<status starttime="20170630 17:47:39.813" status="PASS" endtime="20170630 17:47:40.027"></status>
</kw>
<status starttime="20170630 17:47:39.812" status="PASS" endtime="20170630 17:47:40.027"></status>
</kw>
<status starttime="20170630 17:47:39.812" status="PASS" endtime="20170630 17:47:40.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:40.028">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:47:40.028" status="PASS" endtime="20170630 17:47:40.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:40.030">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:40.029" status="PASS" endtime="20170630 17:47:40.030"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.031">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:40.031" status="PASS" endtime="20170630 17:47:40.031"></status>
</kw>
<status starttime="20170630 17:47:40.030" status="PASS" endtime="20170630 17:47:40.031"></status>
</kw>
<status starttime="20170630 17:47:40.029" status="PASS" endtime="20170630 17:47:40.031"></status>
</kw>
<status starttime="20170630 17:47:40.028" status="PASS" endtime="20170630 17:47:40.031"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:40.098">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:47:40.098">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:40.032" status="PASS" endtime="20170630 17:47:40.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:40.100">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:40.099" status="PASS" endtime="20170630 17:47:40.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.100">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:40.100" status="PASS" endtime="20170630 17:47:40.101"></status>
</kw>
<status starttime="20170630 17:47:40.100" status="PASS" endtime="20170630 17:47:40.101"></status>
</kw>
<status starttime="20170630 17:47:40.099" status="PASS" endtime="20170630 17:47:40.101"></status>
</kw>
<status starttime="20170630 17:47:40.098" status="PASS" endtime="20170630 17:47:40.101"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:40.101">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:39.811" status="PASS" endtime="20170630 17:47:40.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:40.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:40.101" status="PASS" endtime="20170630 17:47:40.102"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:40.102">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:47:40.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:47:40.102">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:47:40.102" status="PASS" endtime="20170630 17:47:40.102"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:40.103">${state} = Off</msg>
<status starttime="20170630 17:47:39.811" status="PASS" endtime="20170630 17:47:40.103"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:40.103">${boot_progress} = Off</msg>
<status starttime="20170630 17:47:39.810" status="PASS" endtime="20170630 17:47:40.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:47:40.104">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:47:40.103" status="FAIL" endtime="20170630 17:47:40.104"></status>
</kw>
<status starttime="20170630 17:47:39.810" status="FAIL" endtime="20170630 17:47:40.104"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.109">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:47:50.108" status="PASS" endtime="20170630 17:47:50.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:47:50.109" status="PASS" endtime="20170630 17:47:50.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.110">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:47:50.110" status="PASS" endtime="20170630 17:47:50.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:47:50.111" status="PASS" endtime="20170630 17:47:50.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.297">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:47:50.112" status="PASS" endtime="20170630 17:47:50.297"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:50.297">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:47:50.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:50.111" status="PASS" endtime="20170630 17:47:50.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.298">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:50.298" status="PASS" endtime="20170630 17:47:50.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:50.298" status="PASS" endtime="20170630 17:47:50.299"></status>
</kw>
<status starttime="20170630 17:47:50.108" status="PASS" endtime="20170630 17:47:50.299"></status>
</kw>
<status starttime="20170630 17:47:50.107" status="PASS" endtime="20170630 17:47:50.299"></status>
</kw>
<status starttime="20170630 17:47:50.106" status="PASS" endtime="20170630 17:47:50.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.300">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:47:50.299" status="PASS" endtime="20170630 17:47:50.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.302">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:50.301" status="PASS" endtime="20170630 17:47:50.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.303">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:47:50.302" status="PASS" endtime="20170630 17:47:50.303"></status>
</kw>
<status starttime="20170630 17:47:50.302" status="PASS" endtime="20170630 17:47:50.303"></status>
</kw>
<status starttime="20170630 17:47:50.300" status="PASS" endtime="20170630 17:47:50.303"></status>
</kw>
<status starttime="20170630 17:47:50.300" status="PASS" endtime="20170630 17:47:50.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.392">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:47:50.392">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:50.303" status="PASS" endtime="20170630 17:47:50.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.394">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:50.393" status="PASS" endtime="20170630 17:47:50.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.397">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:47:50.397" status="PASS" endtime="20170630 17:47:50.397"></status>
</kw>
<status starttime="20170630 17:47:50.394" status="PASS" endtime="20170630 17:47:50.397"></status>
</kw>
<status starttime="20170630 17:47:50.393" status="PASS" endtime="20170630 17:47:50.397"></status>
</kw>
<status starttime="20170630 17:47:50.392" status="PASS" endtime="20170630 17:47:50.397"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:50.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:47:50.106" status="PASS" endtime="20170630 17:47:50.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:47:50.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:47:50.398" status="PASS" endtime="20170630 17:47:50.398"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:47:50.399">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:47:50.399">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:47:50.399">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:47:50.398" status="PASS" endtime="20170630 17:47:50.399"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:50.399">${state} = Off</msg>
<status starttime="20170630 17:47:50.105" status="PASS" endtime="20170630 17:47:50.399"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:47:50.399">${boot_progress} = Off</msg>
<status starttime="20170630 17:47:50.105" status="PASS" endtime="20170630 17:47:50.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:47:50.400">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:47:50.400" status="FAIL" endtime="20170630 17:47:50.400"></status>
</kw>
<status starttime="20170630 17:47:50.104" status="FAIL" endtime="20170630 17:47:50.400"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.405">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:00.405" status="PASS" endtime="20170630 17:48:00.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:00.406" status="PASS" endtime="20170630 17:48:00.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.407">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:00.406" status="PASS" endtime="20170630 17:48:00.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:00.407" status="PASS" endtime="20170630 17:48:00.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.606">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:00.408" status="PASS" endtime="20170630 17:48:00.607"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:00.607">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:00.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:00.408" status="PASS" endtime="20170630 17:48:00.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.608">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:00.607" status="PASS" endtime="20170630 17:48:00.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:00.609" status="PASS" endtime="20170630 17:48:00.609"></status>
</kw>
<status starttime="20170630 17:48:00.404" status="PASS" endtime="20170630 17:48:00.610"></status>
</kw>
<status starttime="20170630 17:48:00.404" status="PASS" endtime="20170630 17:48:00.610"></status>
</kw>
<status starttime="20170630 17:48:00.403" status="PASS" endtime="20170630 17:48:00.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.610">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:00.610" status="PASS" endtime="20170630 17:48:00.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.613">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:00.612" status="PASS" endtime="20170630 17:48:00.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.614">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:00.613" status="PASS" endtime="20170630 17:48:00.614"></status>
</kw>
<status starttime="20170630 17:48:00.613" status="PASS" endtime="20170630 17:48:00.614"></status>
</kw>
<status starttime="20170630 17:48:00.611" status="PASS" endtime="20170630 17:48:00.614"></status>
</kw>
<status starttime="20170630 17:48:00.611" status="PASS" endtime="20170630 17:48:00.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.681">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:00.681">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:00.614" status="PASS" endtime="20170630 17:48:00.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.683">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:00.682" status="PASS" endtime="20170630 17:48:00.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.684">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:00.683" status="PASS" endtime="20170630 17:48:00.684"></status>
</kw>
<status starttime="20170630 17:48:00.683" status="PASS" endtime="20170630 17:48:00.684"></status>
</kw>
<status starttime="20170630 17:48:00.682" status="PASS" endtime="20170630 17:48:00.684"></status>
</kw>
<status starttime="20170630 17:48:00.681" status="PASS" endtime="20170630 17:48:00.684"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:00.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:00.402" status="PASS" endtime="20170630 17:48:00.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:00.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:00.685" status="PASS" endtime="20170630 17:48:00.685"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:00.686">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:00.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:00.686">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:00.685" status="PASS" endtime="20170630 17:48:00.686"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:00.686">${state} = Off</msg>
<status starttime="20170630 17:48:00.402" status="PASS" endtime="20170630 17:48:00.686"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:00.686">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:00.401" status="PASS" endtime="20170630 17:48:00.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:00.687">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:00.687" status="FAIL" endtime="20170630 17:48:00.687"></status>
</kw>
<status starttime="20170630 17:48:00.401" status="FAIL" endtime="20170630 17:48:00.687"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:10.692">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:10.692" status="PASS" endtime="20170630 17:48:10.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:10.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:10.693" status="PASS" endtime="20170630 17:48:10.694"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:10.694">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:10.694" status="PASS" endtime="20170630 17:48:10.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:10.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:10.695" status="PASS" endtime="20170630 17:48:10.695"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:10.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:10.696" status="PASS" endtime="20170630 17:48:10.968"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:10.969">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:10.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:10.696" status="PASS" endtime="20170630 17:48:10.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:10.969">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:10.969" status="PASS" endtime="20170630 17:48:10.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:10.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:10.970" status="PASS" endtime="20170630 17:48:10.970"></status>
</kw>
<status starttime="20170630 17:48:10.691" status="PASS" endtime="20170630 17:48:10.970"></status>
</kw>
<status starttime="20170630 17:48:10.691" status="PASS" endtime="20170630 17:48:10.970"></status>
</kw>
<status starttime="20170630 17:48:10.690" status="PASS" endtime="20170630 17:48:10.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:10.971">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:10.971" status="PASS" endtime="20170630 17:48:10.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:10.973">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:10.973" status="PASS" endtime="20170630 17:48:10.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:10.974">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:10.974" status="PASS" endtime="20170630 17:48:10.974"></status>
</kw>
<status starttime="20170630 17:48:10.973" status="PASS" endtime="20170630 17:48:10.974"></status>
</kw>
<status starttime="20170630 17:48:10.972" status="PASS" endtime="20170630 17:48:10.974"></status>
</kw>
<status starttime="20170630 17:48:10.971" status="PASS" endtime="20170630 17:48:10.975"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:11.060">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:11.061">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:10.975" status="PASS" endtime="20170630 17:48:11.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:11.062">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:11.062" status="PASS" endtime="20170630 17:48:11.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:11.063">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:11.063" status="PASS" endtime="20170630 17:48:11.063"></status>
</kw>
<status starttime="20170630 17:48:11.063" status="PASS" endtime="20170630 17:48:11.063"></status>
</kw>
<status starttime="20170630 17:48:11.061" status="PASS" endtime="20170630 17:48:11.064"></status>
</kw>
<status starttime="20170630 17:48:11.061" status="PASS" endtime="20170630 17:48:11.064"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:11.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:10.689" status="PASS" endtime="20170630 17:48:11.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:11.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:11.064" status="PASS" endtime="20170630 17:48:11.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:11.065">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:11.065">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:11.065">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:11.065" status="PASS" endtime="20170630 17:48:11.065"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:11.066">${state} = Off</msg>
<status starttime="20170630 17:48:10.689" status="PASS" endtime="20170630 17:48:11.066"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:11.066">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:10.688" status="PASS" endtime="20170630 17:48:11.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:11.067">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:11.066" status="FAIL" endtime="20170630 17:48:11.067"></status>
</kw>
<status starttime="20170630 17:48:10.688" status="FAIL" endtime="20170630 17:48:11.067"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.072">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:21.072" status="PASS" endtime="20170630 17:48:21.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:21.073" status="PASS" endtime="20170630 17:48:21.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.074">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:21.073" status="PASS" endtime="20170630 17:48:21.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:21.074" status="PASS" endtime="20170630 17:48:21.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:21.075" status="PASS" endtime="20170630 17:48:21.255"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:21.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:21.255">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:21.075" status="PASS" endtime="20170630 17:48:21.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:21.255" status="PASS" endtime="20170630 17:48:21.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:21.256" status="PASS" endtime="20170630 17:48:21.256"></status>
</kw>
<status starttime="20170630 17:48:21.071" status="PASS" endtime="20170630 17:48:21.257"></status>
</kw>
<status starttime="20170630 17:48:21.071" status="PASS" endtime="20170630 17:48:21.257"></status>
</kw>
<status starttime="20170630 17:48:21.070" status="PASS" endtime="20170630 17:48:21.257"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.257">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:21.257" status="PASS" endtime="20170630 17:48:21.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.259">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:21.259" status="PASS" endtime="20170630 17:48:21.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.260">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:21.260" status="PASS" endtime="20170630 17:48:21.260"></status>
</kw>
<status starttime="20170630 17:48:21.260" status="PASS" endtime="20170630 17:48:21.261"></status>
</kw>
<status starttime="20170630 17:48:21.258" status="PASS" endtime="20170630 17:48:21.261"></status>
</kw>
<status starttime="20170630 17:48:21.258" status="PASS" endtime="20170630 17:48:21.261"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.364">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:21.364">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:21.261" status="PASS" endtime="20170630 17:48:21.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.366">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:21.366" status="PASS" endtime="20170630 17:48:21.366"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.367">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:21.367" status="PASS" endtime="20170630 17:48:21.367"></status>
</kw>
<status starttime="20170630 17:48:21.366" status="PASS" endtime="20170630 17:48:21.368"></status>
</kw>
<status starttime="20170630 17:48:21.365" status="PASS" endtime="20170630 17:48:21.368"></status>
</kw>
<status starttime="20170630 17:48:21.365" status="PASS" endtime="20170630 17:48:21.368"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:21.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:21.069" status="PASS" endtime="20170630 17:48:21.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:21.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:21.368" status="PASS" endtime="20170630 17:48:21.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:21.369">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:21.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:21.369">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:21.369" status="PASS" endtime="20170630 17:48:21.369"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:21.370">${state} = Off</msg>
<status starttime="20170630 17:48:21.068" status="PASS" endtime="20170630 17:48:21.370"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:21.370">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:21.068" status="PASS" endtime="20170630 17:48:21.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:21.371">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:21.370" status="FAIL" endtime="20170630 17:48:21.371"></status>
</kw>
<status starttime="20170630 17:48:21.067" status="FAIL" endtime="20170630 17:48:21.371"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.375">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:31.375" status="PASS" endtime="20170630 17:48:31.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:31.376" status="PASS" endtime="20170630 17:48:31.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:31.376" status="PASS" endtime="20170630 17:48:31.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:31.377" status="PASS" endtime="20170630 17:48:31.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:31.378" status="PASS" endtime="20170630 17:48:31.555"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:31.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:31.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:31.378" status="PASS" endtime="20170630 17:48:31.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.555">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:31.555" status="PASS" endtime="20170630 17:48:31.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:31.556" status="PASS" endtime="20170630 17:48:31.556"></status>
</kw>
<status starttime="20170630 17:48:31.374" status="PASS" endtime="20170630 17:48:31.556"></status>
</kw>
<status starttime="20170630 17:48:31.374" status="PASS" endtime="20170630 17:48:31.556"></status>
</kw>
<status starttime="20170630 17:48:31.373" status="PASS" endtime="20170630 17:48:31.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.557">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:31.557" status="PASS" endtime="20170630 17:48:31.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.559">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:31.559" status="PASS" endtime="20170630 17:48:31.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.560">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:31.560" status="PASS" endtime="20170630 17:48:31.560"></status>
</kw>
<status starttime="20170630 17:48:31.559" status="PASS" endtime="20170630 17:48:31.560"></status>
</kw>
<status starttime="20170630 17:48:31.558" status="PASS" endtime="20170630 17:48:31.561"></status>
</kw>
<status starttime="20170630 17:48:31.557" status="PASS" endtime="20170630 17:48:31.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.626">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:31.626">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:31.561" status="PASS" endtime="20170630 17:48:31.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.628">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:31.628" status="PASS" endtime="20170630 17:48:31.628"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.629">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:31.629" status="PASS" endtime="20170630 17:48:31.629"></status>
</kw>
<status starttime="20170630 17:48:31.629" status="PASS" endtime="20170630 17:48:31.629"></status>
</kw>
<status starttime="20170630 17:48:31.627" status="PASS" endtime="20170630 17:48:31.630"></status>
</kw>
<status starttime="20170630 17:48:31.627" status="PASS" endtime="20170630 17:48:31.630"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:31.630">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:31.373" status="PASS" endtime="20170630 17:48:31.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:31.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:31.630" status="PASS" endtime="20170630 17:48:31.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:31.631">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:31.631">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:31.631">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:31.631" status="PASS" endtime="20170630 17:48:31.631"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:31.631">${state} = Off</msg>
<status starttime="20170630 17:48:31.372" status="PASS" endtime="20170630 17:48:31.632"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:31.632">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:31.372" status="PASS" endtime="20170630 17:48:31.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:31.632">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:31.632" status="FAIL" endtime="20170630 17:48:31.632"></status>
</kw>
<status starttime="20170630 17:48:31.371" status="FAIL" endtime="20170630 17:48:31.633"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.638">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:41.638" status="PASS" endtime="20170630 17:48:41.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:41.639" status="PASS" endtime="20170630 17:48:41.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.640">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:41.640" status="PASS" endtime="20170630 17:48:41.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:41.640" status="PASS" endtime="20170630 17:48:41.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:41.641" status="PASS" endtime="20170630 17:48:41.818"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:41.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:41.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:41.641" status="PASS" endtime="20170630 17:48:41.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:41.818" status="PASS" endtime="20170630 17:48:41.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:41.819" status="PASS" endtime="20170630 17:48:41.819"></status>
</kw>
<status starttime="20170630 17:48:41.636" status="PASS" endtime="20170630 17:48:41.819"></status>
</kw>
<status starttime="20170630 17:48:41.636" status="PASS" endtime="20170630 17:48:41.819"></status>
</kw>
<status starttime="20170630 17:48:41.635" status="PASS" endtime="20170630 17:48:41.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.820">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:41.820" status="PASS" endtime="20170630 17:48:41.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.822">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:41.822" status="PASS" endtime="20170630 17:48:41.822"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.823">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:41.823" status="PASS" endtime="20170630 17:48:41.823"></status>
</kw>
<status starttime="20170630 17:48:41.822" status="PASS" endtime="20170630 17:48:41.823"></status>
</kw>
<status starttime="20170630 17:48:41.821" status="PASS" endtime="20170630 17:48:41.823"></status>
</kw>
<status starttime="20170630 17:48:41.820" status="PASS" endtime="20170630 17:48:41.824"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.889">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:41.889">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:41.824" status="PASS" endtime="20170630 17:48:41.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.891">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:41.891" status="PASS" endtime="20170630 17:48:41.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.892">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:41.892" status="PASS" endtime="20170630 17:48:41.892"></status>
</kw>
<status starttime="20170630 17:48:41.891" status="PASS" endtime="20170630 17:48:41.893"></status>
</kw>
<status starttime="20170630 17:48:41.890" status="PASS" endtime="20170630 17:48:41.893"></status>
</kw>
<status starttime="20170630 17:48:41.890" status="PASS" endtime="20170630 17:48:41.893"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:41.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:41.635" status="PASS" endtime="20170630 17:48:41.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:41.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:41.893" status="PASS" endtime="20170630 17:48:41.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:41.894">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:41.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:41.894">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:41.894" status="PASS" endtime="20170630 17:48:41.894"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:41.895">${state} = Off</msg>
<status starttime="20170630 17:48:41.634" status="PASS" endtime="20170630 17:48:41.895"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:41.895">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:41.634" status="PASS" endtime="20170630 17:48:41.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:41.896">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:41.895" status="FAIL" endtime="20170630 17:48:41.896"></status>
</kw>
<status starttime="20170630 17:48:41.633" status="FAIL" endtime="20170630 17:48:41.896"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:51.901">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:48:51.901" status="PASS" endtime="20170630 17:48:51.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:51.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:48:51.902" status="PASS" endtime="20170630 17:48:51.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:51.903">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:48:51.902" status="PASS" endtime="20170630 17:48:51.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:51.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:48:51.904" status="PASS" endtime="20170630 17:48:51.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.080">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:48:51.906" status="PASS" endtime="20170630 17:48:52.080"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:52.080">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:48:52.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:51.905" status="PASS" endtime="20170630 17:48:52.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.081">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:52.081" status="PASS" endtime="20170630 17:48:52.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:52.081" status="PASS" endtime="20170630 17:48:52.082"></status>
</kw>
<status starttime="20170630 17:48:51.900" status="PASS" endtime="20170630 17:48:52.082"></status>
</kw>
<status starttime="20170630 17:48:51.900" status="PASS" endtime="20170630 17:48:52.082"></status>
</kw>
<status starttime="20170630 17:48:51.899" status="PASS" endtime="20170630 17:48:52.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:52.083">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:48:52.083" status="PASS" endtime="20170630 17:48:52.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:52.085">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:52.084" status="PASS" endtime="20170630 17:48:52.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.086">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:48:52.086" status="PASS" endtime="20170630 17:48:52.086"></status>
</kw>
<status starttime="20170630 17:48:52.085" status="PASS" endtime="20170630 17:48:52.086"></status>
</kw>
<status starttime="20170630 17:48:52.084" status="PASS" endtime="20170630 17:48:52.086"></status>
</kw>
<status starttime="20170630 17:48:52.083" status="PASS" endtime="20170630 17:48:52.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:52.154">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:48:52.154">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:52.087" status="PASS" endtime="20170630 17:48:52.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:52.157">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:52.156" status="PASS" endtime="20170630 17:48:52.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.158">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:48:52.158" status="PASS" endtime="20170630 17:48:52.158"></status>
</kw>
<status starttime="20170630 17:48:52.157" status="PASS" endtime="20170630 17:48:52.158"></status>
</kw>
<status starttime="20170630 17:48:52.156" status="PASS" endtime="20170630 17:48:52.159"></status>
</kw>
<status starttime="20170630 17:48:52.155" status="PASS" endtime="20170630 17:48:52.159"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:52.159">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:48:51.898" status="PASS" endtime="20170630 17:48:52.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:48:52.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:48:52.159" status="PASS" endtime="20170630 17:48:52.160"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:48:52.160">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:48:52.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:48:52.160">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:48:52.160" status="PASS" endtime="20170630 17:48:52.160"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:52.161">${state} = Off</msg>
<status starttime="20170630 17:48:51.898" status="PASS" endtime="20170630 17:48:52.161"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:48:52.161">${boot_progress} = Off</msg>
<status starttime="20170630 17:48:51.897" status="PASS" endtime="20170630 17:48:52.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:48:52.161">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:48:52.161" status="FAIL" endtime="20170630 17:48:52.162"></status>
</kw>
<status starttime="20170630 17:48:51.896" status="FAIL" endtime="20170630 17:48:52.162"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.167">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:02.167" status="PASS" endtime="20170630 17:49:02.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:02.168" status="PASS" endtime="20170630 17:49:02.168"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.169">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:02.168" status="PASS" endtime="20170630 17:49:02.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.169">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:02.169" status="PASS" endtime="20170630 17:49:02.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:02.170" status="PASS" endtime="20170630 17:49:02.382"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:02.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:02.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:02.170" status="PASS" endtime="20170630 17:49:02.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:02.382" status="PASS" endtime="20170630 17:49:02.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:02.383" status="PASS" endtime="20170630 17:49:02.384"></status>
</kw>
<status starttime="20170630 17:49:02.166" status="PASS" endtime="20170630 17:49:02.384"></status>
</kw>
<status starttime="20170630 17:49:02.165" status="PASS" endtime="20170630 17:49:02.384"></status>
</kw>
<status starttime="20170630 17:49:02.165" status="PASS" endtime="20170630 17:49:02.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.384">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:02.384" status="PASS" endtime="20170630 17:49:02.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.387">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:02.386" status="PASS" endtime="20170630 17:49:02.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.388">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:02.387" status="PASS" endtime="20170630 17:49:02.388"></status>
</kw>
<status starttime="20170630 17:49:02.387" status="PASS" endtime="20170630 17:49:02.388"></status>
</kw>
<status starttime="20170630 17:49:02.385" status="PASS" endtime="20170630 17:49:02.388"></status>
</kw>
<status starttime="20170630 17:49:02.385" status="PASS" endtime="20170630 17:49:02.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.465">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:02.465">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:02.388" status="PASS" endtime="20170630 17:49:02.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.467">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:02.467" status="PASS" endtime="20170630 17:49:02.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.469">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:02.468" status="PASS" endtime="20170630 17:49:02.469"></status>
</kw>
<status starttime="20170630 17:49:02.468" status="PASS" endtime="20170630 17:49:02.469"></status>
</kw>
<status starttime="20170630 17:49:02.466" status="PASS" endtime="20170630 17:49:02.469"></status>
</kw>
<status starttime="20170630 17:49:02.466" status="PASS" endtime="20170630 17:49:02.469"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:02.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:02.164" status="PASS" endtime="20170630 17:49:02.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:02.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:02.469" status="PASS" endtime="20170630 17:49:02.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:02.470">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:02.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:02.471">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:02.470" status="PASS" endtime="20170630 17:49:02.471"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:02.471">${state} = Off</msg>
<status starttime="20170630 17:49:02.163" status="PASS" endtime="20170630 17:49:02.471"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:02.471">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:02.163" status="PASS" endtime="20170630 17:49:02.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:02.472">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:02.471" status="FAIL" endtime="20170630 17:49:02.472"></status>
</kw>
<status starttime="20170630 17:49:02.162" status="FAIL" endtime="20170630 17:49:02.472"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.477">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:12.476" status="PASS" endtime="20170630 17:49:12.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:12.477" status="PASS" endtime="20170630 17:49:12.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:12.478" status="PASS" endtime="20170630 17:49:12.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:12.479" status="PASS" endtime="20170630 17:49:12.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:12.480" status="PASS" endtime="20170630 17:49:12.802"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:12.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:12.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:12.479" status="PASS" endtime="20170630 17:49:12.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:12.802" status="PASS" endtime="20170630 17:49:12.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:12.803" status="PASS" endtime="20170630 17:49:12.803"></status>
</kw>
<status starttime="20170630 17:49:12.476" status="PASS" endtime="20170630 17:49:12.804"></status>
</kw>
<status starttime="20170630 17:49:12.476" status="PASS" endtime="20170630 17:49:12.804"></status>
</kw>
<status starttime="20170630 17:49:12.475" status="PASS" endtime="20170630 17:49:12.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.804">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:12.804" status="PASS" endtime="20170630 17:49:12.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.807">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:12.806" status="PASS" endtime="20170630 17:49:12.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.808">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:12.808" status="PASS" endtime="20170630 17:49:12.808"></status>
</kw>
<status starttime="20170630 17:49:12.807" status="PASS" endtime="20170630 17:49:12.808"></status>
</kw>
<status starttime="20170630 17:49:12.805" status="PASS" endtime="20170630 17:49:12.809"></status>
</kw>
<status starttime="20170630 17:49:12.805" status="PASS" endtime="20170630 17:49:12.809"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.906">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:12.906">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:12.809" status="PASS" endtime="20170630 17:49:12.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.908">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:12.908" status="PASS" endtime="20170630 17:49:12.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.909">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:12.909" status="PASS" endtime="20170630 17:49:12.910"></status>
</kw>
<status starttime="20170630 17:49:12.908" status="PASS" endtime="20170630 17:49:12.910"></status>
</kw>
<status starttime="20170630 17:49:12.907" status="PASS" endtime="20170630 17:49:12.910"></status>
</kw>
<status starttime="20170630 17:49:12.907" status="PASS" endtime="20170630 17:49:12.910"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:12.910">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:12.474" status="PASS" endtime="20170630 17:49:12.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:12.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:12.910" status="PASS" endtime="20170630 17:49:12.911"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:12.912">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:12.912">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:12.912">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:12.911" status="PASS" endtime="20170630 17:49:12.912"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:12.912">${state} = Off</msg>
<status starttime="20170630 17:49:12.474" status="PASS" endtime="20170630 17:49:12.912"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:12.912">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:12.473" status="PASS" endtime="20170630 17:49:12.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:12.913">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:12.913" status="FAIL" endtime="20170630 17:49:12.913"></status>
</kw>
<status starttime="20170630 17:49:12.473" status="FAIL" endtime="20170630 17:49:12.913"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:22.920">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:22.920" status="PASS" endtime="20170630 17:49:22.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:22.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:22.921" status="PASS" endtime="20170630 17:49:22.921"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:22.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:22.921" status="PASS" endtime="20170630 17:49:22.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:22.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:22.922" status="PASS" endtime="20170630 17:49:22.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.106">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:22.924" status="PASS" endtime="20170630 17:49:23.106"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:23.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:23.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:22.923" status="PASS" endtime="20170630 17:49:23.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.107">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:23.107" status="PASS" endtime="20170630 17:49:23.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:23.107" status="PASS" endtime="20170630 17:49:23.108"></status>
</kw>
<status starttime="20170630 17:49:22.917" status="PASS" endtime="20170630 17:49:23.108"></status>
</kw>
<status starttime="20170630 17:49:22.917" status="PASS" endtime="20170630 17:49:23.108"></status>
</kw>
<status starttime="20170630 17:49:22.916" status="PASS" endtime="20170630 17:49:23.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:23.109">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:23.109" status="PASS" endtime="20170630 17:49:23.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:23.112">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:23.110" status="PASS" endtime="20170630 17:49:23.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.113">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:23.112" status="PASS" endtime="20170630 17:49:23.113"></status>
</kw>
<status starttime="20170630 17:49:23.112" status="PASS" endtime="20170630 17:49:23.113"></status>
</kw>
<status starttime="20170630 17:49:23.110" status="PASS" endtime="20170630 17:49:23.113"></status>
</kw>
<status starttime="20170630 17:49:23.109" status="PASS" endtime="20170630 17:49:23.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:23.234">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:23.234">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:23.113" status="PASS" endtime="20170630 17:49:23.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:23.236">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:23.236" status="PASS" endtime="20170630 17:49:23.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.237">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:23.237" status="PASS" endtime="20170630 17:49:23.237"></status>
</kw>
<status starttime="20170630 17:49:23.236" status="PASS" endtime="20170630 17:49:23.238"></status>
</kw>
<status starttime="20170630 17:49:23.235" status="PASS" endtime="20170630 17:49:23.238"></status>
</kw>
<status starttime="20170630 17:49:23.235" status="PASS" endtime="20170630 17:49:23.238"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:23.238">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:22.915" status="PASS" endtime="20170630 17:49:23.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:23.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:23.238" status="PASS" endtime="20170630 17:49:23.239"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:23.239">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:23.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:23.239">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:23.239" status="PASS" endtime="20170630 17:49:23.240"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:23.240">${state} = Off</msg>
<status starttime="20170630 17:49:22.915" status="PASS" endtime="20170630 17:49:23.240"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:23.240">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:22.914" status="PASS" endtime="20170630 17:49:23.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:23.241">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:23.240" status="FAIL" endtime="20170630 17:49:23.241"></status>
</kw>
<status starttime="20170630 17:49:22.914" status="FAIL" endtime="20170630 17:49:23.241"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.245">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:33.245" status="PASS" endtime="20170630 17:49:33.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:33.246" status="PASS" endtime="20170630 17:49:33.246"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.247">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:33.247" status="PASS" endtime="20170630 17:49:33.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:33.247" status="PASS" endtime="20170630 17:49:33.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.426">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:33.248" status="PASS" endtime="20170630 17:49:33.426"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:33.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:33.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:33.248" status="PASS" endtime="20170630 17:49:33.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:33.427" status="PASS" endtime="20170630 17:49:33.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:33.427" status="PASS" endtime="20170630 17:49:33.428"></status>
</kw>
<status starttime="20170630 17:49:33.245" status="PASS" endtime="20170630 17:49:33.428"></status>
</kw>
<status starttime="20170630 17:49:33.244" status="PASS" endtime="20170630 17:49:33.428"></status>
</kw>
<status starttime="20170630 17:49:33.243" status="PASS" endtime="20170630 17:49:33.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.429">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:33.429" status="PASS" endtime="20170630 17:49:33.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.431">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:33.431" status="PASS" endtime="20170630 17:49:33.431"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.432">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:33.432" status="PASS" endtime="20170630 17:49:33.432"></status>
</kw>
<status starttime="20170630 17:49:33.432" status="PASS" endtime="20170630 17:49:33.433"></status>
</kw>
<status starttime="20170630 17:49:33.430" status="PASS" endtime="20170630 17:49:33.433"></status>
</kw>
<status starttime="20170630 17:49:33.429" status="PASS" endtime="20170630 17:49:33.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.512">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:33.512">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:33.433" status="PASS" endtime="20170630 17:49:33.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.514">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:33.513" status="PASS" endtime="20170630 17:49:33.514"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.515">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:33.515" status="PASS" endtime="20170630 17:49:33.515"></status>
</kw>
<status starttime="20170630 17:49:33.514" status="PASS" endtime="20170630 17:49:33.515"></status>
</kw>
<status starttime="20170630 17:49:33.513" status="PASS" endtime="20170630 17:49:33.515"></status>
</kw>
<status starttime="20170630 17:49:33.513" status="PASS" endtime="20170630 17:49:33.515"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:33.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:33.243" status="PASS" endtime="20170630 17:49:33.515"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:33.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:33.516" status="PASS" endtime="20170630 17:49:33.516"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:33.517">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:33.517">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:33.517">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:33.516" status="PASS" endtime="20170630 17:49:33.517"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:33.517">${state} = Off</msg>
<status starttime="20170630 17:49:33.242" status="PASS" endtime="20170630 17:49:33.517"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:33.517">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:33.242" status="PASS" endtime="20170630 17:49:33.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:33.518">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:33.518" status="FAIL" endtime="20170630 17:49:33.518"></status>
</kw>
<status starttime="20170630 17:49:33.241" status="FAIL" endtime="20170630 17:49:33.518"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.523">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:43.522" status="PASS" endtime="20170630 17:49:43.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:43.524" status="PASS" endtime="20170630 17:49:43.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.525">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:43.524" status="PASS" endtime="20170630 17:49:43.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:43.525" status="PASS" endtime="20170630 17:49:43.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:43.526" status="PASS" endtime="20170630 17:49:43.719"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:43.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:43.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:43.526" status="PASS" endtime="20170630 17:49:43.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:43.720" status="PASS" endtime="20170630 17:49:43.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:43.720" status="PASS" endtime="20170630 17:49:43.721"></status>
</kw>
<status starttime="20170630 17:49:43.522" status="PASS" endtime="20170630 17:49:43.721"></status>
</kw>
<status starttime="20170630 17:49:43.521" status="PASS" endtime="20170630 17:49:43.721"></status>
</kw>
<status starttime="20170630 17:49:43.521" status="PASS" endtime="20170630 17:49:43.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.722">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:43.721" status="PASS" endtime="20170630 17:49:43.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.724">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:43.723" status="PASS" endtime="20170630 17:49:43.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.725">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:43.724" status="PASS" endtime="20170630 17:49:43.725"></status>
</kw>
<status starttime="20170630 17:49:43.724" status="PASS" endtime="20170630 17:49:43.725"></status>
</kw>
<status starttime="20170630 17:49:43.722" status="PASS" endtime="20170630 17:49:43.725"></status>
</kw>
<status starttime="20170630 17:49:43.722" status="PASS" endtime="20170630 17:49:43.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.792">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:43.792">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:43.725" status="PASS" endtime="20170630 17:49:43.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.794">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:43.793" status="PASS" endtime="20170630 17:49:43.794"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.794">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:43.794" status="PASS" endtime="20170630 17:49:43.795"></status>
</kw>
<status starttime="20170630 17:49:43.794" status="PASS" endtime="20170630 17:49:43.795"></status>
</kw>
<status starttime="20170630 17:49:43.793" status="PASS" endtime="20170630 17:49:43.795"></status>
</kw>
<status starttime="20170630 17:49:43.792" status="PASS" endtime="20170630 17:49:43.795"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:43.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:43.520" status="PASS" endtime="20170630 17:49:43.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:43.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:43.795" status="PASS" endtime="20170630 17:49:43.796"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:43.796">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:43.796">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:43.797">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:43.796" status="PASS" endtime="20170630 17:49:43.797"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:43.797">${state} = Off</msg>
<status starttime="20170630 17:49:43.520" status="PASS" endtime="20170630 17:49:43.797"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:43.797">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:43.519" status="PASS" endtime="20170630 17:49:43.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:43.798">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:43.797" status="FAIL" endtime="20170630 17:49:43.798"></status>
</kw>
<status starttime="20170630 17:49:43.519" status="FAIL" endtime="20170630 17:49:43.798"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:53.803">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:49:53.803" status="PASS" endtime="20170630 17:49:53.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:53.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:49:53.804" status="PASS" endtime="20170630 17:49:53.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:53.804">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:49:53.804" status="PASS" endtime="20170630 17:49:53.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:53.805">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:49:53.805" status="PASS" endtime="20170630 17:49:53.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.028">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:49:53.806" status="PASS" endtime="20170630 17:49:54.028"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:54.028">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:49:54.029">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:53.805" status="PASS" endtime="20170630 17:49:54.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.029">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:54.029" status="PASS" endtime="20170630 17:49:54.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:54.029" status="PASS" endtime="20170630 17:49:54.030"></status>
</kw>
<status starttime="20170630 17:49:53.802" status="PASS" endtime="20170630 17:49:54.030"></status>
</kw>
<status starttime="20170630 17:49:53.802" status="PASS" endtime="20170630 17:49:54.030"></status>
</kw>
<status starttime="20170630 17:49:53.801" status="PASS" endtime="20170630 17:49:54.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:54.031">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:49:54.030" status="PASS" endtime="20170630 17:49:54.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:54.033">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:54.032" status="PASS" endtime="20170630 17:49:54.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.034">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:49:54.034" status="PASS" endtime="20170630 17:49:54.034"></status>
</kw>
<status starttime="20170630 17:49:54.033" status="PASS" endtime="20170630 17:49:54.034"></status>
</kw>
<status starttime="20170630 17:49:54.032" status="PASS" endtime="20170630 17:49:54.034"></status>
</kw>
<status starttime="20170630 17:49:54.031" status="PASS" endtime="20170630 17:49:54.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:54.125">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:49:54.126">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:54.034" status="PASS" endtime="20170630 17:49:54.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:54.127">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:54.127" status="PASS" endtime="20170630 17:49:54.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.128">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:49:54.128" status="PASS" endtime="20170630 17:49:54.128"></status>
</kw>
<status starttime="20170630 17:49:54.127" status="PASS" endtime="20170630 17:49:54.128"></status>
</kw>
<status starttime="20170630 17:49:54.126" status="PASS" endtime="20170630 17:49:54.129"></status>
</kw>
<status starttime="20170630 17:49:54.126" status="PASS" endtime="20170630 17:49:54.129"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:54.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:49:53.800" status="PASS" endtime="20170630 17:49:54.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:49:54.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:49:54.129" status="PASS" endtime="20170630 17:49:54.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:49:54.130">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:49:54.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:49:54.130">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:49:54.130" status="PASS" endtime="20170630 17:49:54.130"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:54.131">${state} = Off</msg>
<status starttime="20170630 17:49:53.799" status="PASS" endtime="20170630 17:49:54.131"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:49:54.131">${boot_progress} = Off</msg>
<status starttime="20170630 17:49:53.799" status="PASS" endtime="20170630 17:49:54.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:49:54.131">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:49:54.131" status="FAIL" endtime="20170630 17:49:54.132"></status>
</kw>
<status starttime="20170630 17:49:53.798" status="FAIL" endtime="20170630 17:49:54.132"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.137">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:04.136" status="PASS" endtime="20170630 17:50:04.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:04.137" status="PASS" endtime="20170630 17:50:04.138"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.138">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:04.138" status="PASS" endtime="20170630 17:50:04.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.139">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:04.139" status="PASS" endtime="20170630 17:50:04.139"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:04.140" status="PASS" endtime="20170630 17:50:04.367"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:04.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:04.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:04.139" status="PASS" endtime="20170630 17:50:04.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:04.368" status="PASS" endtime="20170630 17:50:04.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:04.369" status="PASS" endtime="20170630 17:50:04.369"></status>
</kw>
<status starttime="20170630 17:50:04.136" status="PASS" endtime="20170630 17:50:04.369"></status>
</kw>
<status starttime="20170630 17:50:04.135" status="PASS" endtime="20170630 17:50:04.370"></status>
</kw>
<status starttime="20170630 17:50:04.135" status="PASS" endtime="20170630 17:50:04.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.370">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:04.370" status="PASS" endtime="20170630 17:50:04.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.372">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:04.372" status="PASS" endtime="20170630 17:50:04.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.373">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:04.373" status="PASS" endtime="20170630 17:50:04.374"></status>
</kw>
<status starttime="20170630 17:50:04.373" status="PASS" endtime="20170630 17:50:04.374"></status>
</kw>
<status starttime="20170630 17:50:04.371" status="PASS" endtime="20170630 17:50:04.374"></status>
</kw>
<status starttime="20170630 17:50:04.371" status="PASS" endtime="20170630 17:50:04.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.446">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:04.446">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:04.374" status="PASS" endtime="20170630 17:50:04.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.448">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:04.448" status="PASS" endtime="20170630 17:50:04.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.449">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:04.449" status="PASS" endtime="20170630 17:50:04.450"></status>
</kw>
<status starttime="20170630 17:50:04.449" status="PASS" endtime="20170630 17:50:04.450"></status>
</kw>
<status starttime="20170630 17:50:04.447" status="PASS" endtime="20170630 17:50:04.450"></status>
</kw>
<status starttime="20170630 17:50:04.447" status="PASS" endtime="20170630 17:50:04.450"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:04.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:04.134" status="PASS" endtime="20170630 17:50:04.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:04.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:04.450" status="PASS" endtime="20170630 17:50:04.451"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:04.451">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:04.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:04.452">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:04.451" status="PASS" endtime="20170630 17:50:04.452"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:04.452">${state} = Off</msg>
<status starttime="20170630 17:50:04.133" status="PASS" endtime="20170630 17:50:04.452"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:04.452">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:04.133" status="PASS" endtime="20170630 17:50:04.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:04.453">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:04.452" status="FAIL" endtime="20170630 17:50:04.453"></status>
</kw>
<status starttime="20170630 17:50:04.132" status="FAIL" endtime="20170630 17:50:04.453"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.458">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:14.458" status="PASS" endtime="20170630 17:50:14.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:14.459" status="PASS" endtime="20170630 17:50:14.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.460">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:14.460" status="PASS" endtime="20170630 17:50:14.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:14.460" status="PASS" endtime="20170630 17:50:14.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:14.461" status="PASS" endtime="20170630 17:50:14.640"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:14.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:14.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:14.461" status="PASS" endtime="20170630 17:50:14.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:14.641" status="PASS" endtime="20170630 17:50:14.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:14.641" status="PASS" endtime="20170630 17:50:14.642"></status>
</kw>
<status starttime="20170630 17:50:14.457" status="PASS" endtime="20170630 17:50:14.642"></status>
</kw>
<status starttime="20170630 17:50:14.457" status="PASS" endtime="20170630 17:50:14.642"></status>
</kw>
<status starttime="20170630 17:50:14.456" status="PASS" endtime="20170630 17:50:14.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.643">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:14.643" status="PASS" endtime="20170630 17:50:14.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.645">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:14.644" status="PASS" endtime="20170630 17:50:14.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.646">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:14.646" status="PASS" endtime="20170630 17:50:14.646"></status>
</kw>
<status starttime="20170630 17:50:14.645" status="PASS" endtime="20170630 17:50:14.646"></status>
</kw>
<status starttime="20170630 17:50:14.644" status="PASS" endtime="20170630 17:50:14.646"></status>
</kw>
<status starttime="20170630 17:50:14.643" status="PASS" endtime="20170630 17:50:14.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.713">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:14.713">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:14.647" status="PASS" endtime="20170630 17:50:14.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.715">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:14.714" status="PASS" endtime="20170630 17:50:14.715"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.716">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:14.716" status="PASS" endtime="20170630 17:50:14.716"></status>
</kw>
<status starttime="20170630 17:50:14.715" status="PASS" endtime="20170630 17:50:14.716"></status>
</kw>
<status starttime="20170630 17:50:14.714" status="PASS" endtime="20170630 17:50:14.717"></status>
</kw>
<status starttime="20170630 17:50:14.714" status="PASS" endtime="20170630 17:50:14.717"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:14.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:14.455" status="PASS" endtime="20170630 17:50:14.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:14.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:14.717" status="PASS" endtime="20170630 17:50:14.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:14.718">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:14.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:14.718">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:14.718" status="PASS" endtime="20170630 17:50:14.718"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:14.718">${state} = Off</msg>
<status starttime="20170630 17:50:14.455" status="PASS" endtime="20170630 17:50:14.718"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:14.719">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:14.454" status="PASS" endtime="20170630 17:50:14.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:14.720">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:14.719" status="FAIL" endtime="20170630 17:50:14.720"></status>
</kw>
<status starttime="20170630 17:50:14.454" status="FAIL" endtime="20170630 17:50:14.720"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.724">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:24.724" status="PASS" endtime="20170630 17:50:24.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:24.725" status="PASS" endtime="20170630 17:50:24.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.726">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:24.726" status="PASS" endtime="20170630 17:50:24.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.727">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:24.726" status="PASS" endtime="20170630 17:50:24.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.902">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:24.727" status="PASS" endtime="20170630 17:50:24.902"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:24.903">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:24.903">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:24.727" status="PASS" endtime="20170630 17:50:24.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.903">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:24.903" status="PASS" endtime="20170630 17:50:24.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:24.904" status="PASS" endtime="20170630 17:50:24.904"></status>
</kw>
<status starttime="20170630 17:50:24.724" status="PASS" endtime="20170630 17:50:24.904"></status>
</kw>
<status starttime="20170630 17:50:24.723" status="PASS" endtime="20170630 17:50:24.905"></status>
</kw>
<status starttime="20170630 17:50:24.722" status="PASS" endtime="20170630 17:50:24.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.905">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:24.905" status="PASS" endtime="20170630 17:50:24.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.907">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:24.907" status="PASS" endtime="20170630 17:50:24.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.908">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:24.908" status="PASS" endtime="20170630 17:50:24.908"></status>
</kw>
<status starttime="20170630 17:50:24.907" status="PASS" endtime="20170630 17:50:24.909"></status>
</kw>
<status starttime="20170630 17:50:24.906" status="PASS" endtime="20170630 17:50:24.909"></status>
</kw>
<status starttime="20170630 17:50:24.906" status="PASS" endtime="20170630 17:50:24.909"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.974">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:24.974">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:24.909" status="PASS" endtime="20170630 17:50:24.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.976">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:24.976" status="PASS" endtime="20170630 17:50:24.976"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.977">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:24.977" status="PASS" endtime="20170630 17:50:24.977"></status>
</kw>
<status starttime="20170630 17:50:24.976" status="PASS" endtime="20170630 17:50:24.977"></status>
</kw>
<status starttime="20170630 17:50:24.975" status="PASS" endtime="20170630 17:50:24.977"></status>
</kw>
<status starttime="20170630 17:50:24.975" status="PASS" endtime="20170630 17:50:24.977"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:24.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:24.722" status="PASS" endtime="20170630 17:50:24.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:24.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:24.978" status="PASS" endtime="20170630 17:50:24.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:24.979">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:24.979">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:24.979">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:24.979" status="PASS" endtime="20170630 17:50:24.979"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:24.979">${state} = Off</msg>
<status starttime="20170630 17:50:24.721" status="PASS" endtime="20170630 17:50:24.980"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:24.980">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:24.721" status="PASS" endtime="20170630 17:50:24.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:24.980">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:24.980" status="FAIL" endtime="20170630 17:50:24.980"></status>
</kw>
<status starttime="20170630 17:50:24.720" status="FAIL" endtime="20170630 17:50:24.981"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:34.985">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:34.985" status="PASS" endtime="20170630 17:50:34.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:34.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:34.986" status="PASS" endtime="20170630 17:50:34.986"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:34.987">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:34.987" status="PASS" endtime="20170630 17:50:34.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:34.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:34.987" status="PASS" endtime="20170630 17:50:34.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:34.988" status="PASS" endtime="20170630 17:50:35.168"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:35.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:35.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:34.988" status="PASS" endtime="20170630 17:50:35.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:35.168" status="PASS" endtime="20170630 17:50:35.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:35.169" status="PASS" endtime="20170630 17:50:35.169"></status>
</kw>
<status starttime="20170630 17:50:34.984" status="PASS" endtime="20170630 17:50:35.169"></status>
</kw>
<status starttime="20170630 17:50:34.984" status="PASS" endtime="20170630 17:50:35.170"></status>
</kw>
<status starttime="20170630 17:50:34.983" status="PASS" endtime="20170630 17:50:35.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:35.170">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:35.170" status="PASS" endtime="20170630 17:50:35.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:35.172">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:35.172" status="PASS" endtime="20170630 17:50:35.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.173">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:35.173" status="PASS" endtime="20170630 17:50:35.173"></status>
</kw>
<status starttime="20170630 17:50:35.173" status="PASS" endtime="20170630 17:50:35.173"></status>
</kw>
<status starttime="20170630 17:50:35.171" status="PASS" endtime="20170630 17:50:35.174"></status>
</kw>
<status starttime="20170630 17:50:35.171" status="PASS" endtime="20170630 17:50:35.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:35.240">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:35.240">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:35.174" status="PASS" endtime="20170630 17:50:35.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:35.242">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:35.241" status="PASS" endtime="20170630 17:50:35.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.243">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:35.242" status="PASS" endtime="20170630 17:50:35.243"></status>
</kw>
<status starttime="20170630 17:50:35.242" status="PASS" endtime="20170630 17:50:35.243"></status>
</kw>
<status starttime="20170630 17:50:35.241" status="PASS" endtime="20170630 17:50:35.243"></status>
</kw>
<status starttime="20170630 17:50:35.240" status="PASS" endtime="20170630 17:50:35.243"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:35.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:34.982" status="PASS" endtime="20170630 17:50:35.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:35.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:35.244" status="PASS" endtime="20170630 17:50:35.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:35.245">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:35.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:35.245">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:35.244" status="PASS" endtime="20170630 17:50:35.245"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:35.245">${state} = Off</msg>
<status starttime="20170630 17:50:34.982" status="PASS" endtime="20170630 17:50:35.245"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:35.245">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:34.982" status="PASS" endtime="20170630 17:50:35.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:35.246">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:35.246" status="FAIL" endtime="20170630 17:50:35.246"></status>
</kw>
<status starttime="20170630 17:50:34.981" status="FAIL" endtime="20170630 17:50:35.246"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.251">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:45.251" status="PASS" endtime="20170630 17:50:45.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:45.252" status="PASS" endtime="20170630 17:50:45.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.253">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:45.252" status="PASS" endtime="20170630 17:50:45.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.253">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:45.253" status="PASS" endtime="20170630 17:50:45.253"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.428">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:45.254" status="PASS" endtime="20170630 17:50:45.429"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:45.429">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:45.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:45.254" status="PASS" endtime="20170630 17:50:45.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:45.429" status="PASS" endtime="20170630 17:50:45.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:45.430" status="PASS" endtime="20170630 17:50:45.432"></status>
</kw>
<status starttime="20170630 17:50:45.250" status="PASS" endtime="20170630 17:50:45.432"></status>
</kw>
<status starttime="20170630 17:50:45.250" status="PASS" endtime="20170630 17:50:45.432"></status>
</kw>
<status starttime="20170630 17:50:45.249" status="PASS" endtime="20170630 17:50:45.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.433">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:45.433" status="PASS" endtime="20170630 17:50:45.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.435">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:45.434" status="PASS" endtime="20170630 17:50:45.435"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.436">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:45.436" status="PASS" endtime="20170630 17:50:45.436"></status>
</kw>
<status starttime="20170630 17:50:45.435" status="PASS" endtime="20170630 17:50:45.436"></status>
</kw>
<status starttime="20170630 17:50:45.434" status="PASS" endtime="20170630 17:50:45.436"></status>
</kw>
<status starttime="20170630 17:50:45.433" status="PASS" endtime="20170630 17:50:45.436"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.509">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:45.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:45.436" status="PASS" endtime="20170630 17:50:45.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.511">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:45.510" status="PASS" endtime="20170630 17:50:45.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.512">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:45.511" status="PASS" endtime="20170630 17:50:45.512"></status>
</kw>
<status starttime="20170630 17:50:45.511" status="PASS" endtime="20170630 17:50:45.512"></status>
</kw>
<status starttime="20170630 17:50:45.510" status="PASS" endtime="20170630 17:50:45.512"></status>
</kw>
<status starttime="20170630 17:50:45.509" status="PASS" endtime="20170630 17:50:45.512"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:45.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:45.248" status="PASS" endtime="20170630 17:50:45.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:45.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:45.513" status="PASS" endtime="20170630 17:50:45.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:45.514">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:45.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:45.514">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:45.513" status="PASS" endtime="20170630 17:50:45.514"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:45.514">${state} = Off</msg>
<status starttime="20170630 17:50:45.248" status="PASS" endtime="20170630 17:50:45.514"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:45.514">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:45.247" status="PASS" endtime="20170630 17:50:45.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:45.515">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:45.515" status="FAIL" endtime="20170630 17:50:45.515"></status>
</kw>
<status starttime="20170630 17:50:45.247" status="FAIL" endtime="20170630 17:50:45.515"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.521">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:50:55.520" status="PASS" endtime="20170630 17:50:55.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.522">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:50:55.521" status="PASS" endtime="20170630 17:50:55.522"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.522">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:50:55.522" status="PASS" endtime="20170630 17:50:55.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.523">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:50:55.522" status="PASS" endtime="20170630 17:50:55.523"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:50:55.524" status="PASS" endtime="20170630 17:50:55.713"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:55.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:50:55.714">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:55.523" status="PASS" endtime="20170630 17:50:55.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:55.714" status="PASS" endtime="20170630 17:50:55.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:55.715" status="PASS" endtime="20170630 17:50:55.715"></status>
</kw>
<status starttime="20170630 17:50:55.519" status="PASS" endtime="20170630 17:50:55.715"></status>
</kw>
<status starttime="20170630 17:50:55.519" status="PASS" endtime="20170630 17:50:55.715"></status>
</kw>
<status starttime="20170630 17:50:55.518" status="PASS" endtime="20170630 17:50:55.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.716">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:50:55.716" status="PASS" endtime="20170630 17:50:55.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.718">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:55.717" status="PASS" endtime="20170630 17:50:55.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.719">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:50:55.719" status="PASS" endtime="20170630 17:50:55.719"></status>
</kw>
<status starttime="20170630 17:50:55.718" status="PASS" endtime="20170630 17:50:55.719"></status>
</kw>
<status starttime="20170630 17:50:55.717" status="PASS" endtime="20170630 17:50:55.719"></status>
</kw>
<status starttime="20170630 17:50:55.716" status="PASS" endtime="20170630 17:50:55.719"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.790">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:50:55.790">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:55.720" status="PASS" endtime="20170630 17:50:55.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.792">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:55.792" status="PASS" endtime="20170630 17:50:55.792"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.793">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:50:55.793" status="PASS" endtime="20170630 17:50:55.793"></status>
</kw>
<status starttime="20170630 17:50:55.792" status="PASS" endtime="20170630 17:50:55.793"></status>
</kw>
<status starttime="20170630 17:50:55.791" status="PASS" endtime="20170630 17:50:55.793"></status>
</kw>
<status starttime="20170630 17:50:55.791" status="PASS" endtime="20170630 17:50:55.793"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:55.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:50:55.517" status="PASS" endtime="20170630 17:50:55.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:50:55.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:50:55.794" status="PASS" endtime="20170630 17:50:55.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:50:55.795">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:50:55.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:50:55.795">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:50:55.795" status="PASS" endtime="20170630 17:50:55.795"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:55.795">${state} = Off</msg>
<status starttime="20170630 17:50:55.517" status="PASS" endtime="20170630 17:50:55.795"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:50:55.795">${boot_progress} = Off</msg>
<status starttime="20170630 17:50:55.516" status="PASS" endtime="20170630 17:50:55.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:50:55.796">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:50:55.796" status="FAIL" endtime="20170630 17:50:55.796"></status>
</kw>
<status starttime="20170630 17:50:55.516" status="FAIL" endtime="20170630 17:50:55.797"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:05.802">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:05.802" status="PASS" endtime="20170630 17:51:05.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:05.803">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:05.803" status="PASS" endtime="20170630 17:51:05.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:05.804">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:05.803" status="PASS" endtime="20170630 17:51:05.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:05.804">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:05.804" status="PASS" endtime="20170630 17:51:05.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:05.805" status="PASS" endtime="20170630 17:51:06.085"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:06.085">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:06.085">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:05.805" status="PASS" endtime="20170630 17:51:06.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.086">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:06.085" status="PASS" endtime="20170630 17:51:06.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:06.086" status="PASS" endtime="20170630 17:51:06.086"></status>
</kw>
<status starttime="20170630 17:51:05.801" status="PASS" endtime="20170630 17:51:06.086"></status>
</kw>
<status starttime="20170630 17:51:05.801" status="PASS" endtime="20170630 17:51:06.087"></status>
</kw>
<status starttime="20170630 17:51:05.800" status="PASS" endtime="20170630 17:51:06.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:06.087">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:06.087" status="PASS" endtime="20170630 17:51:06.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:06.090">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:06.089" status="PASS" endtime="20170630 17:51:06.090"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.091">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:06.091" status="PASS" endtime="20170630 17:51:06.091"></status>
</kw>
<status starttime="20170630 17:51:06.090" status="PASS" endtime="20170630 17:51:06.091"></status>
</kw>
<status starttime="20170630 17:51:06.088" status="PASS" endtime="20170630 17:51:06.091"></status>
</kw>
<status starttime="20170630 17:51:06.088" status="PASS" endtime="20170630 17:51:06.091"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:06.182">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:06.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:06.092" status="PASS" endtime="20170630 17:51:06.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:06.184">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:06.184" status="PASS" endtime="20170630 17:51:06.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.185">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:06.185" status="PASS" endtime="20170630 17:51:06.185"></status>
</kw>
<status starttime="20170630 17:51:06.184" status="PASS" endtime="20170630 17:51:06.185"></status>
</kw>
<status starttime="20170630 17:51:06.183" status="PASS" endtime="20170630 17:51:06.186"></status>
</kw>
<status starttime="20170630 17:51:06.183" status="PASS" endtime="20170630 17:51:06.186"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:06.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:05.799" status="PASS" endtime="20170630 17:51:06.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:06.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:06.186" status="PASS" endtime="20170630 17:51:06.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:06.187">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:06.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:06.187">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:06.187" status="PASS" endtime="20170630 17:51:06.187"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:06.188">${state} = Off</msg>
<status starttime="20170630 17:51:05.799" status="PASS" endtime="20170630 17:51:06.188"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:06.188">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:05.798" status="PASS" endtime="20170630 17:51:06.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:06.188">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:06.188" status="FAIL" endtime="20170630 17:51:06.189"></status>
</kw>
<status starttime="20170630 17:51:05.797" status="FAIL" endtime="20170630 17:51:06.189"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.194">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:16.194" status="PASS" endtime="20170630 17:51:16.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:16.195" status="PASS" endtime="20170630 17:51:16.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.196">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:16.196" status="PASS" endtime="20170630 17:51:16.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:16.196" status="PASS" endtime="20170630 17:51:16.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:16.197" status="PASS" endtime="20170630 17:51:16.389"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:16.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:16.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:16.197" status="PASS" endtime="20170630 17:51:16.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:16.390" status="PASS" endtime="20170630 17:51:16.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:16.390" status="PASS" endtime="20170630 17:51:16.391"></status>
</kw>
<status starttime="20170630 17:51:16.193" status="PASS" endtime="20170630 17:51:16.391"></status>
</kw>
<status starttime="20170630 17:51:16.193" status="PASS" endtime="20170630 17:51:16.391"></status>
</kw>
<status starttime="20170630 17:51:16.192" status="PASS" endtime="20170630 17:51:16.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.392">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:16.391" status="PASS" endtime="20170630 17:51:16.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.394">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:16.393" status="PASS" endtime="20170630 17:51:16.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.395">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:16.394" status="PASS" endtime="20170630 17:51:16.395"></status>
</kw>
<status starttime="20170630 17:51:16.394" status="PASS" endtime="20170630 17:51:16.395"></status>
</kw>
<status starttime="20170630 17:51:16.392" status="PASS" endtime="20170630 17:51:16.395"></status>
</kw>
<status starttime="20170630 17:51:16.392" status="PASS" endtime="20170630 17:51:16.395"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.470">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:16.471">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:16.395" status="PASS" endtime="20170630 17:51:16.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.472">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:16.472" status="PASS" endtime="20170630 17:51:16.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.473">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:16.473" status="PASS" endtime="20170630 17:51:16.473"></status>
</kw>
<status starttime="20170630 17:51:16.473" status="PASS" endtime="20170630 17:51:16.473"></status>
</kw>
<status starttime="20170630 17:51:16.471" status="PASS" endtime="20170630 17:51:16.474"></status>
</kw>
<status starttime="20170630 17:51:16.471" status="PASS" endtime="20170630 17:51:16.474"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:16.474">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:16.191" status="PASS" endtime="20170630 17:51:16.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:16.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:16.474" status="PASS" endtime="20170630 17:51:16.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:16.475">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:16.475">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:16.475">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:16.475" status="PASS" endtime="20170630 17:51:16.475"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:16.476">${state} = Off</msg>
<status starttime="20170630 17:51:16.190" status="PASS" endtime="20170630 17:51:16.476"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:16.476">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:16.190" status="PASS" endtime="20170630 17:51:16.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:16.476">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:16.476" status="FAIL" endtime="20170630 17:51:16.476"></status>
</kw>
<status starttime="20170630 17:51:16.189" status="FAIL" endtime="20170630 17:51:16.477"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.482">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:26.481" status="PASS" endtime="20170630 17:51:26.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:26.482" status="PASS" endtime="20170630 17:51:26.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.483">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:26.483" status="PASS" endtime="20170630 17:51:26.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:26.483" status="PASS" endtime="20170630 17:51:26.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.738">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:26.485" status="PASS" endtime="20170630 17:51:26.738"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:26.738">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:26.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:26.484" status="PASS" endtime="20170630 17:51:26.738"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.739">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:26.739" status="PASS" endtime="20170630 17:51:26.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:26.739" status="PASS" endtime="20170630 17:51:26.740"></status>
</kw>
<status starttime="20170630 17:51:26.481" status="PASS" endtime="20170630 17:51:26.740"></status>
</kw>
<status starttime="20170630 17:51:26.480" status="PASS" endtime="20170630 17:51:26.740"></status>
</kw>
<status starttime="20170630 17:51:26.480" status="PASS" endtime="20170630 17:51:26.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.741">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:26.741" status="PASS" endtime="20170630 17:51:26.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.743">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:26.742" status="PASS" endtime="20170630 17:51:26.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.744">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:26.744" status="PASS" endtime="20170630 17:51:26.744"></status>
</kw>
<status starttime="20170630 17:51:26.743" status="PASS" endtime="20170630 17:51:26.744"></status>
</kw>
<status starttime="20170630 17:51:26.742" status="PASS" endtime="20170630 17:51:26.745"></status>
</kw>
<status starttime="20170630 17:51:26.741" status="PASS" endtime="20170630 17:51:26.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.812">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:26.812">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:26.745" status="PASS" endtime="20170630 17:51:26.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.813">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:26.813" status="PASS" endtime="20170630 17:51:26.813"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.814">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:26.814" status="PASS" endtime="20170630 17:51:26.814"></status>
</kw>
<status starttime="20170630 17:51:26.814" status="PASS" endtime="20170630 17:51:26.815"></status>
</kw>
<status starttime="20170630 17:51:26.812" status="PASS" endtime="20170630 17:51:26.815"></status>
</kw>
<status starttime="20170630 17:51:26.812" status="PASS" endtime="20170630 17:51:26.815"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:26.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:26.479" status="PASS" endtime="20170630 17:51:26.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:26.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:26.815" status="PASS" endtime="20170630 17:51:26.816"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:26.816">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:26.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:26.817">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:26.816" status="PASS" endtime="20170630 17:51:26.817"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:26.817">${state} = Off</msg>
<status starttime="20170630 17:51:26.478" status="PASS" endtime="20170630 17:51:26.817"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:26.817">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:26.478" status="PASS" endtime="20170630 17:51:26.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:26.818">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:26.817" status="FAIL" endtime="20170630 17:51:26.818"></status>
</kw>
<status starttime="20170630 17:51:26.477" status="FAIL" endtime="20170630 17:51:26.818"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:36.823">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:36.822" status="PASS" endtime="20170630 17:51:36.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:36.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:36.823" status="PASS" endtime="20170630 17:51:36.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:36.825">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:36.824" status="PASS" endtime="20170630 17:51:36.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:36.826">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:36.825" status="PASS" endtime="20170630 17:51:36.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:36.826" status="PASS" endtime="20170630 17:51:37.095"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:37.095">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:37.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:36.826" status="PASS" endtime="20170630 17:51:37.095"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:37.095" status="PASS" endtime="20170630 17:51:37.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:37.096" status="PASS" endtime="20170630 17:51:37.097"></status>
</kw>
<status starttime="20170630 17:51:36.822" status="PASS" endtime="20170630 17:51:37.097"></status>
</kw>
<status starttime="20170630 17:51:36.821" status="PASS" endtime="20170630 17:51:37.097"></status>
</kw>
<status starttime="20170630 17:51:36.821" status="PASS" endtime="20170630 17:51:37.097"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:37.097">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:37.097" status="PASS" endtime="20170630 17:51:37.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:37.099">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:37.099" status="PASS" endtime="20170630 17:51:37.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.100">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:37.100" status="PASS" endtime="20170630 17:51:37.101"></status>
</kw>
<status starttime="20170630 17:51:37.100" status="PASS" endtime="20170630 17:51:37.101"></status>
</kw>
<status starttime="20170630 17:51:37.098" status="PASS" endtime="20170630 17:51:37.101"></status>
</kw>
<status starttime="20170630 17:51:37.098" status="PASS" endtime="20170630 17:51:37.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:37.183">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:37.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:37.101" status="PASS" endtime="20170630 17:51:37.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:37.185">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:37.185" status="PASS" endtime="20170630 17:51:37.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.186">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:37.186" status="PASS" endtime="20170630 17:51:37.186"></status>
</kw>
<status starttime="20170630 17:51:37.185" status="PASS" endtime="20170630 17:51:37.186"></status>
</kw>
<status starttime="20170630 17:51:37.184" status="PASS" endtime="20170630 17:51:37.186"></status>
</kw>
<status starttime="20170630 17:51:37.184" status="PASS" endtime="20170630 17:51:37.186"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:37.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:36.820" status="PASS" endtime="20170630 17:51:37.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:37.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:37.187" status="PASS" endtime="20170630 17:51:37.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:37.188">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:37.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:37.188">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:37.188" status="PASS" endtime="20170630 17:51:37.188"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:37.188">${state} = Off</msg>
<status starttime="20170630 17:51:36.819" status="PASS" endtime="20170630 17:51:37.188"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:37.189">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:36.819" status="PASS" endtime="20170630 17:51:37.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:37.189">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:37.189" status="FAIL" endtime="20170630 17:51:37.189"></status>
</kw>
<status starttime="20170630 17:51:36.818" status="FAIL" endtime="20170630 17:51:37.189"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.194">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:47.194" status="PASS" endtime="20170630 17:51:47.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:47.195" status="PASS" endtime="20170630 17:51:47.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.196">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:47.196" status="PASS" endtime="20170630 17:51:47.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:47.196" status="PASS" endtime="20170630 17:51:47.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:47.197" status="PASS" endtime="20170630 17:51:47.423"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:47.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:47.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:47.197" status="PASS" endtime="20170630 17:51:47.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:47.423" status="PASS" endtime="20170630 17:51:47.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:47.424" status="PASS" endtime="20170630 17:51:47.425"></status>
</kw>
<status starttime="20170630 17:51:47.194" status="PASS" endtime="20170630 17:51:47.425"></status>
</kw>
<status starttime="20170630 17:51:47.193" status="PASS" endtime="20170630 17:51:47.425"></status>
</kw>
<status starttime="20170630 17:51:47.192" status="PASS" endtime="20170630 17:51:47.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.425">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:47.425" status="PASS" endtime="20170630 17:51:47.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.428">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:47.427" status="PASS" endtime="20170630 17:51:47.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.428">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:47.428" status="PASS" endtime="20170630 17:51:47.429"></status>
</kw>
<status starttime="20170630 17:51:47.428" status="PASS" endtime="20170630 17:51:47.429"></status>
</kw>
<status starttime="20170630 17:51:47.426" status="PASS" endtime="20170630 17:51:47.429"></status>
</kw>
<status starttime="20170630 17:51:47.426" status="PASS" endtime="20170630 17:51:47.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.494">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:47.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:47.429" status="PASS" endtime="20170630 17:51:47.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.496">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:47.495" status="PASS" endtime="20170630 17:51:47.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.497">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:47.497" status="PASS" endtime="20170630 17:51:47.497"></status>
</kw>
<status starttime="20170630 17:51:47.496" status="PASS" endtime="20170630 17:51:47.497"></status>
</kw>
<status starttime="20170630 17:51:47.495" status="PASS" endtime="20170630 17:51:47.497"></status>
</kw>
<status starttime="20170630 17:51:47.494" status="PASS" endtime="20170630 17:51:47.497"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:47.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:47.191" status="PASS" endtime="20170630 17:51:47.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:47.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:47.498" status="PASS" endtime="20170630 17:51:47.498"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:47.499">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:47.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:47.499">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:47.499" status="PASS" endtime="20170630 17:51:47.499"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:47.499">${state} = Off</msg>
<status starttime="20170630 17:51:47.191" status="PASS" endtime="20170630 17:51:47.499"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:47.500">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:47.190" status="PASS" endtime="20170630 17:51:47.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:47.500">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:47.500" status="FAIL" endtime="20170630 17:51:47.500"></status>
</kw>
<status starttime="20170630 17:51:47.190" status="FAIL" endtime="20170630 17:51:47.501"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.505">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:51:57.505" status="PASS" endtime="20170630 17:51:57.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:51:57.506" status="PASS" endtime="20170630 17:51:57.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.507">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:51:57.507" status="PASS" endtime="20170630 17:51:57.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:51:57.507" status="PASS" endtime="20170630 17:51:57.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:51:57.508" status="PASS" endtime="20170630 17:51:57.701"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:57.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:51:57.701">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:57.508" status="PASS" endtime="20170630 17:51:57.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.702">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:57.701" status="PASS" endtime="20170630 17:51:57.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:57.703" status="PASS" endtime="20170630 17:51:57.703"></status>
</kw>
<status starttime="20170630 17:51:57.504" status="PASS" endtime="20170630 17:51:57.704"></status>
</kw>
<status starttime="20170630 17:51:57.504" status="PASS" endtime="20170630 17:51:57.704"></status>
</kw>
<status starttime="20170630 17:51:57.503" status="PASS" endtime="20170630 17:51:57.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.704">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:51:57.704" status="PASS" endtime="20170630 17:51:57.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.706">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:57.706" status="PASS" endtime="20170630 17:51:57.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.707">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:51:57.707" status="PASS" endtime="20170630 17:51:57.707"></status>
</kw>
<status starttime="20170630 17:51:57.707" status="PASS" endtime="20170630 17:51:57.707"></status>
</kw>
<status starttime="20170630 17:51:57.705" status="PASS" endtime="20170630 17:51:57.708"></status>
</kw>
<status starttime="20170630 17:51:57.705" status="PASS" endtime="20170630 17:51:57.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.795">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:51:57.795">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:57.708" status="PASS" endtime="20170630 17:51:57.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.796">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:57.796" status="PASS" endtime="20170630 17:51:57.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.797">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:51:57.797" status="PASS" endtime="20170630 17:51:57.798"></status>
</kw>
<status starttime="20170630 17:51:57.797" status="PASS" endtime="20170630 17:51:57.798"></status>
</kw>
<status starttime="20170630 17:51:57.795" status="PASS" endtime="20170630 17:51:57.798"></status>
</kw>
<status starttime="20170630 17:51:57.795" status="PASS" endtime="20170630 17:51:57.798"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:57.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:51:57.503" status="PASS" endtime="20170630 17:51:57.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:51:57.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:51:57.798" status="PASS" endtime="20170630 17:51:57.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:51:57.799">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:51:57.799">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:51:57.799">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:51:57.799" status="PASS" endtime="20170630 17:51:57.800"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:57.800">${state} = Off</msg>
<status starttime="20170630 17:51:57.502" status="PASS" endtime="20170630 17:51:57.800"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:51:57.800">${boot_progress} = Off</msg>
<status starttime="20170630 17:51:57.502" status="PASS" endtime="20170630 17:51:57.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:51:57.801">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:51:57.800" status="FAIL" endtime="20170630 17:51:57.801"></status>
</kw>
<status starttime="20170630 17:51:57.501" status="FAIL" endtime="20170630 17:51:57.801"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:07.806">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:07.806" status="PASS" endtime="20170630 17:52:07.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:07.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:07.807" status="PASS" endtime="20170630 17:52:07.807"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:07.808">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:07.807" status="PASS" endtime="20170630 17:52:07.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:07.808">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:07.808" status="PASS" endtime="20170630 17:52:07.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:07.809" status="PASS" endtime="20170630 17:52:08.110"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:08.111">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:08.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:07.809" status="PASS" endtime="20170630 17:52:08.111"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:08.111" status="PASS" endtime="20170630 17:52:08.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:08.112" status="PASS" endtime="20170630 17:52:08.112"></status>
</kw>
<status starttime="20170630 17:52:07.805" status="PASS" endtime="20170630 17:52:08.112"></status>
</kw>
<status starttime="20170630 17:52:07.805" status="PASS" endtime="20170630 17:52:08.112"></status>
</kw>
<status starttime="20170630 17:52:07.804" status="PASS" endtime="20170630 17:52:08.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:08.113">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:08.113" status="PASS" endtime="20170630 17:52:08.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:08.115">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:08.114" status="PASS" endtime="20170630 17:52:08.115"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.116">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:08.116" status="PASS" endtime="20170630 17:52:08.116"></status>
</kw>
<status starttime="20170630 17:52:08.115" status="PASS" endtime="20170630 17:52:08.116"></status>
</kw>
<status starttime="20170630 17:52:08.114" status="PASS" endtime="20170630 17:52:08.117"></status>
</kw>
<status starttime="20170630 17:52:08.113" status="PASS" endtime="20170630 17:52:08.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:08.246">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:08.247">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:08.117" status="PASS" endtime="20170630 17:52:08.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:08.248">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:08.248" status="PASS" endtime="20170630 17:52:08.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.252">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:08.251" status="PASS" endtime="20170630 17:52:08.252"></status>
</kw>
<status starttime="20170630 17:52:08.249" status="PASS" endtime="20170630 17:52:08.252"></status>
</kw>
<status starttime="20170630 17:52:08.247" status="PASS" endtime="20170630 17:52:08.252"></status>
</kw>
<status starttime="20170630 17:52:08.247" status="PASS" endtime="20170630 17:52:08.252"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:08.252">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:07.803" status="PASS" endtime="20170630 17:52:08.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:08.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:08.253" status="PASS" endtime="20170630 17:52:08.253"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:08.254">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:08.254">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:08.254">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:08.253" status="PASS" endtime="20170630 17:52:08.254"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:08.254">${state} = Off</msg>
<status starttime="20170630 17:52:07.803" status="PASS" endtime="20170630 17:52:08.254"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:08.254">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:07.802" status="PASS" endtime="20170630 17:52:08.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:08.255">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:08.255" status="FAIL" endtime="20170630 17:52:08.255"></status>
</kw>
<status starttime="20170630 17:52:07.802" status="FAIL" endtime="20170630 17:52:08.255"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.260">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:18.259" status="PASS" endtime="20170630 17:52:18.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.261">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:18.260" status="PASS" endtime="20170630 17:52:18.261"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.261">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:18.261" status="PASS" endtime="20170630 17:52:18.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.262">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:18.262" status="PASS" endtime="20170630 17:52:18.262"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:18.263" status="PASS" endtime="20170630 17:52:18.438"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:18.438">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:18.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:18.262" status="PASS" endtime="20170630 17:52:18.438"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:18.439" status="PASS" endtime="20170630 17:52:18.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:18.439" status="PASS" endtime="20170630 17:52:18.440"></status>
</kw>
<status starttime="20170630 17:52:18.259" status="PASS" endtime="20170630 17:52:18.440"></status>
</kw>
<status starttime="20170630 17:52:18.258" status="PASS" endtime="20170630 17:52:18.440"></status>
</kw>
<status starttime="20170630 17:52:18.258" status="PASS" endtime="20170630 17:52:18.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.441">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:18.440" status="PASS" endtime="20170630 17:52:18.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.443">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:18.442" status="PASS" endtime="20170630 17:52:18.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.444">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:18.444" status="PASS" endtime="20170630 17:52:18.444"></status>
</kw>
<status starttime="20170630 17:52:18.443" status="PASS" endtime="20170630 17:52:18.444"></status>
</kw>
<status starttime="20170630 17:52:18.441" status="PASS" endtime="20170630 17:52:18.444"></status>
</kw>
<status starttime="20170630 17:52:18.441" status="PASS" endtime="20170630 17:52:18.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.514">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:18.514">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:18.445" status="PASS" endtime="20170630 17:52:18.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.516">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:18.515" status="PASS" endtime="20170630 17:52:18.516"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.517">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:18.516" status="PASS" endtime="20170630 17:52:18.517"></status>
</kw>
<status starttime="20170630 17:52:18.516" status="PASS" endtime="20170630 17:52:18.517"></status>
</kw>
<status starttime="20170630 17:52:18.515" status="PASS" endtime="20170630 17:52:18.517"></status>
</kw>
<status starttime="20170630 17:52:18.514" status="PASS" endtime="20170630 17:52:18.517"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:18.517">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:18.257" status="PASS" endtime="20170630 17:52:18.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:18.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:18.518" status="PASS" endtime="20170630 17:52:18.518"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:18.518">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:18.518">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:18.519">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:18.518" status="PASS" endtime="20170630 17:52:18.519"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:18.519">${state} = Off</msg>
<status starttime="20170630 17:52:18.257" status="PASS" endtime="20170630 17:52:18.519"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:18.519">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:18.256" status="PASS" endtime="20170630 17:52:18.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:18.520">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:18.519" status="FAIL" endtime="20170630 17:52:18.520"></status>
</kw>
<status starttime="20170630 17:52:18.256" status="FAIL" endtime="20170630 17:52:18.520"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.524">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:28.524" status="PASS" endtime="20170630 17:52:28.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.526">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:28.525" status="PASS" endtime="20170630 17:52:28.526"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.526">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:28.526" status="PASS" endtime="20170630 17:52:28.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.527">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:28.527" status="PASS" endtime="20170630 17:52:28.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.705">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:28.528" status="PASS" endtime="20170630 17:52:28.705"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:28.705">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:28.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:28.527" status="PASS" endtime="20170630 17:52:28.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.706">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:28.705" status="PASS" endtime="20170630 17:52:28.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:28.706" status="PASS" endtime="20170630 17:52:28.707"></status>
</kw>
<status starttime="20170630 17:52:28.524" status="PASS" endtime="20170630 17:52:28.707"></status>
</kw>
<status starttime="20170630 17:52:28.523" status="PASS" endtime="20170630 17:52:28.707"></status>
</kw>
<status starttime="20170630 17:52:28.523" status="PASS" endtime="20170630 17:52:28.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.707">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:28.707" status="PASS" endtime="20170630 17:52:28.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.709">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:28.709" status="PASS" endtime="20170630 17:52:28.710"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.710">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:28.710" status="PASS" endtime="20170630 17:52:28.711"></status>
</kw>
<status starttime="20170630 17:52:28.710" status="PASS" endtime="20170630 17:52:28.711"></status>
</kw>
<status starttime="20170630 17:52:28.708" status="PASS" endtime="20170630 17:52:28.711"></status>
</kw>
<status starttime="20170630 17:52:28.708" status="PASS" endtime="20170630 17:52:28.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.787">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:28.787">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:28.711" status="PASS" endtime="20170630 17:52:28.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.789">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:28.788" status="PASS" endtime="20170630 17:52:28.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.790">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:28.790" status="PASS" endtime="20170630 17:52:28.790"></status>
</kw>
<status starttime="20170630 17:52:28.789" status="PASS" endtime="20170630 17:52:28.790"></status>
</kw>
<status starttime="20170630 17:52:28.788" status="PASS" endtime="20170630 17:52:28.790"></status>
</kw>
<status starttime="20170630 17:52:28.788" status="PASS" endtime="20170630 17:52:28.790"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:28.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:28.522" status="PASS" endtime="20170630 17:52:28.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:28.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:28.791" status="PASS" endtime="20170630 17:52:28.791"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:28.792">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:28.792">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:28.792">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:28.791" status="PASS" endtime="20170630 17:52:28.792"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:28.792">${state} = Off</msg>
<status starttime="20170630 17:52:28.521" status="PASS" endtime="20170630 17:52:28.792"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:28.793">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:28.521" status="PASS" endtime="20170630 17:52:28.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:28.793">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:28.793" status="FAIL" endtime="20170630 17:52:28.793"></status>
</kw>
<status starttime="20170630 17:52:28.520" status="FAIL" endtime="20170630 17:52:28.794"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:38.799">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:38.798" status="PASS" endtime="20170630 17:52:38.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:38.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:38.799" status="PASS" endtime="20170630 17:52:38.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:38.800">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:38.800" status="PASS" endtime="20170630 17:52:38.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:38.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:38.800" status="PASS" endtime="20170630 17:52:38.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:38.977">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:38.801" status="PASS" endtime="20170630 17:52:38.977"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:38.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:38.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:38.801" status="PASS" endtime="20170630 17:52:38.977"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:38.978">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:38.978" status="PASS" endtime="20170630 17:52:38.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:38.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:38.978" status="PASS" endtime="20170630 17:52:38.979"></status>
</kw>
<status starttime="20170630 17:52:38.798" status="PASS" endtime="20170630 17:52:38.979"></status>
</kw>
<status starttime="20170630 17:52:38.797" status="PASS" endtime="20170630 17:52:38.979"></status>
</kw>
<status starttime="20170630 17:52:38.797" status="PASS" endtime="20170630 17:52:38.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:38.980">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:38.979" status="PASS" endtime="20170630 17:52:38.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:38.982">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:38.981" status="PASS" endtime="20170630 17:52:38.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:38.983">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:38.982" status="PASS" endtime="20170630 17:52:38.983"></status>
</kw>
<status starttime="20170630 17:52:38.982" status="PASS" endtime="20170630 17:52:38.983"></status>
</kw>
<status starttime="20170630 17:52:38.980" status="PASS" endtime="20170630 17:52:38.983"></status>
</kw>
<status starttime="20170630 17:52:38.980" status="PASS" endtime="20170630 17:52:38.983"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:39.050">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:39.050">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:38.983" status="PASS" endtime="20170630 17:52:39.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:39.052">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:39.051" status="PASS" endtime="20170630 17:52:39.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:39.053">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:39.053" status="PASS" endtime="20170630 17:52:39.053"></status>
</kw>
<status starttime="20170630 17:52:39.052" status="PASS" endtime="20170630 17:52:39.053"></status>
</kw>
<status starttime="20170630 17:52:39.051" status="PASS" endtime="20170630 17:52:39.053"></status>
</kw>
<status starttime="20170630 17:52:39.050" status="PASS" endtime="20170630 17:52:39.053"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:39.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:38.796" status="PASS" endtime="20170630 17:52:39.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:39.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:39.054" status="PASS" endtime="20170630 17:52:39.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:39.055">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:39.055">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:39.055">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:39.054" status="PASS" endtime="20170630 17:52:39.055"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:39.055">${state} = Off</msg>
<status starttime="20170630 17:52:38.795" status="PASS" endtime="20170630 17:52:39.055"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:39.055">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:38.794" status="PASS" endtime="20170630 17:52:39.055"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:39.056">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:39.056" status="FAIL" endtime="20170630 17:52:39.056"></status>
</kw>
<status starttime="20170630 17:52:38.794" status="FAIL" endtime="20170630 17:52:39.056"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.061">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:49.061" status="PASS" endtime="20170630 17:52:49.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:49.062" status="PASS" endtime="20170630 17:52:49.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.063">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:49.062" status="PASS" endtime="20170630 17:52:49.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.063">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:49.063" status="PASS" endtime="20170630 17:52:49.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.240">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:49.064" status="PASS" endtime="20170630 17:52:49.240"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:49.240">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:49.240">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:49.064" status="PASS" endtime="20170630 17:52:49.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.241">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:49.240" status="PASS" endtime="20170630 17:52:49.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:49.241" status="PASS" endtime="20170630 17:52:49.242"></status>
</kw>
<status starttime="20170630 17:52:49.060" status="PASS" endtime="20170630 17:52:49.242"></status>
</kw>
<status starttime="20170630 17:52:49.060" status="PASS" endtime="20170630 17:52:49.242"></status>
</kw>
<status starttime="20170630 17:52:49.059" status="PASS" endtime="20170630 17:52:49.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.243">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:49.243" status="PASS" endtime="20170630 17:52:49.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.246">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:49.245" status="PASS" endtime="20170630 17:52:49.246"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.247">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:49.247" status="PASS" endtime="20170630 17:52:49.247"></status>
</kw>
<status starttime="20170630 17:52:49.246" status="PASS" endtime="20170630 17:52:49.248"></status>
</kw>
<status starttime="20170630 17:52:49.244" status="PASS" endtime="20170630 17:52:49.248"></status>
</kw>
<status starttime="20170630 17:52:49.244" status="PASS" endtime="20170630 17:52:49.248"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.314">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:49.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:49.248" status="PASS" endtime="20170630 17:52:49.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.316">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:49.316" status="PASS" endtime="20170630 17:52:49.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.317">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:49.317" status="PASS" endtime="20170630 17:52:49.317"></status>
</kw>
<status starttime="20170630 17:52:49.316" status="PASS" endtime="20170630 17:52:49.317"></status>
</kw>
<status starttime="20170630 17:52:49.315" status="PASS" endtime="20170630 17:52:49.317"></status>
</kw>
<status starttime="20170630 17:52:49.315" status="PASS" endtime="20170630 17:52:49.318"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:49.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:49.058" status="PASS" endtime="20170630 17:52:49.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:49.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:49.318" status="PASS" endtime="20170630 17:52:49.318"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:49.319">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:49.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:49.319">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:49.319" status="PASS" endtime="20170630 17:52:49.319"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:49.319">${state} = Off</msg>
<status starttime="20170630 17:52:49.058" status="PASS" endtime="20170630 17:52:49.319"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:49.320">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:49.057" status="PASS" endtime="20170630 17:52:49.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:49.320">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:49.320" status="FAIL" endtime="20170630 17:52:49.320"></status>
</kw>
<status starttime="20170630 17:52:49.057" status="FAIL" endtime="20170630 17:52:49.321"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.326">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:59.325" status="PASS" endtime="20170630 17:52:59.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.326">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:59.326" status="PASS" endtime="20170630 17:52:59.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.327">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:59.327" status="PASS" endtime="20170630 17:52:59.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:59.327" status="PASS" endtime="20170630 17:52:59.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:59.328" status="PASS" endtime="20170630 17:52:59.506"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.506">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:59.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.328" status="PASS" endtime="20170630 17:52:59.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.507" status="PASS" endtime="20170630 17:52:59.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.507" status="PASS" endtime="20170630 17:52:59.508"></status>
</kw>
<status starttime="20170630 17:52:59.324" status="PASS" endtime="20170630 17:52:59.508"></status>
</kw>
<status starttime="20170630 17:52:59.324" status="PASS" endtime="20170630 17:52:59.508"></status>
</kw>
<status starttime="20170630 17:52:59.323" status="PASS" endtime="20170630 17:52:59.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.509">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170630 17:52:59.508" status="PASS" endtime="20170630 17:52:59.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.511">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:59.510" status="PASS" endtime="20170630 17:52:59.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.512">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170630 17:52:59.511" status="PASS" endtime="20170630 17:52:59.512"></status>
</kw>
<status starttime="20170630 17:52:59.511" status="PASS" endtime="20170630 17:52:59.512"></status>
</kw>
<status starttime="20170630 17:52:59.509" status="PASS" endtime="20170630 17:52:59.512"></status>
</kw>
<status starttime="20170630 17:52:59.509" status="PASS" endtime="20170630 17:52:59.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.578">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:59.579">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.512" status="PASS" endtime="20170630 17:52:59.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.581">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:59.580" status="PASS" endtime="20170630 17:52:59.581"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.582">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:59.582" status="PASS" endtime="20170630 17:52:59.582"></status>
</kw>
<status starttime="20170630 17:52:59.581" status="PASS" endtime="20170630 17:52:59.582"></status>
</kw>
<status starttime="20170630 17:52:59.580" status="PASS" endtime="20170630 17:52:59.582"></status>
</kw>
<status starttime="20170630 17:52:59.579" status="PASS" endtime="20170630 17:52:59.582"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.583">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.323" status="PASS" endtime="20170630 17:52:59.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.583" status="PASS" endtime="20170630 17:52:59.583"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.584">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:59.584">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:59.584">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:59.584" status="PASS" endtime="20170630 17:52:59.584"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.584">${state} = Off</msg>
<status starttime="20170630 17:52:59.322" status="PASS" endtime="20170630 17:52:59.584"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.585">${boot_progress} = Off</msg>
<status starttime="20170630 17:52:59.322" status="PASS" endtime="20170630 17:52:59.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:59.585">Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:52:59.585" status="FAIL" endtime="20170630 17:52:59.585"></status>
</kw>
<status starttime="20170630 17:52:59.321" status="FAIL" endtime="20170630 17:52:59.585"></status>
</kw>
<msg level="FAIL" timestamp="20170630 17:52:59.586">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status starttime="20170630 17:42:50.969" status="FAIL" endtime="20170630 17:52:59.586"></status>
</kw>
<status starttime="20170630 17:42:25.447" status="FAIL" endtime="20170630 17:52:59.586"></status>
</kw>
<status starttime="20170630 17:42:25.446" status="FAIL" endtime="20170630 17:52:59.586"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.591">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:52:59.590" status="PASS" endtime="20170630 17:52:59.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.592">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:52:59.591" status="PASS" endtime="20170630 17:52:59.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.592">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:52:59.592" status="PASS" endtime="20170630 17:52:59.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:52:59.593" status="PASS" endtime="20170630 17:52:59.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:52:59.594" status="PASS" endtime="20170630 17:52:59.774"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:52:59.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.593" status="PASS" endtime="20170630 17:52:59.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.774" status="PASS" endtime="20170630 17:52:59.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.775" status="PASS" endtime="20170630 17:52:59.775"></status>
</kw>
<status starttime="20170630 17:52:59.590" status="PASS" endtime="20170630 17:52:59.775"></status>
</kw>
<status starttime="20170630 17:52:59.589" status="PASS" endtime="20170630 17:52:59.776"></status>
</kw>
<status starttime="20170630 17:52:59.589" status="PASS" endtime="20170630 17:52:59.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.776">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170630 17:52:59.776" status="PASS" endtime="20170630 17:52:59.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.778">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:52:59.778" status="PASS" endtime="20170630 17:52:59.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.779">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170630 17:52:59.779" status="PASS" endtime="20170630 17:52:59.779"></status>
</kw>
<status starttime="20170630 17:52:59.778" status="PASS" endtime="20170630 17:52:59.779"></status>
</kw>
<status starttime="20170630 17:52:59.777" status="PASS" endtime="20170630 17:52:59.780"></status>
</kw>
<status starttime="20170630 17:52:59.777" status="PASS" endtime="20170630 17:52:59.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.875">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:52:59.875">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.780" status="PASS" endtime="20170630 17:52:59.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.877">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:59.877" status="PASS" endtime="20170630 17:52:59.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.878">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170630 17:52:59.878" status="PASS" endtime="20170630 17:52:59.878"></status>
</kw>
<status starttime="20170630 17:52:59.877" status="PASS" endtime="20170630 17:52:59.878"></status>
</kw>
<status starttime="20170630 17:52:59.876" status="PASS" endtime="20170630 17:52:59.878"></status>
</kw>
<status starttime="20170630 17:52:59.876" status="PASS" endtime="20170630 17:52:59.879"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.879">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:52:59.588" status="PASS" endtime="20170630 17:52:59.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:52:59.879" status="PASS" endtime="20170630 17:52:59.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.880">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:52:59.880">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170630 17:52:59.880">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170630 17:52:59.880" status="PASS" endtime="20170630 17:52:59.880"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.880">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170630 17:52:59.588" status="PASS" endtime="20170630 17:52:59.881"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.881">${host_state} = Running</msg>
<status starttime="20170630 17:52:59.587" status="PASS" endtime="20170630 17:52:59.881"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:52:59.882">Running != Quiesced</msg>
<status starttime="20170630 17:52:59.882" status="FAIL" endtime="20170630 17:52:59.882"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.882">${status} = False</msg>
<status starttime="20170630 17:52:59.881" status="PASS" endtime="20170630 17:52:59.882"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:52:59.882">${status} = False</msg>
<status starttime="20170630 17:52:59.587" status="PASS" endtime="20170630 17:52:59.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:52:59.903">Length is 12</msg>
<status starttime="20170630 17:52:59.903" status="PASS" endtime="20170630 17:52:59.904"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:52:59.908">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:53:02.931">${RC} = 0</msg>
<msg level="INFO" timestamp="20170630 17:53:02.931">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.773 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.665 ms
64 bytes from 9.41.166.16...</msg>
<status starttime="20170630 17:52:59.904" status="PASS" endtime="20170630 17:53:02.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:02.950">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.773 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.665 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.624 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.600 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.600/0.665/0.773/0.071 ms</msg>
<status starttime="20170630 17:53:02.943" status="PASS" endtime="20170630 17:53:02.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170630 17:53:02.951" status="PASS" endtime="20170630 17:53:02.951"></status>
</kw>
<status starttime="20170630 17:52:59.903" status="PASS" endtime="20170630 17:53:02.952"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:02.996">${cur_time} = 2017-06-30 17:53:02:995428</msg>
<status starttime="20170630 17:53:02.995" status="PASS" endtime="20170630 17:53:02.996"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:02.996">${cur_time} = 20170630175302995428</msg>
<status starttime="20170630 17:53:02.996" status="PASS" endtime="20170630 17:53:02.996"></status>
</kw>
<status starttime="20170630 17:53:02.995" status="PASS" endtime="20170630 17:53:02.996"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:02.997">${FFDC_TIME} = 20170630175302995428</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.006">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170630 17:53:03.006" status="PASS" endtime="20170630 17:53:03.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.007">${suite_name} = 20170630175302995428_TestsTestBasicPoweron</msg>
<status starttime="20170630 17:53:03.007" status="PASS" endtime="20170630 17:53:03.007"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.007">${test_name} = PowerOnTest</msg>
<status starttime="20170630 17:53:03.007" status="PASS" endtime="20170630 17:53:03.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.008">${test_name} = 20170630175302995428_PowerOnTest</msg>
<status starttime="20170630 17:53:03.008" status="PASS" endtime="20170630 17:53:03.008"></status>
</kw>
<status starttime="20170630 17:53:03.005" status="PASS" endtime="20170630 17:53:03.008"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:03.009">${FFDC_DIR_PATH} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170630 17:53:03.009">${FFDC_PREFIX} = 20170630175302995428_</msg>
<msg level="INFO" timestamp="20170630 17:53:03.028">${LOG_PREFIX} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.029" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.029" status="PASS" endtime="20170630 17:53:03.030"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:03.034">${FFDC_FILE_PATH} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.054" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.053" status="PASS" endtime="20170630 17:53:03.054"></status>
</kw>
<status starttime="20170630 17:53:03.052" status="PASS" endtime="20170630 17:53:03.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.055" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.054" status="PASS" endtime="20170630 17:53:03.055"></status>
</kw>
<status starttime="20170630 17:53:03.054" status="PASS" endtime="20170630 17:53:03.055"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.056" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.056" status="PASS" endtime="20170630 17:53:03.056"></status>
</kw>
<status starttime="20170630 17:53:03.055" status="PASS" endtime="20170630 17:53:03.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.058" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.057" status="PASS" endtime="20170630 17:53:03.058"></status>
</kw>
<status starttime="20170630 17:53:03.057" status="PASS" endtime="20170630 17:53:03.058"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.059" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.059" status="PASS" endtime="20170630 17:53:03.059"></status>
</kw>
<status starttime="20170630 17:53:03.058" status="PASS" endtime="20170630 17:53:03.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.060" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.060" status="PASS" endtime="20170630 17:53:03.060"></status>
</kw>
<status starttime="20170630 17:53:03.059" status="PASS" endtime="20170630 17:53:03.061"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.062" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.061" status="PASS" endtime="20170630 17:53:03.062"></status>
</kw>
<status starttime="20170630 17:53:03.061" status="PASS" endtime="20170630 17:53:03.062"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.063" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.063" status="PASS" endtime="20170630 17:53:03.063"></status>
</kw>
<status starttime="20170630 17:53:03.062" status="PASS" endtime="20170630 17:53:03.063"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.064" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.064" status="PASS" endtime="20170630 17:53:03.065"></status>
</kw>
<status starttime="20170630 17:53:03.063" status="PASS" endtime="20170630 17:53:03.065"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.067" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.066" status="PASS" endtime="20170630 17:53:03.067"></status>
</kw>
<status starttime="20170630 17:53:03.065" status="PASS" endtime="20170630 17:53:03.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.068" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.068" status="PASS" endtime="20170630 17:53:03.068"></status>
</kw>
<status starttime="20170630 17:53:03.067" status="PASS" endtime="20170630 17:53:03.068"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.069" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.069" status="PASS" endtime="20170630 17:53:03.069"></status>
</kw>
<status starttime="20170630 17:53:03.068" status="PASS" endtime="20170630 17:53:03.069"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.076" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:03.075" status="PASS" endtime="20170630 17:53:03.076"></status>
</kw>
<status starttime="20170630 17:53:03.070" status="PASS" endtime="20170630 17:53:03.076"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:03.078">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:53:03.078" status="FAIL" endtime="20170630 17:53:03.078"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:03.078">${has_host} = False</msg>
<status starttime="20170630 17:53:03.077" status="PASS" endtime="20170630 17:53:03.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:53:03.079" status="PASS" endtime="20170630 17:53:03.080"></status>
</kw>
<status starttime="20170630 17:53:03.079" status="PASS" endtime="20170630 17:53:03.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.081">${port_num} = 22</msg>
<status starttime="20170630 17:53:03.081" status="PASS" endtime="20170630 17:53:03.082"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.082">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:53:03.082" status="PASS" endtime="20170630 17:53:03.082"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:03.083">${https_num} = 443</msg>
<status starttime="20170630 17:53:03.082" status="PASS" endtime="20170630 17:53:03.083"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.083">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:53:03.083" status="PASS" endtime="20170630 17:53:03.084"></status>
</kw>
<status starttime="20170630 17:53:03.081" status="PASS" endtime="20170630 17:53:03.084"></status>
</kw>
<status starttime="20170630 17:53:03.080" status="PASS" endtime="20170630 17:53:03.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:03.085">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:53:03.084" status="FAIL" endtime="20170630 17:53:03.085"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:03.085">${has_port} = False</msg>
<status starttime="20170630 17:53:03.084" status="PASS" endtime="20170630 17:53:03.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:53:03.087" status="PASS" endtime="20170630 17:53:03.087"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:53:03.087" status="PASS" endtime="20170630 17:53:03.088"></status>
</kw>
<status starttime="20170630 17:53:03.086" status="PASS" endtime="20170630 17:53:03.088"></status>
</kw>
<status starttime="20170630 17:53:03.085" status="PASS" endtime="20170630 17:53:03.088"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:03.089">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:53:04.835">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:53:03.089" status="PASS" endtime="20170630 17:53:04.835"></status>
</kw>
<status starttime="20170630 17:53:03.077" status="PASS" endtime="20170630 17:53:04.835"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:04.836">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170630 17:53:04.946">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:04.946">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170630 17:53:04.946">${stderr} = </msg>
<status starttime="20170630 17:53:04.836" status="PASS" endtime="20170630 17:53:04.946"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.947">Length is 0</msg>
<status starttime="20170630 17:53:04.947" status="PASS" endtime="20170630 17:53:04.947"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.947">Length is 11</msg>
<status starttime="20170630 17:53:04.947" status="PASS" endtime="20170630 17:53:04.947"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:04.948">${model_name} = Witherspoon</msg>
<status starttime="20170630 17:53:03.076" status="PASS" endtime="20170630 17:53:04.948"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.949" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.949" status="PASS" endtime="20170630 17:53:04.949"></status>
</kw>
<status starttime="20170630 17:53:04.948" status="PASS" endtime="20170630 17:53:04.949"></status>
</kw>
<status starttime="20170630 17:53:03.065" status="PASS" endtime="20170630 17:53:04.949"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.951" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.950" status="PASS" endtime="20170630 17:53:04.951"></status>
</kw>
<status starttime="20170630 17:53:04.950" status="PASS" endtime="20170630 17:53:04.951"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:04.951">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170630 17:53:04.951" status="PASS" endtime="20170630 17:53:04.951"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.953" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.953" status="PASS" endtime="20170630 17:53:04.953"></status>
</kw>
<status starttime="20170630 17:53:04.952" status="PASS" endtime="20170630 17:53:04.953"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.954" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.954" status="PASS" endtime="20170630 17:53:04.954"></status>
</kw>
<status starttime="20170630 17:53:04.953" status="PASS" endtime="20170630 17:53:04.954"></status>
</kw>
<status starttime="20170630 17:53:04.952" status="PASS" endtime="20170630 17:53:04.954"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.956" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.955" status="PASS" endtime="20170630 17:53:04.956"></status>
</kw>
<status starttime="20170630 17:53:04.955" status="PASS" endtime="20170630 17:53:04.956"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.957" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.957" status="PASS" endtime="20170630 17:53:04.957"></status>
</kw>
<status starttime="20170630 17:53:04.956" status="PASS" endtime="20170630 17:53:04.957"></status>
</kw>
<status starttime="20170630 17:53:04.955" status="PASS" endtime="20170630 17:53:04.957"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.958" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.958" status="PASS" endtime="20170630 17:53:04.958"></status>
</kw>
<status starttime="20170630 17:53:04.957" status="PASS" endtime="20170630 17:53:04.959"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.960" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.959" status="PASS" endtime="20170630 17:53:04.960"></status>
</kw>
<status starttime="20170630 17:53:04.959" status="PASS" endtime="20170630 17:53:04.960"></status>
</kw>
<status starttime="20170630 17:53:04.957" status="PASS" endtime="20170630 17:53:04.960"></status>
</kw>
<status starttime="20170630 17:53:04.952" status="PASS" endtime="20170630 17:53:04.960"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:04.961" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:04.961" status="PASS" endtime="20170630 17:53:04.961"></status>
</kw>
<status starttime="20170630 17:53:04.960" status="PASS" endtime="20170630 17:53:04.961"></status>
</kw>
<status starttime="20170630 17:53:03.052" status="PASS" endtime="20170630 17:53:04.961"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:04.968">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170630 17:53:04.968" status="PASS" endtime="20170630 17:53:04.968"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:04.970">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC ...</msg>
<status starttime="20170630 17:53:04.969" status="PASS" endtime="20170630 17:53:04.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170630 17:53:04.971" status="PASS" endtime="20170630 17:53:04.971"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:04.971">@{ffdc_function_list} = [ BMC Specific Files | Get Request FFDC | FFDC Generic Report | Core Files | OS FFDC | SEL Log ]</msg>
<status starttime="20170630 17:53:04.970" status="PASS" endtime="20170630 17:53:04.971"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:04.973" status="PASS" endtime="20170630 17:53:04.973"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:04.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:04.973">${ret_values} = None</msg>
<status starttime="20170630 17:53:04.972" status="PASS" endtime="20170630 17:53:04.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:04.973" status="PASS" endtime="20170630 17:53:04.974"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:05.000">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:53:05.000" status="FAIL" endtime="20170630 17:53:05.000"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:05.000">${has_host} = False</msg>
<status starttime="20170630 17:53:04.999" status="PASS" endtime="20170630 17:53:05.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:53:05.001" status="PASS" endtime="20170630 17:53:05.001"></status>
</kw>
<status starttime="20170630 17:53:05.001" status="PASS" endtime="20170630 17:53:05.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:05.003">${port_num} = 22</msg>
<status starttime="20170630 17:53:05.003" status="PASS" endtime="20170630 17:53:05.003"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:05.004">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:53:05.003" status="PASS" endtime="20170630 17:53:05.004"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:05.004">${https_num} = 443</msg>
<status starttime="20170630 17:53:05.004" status="PASS" endtime="20170630 17:53:05.004"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:05.005">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:53:05.005" status="PASS" endtime="20170630 17:53:05.005"></status>
</kw>
<status starttime="20170630 17:53:05.002" status="PASS" endtime="20170630 17:53:05.006"></status>
</kw>
<status starttime="20170630 17:53:05.002" status="PASS" endtime="20170630 17:53:05.006"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:05.007">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:53:05.006" status="FAIL" endtime="20170630 17:53:05.007"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:05.007">${has_port} = False</msg>
<status starttime="20170630 17:53:05.006" status="PASS" endtime="20170630 17:53:05.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:53:05.008" status="PASS" endtime="20170630 17:53:05.009"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:53:05.009" status="PASS" endtime="20170630 17:53:05.009"></status>
</kw>
<status starttime="20170630 17:53:05.008" status="PASS" endtime="20170630 17:53:05.009"></status>
</kw>
<status starttime="20170630 17:53:05.007" status="PASS" endtime="20170630 17:53:05.009"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:05.010">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:53:06.858">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:53:05.010" status="PASS" endtime="20170630 17:53:06.858"></status>
</kw>
<status starttime="20170630 17:53:04.999" status="PASS" endtime="20170630 17:53:06.858"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.859">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170630 17:53:06.859" status="PASS" endtime="20170630 17:53:06.859"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.861">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') ]</msg>
<status starttime="20170630 17:53:06.860" status="PASS" endtime="20170630 17:53:06.861"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.862">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_procinfo.txt</msg>
<status starttime="20170630 17:53:06.861" status="PASS" endtime="20170630 17:53:06.862"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170630 17:53:06.863" status="PASS" endtime="20170630 17:53:06.863"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.864">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170630 17:53:06.973">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:06.973">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170630 17:53:06.973">${stderr} = </msg>
<status starttime="20170630 17:53:06.863" status="PASS" endtime="20170630 17:53:06.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:06.980" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_procinfo.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:06.980" status="PASS" endtime="20170630 17:53:06.980"></status>
</kw>
<status starttime="20170630 17:53:06.979" status="PASS" endtime="20170630 17:53:06.981"></status>
</kw>
<status starttime="20170630 17:53:06.974" status="PASS" endtime="20170630 17:53:06.981"></status>
</kw>
<status starttime="20170630 17:53:06.862" status="PASS" endtime="20170630 17:53:06.981"></status>
</kw>
<status starttime="20170630 17:53:06.861" status="PASS" endtime="20170630 17:53:06.981"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.982">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_journalctl.txt</msg>
<status starttime="20170630 17:53:06.981" status="PASS" endtime="20170630 17:53:06.982"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170630 17:53:06.983" status="PASS" endtime="20170630 17:53:06.983"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:06.983">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.382">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.383">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:27 UTC, end at Thu 2017-04-20 17:43:25 UTC. --
Apr 20 17:29:27 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:27 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170630 17:53:08.383">${stderr} = </msg>
<status starttime="20170630 17:53:06.983" status="PASS" endtime="20170630 17:53:08.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:08.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_journalctl.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:08.390" status="PASS" endtime="20170630 17:53:08.391"></status>
</kw>
<status starttime="20170630 17:53:08.389" status="PASS" endtime="20170630 17:53:08.391"></status>
</kw>
<status starttime="20170630 17:53:08.384" status="PASS" endtime="20170630 17:53:08.391"></status>
</kw>
<status starttime="20170630 17:53:06.982" status="PASS" endtime="20170630 17:53:08.392"></status>
</kw>
<status starttime="20170630 17:53:06.981" status="PASS" endtime="20170630 17:53:08.392"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.392">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_proc_list.txt</msg>
<status starttime="20170630 17:53:08.392" status="PASS" endtime="20170630 17:53:08.392"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170630 17:53:08.393" status="PASS" endtime="20170630 17:53:08.394"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.394">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.788">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.788">${stdout} = Mem: 157400K used, 274936K free, 14488K shrd, 10968K buff, 50936K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.47 0.51 0.52 1/145 1419
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170630 17:53:08.788">${stderr} = </msg>
<status starttime="20170630 17:53:08.394" status="PASS" endtime="20170630 17:53:08.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:08.795" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_proc_list.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:08.794" status="PASS" endtime="20170630 17:53:08.795"></status>
</kw>
<status starttime="20170630 17:53:08.793" status="PASS" endtime="20170630 17:53:08.795"></status>
</kw>
<status starttime="20170630 17:53:08.789" status="PASS" endtime="20170630 17:53:08.795"></status>
</kw>
<status starttime="20170630 17:53:08.393" status="PASS" endtime="20170630 17:53:08.795"></status>
</kw>
<status starttime="20170630 17:53:08.392" status="PASS" endtime="20170630 17:53:08.795"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.796">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_meminfo.txt</msg>
<status starttime="20170630 17:53:08.796" status="PASS" endtime="20170630 17:53:08.796"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170630 17:53:08.797" status="PASS" endtime="20170630 17:53:08.798"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.798">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.980">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:08.980">${stdout} = MemTotal:         432336 kB
MemFree:          274812 kB
MemAvailable:     319676 kB
Buffers:           10968 kB
Cached:            50936 kB
SwapCached:            0 kB
Active:           103384 kB
Inac...</msg>
<msg level="INFO" timestamp="20170630 17:53:08.981">${stderr} = </msg>
<status starttime="20170630 17:53:08.798" status="PASS" endtime="20170630 17:53:08.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:08.987" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_meminfo.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:08.986" status="PASS" endtime="20170630 17:53:08.987"></status>
</kw>
<status starttime="20170630 17:53:08.986" status="PASS" endtime="20170630 17:53:08.987"></status>
</kw>
<status starttime="20170630 17:53:08.981" status="PASS" endtime="20170630 17:53:08.987"></status>
</kw>
<status starttime="20170630 17:53:08.796" status="PASS" endtime="20170630 17:53:08.987"></status>
</kw>
<status starttime="20170630 17:53:08.795" status="PASS" endtime="20170630 17:53:08.987"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.988">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_dmesg.txt</msg>
<status starttime="20170630 17:53:08.988" status="PASS" endtime="20170630 17:53:08.988"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170630 17:53:08.989" status="PASS" endtime="20170630 17:53:08.989"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:08.990">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170630 17:53:09.183">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:09.184">${stdout} = [    1.910000] io scheduler noop registered
[    1.910000] io scheduler deadline registered
[    1.910000] io scheduler cfq registered (default)
[    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc ...</msg>
<msg level="INFO" timestamp="20170630 17:53:09.184">${stderr} = </msg>
<status starttime="20170630 17:53:08.990" status="PASS" endtime="20170630 17:53:09.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:09.190" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_dmesg.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:09.189" status="PASS" endtime="20170630 17:53:09.190"></status>
</kw>
<status starttime="20170630 17:53:09.189" status="PASS" endtime="20170630 17:53:09.190"></status>
</kw>
<status starttime="20170630 17:53:09.184" status="PASS" endtime="20170630 17:53:09.190"></status>
</kw>
<status starttime="20170630 17:53:08.988" status="PASS" endtime="20170630 17:53:09.190"></status>
</kw>
<status starttime="20170630 17:53:08.987" status="PASS" endtime="20170630 17:53:09.190"></status>
</kw>
<status starttime="20170630 17:53:06.861" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:06.860" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:06.860" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:06.859" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:04.998" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:04.974" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:04.971" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<status starttime="20170630 17:53:04.971" status="PASS" endtime="20170630 17:53:09.191"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:09.193" status="PASS" endtime="20170630 17:53:09.193"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:09.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:09.193">${ret_values} = None</msg>
<status starttime="20170630 17:53:09.192" status="PASS" endtime="20170630 17:53:09.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:09.194" status="PASS" endtime="20170630 17:53:09.194"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:09.220">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:53:09.219" status="FAIL" endtime="20170630 17:53:09.220"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:09.220">${has_host} = False</msg>
<status starttime="20170630 17:53:09.219" status="PASS" endtime="20170630 17:53:09.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:53:09.221" status="PASS" endtime="20170630 17:53:09.221"></status>
</kw>
<status starttime="20170630 17:53:09.220" status="PASS" endtime="20170630 17:53:09.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:09.223">${port_num} = 22</msg>
<status starttime="20170630 17:53:09.223" status="PASS" endtime="20170630 17:53:09.223"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:09.223">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:53:09.223" status="PASS" endtime="20170630 17:53:09.223"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:09.224">${https_num} = 443</msg>
<status starttime="20170630 17:53:09.224" status="PASS" endtime="20170630 17:53:09.224"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:09.225">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:53:09.224" status="PASS" endtime="20170630 17:53:09.225"></status>
</kw>
<status starttime="20170630 17:53:09.222" status="PASS" endtime="20170630 17:53:09.225"></status>
</kw>
<status starttime="20170630 17:53:09.222" status="PASS" endtime="20170630 17:53:09.225"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:09.226">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:53:09.226" status="FAIL" endtime="20170630 17:53:09.226"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:09.226">${has_port} = False</msg>
<status starttime="20170630 17:53:09.225" status="PASS" endtime="20170630 17:53:09.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:53:09.228" status="PASS" endtime="20170630 17:53:09.228"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:53:09.228" status="PASS" endtime="20170630 17:53:09.229"></status>
</kw>
<status starttime="20170630 17:53:09.227" status="PASS" endtime="20170630 17:53:09.229"></status>
</kw>
<status starttime="20170630 17:53:09.227" status="PASS" endtime="20170630 17:53:09.229"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:09.229">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:53:11.040">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:53:09.229" status="PASS" endtime="20170630 17:53:11.040"></status>
</kw>
<status starttime="20170630 17:53:09.218" status="PASS" endtime="20170630 17:53:11.041"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.041">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170630 17:53:11.041" status="PASS" endtime="20170630 17:53:11.041"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.043">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/op...</msg>
<status starttime="20170630 17:53:11.043" status="PASS" endtime="20170630 17:53:11.043"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.044">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_record_log.txt</msg>
<status starttime="20170630 17:53:11.043" status="PASS" endtime="20170630 17:53:11.044"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.047">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:11.046" status="PASS" endtime="20170630 17:53:11.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:11.047" status="PASS" endtime="20170630 17:53:11.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.048">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:11.048" status="PASS" endtime="20170630 17:53:11.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:11.049" status="PASS" endtime="20170630 17:53:11.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:11.050" status="PASS" endtime="20170630 17:53:11.359"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:11.360">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:11.049" status="PASS" endtime="20170630 17:53:11.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:11.360" status="PASS" endtime="20170630 17:53:11.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:11.361" status="PASS" endtime="20170630 17:53:11.361"></status>
</kw>
<status starttime="20170630 17:53:11.046" status="PASS" endtime="20170630 17:53:11.361"></status>
</kw>
<status starttime="20170630 17:53:11.045" status="PASS" endtime="20170630 17:53:11.361"></status>
</kw>
<status starttime="20170630 17:53:11.045" status="PASS" endtime="20170630 17:53:11.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.362">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170630 17:53:11.362" status="PASS" endtime="20170630 17:53:11.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:11.362" status="PASS" endtime="20170630 17:53:11.363"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.430">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:11.430">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:11.363" status="PASS" endtime="20170630 17:53:11.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:11.430" status="PASS" endtime="20170630 17:53:11.431"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.431">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:11.044" status="PASS" endtime="20170630 17:53:11.431"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170630 17:53:11.432">404 != 200</msg>
<status starttime="20170630 17:53:11.431" status="FAIL" endtime="20170630 17:53:11.432"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.432">${status} = False</msg>
<status starttime="20170630 17:53:11.431" status="PASS" endtime="20170630 17:53:11.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170630 17:53:11.433">Continuing for loop from the next iteration.</msg>
<status starttime="20170630 17:53:11.433" status="PASS" endtime="20170630 17:53:11.433"></status>
</kw>
<status starttime="20170630 17:53:11.433" status="PASS" endtime="20170630 17:53:11.433"></status>
</kw>
<status starttime="20170630 17:53:11.043" status="PASS" endtime="20170630 17:53:11.433"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.434">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_sensor_list.txt</msg>
<status starttime="20170630 17:53:11.434" status="PASS" endtime="20170630 17:53:11.434"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.437">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:11.437" status="PASS" endtime="20170630 17:53:11.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:11.438" status="PASS" endtime="20170630 17:53:11.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.439">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:11.438" status="PASS" endtime="20170630 17:53:11.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:11.439" status="PASS" endtime="20170630 17:53:11.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:11.440" status="PASS" endtime="20170630 17:53:11.729"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:11.729">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:11.439" status="PASS" endtime="20170630 17:53:11.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:11.730" status="PASS" endtime="20170630 17:53:11.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:11.730" status="PASS" endtime="20170630 17:53:11.731"></status>
</kw>
<status starttime="20170630 17:53:11.436" status="PASS" endtime="20170630 17:53:11.731"></status>
</kw>
<status starttime="20170630 17:53:11.436" status="PASS" endtime="20170630 17:53:11.731"></status>
</kw>
<status starttime="20170630 17:53:11.435" status="PASS" endtime="20170630 17:53:11.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.732">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170630 17:53:11.731" status="PASS" endtime="20170630 17:53:11.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:11.732" status="PASS" endtime="20170630 17:53:11.732"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.976">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:11.976">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:11.733" status="PASS" endtime="20170630 17:53:11.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:11.976" status="PASS" endtime="20170630 17:53:11.977"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:11.434" status="PASS" endtime="20170630 17:53:11.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:11.978" status="PASS" endtime="20170630 17:53:11.978"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:11.978">${status} = True</msg>
<status starttime="20170630 17:53:11.977" status="PASS" endtime="20170630 17:53:11.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170630 17:53:11.978" status="PASS" endtime="20170630 17:53:11.979"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.980">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:53:11.980">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170630 17:53:11.980">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170630 17:53:11.979" status="PASS" endtime="20170630 17:53:11.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.982" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_sensor_list.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:11.981" status="PASS" endtime="20170630 17:53:11.982"></status>
</kw>
<status starttime="20170630 17:53:11.980" status="PASS" endtime="20170630 17:53:11.982"></status>
</kw>
<status starttime="20170630 17:53:11.434" status="PASS" endtime="20170630 17:53:11.982"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.983">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_elog.txt</msg>
<status starttime="20170630 17:53:11.983" status="PASS" endtime="20170630 17:53:11.983"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:11.986">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:11.986" status="PASS" endtime="20170630 17:53:11.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:11.987" status="PASS" endtime="20170630 17:53:11.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.988">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:11.987" status="PASS" endtime="20170630 17:53:11.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:11.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:11.988" status="PASS" endtime="20170630 17:53:11.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:11.989" status="PASS" endtime="20170630 17:53:12.266"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.267">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:12.267">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:11.989" status="PASS" endtime="20170630 17:53:12.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:12.267" status="PASS" endtime="20170630 17:53:12.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:12.268" status="PASS" endtime="20170630 17:53:12.268"></status>
</kw>
<status starttime="20170630 17:53:11.985" status="PASS" endtime="20170630 17:53:12.268"></status>
</kw>
<status starttime="20170630 17:53:11.985" status="PASS" endtime="20170630 17:53:12.268"></status>
</kw>
<status starttime="20170630 17:53:11.984" status="PASS" endtime="20170630 17:53:12.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.269">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170630 17:53:12.269" status="PASS" endtime="20170630 17:53:12.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:12.269" status="PASS" endtime="20170630 17:53:12.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.341">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:12.341">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:12.270" status="PASS" endtime="20170630 17:53:12.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:12.341" status="PASS" endtime="20170630 17:53:12.342"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.342">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:11.983" status="PASS" endtime="20170630 17:53:12.342"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170630 17:53:12.343">404 != 200</msg>
<status starttime="20170630 17:53:12.343" status="FAIL" endtime="20170630 17:53:12.343"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.343">${status} = False</msg>
<status starttime="20170630 17:53:12.342" status="PASS" endtime="20170630 17:53:12.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170630 17:53:12.344">Continuing for loop from the next iteration.</msg>
<status starttime="20170630 17:53:12.344" status="PASS" endtime="20170630 17:53:12.344"></status>
</kw>
<status starttime="20170630 17:53:12.344" status="PASS" endtime="20170630 17:53:12.344"></status>
</kw>
<status starttime="20170630 17:53:11.982" status="PASS" endtime="20170630 17:53:12.344"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.345">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_led.txt</msg>
<status starttime="20170630 17:53:12.345" status="PASS" endtime="20170630 17:53:12.345"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.348">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:12.348" status="PASS" endtime="20170630 17:53:12.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:12.349" status="PASS" endtime="20170630 17:53:12.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.350">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:12.349" status="PASS" endtime="20170630 17:53:12.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:12.350" status="PASS" endtime="20170630 17:53:12.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:12.351" status="PASS" endtime="20170630 17:53:12.640"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:12.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:12.351" status="PASS" endtime="20170630 17:53:12.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:12.640" status="PASS" endtime="20170630 17:53:12.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:12.641" status="PASS" endtime="20170630 17:53:12.641"></status>
</kw>
<status starttime="20170630 17:53:12.347" status="PASS" endtime="20170630 17:53:12.642"></status>
</kw>
<status starttime="20170630 17:53:12.347" status="PASS" endtime="20170630 17:53:12.642"></status>
</kw>
<status starttime="20170630 17:53:12.346" status="PASS" endtime="20170630 17:53:12.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.642">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170630 17:53:12.642" status="PASS" endtime="20170630 17:53:12.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:12.643" status="PASS" endtime="20170630 17:53:12.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.713">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:12.713">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:12.643" status="PASS" endtime="20170630 17:53:12.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:12.713" status="PASS" endtime="20170630 17:53:12.714"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.714">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:12.345" status="PASS" endtime="20170630 17:53:12.714"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170630 17:53:12.715">404 != 200</msg>
<status starttime="20170630 17:53:12.714" status="FAIL" endtime="20170630 17:53:12.715"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:12.715">${status} = False</msg>
<status starttime="20170630 17:53:12.714" status="PASS" endtime="20170630 17:53:12.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170630 17:53:12.716">Continuing for loop from the next iteration.</msg>
<status starttime="20170630 17:53:12.716" status="PASS" endtime="20170630 17:53:12.716"></status>
</kw>
<status starttime="20170630 17:53:12.716" status="PASS" endtime="20170630 17:53:12.716"></status>
</kw>
<status starttime="20170630 17:53:12.345" status="PASS" endtime="20170630 17:53:12.716"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.717">${logpath} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_inventory.txt</msg>
<status starttime="20170630 17:53:12.717" status="PASS" endtime="20170630 17:53:12.717"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:12.720">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:12.720" status="PASS" endtime="20170630 17:53:12.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:12.721" status="PASS" endtime="20170630 17:53:12.721"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.721">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:12.721" status="PASS" endtime="20170630 17:53:12.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:12.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:12.722" status="PASS" endtime="20170630 17:53:12.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:12.723" status="PASS" endtime="20170630 17:53:13.022"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.022">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:13.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:12.723" status="PASS" endtime="20170630 17:53:13.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.023">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:13.023" status="PASS" endtime="20170630 17:53:13.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:13.023" status="PASS" endtime="20170630 17:53:13.024"></status>
</kw>
<status starttime="20170630 17:53:12.719" status="PASS" endtime="20170630 17:53:13.024"></status>
</kw>
<status starttime="20170630 17:53:12.719" status="PASS" endtime="20170630 17:53:13.024"></status>
</kw>
<status starttime="20170630 17:53:12.718" status="PASS" endtime="20170630 17:53:13.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.025">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170630 17:53:13.024" status="PASS" endtime="20170630 17:53:13.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:13.025" status="PASS" endtime="20170630 17:53:13.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:13.262">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:13.026" status="PASS" endtime="20170630 17:53:13.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:13.263" status="PASS" endtime="20170630 17:53:13.263"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.263">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:12.717" status="PASS" endtime="20170630 17:53:13.263"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:13.264" status="PASS" endtime="20170630 17:53:13.264"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.264">${status} = True</msg>
<status starttime="20170630 17:53:13.263" status="PASS" endtime="20170630 17:53:13.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170630 17:53:13.265" status="PASS" endtime="20170630 17:53:13.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.266">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170630 17:53:13.266">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170630 17:53:13.266">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170630 17:53:13.265" status="PASS" endtime="20170630 17:53:13.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.267" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_inventory.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:13.267" status="PASS" endtime="20170630 17:53:13.267"></status>
</kw>
<status starttime="20170630 17:53:13.266" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:12.717" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:11.043" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:11.042" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:11.042" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:11.041" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:09.218" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:09.194" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:09.191" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<status starttime="20170630 17:53:09.191" status="PASS" endtime="20170630 17:53:13.268"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:13.270" status="PASS" endtime="20170630 17:53:13.270"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.270">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:13.270">${ret_values} = None</msg>
<status starttime="20170630 17:53:13.269" status="PASS" endtime="20170630 17:53:13.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:13.270" status="PASS" endtime="20170630 17:53:13.271"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:13.297">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:53:13.297" status="FAIL" endtime="20170630 17:53:13.297"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.297">${has_host} = False</msg>
<status starttime="20170630 17:53:13.296" status="PASS" endtime="20170630 17:53:13.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:53:13.298" status="PASS" endtime="20170630 17:53:13.298"></status>
</kw>
<status starttime="20170630 17:53:13.298" status="PASS" endtime="20170630 17:53:13.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.302">${port_num} = 22</msg>
<status starttime="20170630 17:53:13.302" status="PASS" endtime="20170630 17:53:13.302"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.303">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:53:13.302" status="PASS" endtime="20170630 17:53:13.303"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:13.303">${https_num} = 443</msg>
<status starttime="20170630 17:53:13.303" status="PASS" endtime="20170630 17:53:13.303"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.304">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:53:13.304" status="PASS" endtime="20170630 17:53:13.304"></status>
</kw>
<status starttime="20170630 17:53:13.301" status="PASS" endtime="20170630 17:53:13.304"></status>
</kw>
<status starttime="20170630 17:53:13.299" status="PASS" endtime="20170630 17:53:13.304"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:13.305">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:53:13.305" status="FAIL" endtime="20170630 17:53:13.305"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:13.306">${has_port} = False</msg>
<status starttime="20170630 17:53:13.305" status="PASS" endtime="20170630 17:53:13.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:53:13.307" status="PASS" endtime="20170630 17:53:13.307"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:53:13.308" status="PASS" endtime="20170630 17:53:13.308"></status>
</kw>
<status starttime="20170630 17:53:13.307" status="PASS" endtime="20170630 17:53:13.309"></status>
</kw>
<status starttime="20170630 17:53:13.306" status="PASS" endtime="20170630 17:53:13.309"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:13.309">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.019">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:53:13.309" status="PASS" endtime="20170630 17:53:15.020"></status>
</kw>
<status starttime="20170630 17:53:13.296" status="PASS" endtime="20170630 17:53:15.020"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.020">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170630 17:53:15.020" status="PASS" endtime="20170630 17:53:15.021"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.022">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170630 17:53:15.021" status="PASS" endtime="20170630 17:53:15.022"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.027">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170630 17:53:15.022" status="PASS" endtime="20170630 17:53:15.027"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.030" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.030" status="PASS" endtime="20170630 17:53:15.031"></status>
</kw>
<status starttime="20170630 17:53:15.029" status="PASS" endtime="20170630 17:53:15.031"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.032" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.032" status="PASS" endtime="20170630 17:53:15.032"></status>
</kw>
<status starttime="20170630 17:53:15.031" status="PASS" endtime="20170630 17:53:15.032"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.033" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.033" status="PASS" endtime="20170630 17:53:15.033"></status>
</kw>
<status starttime="20170630 17:53:15.032" status="PASS" endtime="20170630 17:53:15.033"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.034" status="PASS" endtime="20170630 17:53:15.035"></status>
</kw>
<status starttime="20170630 17:53:15.034" status="PASS" endtime="20170630 17:53:15.035"></status>
</kw>
<status starttime="20170630 17:53:15.029" status="PASS" endtime="20170630 17:53:15.035"></status>
</kw>
<status starttime="20170630 17:53:15.028" status="PASS" endtime="20170630 17:53:15.035"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.035">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.083">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.083">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-71"
VERSION_ID="v1.99.7-71-g89a1a35"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170630 17:53:15.083">${stderr} = </msg>
<status starttime="20170630 17:53:15.035" status="PASS" endtime="20170630 17:53:15.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.091" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.090" status="PASS" endtime="20170630 17:53:15.091"></status>
</kw>
<status starttime="20170630 17:53:15.090" status="PASS" endtime="20170630 17:53:15.091"></status>
</kw>
<status starttime="20170630 17:53:15.084" status="PASS" endtime="20170630 17:53:15.091"></status>
</kw>
<status starttime="20170630 17:53:15.027" status="PASS" endtime="20170630 17:53:15.091"></status>
</kw>
<status starttime="20170630 17:53:15.027" status="PASS" endtime="20170630 17:53:15.091"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.095" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.094" status="PASS" endtime="20170630 17:53:15.095"></status>
</kw>
<status starttime="20170630 17:53:15.093" status="PASS" endtime="20170630 17:53:15.095"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.096" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.096" status="PASS" endtime="20170630 17:53:15.096"></status>
</kw>
<status starttime="20170630 17:53:15.095" status="PASS" endtime="20170630 17:53:15.096"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.098" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.097" status="PASS" endtime="20170630 17:53:15.098"></status>
</kw>
<status starttime="20170630 17:53:15.097" status="PASS" endtime="20170630 17:53:15.098"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.099" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.098" status="PASS" endtime="20170630 17:53:15.099"></status>
</kw>
<status starttime="20170630 17:53:15.098" status="PASS" endtime="20170630 17:53:15.099"></status>
</kw>
<status starttime="20170630 17:53:15.093" status="PASS" endtime="20170630 17:53:15.099"></status>
</kw>
<status starttime="20170630 17:53:15.092" status="PASS" endtime="20170630 17:53:15.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.100">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.184">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.184">${stdout} = </msg>
<msg level="INFO" timestamp="20170630 17:53:15.184">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170630 17:53:15.099" status="PASS" endtime="20170630 17:53:15.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.190" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.190" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.189" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.185" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.092" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.091" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.027" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.021" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<status starttime="20170630 17:53:15.021" status="PASS" endtime="20170630 17:53:15.191"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.192">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170630 17:53:15.192" status="PASS" endtime="20170630 17:53:15.193"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.193">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170630 17:53:15.193" status="PASS" endtime="20170630 17:53:15.193"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.196" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.196" status="PASS" endtime="20170630 17:53:15.196"></status>
</kw>
<status starttime="20170630 17:53:15.195" status="PASS" endtime="20170630 17:53:15.197"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.198" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.197" status="PASS" endtime="20170630 17:53:15.198"></status>
</kw>
<status starttime="20170630 17:53:15.197" status="PASS" endtime="20170630 17:53:15.198"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.199" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.199" status="PASS" endtime="20170630 17:53:15.199"></status>
</kw>
<status starttime="20170630 17:53:15.198" status="PASS" endtime="20170630 17:53:15.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.201" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.200" status="PASS" endtime="20170630 17:53:15.201"></status>
</kw>
<status starttime="20170630 17:53:15.199" status="PASS" endtime="20170630 17:53:15.201"></status>
</kw>
<status starttime="20170630 17:53:15.195" status="PASS" endtime="20170630 17:53:15.201"></status>
</kw>
<status starttime="20170630 17:53:15.194" status="PASS" endtime="20170630 17:53:15.201"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.201">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.286">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.286">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170630 17:53:15.286">${stderr} = </msg>
<status starttime="20170630 17:53:15.201" status="PASS" endtime="20170630 17:53:15.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.292" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.292" status="PASS" endtime="20170630 17:53:15.292"></status>
</kw>
<status starttime="20170630 17:53:15.291" status="PASS" endtime="20170630 17:53:15.293"></status>
</kw>
<status starttime="20170630 17:53:15.287" status="PASS" endtime="20170630 17:53:15.293"></status>
</kw>
<status starttime="20170630 17:53:15.194" status="PASS" endtime="20170630 17:53:15.293"></status>
</kw>
<status starttime="20170630 17:53:15.193" status="PASS" endtime="20170630 17:53:15.293"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.296" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.295" status="PASS" endtime="20170630 17:53:15.296"></status>
</kw>
<status starttime="20170630 17:53:15.295" status="PASS" endtime="20170630 17:53:15.296"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.297" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.297" status="PASS" endtime="20170630 17:53:15.297"></status>
</kw>
<status starttime="20170630 17:53:15.296" status="PASS" endtime="20170630 17:53:15.297"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.298" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.298" status="PASS" endtime="20170630 17:53:15.299"></status>
</kw>
<status starttime="20170630 17:53:15.298" status="PASS" endtime="20170630 17:53:15.299"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.300" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.299" status="PASS" endtime="20170630 17:53:15.300"></status>
</kw>
<status starttime="20170630 17:53:15.299" status="PASS" endtime="20170630 17:53:15.300"></status>
</kw>
<status starttime="20170630 17:53:15.294" status="PASS" endtime="20170630 17:53:15.300"></status>
</kw>
<status starttime="20170630 17:53:15.294" status="PASS" endtime="20170630 17:53:15.300"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.301">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.385">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.385">${stdout} =  17:43:35 up 14 min,  load average: 0.42, 0.49, 0.51</msg>
<msg level="INFO" timestamp="20170630 17:53:15.385">${stderr} = </msg>
<status starttime="20170630 17:53:15.300" status="PASS" endtime="20170630 17:53:15.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.391" status="PASS" endtime="20170630 17:53:15.391"></status>
</kw>
<status starttime="20170630 17:53:15.390" status="PASS" endtime="20170630 17:53:15.391"></status>
</kw>
<status starttime="20170630 17:53:15.386" status="PASS" endtime="20170630 17:53:15.392"></status>
</kw>
<status starttime="20170630 17:53:15.293" status="PASS" endtime="20170630 17:53:15.392"></status>
</kw>
<status starttime="20170630 17:53:15.293" status="PASS" endtime="20170630 17:53:15.392"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.396" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.395" status="PASS" endtime="20170630 17:53:15.396"></status>
</kw>
<status starttime="20170630 17:53:15.394" status="PASS" endtime="20170630 17:53:15.396"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.397" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.397" status="PASS" endtime="20170630 17:53:15.398"></status>
</kw>
<status starttime="20170630 17:53:15.396" status="PASS" endtime="20170630 17:53:15.398"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.399" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.398" status="PASS" endtime="20170630 17:53:15.399"></status>
</kw>
<status starttime="20170630 17:53:15.398" status="PASS" endtime="20170630 17:53:15.399"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.400" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.400" status="PASS" endtime="20170630 17:53:15.400"></status>
</kw>
<status starttime="20170630 17:53:15.399" status="PASS" endtime="20170630 17:53:15.400"></status>
</kw>
<status starttime="20170630 17:53:15.394" status="PASS" endtime="20170630 17:53:15.400"></status>
</kw>
<status starttime="20170630 17:53:15.393" status="PASS" endtime="20170630 17:53:15.400"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.401">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.494">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:15.495">${stdout} = Linux witherspoon 4.10.17-9e95993e2d6edc68af5ca3f2345789e0f450d0db #1 Fri Jun 30 17:27:10 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170630 17:53:15.495">${stderr} = </msg>
<status starttime="20170630 17:53:15.401" status="PASS" endtime="20170630 17:53:15.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.502" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.502" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.501" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.495" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.392" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.392" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.193" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.191" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<status starttime="20170630 17:53:15.191" status="PASS" endtime="20170630 17:53:15.503"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.504">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170630 17:53:15.504" status="PASS" endtime="20170630 17:53:15.504"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.505">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170630 17:53:15.504" status="PASS" endtime="20170630 17:53:15.505"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.508" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.507" status="PASS" endtime="20170630 17:53:15.508"></status>
</kw>
<status starttime="20170630 17:53:15.507" status="PASS" endtime="20170630 17:53:15.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.509" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.509" status="PASS" endtime="20170630 17:53:15.509"></status>
</kw>
<status starttime="20170630 17:53:15.508" status="PASS" endtime="20170630 17:53:15.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.511" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.510" status="PASS" endtime="20170630 17:53:15.511"></status>
</kw>
<status starttime="20170630 17:53:15.510" status="PASS" endtime="20170630 17:53:15.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:15.512" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:15.511" status="PASS" endtime="20170630 17:53:15.512"></status>
</kw>
<status starttime="20170630 17:53:15.511" status="PASS" endtime="20170630 17:53:15.512"></status>
</kw>
<status starttime="20170630 17:53:15.506" status="PASS" endtime="20170630 17:53:15.512"></status>
</kw>
<status starttime="20170630 17:53:15.506" status="PASS" endtime="20170630 17:53:15.512"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:15.513">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170630 17:53:16.837">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170630 17:53:16.837">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170630 17:53:16.837">${stderr} = </msg>
<status starttime="20170630 17:53:15.513" status="PASS" endtime="20170630 17:53:16.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:16.844" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/20170630175302995428_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:16.843" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:16.843" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:16.837" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.505" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.505" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.505" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.503" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.503" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:15.021" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:13.295" status="PASS" endtime="20170630 17:53:16.844"></status>
</kw>
<status starttime="20170630 17:53:13.271" status="PASS" endtime="20170630 17:53:16.845"></status>
</kw>
<status starttime="20170630 17:53:13.269" status="PASS" endtime="20170630 17:53:16.845"></status>
</kw>
<status starttime="20170630 17:53:13.268" status="PASS" endtime="20170630 17:53:16.845"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:16.846" status="PASS" endtime="20170630 17:53:16.846"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:16.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:16.847">${ret_values} = None</msg>
<status starttime="20170630 17:53:16.846" status="PASS" endtime="20170630 17:53:16.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:16.847" status="PASS" endtime="20170630 17:53:16.847"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:16.874">Dictionary does not contain key 'host'.</msg>
<status starttime="20170630 17:53:16.874" status="FAIL" endtime="20170630 17:53:16.874"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:16.874">${has_host} = False</msg>
<status starttime="20170630 17:53:16.873" status="PASS" endtime="20170630 17:53:16.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170630 17:53:16.875" status="PASS" endtime="20170630 17:53:16.875"></status>
</kw>
<status starttime="20170630 17:53:16.875" status="PASS" endtime="20170630 17:53:16.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:16.877">${port_num} = 22</msg>
<status starttime="20170630 17:53:16.877" status="PASS" endtime="20170630 17:53:16.877"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:16.878">${SSH_PORT} = 22</msg>
<status starttime="20170630 17:53:16.877" status="PASS" endtime="20170630 17:53:16.878"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:16.878">${https_num} = 443</msg>
<status starttime="20170630 17:53:16.878" status="PASS" endtime="20170630 17:53:16.878"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:16.879">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170630 17:53:16.878" status="PASS" endtime="20170630 17:53:16.879"></status>
</kw>
<status starttime="20170630 17:53:16.876" status="PASS" endtime="20170630 17:53:16.879"></status>
</kw>
<status starttime="20170630 17:53:16.876" status="PASS" endtime="20170630 17:53:16.879"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170630 17:53:16.880">Dictionary does not contain key 'port'.</msg>
<status starttime="20170630 17:53:16.880" status="FAIL" endtime="20170630 17:53:16.880"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:16.880">${has_port} = False</msg>
<status starttime="20170630 17:53:16.880" status="PASS" endtime="20170630 17:53:16.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170630 17:53:16.882" status="PASS" endtime="20170630 17:53:16.882"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170630 17:53:16.882" status="PASS" endtime="20170630 17:53:16.883"></status>
</kw>
<status starttime="20170630 17:53:16.881" status="PASS" endtime="20170630 17:53:16.883"></status>
</kw>
<status starttime="20170630 17:53:16.881" status="PASS" endtime="20170630 17:53:16.883"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:16.883">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170630 17:53:18.565">Read output: root@witherspoon:~#</msg>
<status starttime="20170630 17:53:16.883" status="PASS" endtime="20170630 17:53:18.565"></status>
</kw>
<status starttime="20170630 17:53:16.873" status="PASS" endtime="20170630 17:53:18.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:18.566">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170630 17:53:18.614">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170630 17:53:18.614">${core_files} = </msg>
<status starttime="20170630 17:53:18.566" status="PASS" endtime="20170630 17:53:18.614"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:18.615">@{core_list} = [ ]</msg>
<status starttime="20170630 17:53:18.614" status="PASS" endtime="20170630 17:53:18.615"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170630 17:53:18.615" status="PASS" endtime="20170630 17:53:18.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170630 17:53:18.623" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<status starttime="20170630 17:53:18.623" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<status starttime="20170630 17:53:18.622" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<status starttime="20170630 17:53:18.615" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170630 17:53:19.290" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<status starttime="20170630 17:53:16.872" status="PASS" endtime="20170630 17:53:19.290"></status>
</kw>
<status starttime="20170630 17:53:16.847" status="PASS" endtime="20170630 17:53:19.291"></status>
</kw>
<status starttime="20170630 17:53:16.845" status="PASS" endtime="20170630 17:53:19.291"></status>
</kw>
<status starttime="20170630 17:53:16.845" status="PASS" endtime="20170630 17:53:19.291"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:19.293" status="PASS" endtime="20170630 17:53:19.293"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:19.293">${ret_values} = None</msg>
<status starttime="20170630 17:53:19.292" status="PASS" endtime="20170630 17:53:19.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:19.294" status="PASS" endtime="20170630 17:53:19.294"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.320">Returning from the enclosing user keyword.</msg>
<status starttime="20170630 17:53:19.319" status="PASS" endtime="20170630 17:53:19.320"></status>
</kw>
<status starttime="20170630 17:53:19.319" status="PASS" endtime="20170630 17:53:19.320"></status>
</kw>
<status starttime="20170630 17:53:19.294" status="PASS" endtime="20170630 17:53:19.320"></status>
</kw>
<status starttime="20170630 17:53:19.291" status="PASS" endtime="20170630 17:53:19.320"></status>
</kw>
<status starttime="20170630 17:53:19.291" status="PASS" endtime="20170630 17:53:19.320"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170630 17:53:19.322" status="PASS" endtime="20170630 17:53:19.322"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:19.323">${ret_values} = None</msg>
<status starttime="20170630 17:53:19.321" status="PASS" endtime="20170630 17:53:19.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170630 17:53:19.323" status="PASS" endtime="20170630 17:53:19.323"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.351">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170630 17:53:19.350" status="PASS" endtime="20170630 17:53:19.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170630 17:53:19.352" status="PASS" endtime="20170630 17:53:19.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.353">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170630 17:53:19.352" status="PASS" endtime="20170630 17:53:19.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170630 17:53:19.353" status="PASS" endtime="20170630 17:53:19.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170630 17:53:19.354" status="PASS" endtime="20170630 17:53:19.533"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170630 17:53:19.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170630 17:53:19.354" status="PASS" endtime="20170630 17:53:19.534"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:19.534" status="PASS" endtime="20170630 17:53:19.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170630 17:53:19.535" status="PASS" endtime="20170630 17:53:19.535"></status>
</kw>
<status starttime="20170630 17:53:19.350" status="PASS" endtime="20170630 17:53:19.535"></status>
</kw>
<status starttime="20170630 17:53:19.349" status="PASS" endtime="20170630 17:53:19.535"></status>
</kw>
<status starttime="20170630 17:53:19.349" status="PASS" endtime="20170630 17:53:19.535"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.536">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170630 17:53:19.536" status="PASS" endtime="20170630 17:53:19.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170630 17:53:19.536" status="PASS" endtime="20170630 17:53:19.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170630 17:53:19.587">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:19.537" status="PASS" endtime="20170630 17:53:19.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170630 17:53:19.588" status="PASS" endtime="20170630 17:53:19.588"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.588">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170630 17:53:19.348" status="PASS" endtime="20170630 17:53:19.588"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170630 17:53:19.590">404 != 200</msg>
<status starttime="20170630 17:53:19.589" status="FAIL" endtime="20170630 17:53:19.590"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.590">${status} = False</msg>
<status starttime="20170630 17:53:19.589" status="PASS" endtime="20170630 17:53:19.590"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.590">Returning from the enclosing user keyword.</msg>
<status starttime="20170630 17:53:19.590" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:19.348" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:19.324" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:19.320" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:19.320" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:04.971" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:04.969" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:04.968" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<status starttime="20170630 17:53:04.968" status="PASS" endtime="20170630 17:53:19.591"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170630 17:53:19.591" status="PASS" endtime="20170630 17:53:19.657"></status>
</kw>
<status starttime="20170630 17:53:04.967" status="PASS" endtime="20170630 17:53:19.657"></status>
</kw>
<status starttime="20170630 17:52:59.883" status="PASS" endtime="20170630 17:53:19.657"></status>
</kw>
<status starttime="20170630 17:52:59.883" status="PASS" endtime="20170630 17:53:19.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170630 17:53:19.658" status="PASS" endtime="20170630 17:53:19.658"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.667">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170630 17:53:19.659" status="PASS" endtime="20170630 17:53:19.667"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.668">${FFDC_DIR_PATH} = /tmp/fspcibld/21417/obmc-robot/logs/20170630175302995428_TestsTestBasicPoweron/20170630175302995428_PowerOnTest/</msg>
<status starttime="20170630 17:53:19.668" status="PASS" endtime="20170630 17:53:19.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170630 17:53:19.668" status="PASS" endtime="20170630 17:53:19.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170630 17:53:19.669" status="PASS" endtime="20170630 17:53:19.669"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.670" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs"&gt;/tmp/fspcibld/21417/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170630 17:53:19.669" status="PASS" endtime="20170630 17:53:19.670"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.671" html="yes">File '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170630 17:53:19.670" status="PASS" endtime="20170630 17:53:19.671"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.671">${exist} = True</msg>
<status starttime="20170630 17:53:19.670" status="PASS" endtime="20170630 17:53:19.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170630 17:53:19.671" status="PASS" endtime="20170630 17:53:19.671"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170630 17:53:19.672" status="PASS" endtime="20170630 17:53:19.672"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.673">${cur_time} = 2017-06-30 17:53:19:672784</msg>
<status starttime="20170630 17:53:19.673" status="PASS" endtime="20170630 17:53:19.673"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.673">${cur_time} = 20170630175319672784</msg>
<status starttime="20170630 17:53:19.673" status="PASS" endtime="20170630 17:53:19.674"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.674">${cur_time} = 20170630175319672784</msg>
<status starttime="20170630 17:53:19.672" status="PASS" endtime="20170630 17:53:19.674"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.675" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21417/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:19.674" status="PASS" endtime="20170630 17:53:19.675"></status>
</kw>
<status starttime="20170630 17:53:19.658" status="PASS" endtime="20170630 17:53:19.675"></status>
</kw>
<status starttime="20170630 17:52:59.587" status="PASS" endtime="20170630 17:53:19.675"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.677">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:53:19.676" status="PASS" endtime="20170630 17:53:19.677"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.677">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:53:19.677" status="PASS" endtime="20170630 17:53:19.677"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.678">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170630 17:53:19.676" status="PASS" endtime="20170630 17:53:19.678"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.678">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170630 17:53:19.678" status="PASS" endtime="20170630 17:53:19.678"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:53:19.679" status="PASS" endtime="20170630 17:53:19.679"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.684">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:53:19.688">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:53:19.688">${output} = /tmp/fspcibld/21417/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170630 17:53:19.679" status="PASS" endtime="20170630 17:53:19.688"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170630 17:53:19.690" status="PASS" endtime="20170630 17:53:19.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170630 17:53:19.692" status="PASS" endtime="20170630 17:53:19.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.694">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:53:19.693" status="PASS" endtime="20170630 17:53:19.694"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.694">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170630 17:53:19.678" status="PASS" endtime="20170630 17:53:19.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.695">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170630 17:53:19.695" status="PASS" endtime="20170630 17:53:19.695"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:53:19.696" status="PASS" endtime="20170630 17:53:19.696"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.702">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170630 17:53:19.716">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:53:19.716">${os_con_pid} = </msg>
<status starttime="20170630 17:53:19.697" status="PASS" endtime="20170630 17:53:19.718"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170630 17:53:19.728" status="PASS" endtime="20170630 17:53:19.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.733">${cmd_buf} = kill -9 </msg>
<status starttime="20170630 17:53:19.730" status="PASS" endtime="20170630 17:53:19.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170630 17:53:19.733" status="PASS" endtime="20170630 17:53:19.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.735">${rc} = None</msg>
<msg level="INFO" timestamp="20170630 17:53:19.735">${output} = None</msg>
<status starttime="20170630 17:53:19.734" status="PASS" endtime="20170630 17:53:19.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170630 17:53:19.735" status="PASS" endtime="20170630 17:53:19.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.740" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/21417/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/21417/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170630 17:53:19.738" status="PASS" endtime="20170630 17:53:19.740"></status>
</kw>
<status starttime="20170630 17:53:19.737" status="PASS" endtime="20170630 17:53:19.740"></status>
</kw>
<status starttime="20170630 17:53:19.736" status="PASS" endtime="20170630 17:53:19.740"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.741">${output} = </msg>
<status starttime="20170630 17:53:19.741" status="PASS" endtime="20170630 17:53:19.741"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170630 17:53:19.742">${loc_quiet} = 1</msg>
<status starttime="20170630 17:53:19.741" status="PASS" endtime="20170630 17:53:19.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170630 17:53:19.743" status="PASS" endtime="20170630 17:53:19.777"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.778">${rc} = 0</msg>
<msg level="INFO" timestamp="20170630 17:53:19.779">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170630 17:53:19.742" status="PASS" endtime="20170630 17:53:19.779"></status>
</kw>
<msg level="INFO" timestamp="20170630 17:53:19.780">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170630 17:53:19.675" status="PASS" endtime="20170630 17:53:19.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170630 17:53:19.782">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170630 17:53:19.782" status="PASS" endtime="20170630 17:53:19.782"></status>
</kw>
<status starttime="20170630 17:52:59.586" status="PASS" endtime="20170630 17:53:19.783"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" starttime="20170630 17:42:25.181" status="FAIL" endtime="20170630 17:53:19.783">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170630 17:42:25.151" status="FAIL" endtime="20170630 17:53:19.785"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170630 17:42:18.453" status="FAIL" endtime="20170630 17:53:19.788"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
