<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170810 00:52:31.206" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170810 00:52:32.113" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170810 00:52:32.113" starttime="20170810 00:52:32.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:32.114" starttime="20170810 00:52:32.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 00:52:32.118" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 00:52:32.118" starttime="20170810 00:52:32.117"></status>
</kw>
<msg timestamp="20170810 00:52:32.118" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 00:52:32.118" starttime="20170810 00:52:32.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:32.119" starttime="20170810 00:52:32.119"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:32.119" starttime="20170810 00:52:32.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:32.120" starttime="20170810 00:52:32.120"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 00:52:32.121" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 00:52:32.121" starttime="20170810 00:52:32.121"></status>
</kw>
<msg timestamp="20170810 00:52:32.121" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 00:52:32.121" starttime="20170810 00:52:32.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:32.123" starttime="20170810 00:52:32.123"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:32.123" starttime="20170810 00:52:32.122"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:32.123" starttime="20170810 00:52:32.122"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 00:52:32.124" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:52:33.836" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 00:52:33.836" starttime="20170810 00:52:32.124"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.836" starttime="20170810 00:52:32.116"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:52:33.837" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170810 00:52:33.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:52:33.914" level="INFO">${output} = 1502324505</msg>
<msg timestamp="20170810 00:52:33.914" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:52:33.914" starttime="20170810 00:52:33.837"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:52:33.915" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:52:33.915" starttime="20170810 00:52:33.914"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170810 00:52:33.915" level="INFO">${btime} = 1502324505</msg>
<status status="PASS" endtime="20170810 00:52:33.915" starttime="20170810 00:52:33.915"></status>
</kw>
<msg timestamp="20170810 00:52:33.915" level="INFO">${cur_btime} = 1502324505</msg>
<status status="PASS" endtime="20170810 00:52:33.916" starttime="20170810 00:52:32.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170810 00:52:33.917" level="INFO">${BOOT_TIME} = 1502324505</msg>
<status status="PASS" endtime="20170810 00:52:33.917" starttime="20170810 00:52:33.917"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.917" starttime="20170810 00:52:33.916"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.918" starttime="20170810 00:52:32.115"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.918" starttime="20170810 00:52:33.918"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.920" starttime="20170810 00:52:33.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.920" starttime="20170810 00:52:33.920"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.921" starttime="20170810 00:52:32.115"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 00:52:33.923" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 00:52:33.923" starttime="20170810 00:52:33.923"></status>
</kw>
<msg timestamp="20170810 00:52:33.923" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 00:52:33.923" starttime="20170810 00:52:33.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.925" starttime="20170810 00:52:33.924"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.925" starttime="20170810 00:52:33.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.925" starttime="20170810 00:52:33.925"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 00:52:33.926" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 00:52:33.927" starttime="20170810 00:52:33.926"></status>
</kw>
<msg timestamp="20170810 00:52:33.927" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 00:52:33.927" starttime="20170810 00:52:33.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:33.928" starttime="20170810 00:52:33.928"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.929" starttime="20170810 00:52:33.928"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:33.929" starttime="20170810 00:52:33.927"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 00:52:33.929" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:52:35.608" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 00:52:35.608" starttime="20170810 00:52:33.929"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.608" starttime="20170810 00:52:33.921"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 00:52:35.609" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170810 00:52:35.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:52:35.687" level="INFO">${output} = </msg>
<msg timestamp="20170810 00:52:35.687" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170810 00:52:35.687" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170810 00:52:35.687" starttime="20170810 00:52:35.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:35.688" starttime="20170810 00:52:35.687"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.688" starttime="20170810 00:52:33.921"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 00:52:35.690" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170810 00:52:35.690" starttime="20170810 00:52:35.689"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:35.691" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170810 00:52:35.691" starttime="20170810 00:52:35.691"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:35.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:35.695" starttime="20170810 00:52:35.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:35.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:35.696" starttime="20170810 00:52:35.696"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:35.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:35.697" starttime="20170810 00:52:35.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:35.698" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:35.698" starttime="20170810 00:52:35.698"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:35.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:35.903" starttime="20170810 00:52:35.700"></status>
</kw>
<msg timestamp="20170810 00:52:35.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:35.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:35.903" starttime="20170810 00:52:35.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:35.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:35.904" starttime="20170810 00:52:35.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:35.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:35.905" starttime="20170810 00:52:35.904"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.905" starttime="20170810 00:52:35.694"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.905" starttime="20170810 00:52:35.693"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.905" starttime="20170810 00:52:35.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:35.906" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170810 00:52:35.906" starttime="20170810 00:52:35.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:35.906" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:35.906" starttime="20170810 00:52:35.906"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:35.907" starttime="20170810 00:52:35.907"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:52:35.908" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170810 00:52:35.909" starttime="20170810 00:52:35.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:52:35.910" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 00:52:35.910" starttime="20170810 00:52:35.909"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.910" starttime="20170810 00:52:35.909"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:35.910" starttime="20170810 00:52:35.907"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:36.121" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 00:52:36.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.122" starttime="20170810 00:52:35.911"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:52:36.123" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:52:36.123" starttime="20170810 00:52:36.122"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:52:36.124" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:52:36.124" starttime="20170810 00:52:36.124"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.126" starttime="20170810 00:52:36.123"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.126" starttime="20170810 00:52:36.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:36.127" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:36.127" starttime="20170810 00:52:36.126"></status>
</kw>
<msg timestamp="20170810 00:52:36.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.127" starttime="20170810 00:52:35.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:36.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.128" starttime="20170810 00:52:36.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 00:52:36.128" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:52:36.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:52:36.129" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 00:52:36.129" starttime="20170810 00:52:36.128"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.129" starttime="20170810 00:52:35.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:36.129" starttime="20170810 00:52:36.129"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:36.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:36.135" starttime="20170810 00:52:36.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:36.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:36.136" starttime="20170810 00:52:36.135"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:36.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:36.137" starttime="20170810 00:52:36.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:36.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:36.138" starttime="20170810 00:52:36.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:36.805" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:36.805" starttime="20170810 00:52:36.138"></status>
</kw>
<msg timestamp="20170810 00:52:36.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:36.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.805" starttime="20170810 00:52:36.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:36.806" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.806" starttime="20170810 00:52:36.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:36.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:36.807" starttime="20170810 00:52:36.807"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.807" starttime="20170810 00:52:36.134"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.807" starttime="20170810 00:52:36.133"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:36.807" starttime="20170810 00:52:36.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:36.808" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170810 00:52:36.808" starttime="20170810 00:52:36.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:36.809" starttime="20170810 00:52:36.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:37.125" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 00:52:37.126" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.126" starttime="20170810 00:52:36.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.127" starttime="20170810 00:52:37.126"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:37.127" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:37.127" starttime="20170810 00:52:37.127"></status>
</kw>
<msg timestamp="20170810 00:52:37.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.127" starttime="20170810 00:52:36.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.128" starttime="20170810 00:52:37.128"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:52:37.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:52:37.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:52:37.129" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170810 00:52:37.129" starttime="20170810 00:52:37.128"></status>
</kw>
<msg timestamp="20170810 00:52:37.129" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170810 00:52:37.129" starttime="20170810 00:52:36.131"></status>
</kw>
<msg timestamp="20170810 00:52:37.129" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170810 00:52:37.129" starttime="20170810 00:52:36.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.130" starttime="20170810 00:52:37.130"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.130" starttime="20170810 00:52:36.130"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:37.134" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:37.135" starttime="20170810 00:52:37.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:37.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:37.135" starttime="20170810 00:52:37.135"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:37.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:37.136" starttime="20170810 00:52:37.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:37.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:37.137" starttime="20170810 00:52:37.136"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:37.356" starttime="20170810 00:52:37.137"></status>
</kw>
<msg timestamp="20170810 00:52:37.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:37.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.356" starttime="20170810 00:52:37.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.357" starttime="20170810 00:52:37.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.358" starttime="20170810 00:52:37.358"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.358" starttime="20170810 00:52:37.133"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.358" starttime="20170810 00:52:37.133"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.358" starttime="20170810 00:52:37.132"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:37.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170810 00:52:37.359" starttime="20170810 00:52:37.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.360" starttime="20170810 00:52:37.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:37.425" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 00:52:37.425" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.425" starttime="20170810 00:52:37.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.426" starttime="20170810 00:52:37.425"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:37.426" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:37.426" starttime="20170810 00:52:37.426"></status>
</kw>
<msg timestamp="20170810 00:52:37.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.426" starttime="20170810 00:52:37.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.427" starttime="20170810 00:52:37.427"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:52:37.428" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:52:37.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:52:37.428" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170810 00:52:37.428" starttime="20170810 00:52:37.428"></status>
</kw>
<msg timestamp="20170810 00:52:37.428" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 00:52:37.428" starttime="20170810 00:52:37.131"></status>
</kw>
<msg timestamp="20170810 00:52:37.429" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170810 00:52:37.429" starttime="20170810 00:52:37.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.429" starttime="20170810 00:52:37.429"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.429" starttime="20170810 00:52:36.130"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.430" starttime="20170810 00:52:36.130"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.430" starttime="20170810 00:52:35.689"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.430" starttime="20170810 00:52:35.688"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.430" starttime="20170810 00:52:35.688"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170810 00:52:37.431" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170810 00:52:37.431" starttime="20170810 00:52:37.430"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:37.432" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170810 00:52:37.432" starttime="20170810 00:52:37.432"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:37.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:37.436" starttime="20170810 00:52:37.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:37.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:37.436" starttime="20170810 00:52:37.436"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:37.437" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:37.437" starttime="20170810 00:52:37.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:37.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:37.438" starttime="20170810 00:52:37.437"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:37.620" starttime="20170810 00:52:37.438"></status>
</kw>
<msg timestamp="20170810 00:52:37.620" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:37.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.620" starttime="20170810 00:52:37.438"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.621" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.621" starttime="20170810 00:52:37.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.622" starttime="20170810 00:52:37.621"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.622" starttime="20170810 00:52:37.434"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.622" starttime="20170810 00:52:37.434"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.622" starttime="20170810 00:52:37.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:37.623" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170810 00:52:37.623" starttime="20170810 00:52:37.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:37.623" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:37.623" starttime="20170810 00:52:37.623"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:37.624" starttime="20170810 00:52:37.624"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:52:37.626" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 00:52:37.626" starttime="20170810 00:52:37.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:52:37.626" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 00:52:37.627" starttime="20170810 00:52:37.626"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.627" starttime="20170810 00:52:37.626"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.627" starttime="20170810 00:52:37.624"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:37.873" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 00:52:37.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.873" starttime="20170810 00:52:37.627"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:52:37.874" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:52:37.874" starttime="20170810 00:52:37.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:52:37.875" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:52:37.875" starttime="20170810 00:52:37.875"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.875" starttime="20170810 00:52:37.874"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.876" starttime="20170810 00:52:37.873"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:37.877" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:37.877" starttime="20170810 00:52:37.877"></status>
</kw>
<msg timestamp="20170810 00:52:37.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.877" starttime="20170810 00:52:37.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:37.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:37.878" starttime="20170810 00:52:37.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 00:52:37.879" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:52:37.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:52:37.879" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 00:52:37.879" starttime="20170810 00:52:37.878"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:37.879" starttime="20170810 00:52:37.431"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:37.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:37.886" starttime="20170810 00:52:37.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:37.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:37.887" starttime="20170810 00:52:37.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:37.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:37.888" starttime="20170810 00:52:37.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:37.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:37.889" starttime="20170810 00:52:37.888"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:38.128" starttime="20170810 00:52:37.889"></status>
</kw>
<msg timestamp="20170810 00:52:38.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:38.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.128" starttime="20170810 00:52:37.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.129" starttime="20170810 00:52:38.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.129" starttime="20170810 00:52:38.129"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.130" starttime="20170810 00:52:37.884"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.130" starttime="20170810 00:52:37.884"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.130" starttime="20170810 00:52:37.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:38.130" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170810 00:52:38.130" starttime="20170810 00:52:38.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.131" starttime="20170810 00:52:38.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:38.228" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170810 00:52:38.228" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.229" starttime="20170810 00:52:38.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.229" starttime="20170810 00:52:38.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:38.230" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:38.230" starttime="20170810 00:52:38.230"></status>
</kw>
<msg timestamp="20170810 00:52:38.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.230" starttime="20170810 00:52:37.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.231" starttime="20170810 00:52:38.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:52:38.231" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:52:38.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:52:38.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170810 00:52:38.231" starttime="20170810 00:52:38.231"></status>
</kw>
<msg timestamp="20170810 00:52:38.232" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170810 00:52:38.232" starttime="20170810 00:52:37.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.232" starttime="20170810 00:52:38.232"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.233" starttime="20170810 00:52:37.430"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:38.234" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170810 00:52:38.234" starttime="20170810 00:52:38.233"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:38.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:38.237" starttime="20170810 00:52:38.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:38.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:38.238" starttime="20170810 00:52:38.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:38.238" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:38.238" starttime="20170810 00:52:38.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:38.239" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:38.239" starttime="20170810 00:52:38.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:52:38.422" starttime="20170810 00:52:38.240"></status>
</kw>
<msg timestamp="20170810 00:52:38.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:52:38.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.422" starttime="20170810 00:52:38.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.423" starttime="20170810 00:52:38.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.424" starttime="20170810 00:52:38.423"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.424" starttime="20170810 00:52:38.235"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.424" starttime="20170810 00:52:38.235"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:38.424" starttime="20170810 00:52:38.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:52:38.425" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170810 00:52:38.425" starttime="20170810 00:52:38.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:38.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:38.425" starttime="20170810 00:52:38.425"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.426" starttime="20170810 00:52:38.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.427" starttime="20170810 00:52:38.426"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:52:38.857" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170810 00:52:38.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.857" starttime="20170810 00:52:38.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:38.858" starttime="20170810 00:52:38.857"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:52:38.858" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:52:38.858" starttime="20170810 00:52:38.858"></status>
</kw>
<msg timestamp="20170810 00:52:38.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.858" starttime="20170810 00:52:38.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:52:38.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:52:38.859" starttime="20170810 00:52:38.859"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170810 00:52:48.860" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170810 00:52:48.860" starttime="20170810 00:52:38.859"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:48.860" starttime="20170810 00:52:38.233"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 00:52:48.864" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 00:52:48.864" starttime="20170810 00:52:48.863"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 00:52:48.869" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 00:52:51.880" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 00:52:51.880" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=4.53 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.587 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 00:52:51.880" starttime="20170810 00:52:48.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 00:52:51.883" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=4.53 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.587 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.27 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=3.85 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.587/2.561/4.531/1.668 ms</msg>
<status status="PASS" endtime="20170810 00:52:51.883" starttime="20170810 00:52:51.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:51.884" starttime="20170810 00:52:51.884"></status>
</kw>
<status status="PASS" endtime="20170810 00:52:51.884" starttime="20170810 00:52:48.863"></status>
</kw>
<msg timestamp="20170810 00:52:51.884" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170810 00:52:51.884" starttime="20170810 00:52:48.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 00:52:51.885" starttime="20170810 00:52:51.885"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:52:51.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:52:51.889" starttime="20170810 00:52:51.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:52:51.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:52:51.890" starttime="20170810 00:52:51.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:52:51.890" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:52:51.890" starttime="20170810 00:52:51.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:52:51.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:52:51.891" starttime="20170810 00:52:51.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:52:52.092" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170810 00:52:52.093" starttime="20170810 00:52:51.892"></status>
</kw>
<msg timestamp="20170810 00:52:52.093" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 00:52:52.093" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170810 00:52:52.093" starttime="20170810 00:52:51.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:52:52.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:52:52.094" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 00:52:52.094" starttime="20170810 00:52:52.093"></status>
</kw>
<status status="FAIL" endtime="20170810 00:52:52.094" starttime="20170810 00:52:51.887"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:53:12.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:53:12.097" starttime="20170810 00:53:12.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:53:12.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:53:12.098" starttime="20170810 00:53:12.097"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:53:12.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:53:12.098" starttime="20170810 00:53:12.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:53:12.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:53:12.099" starttime="20170810 00:53:12.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:53:32.123" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa4c6b290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 00:53:52.350" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa4c6b210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 00:54:15.369" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170810 00:54:15.369" starttime="20170810 00:53:12.100"></status>
</kw>
<msg timestamp="20170810 00:54:15.370" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 00:54:15.370" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170810 00:54:15.370" starttime="20170810 00:53:12.099"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:54:15.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:54:15.371" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 00:54:15.372" starttime="20170810 00:54:15.371"></status>
</kw>
<status status="FAIL" endtime="20170810 00:54:15.373" starttime="20170810 00:53:12.095"></status>
</kw>
<msg timestamp="20170810 00:54:15.373" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 00:54:15.373" starttime="20170810 00:52:51.886"></status>
</kw>
<status status="FAIL" endtime="20170810 00:54:15.373" starttime="20170810 00:52:51.886"></status>
</kw>
<msg timestamp="20170810 00:54:15.373" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170810 00:54:15.373" starttime="20170810 00:52:51.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170810 00:54:15.374" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170810 00:54:15.374" starttime="20170810 00:54:15.374"></status>
</kw>
<status status="FAIL" endtime="20170810 00:54:15.374" starttime="20170810 00:54:15.373"></status>
</kw>
<status status="FAIL" endtime="20170810 00:54:15.375" starttime="20170810 00:52:48.862"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 00:54:25.377" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 00:54:25.377" starttime="20170810 00:54:25.377"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 00:54:25.391" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 00:54:28.386" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 00:54:28.387" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.84 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 00:54:28.387" starttime="20170810 00:54:25.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 00:54:28.391" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.84 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.688 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.598 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.598/2.188/6.842/2.687 ms</msg>
<status status="PASS" endtime="20170810 00:54:28.391" starttime="20170810 00:54:28.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:54:28.392" starttime="20170810 00:54:28.391"></status>
</kw>
<status status="PASS" endtime="20170810 00:54:28.392" starttime="20170810 00:54:25.376"></status>
</kw>
<msg timestamp="20170810 00:54:28.392" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170810 00:54:28.392" starttime="20170810 00:54:25.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 00:54:28.393" starttime="20170810 00:54:28.393"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:54:28.396" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:54:28.397" starttime="20170810 00:54:28.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:54:28.398" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:54:28.398" starttime="20170810 00:54:28.398"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:54:28.399" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:54:28.399" starttime="20170810 00:54:28.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:54:28.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:54:28.399" starttime="20170810 00:54:28.399"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:54:48.425" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170810 00:54:48.425" starttime="20170810 00:54:28.400"></status>
</kw>
<msg timestamp="20170810 00:54:48.426" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 00:54:48.426" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170810 00:54:48.426" starttime="20170810 00:54:28.400"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:54:48.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:54:48.427" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 00:54:48.427" starttime="20170810 00:54:48.426"></status>
</kw>
<status status="FAIL" endtime="20170810 00:54:48.427" starttime="20170810 00:54:28.395"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:55:08.430" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:55:08.430" starttime="20170810 00:55:08.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:08.431" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:08.431" starttime="20170810 00:55:08.430"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:55:08.431" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:55:08.432" starttime="20170810 00:55:08.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:55:08.432" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:55:08.432" starttime="20170810 00:55:08.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:55:08.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:55:08.752" starttime="20170810 00:55:08.433"></status>
</kw>
<msg timestamp="20170810 00:55:08.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:55:08.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:08.752" starttime="20170810 00:55:08.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:55:08.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:08.753" starttime="20170810 00:55:08.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:08.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:08.754" starttime="20170810 00:55:08.753"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.754" starttime="20170810 00:55:08.428"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.754" starttime="20170810 00:54:28.395"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.754" starttime="20170810 00:54:28.394"></status>
</kw>
<msg timestamp="20170810 00:55:08.754" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170810 00:55:08.754" starttime="20170810 00:54:28.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:08.755" starttime="20170810 00:55:08.755"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 00:55:08.757" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 00:55:08.757" starttime="20170810 00:55:08.756"></status>
</kw>
<msg timestamp="20170810 00:55:08.757" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 00:55:08.757" starttime="20170810 00:55:08.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:08.758" starttime="20170810 00:55:08.758"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.758" starttime="20170810 00:55:08.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:08.759" starttime="20170810 00:55:08.758"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 00:55:08.760" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 00:55:08.760" starttime="20170810 00:55:08.760"></status>
</kw>
<msg timestamp="20170810 00:55:08.760" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 00:55:08.760" starttime="20170810 00:55:08.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:08.762" starttime="20170810 00:55:08.761"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.762" starttime="20170810 00:55:08.761"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:08.762" starttime="20170810 00:55:08.760"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 00:55:08.763" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:55:10.742" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 00:55:10.742" starttime="20170810 00:55:08.762"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.742" starttime="20170810 00:55:08.755"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:10.743" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170810 00:55:10.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:10.800" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170810 00:55:10.800" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:10.800" starttime="20170810 00:55:10.743"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:10.801" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:10.801" starttime="20170810 00:55:10.801"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.801" starttime="20170810 00:54:25.375"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.801" starttime="20170810 00:52:48.861"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.801" starttime="20170810 00:52:48.861"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 00:55:10.804" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 00:55:10.804" starttime="20170810 00:55:10.804"></status>
</kw>
<msg timestamp="20170810 00:55:10.804" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 00:55:10.804" starttime="20170810 00:55:10.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:10.806" starttime="20170810 00:55:10.805"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.806" starttime="20170810 00:55:10.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:10.806" starttime="20170810 00:55:10.806"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 00:55:10.808" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 00:55:10.808" starttime="20170810 00:55:10.808"></status>
</kw>
<msg timestamp="20170810 00:55:10.808" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 00:55:10.808" starttime="20170810 00:55:10.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:10.810" starttime="20170810 00:55:10.810"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.810" starttime="20170810 00:55:10.809"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:10.810" starttime="20170810 00:55:10.808"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 00:55:10.811" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:55:12.460" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 00:55:12.461" starttime="20170810 00:55:10.810"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.461" starttime="20170810 00:55:10.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:12.462" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170810 00:55:12.539" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:12.539" level="INFO">${output} = 1502326402</msg>
<msg timestamp="20170810 00:55:12.539" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:12.539" starttime="20170810 00:55:12.461"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.540" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:12.540" starttime="20170810 00:55:12.540"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170810 00:55:12.541" level="INFO">${btime} = 1502326402</msg>
<status status="PASS" endtime="20170810 00:55:12.541" starttime="20170810 00:55:12.541"></status>
</kw>
<msg timestamp="20170810 00:55:12.541" level="INFO">${cur_btime} = 1502326402</msg>
<status status="PASS" endtime="20170810 00:55:12.542" starttime="20170810 00:55:10.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.544" level="INFO">${BOOT_TIME} = 1502326402</msg>
<status status="PASS" endtime="20170810 00:55:12.544" starttime="20170810 00:55:12.543"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.545" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170810 00:55:12.545" starttime="20170810 00:55:12.544"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.545" starttime="20170810 00:55:12.543"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.545" starttime="20170810 00:55:12.542"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.545" starttime="20170810 00:55:10.802"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:12.546" starttime="20170810 00:55:12.545"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:12.546" starttime="20170810 00:55:12.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:12.547" starttime="20170810 00:55:12.547"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.548" starttime="20170810 00:55:10.801"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:55:12.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:55:12.553" starttime="20170810 00:55:12.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:12.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:12.553" starttime="20170810 00:55:12.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:55:12.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:55:12.554" starttime="20170810 00:55:12.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:55:12.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:55:12.555" starttime="20170810 00:55:12.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:55:12.757" starttime="20170810 00:55:12.555"></status>
</kw>
<msg timestamp="20170810 00:55:12.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:55:12.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:12.757" starttime="20170810 00:55:12.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:12.758" starttime="20170810 00:55:12.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:12.759" starttime="20170810 00:55:12.758"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.759" starttime="20170810 00:55:12.551"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.759" starttime="20170810 00:55:12.551"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:12.759" starttime="20170810 00:55:12.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:55:12.760" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170810 00:55:12.760" starttime="20170810 00:55:12.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:12.760" starttime="20170810 00:55:12.760"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:55:12.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170810 00:55:12.820" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:12.820" starttime="20170810 00:55:12.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:12.821" starttime="20170810 00:55:12.821"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:55:12.822" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:55:12.822" starttime="20170810 00:55:12.822"></status>
</kw>
<msg timestamp="20170810 00:55:12.822" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:12.822" starttime="20170810 00:55:12.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:12.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:55:12.823" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 00:55:12.823" starttime="20170810 00:55:12.822"></status>
</kw>
<status status="FAIL" endtime="20170810 00:55:12.823" starttime="20170810 00:55:12.549"></status>
</kw>
<msg timestamp="20170810 00:55:12.823" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:55:12.823" starttime="20170810 00:55:12.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170810 00:55:12.825" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170810 00:55:12.825" starttime="20170810 00:55:12.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:55:12.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:55:12.831" starttime="20170810 00:55:12.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:12.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:12.832" starttime="20170810 00:55:12.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:55:12.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:55:12.832" starttime="20170810 00:55:12.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:55:12.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:55:12.833" starttime="20170810 00:55:12.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.025" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:55:13.026" starttime="20170810 00:55:12.834"></status>
</kw>
<msg timestamp="20170810 00:55:13.026" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:55:13.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.026" starttime="20170810 00:55:12.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.027" starttime="20170810 00:55:13.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.027" starttime="20170810 00:55:13.027"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.027" starttime="20170810 00:55:12.830"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.028" starttime="20170810 00:55:12.829"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.028" starttime="20170810 00:55:12.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:55:13.028" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170810 00:55:13.028" starttime="20170810 00:55:13.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.029" starttime="20170810 00:55:13.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:55:13.106" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170810 00:55:13.106" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.106" starttime="20170810 00:55:13.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.107" starttime="20170810 00:55:13.106"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:55:13.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:55:13.107" starttime="20170810 00:55:13.107"></status>
</kw>
<msg timestamp="20170810 00:55:13.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.107" starttime="20170810 00:55:12.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.108" starttime="20170810 00:55:13.108"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:55:13.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:55:13.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:55:13.109" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170810 00:55:13.109" starttime="20170810 00:55:13.108"></status>
</kw>
<msg timestamp="20170810 00:55:13.109" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170810 00:55:13.109" starttime="20170810 00:55:12.827"></status>
</kw>
<msg timestamp="20170810 00:55:13.110" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170810 00:55:13.110" starttime="20170810 00:55:12.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.110" starttime="20170810 00:55:13.110"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.110" starttime="20170810 00:55:12.827"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.110" starttime="20170810 00:55:12.826"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.110" starttime="20170810 00:55:12.825"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.111" starttime="20170810 00:55:12.824"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.111" starttime="20170810 00:55:12.824"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.111" starttime="20170810 00:52:32.115"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.111" starttime="20170810 00:52:32.114"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170810 00:55:13.118" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170810 00:55:13.118" starttime="20170810 00:55:13.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170810 00:55:13.119" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170810 00:55:13.119" starttime="20170810 00:55:13.118"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:55:13.120" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 00:55:13.120" starttime="20170810 00:55:13.119"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:55:13.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:55:13.123" starttime="20170810 00:55:13.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:13.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:13.124" starttime="20170810 00:55:13.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:55:13.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:55:13.125" starttime="20170810 00:55:13.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:55:13.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:55:13.126" starttime="20170810 00:55:13.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:55:13.341" starttime="20170810 00:55:13.127"></status>
</kw>
<msg timestamp="20170810 00:55:13.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:55:13.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.341" starttime="20170810 00:55:13.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.342" starttime="20170810 00:55:13.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.343" starttime="20170810 00:55:13.342"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.343" starttime="20170810 00:55:13.122"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.343" starttime="20170810 00:55:13.121"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.343" starttime="20170810 00:55:13.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:55:13.344" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170810 00:55:13.344" starttime="20170810 00:55:13.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:13.344" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:13.344" starttime="20170810 00:55:13.344"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.345" starttime="20170810 00:55:13.345"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:55:13.346" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 00:55:13.347" starttime="20170810 00:55:13.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:55:13.348" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 00:55:13.348" starttime="20170810 00:55:13.347"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.348" starttime="20170810 00:55:13.347"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.349" starttime="20170810 00:55:13.345"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:55:13.598" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 00:55:13.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.598" starttime="20170810 00:55:13.349"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 00:55:13.600" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:55:13.600" starttime="20170810 00:55:13.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 00:55:13.601" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 00:55:13.602" starttime="20170810 00:55:13.601"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.602" starttime="20170810 00:55:13.600"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.603" starttime="20170810 00:55:13.598"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:55:13.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:55:13.604" starttime="20170810 00:55:13.603"></status>
</kw>
<msg timestamp="20170810 00:55:13.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.604" starttime="20170810 00:55:13.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.605" starttime="20170810 00:55:13.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 00:55:13.605" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:55:13.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:55:13.606" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 00:55:13.606" starttime="20170810 00:55:13.605"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.606" starttime="20170810 00:55:13.119"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:55:13.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:55:13.610" starttime="20170810 00:55:13.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:55:13.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:55:13.611" starttime="20170810 00:55:13.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:55:13.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:55:13.612" starttime="20170810 00:55:13.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:55:13.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:55:13.612" starttime="20170810 00:55:13.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:55:13.789" starttime="20170810 00:55:13.613"></status>
</kw>
<msg timestamp="20170810 00:55:13.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:55:13.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.790" starttime="20170810 00:55:13.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.790" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.790" starttime="20170810 00:55:13.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.791" starttime="20170810 00:55:13.791"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.791" starttime="20170810 00:55:13.609"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.791" starttime="20170810 00:55:13.608"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.792" starttime="20170810 00:55:13.607"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:55:13.792" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 00:55:13.792" starttime="20170810 00:55:13.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.793" starttime="20170810 00:55:13.793"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:55:13.893" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170810 00:55:13.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.893" starttime="20170810 00:55:13.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.894" starttime="20170810 00:55:13.894"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:55:13.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:55:13.895" starttime="20170810 00:55:13.895"></status>
</kw>
<msg timestamp="20170810 00:55:13.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.895" starttime="20170810 00:55:13.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:55:13.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:55:13.896" starttime="20170810 00:55:13.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:55:13.896" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:55:13.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:55:13.896" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170810 00:55:13.897" starttime="20170810 00:55:13.896"></status>
</kw>
<msg timestamp="20170810 00:55:13.897" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170810 00:55:13.897" starttime="20170810 00:55:13.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.898" starttime="20170810 00:55:13.897"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.898" starttime="20170810 00:55:13.117"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:13.898" starttime="20170810 00:55:13.112"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170810003602.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:13.915" starttime="20170810 00:55:13.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:14.614" starttime="20170810 00:55:13.916"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:14.615" starttime="20170810 00:55:13.916"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:14.615" starttime="20170810 00:55:13.906"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 00:55:14.617" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 00:55:14.617" starttime="20170810 00:55:14.616"></status>
</kw>
<msg timestamp="20170810 00:55:14.617" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 00:55:14.617" starttime="20170810 00:55:14.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:14.618" starttime="20170810 00:55:14.618"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:14.618" starttime="20170810 00:55:14.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:14.619" starttime="20170810 00:55:14.618"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 00:55:14.620" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 00:55:14.620" starttime="20170810 00:55:14.620"></status>
</kw>
<msg timestamp="20170810 00:55:14.620" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 00:55:14.620" starttime="20170810 00:55:14.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:14.623" starttime="20170810 00:55:14.622"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:14.623" starttime="20170810 00:55:14.622"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:14.623" starttime="20170810 00:55:14.621"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 00:55:14.623" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:55:16.272" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 00:55:16.273" starttime="20170810 00:55:14.623"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:16.273" starttime="20170810 00:55:14.615"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 00:55:16.275" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:55:16.275" starttime="20170810 00:55:16.275"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:16.276" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:55:16.332" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:16.332" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 00:55:16.332" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:16.332" starttime="20170810 00:55:16.275"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:16.333" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:16.333" starttime="20170810 00:55:16.333"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:16.333" starttime="20170810 00:55:16.275"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:34.113" starttime="20170810 00:55:16.334"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:34.114" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:55:34.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:34.171" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg</msg>
<msg timestamp="20170810 00:55:34.171" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:34.171" starttime="20170810 00:55:34.114"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:34.172" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:34.172" starttime="20170810 00:55:34.171"></status>
</kw>
<msg timestamp="20170810 00:55:34.172" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:55:34.172" starttime="20170810 00:55:34.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 00:55:34.173" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 00:55:34.173" starttime="20170810 00:55:34.173"></status>
</kw>
<msg timestamp="20170810 00:55:34.173" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:55:34.173" starttime="20170810 00:55:34.172"></status>
</kw>
<msg timestamp="20170810 00:55:34.174" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:55:34.174" starttime="20170810 00:55:16.274"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:34.174" starttime="20170810 00:55:34.174"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:34.174" starttime="20170810 00:55:16.274"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 00:55:34.176" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:55:34.176" starttime="20170810 00:55:34.175"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:34.177" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:55:34.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:34.281" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 00:55:34.282" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:34.282" starttime="20170810 00:55:34.176"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:34.282" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:34.282" starttime="20170810 00:55:34.282"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:34.282" starttime="20170810 00:55:34.176"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:50.889" starttime="20170810 00:55:34.283"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:50.891" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:55:50.958" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:50.958" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg</msg>
<msg timestamp="20170810 00:55:50.958" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:50.958" starttime="20170810 00:55:50.891"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:50.959" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:50.959" starttime="20170810 00:55:50.958"></status>
</kw>
<msg timestamp="20170810 00:55:50.959" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:55:50.959" starttime="20170810 00:55:50.890"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 00:55:50.960" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 00:55 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 00:55:50.960" starttime="20170810 00:55:50.960"></status>
</kw>
<msg timestamp="20170810 00:55:50.960" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:55:50.960" starttime="20170810 00:55:50.959"></status>
</kw>
<msg timestamp="20170810 00:55:50.960" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:55:50.960" starttime="20170810 00:55:34.175"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:55:50.961" starttime="20170810 00:55:50.961"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:50.961" starttime="20170810 00:55:34.175"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 00:55:50.962" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:55:50.962" starttime="20170810 00:55:50.962"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:55:50.963" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:55:51.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:55:51.088" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 00:55:51.088" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:55:51.088" starttime="20170810 00:55:50.963"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:55:51.089" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:55:51.089" starttime="20170810 00:55:51.088"></status>
</kw>
<status status="PASS" endtime="20170810 00:55:51.089" starttime="20170810 00:55:50.962"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:07.709" starttime="20170810 00:55:51.089"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:07.711" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:56:07.768" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:56:07.769" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg</msg>
<msg timestamp="20170810 00:56:07.769" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:07.769" starttime="20170810 00:56:07.710"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:56:07.769" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:56:07.769" starttime="20170810 00:56:07.769"></status>
</kw>
<msg timestamp="20170810 00:56:07.770" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:56:07.770" starttime="20170810 00:56:07.709"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 00:56:07.771" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 00:56:07.771" starttime="20170810 00:56:07.770"></status>
</kw>
<msg timestamp="20170810 00:56:07.771" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:07.771" starttime="20170810 00:56:07.770"></status>
</kw>
<msg timestamp="20170810 00:56:07.771" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:07.771" starttime="20170810 00:55:50.961"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:07.772" starttime="20170810 00:56:07.772"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:07.772" starttime="20170810 00:55:50.961"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 00:56:07.773" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:56:07.773" starttime="20170810 00:56:07.773"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:07.774" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:56:07.879" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:56:07.879" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 00:56:07.879" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:07.879" starttime="20170810 00:56:07.774"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:56:07.880" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:56:07.880" starttime="20170810 00:56:07.880"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:07.880" starttime="20170810 00:56:07.773"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:24.496" starttime="20170810 00:56:07.880"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:24.498" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 00:56:24.565" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:56:24.565" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg</msg>
<msg timestamp="20170810 00:56:24.565" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:24.565" starttime="20170810 00:56:24.498"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:56:24.566" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:56:24.566" starttime="20170810 00:56:24.566"></status>
</kw>
<msg timestamp="20170810 00:56:24.566" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 00:56:24.566" starttime="20170810 00:56:24.496"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 00:56:24.568" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 00:56 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 00:56:24.568" starttime="20170810 00:56:24.567"></status>
</kw>
<msg timestamp="20170810 00:56:24.568" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:24.568" starttime="20170810 00:56:24.567"></status>
</kw>
<msg timestamp="20170810 00:56:24.568" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:24.568" starttime="20170810 00:56:07.772"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:56:24.568"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:56:07.772"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:55:16.274"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:55:16.273"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:55:13.906"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.569" starttime="20170810 00:55:13.899"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170810 00:56:24.580" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170810 00:56:24.580" starttime="20170810 00:56:24.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:24.581" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170810 00:56:24.581" starttime="20170810 00:56:24.580"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:24.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:24.585" starttime="20170810 00:56:24.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:24.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:24.586" starttime="20170810 00:56:24.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:24.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:24.586" starttime="20170810 00:56:24.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:24.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:24.587" starttime="20170810 00:56:24.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:24.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:24.793" starttime="20170810 00:56:24.588"></status>
</kw>
<msg timestamp="20170810 00:56:24.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:24.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:24.793" starttime="20170810 00:56:24.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:24.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:24.794" starttime="20170810 00:56:24.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:24.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:24.795" starttime="20170810 00:56:24.794"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.795" starttime="20170810 00:56:24.584"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.795" starttime="20170810 00:56:24.583"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:24.795" starttime="20170810 00:56:24.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:24.796" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170810 00:56:24.796" starttime="20170810 00:56:24.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:24.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:24.796" starttime="20170810 00:56:24.796"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:24.797" starttime="20170810 00:56:24.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:24.798" starttime="20170810 00:56:24.797"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:28.503" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170810 00:56:28.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.503" starttime="20170810 00:56:24.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:28.504" starttime="20170810 00:56:28.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:28.504" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:28.505" starttime="20170810 00:56:28.504"></status>
</kw>
<msg timestamp="20170810 00:56:28.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.505" starttime="20170810 00:56:24.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:28.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.506" starttime="20170810 00:56:28.505"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:28.510" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:28.510" starttime="20170810 00:56:28.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:28.511" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:28.511" starttime="20170810 00:56:28.510"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:28.512" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:28.512" starttime="20170810 00:56:28.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:28.513" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:28.513" starttime="20170810 00:56:28.513"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:28.720" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:28.720" starttime="20170810 00:56:28.514"></status>
</kw>
<msg timestamp="20170810 00:56:28.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:28.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.720" starttime="20170810 00:56:28.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:28.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.721" starttime="20170810 00:56:28.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:28.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.722" starttime="20170810 00:56:28.721"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:28.722" starttime="20170810 00:56:28.508"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:28.722" starttime="20170810 00:56:28.508"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:28.722" starttime="20170810 00:56:28.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:28.723" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 00:56:28.723" starttime="20170810 00:56:28.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:28.724" starttime="20170810 00:56:28.723"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:28.816" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170810 00:56:28.816" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.816" starttime="20170810 00:56:28.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:28.817" starttime="20170810 00:56:28.817"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:28.818" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:28.818" starttime="20170810 00:56:28.817"></status>
</kw>
<msg timestamp="20170810 00:56:28.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.818" starttime="20170810 00:56:28.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:28.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:28.819" starttime="20170810 00:56:28.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:56:28.819" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:28.819" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:56:28.820" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170810 00:56:28.820" starttime="20170810 00:56:28.819"></status>
</kw>
<msg timestamp="20170810 00:56:28.820" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170810 00:56:28.820" starttime="20170810 00:56:28.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:28.821" starttime="20170810 00:56:28.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170810 00:56:28.821" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170810 00:56:28.821" starttime="20170810 00:56:28.821"></status>
</kw>
<status status="FAIL" endtime="20170810 00:56:28.822" starttime="20170810 00:56:24.578"></status>
</kw>
<msg timestamp="20170810 00:56:28.823" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170810 00:56:28.824" starttime="20170810 00:56:24.570"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:28.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:28.836" starttime="20170810 00:56:28.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:28.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:28.837" starttime="20170810 00:56:28.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:28.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:28.837" starttime="20170810 00:56:28.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:28.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:28.838" starttime="20170810 00:56:28.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:29.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:29.027" starttime="20170810 00:56:28.839"></status>
</kw>
<msg timestamp="20170810 00:56:29.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:29.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.027" starttime="20170810 00:56:28.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:29.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.028" starttime="20170810 00:56:29.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:29.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.029" starttime="20170810 00:56:29.029"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:29.029" starttime="20170810 00:56:28.835"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:29.029" starttime="20170810 00:56:28.834"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:29.029" starttime="20170810 00:56:28.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:29.030" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170810 00:56:29.030" starttime="20170810 00:56:29.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:29.031" starttime="20170810 00:56:29.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:29.117" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 00:56:29.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.117" starttime="20170810 00:56:29.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:29.118" starttime="20170810 00:56:29.117"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:29.118" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:29.118" starttime="20170810 00:56:29.118"></status>
</kw>
<msg timestamp="20170810 00:56:29.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.119" starttime="20170810 00:56:28.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:29.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:29.119" starttime="20170810 00:56:29.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:56:29.120" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:29.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:56:29.120" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170810 00:56:29.120" starttime="20170810 00:56:29.120"></status>
</kw>
<msg timestamp="20170810 00:56:29.120" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 00:56:29.120" starttime="20170810 00:56:28.832"></status>
</kw>
<msg timestamp="20170810 00:56:29.121" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170810 00:56:29.121" starttime="20170810 00:56:28.832"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 00:56:29.122" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170810 00:56:29.122" starttime="20170810 00:56:29.122"></status>
</kw>
<msg timestamp="20170810 00:56:29.122" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:29.122" starttime="20170810 00:56:29.121"></status>
</kw>
<msg timestamp="20170810 00:56:29.122" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:29.122" starttime="20170810 00:56:28.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 00:56:29.134" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 00:56:29.134" starttime="20170810 00:56:29.134"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 00:56:29.156" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 00:56:32.167" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 00:56:32.168" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.11 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 00:56:32.168" starttime="20170810 00:56:29.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.172" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.11 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.20 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.593 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.567/0.869/1.204/0.291 ms</msg>
<status status="PASS" endtime="20170810 00:56:32.172" starttime="20170810 00:56:32.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:32.173" starttime="20170810 00:56:32.172"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.173" starttime="20170810 00:56:29.133"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 00:56:32.195" level="INFO">${cur_time} = 2017-08-10 00:56:32:194943</msg>
<status status="PASS" endtime="20170810 00:56:32.195" starttime="20170810 00:56:32.195"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 00:56:32.196" level="INFO">${cur_time} = 20170810005632194943</msg>
<status status="PASS" endtime="20170810 00:56:32.196" starttime="20170810 00:56:32.196"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.196" starttime="20170810 00:56:32.194"></status>
</kw>
<msg timestamp="20170810 00:56:32.202" level="INFO">${FFDC_TIME} = 20170810005632194943</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 00:56:32.204" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170810 00:56:32.204" starttime="20170810 00:56:32.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 00:56:32.204" level="INFO">${suite_name} = 20170810005632194943_UpdateBmc</msg>
<status status="PASS" endtime="20170810 00:56:32.204" starttime="20170810 00:56:32.204"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 00:56:32.205" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170810 00:56:32.205" starttime="20170810 00:56:32.205"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 00:56:32.205" level="INFO">${test_name} = 20170810005632194943_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170810 00:56:32.205" starttime="20170810 00:56:32.205"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.206" starttime="20170810 00:56:32.202"></status>
</kw>
<msg timestamp="20170810 00:56:32.211" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170810 00:56:32.216" level="INFO">${FFDC_PREFIX} = 20170810005632194943_</msg>
<msg timestamp="20170810 00:56:32.236" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170810 00:56:32.238" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.238" starttime="20170810 00:56:32.237"></status>
</kw>
<msg timestamp="20170810 00:56:32.243" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.255" starttime="20170810 00:56:32.254"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.255" starttime="20170810 00:56:32.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.256" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.256" starttime="20170810 00:56:32.256"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.256" starttime="20170810 00:56:32.255"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.257" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.257" starttime="20170810 00:56:32.257"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.257" starttime="20170810 00:56:32.256"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.259" starttime="20170810 00:56:32.258"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.259" starttime="20170810 00:56:32.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.260" starttime="20170810 00:56:32.260"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.260" starttime="20170810 00:56:32.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.262" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.262" starttime="20170810 00:56:32.261"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.262" starttime="20170810 00:56:32.260"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.263" starttime="20170810 00:56:32.263"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.263" starttime="20170810 00:56:32.262"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.265" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.265" starttime="20170810 00:56:32.264"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.265" starttime="20170810 00:56:32.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.266" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.266" starttime="20170810 00:56:32.266"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.266" starttime="20170810 00:56:32.265"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.268" starttime="20170810 00:56:32.267"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.268" starttime="20170810 00:56:32.267"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.269" starttime="20170810 00:56:32.269"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.269" starttime="20170810 00:56:32.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.270" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.270" starttime="20170810 00:56:32.270"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.271" starttime="20170810 00:56:32.269"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:32.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:32.272" starttime="20170810 00:56:32.271"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:32.272" starttime="20170810 00:56:32.271"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 00:56:32.290" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:32.291" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 00:56:33.037" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170810 00:56:33.038" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 00:56:33.114" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 00:56:33.125" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 00:56:33.125" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 00:56:33.125" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170810 00:56:33.125" starttime="20170810 00:56:32.273"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.126" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 00:56:33.126" starttime="20170810 00:56:33.126"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.127" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170810 00:56:33.127" starttime="20170810 00:56:33.127"></status>
</kw>
<msg timestamp="20170810 00:56:33.127" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170810 00:56:33.128" starttime="20170810 00:56:32.272"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.129" starttime="20170810 00:56:33.129"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.130" starttime="20170810 00:56:33.128"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.130" starttime="20170810 00:56:32.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.131" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.131" starttime="20170810 00:56:33.131"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.131" starttime="20170810 00:56:33.130"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 00:56:33.132" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170810 00:56:33.132" starttime="20170810 00:56:33.131"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.133" starttime="20170810 00:56:33.133"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.133" starttime="20170810 00:56:33.132"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.134" starttime="20170810 00:56:33.134"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.135" starttime="20170810 00:56:33.133"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.135" starttime="20170810 00:56:33.132"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.136" starttime="20170810 00:56:33.136"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.136" starttime="20170810 00:56:33.135"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.137" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.137" starttime="20170810 00:56:33.137"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.137" starttime="20170810 00:56:33.136"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.137" starttime="20170810 00:56:33.135"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.139" starttime="20170810 00:56:33.138"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.139" starttime="20170810 00:56:33.138"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.140" starttime="20170810 00:56:33.140"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.141" starttime="20170810 00:56:33.139"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.141" starttime="20170810 00:56:33.138"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.141" starttime="20170810 00:56:33.132"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.142" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.142" starttime="20170810 00:56:33.141"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.142" starttime="20170810 00:56:33.141"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.142" starttime="20170810 00:56:32.253"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 00:56:33.147" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170810 00:56:33.148" starttime="20170810 00:56:33.147"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170810 00:56:33.149" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170810 00:56:33.149" starttime="20170810 00:56:33.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:33.150" starttime="20170810 00:56:33.150"></status>
</kw>
<msg timestamp="20170810 00:56:33.151" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170810 00:56:33.151" starttime="20170810 00:56:33.150"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:33.153" starttime="20170810 00:56:33.152"></status>
</kw>
<msg timestamp="20170810 00:56:33.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:33.153" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:33.153" starttime="20170810 00:56:33.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:33.153" starttime="20170810 00:56:33.153"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 00:56:33.168" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170810 00:56:33.168" starttime="20170810 00:56:33.168"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 00:56:33.170" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170810 00:56:33.170" starttime="20170810 00:56:33.169"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.175" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170810 00:56:33.175" starttime="20170810 00:56:33.170"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.180" starttime="20170810 00:56:33.180"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.180" starttime="20170810 00:56:33.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.182" starttime="20170810 00:56:33.181"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.182" starttime="20170810 00:56:33.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.183" starttime="20170810 00:56:33.183"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.183" starttime="20170810 00:56:33.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:33.184" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:33.184" starttime="20170810 00:56:33.184"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.184" starttime="20170810 00:56:33.183"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.185" starttime="20170810 00:56:33.178"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:33.185" starttime="20170810 00:56:33.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:33.185" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:33.185" starttime="20170810 00:56:33.185"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:33.227" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:33.227" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170810 00:56:34.594" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:34.594" starttime="20170810 00:56:33.204"></status>
</kw>
<msg timestamp="20170810 00:56:34.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:34.594" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170810 00:56:34.594" starttime="20170810 00:56:33.186"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:34.595" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 00:56:34.595" starttime="20170810 00:56:34.595"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:34.596" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:34.596" starttime="20170810 00:56:34.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.606" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.606" starttime="20170810 00:56:34.606"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.606" starttime="20170810 00:56:34.605"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.606" starttime="20170810 00:56:34.596"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.606" starttime="20170810 00:56:33.176"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.607" starttime="20170810 00:56:33.176"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.607" starttime="20170810 00:56:33.176"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.607" starttime="20170810 00:56:33.169"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.607" starttime="20170810 00:56:33.168"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 00:56:34.608" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170810 00:56:34.608" starttime="20170810 00:56:34.608"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.609" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170810 00:56:34.609" starttime="20170810 00:56:34.608"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.612" starttime="20170810 00:56:34.612"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.612" starttime="20170810 00:56:34.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.614" starttime="20170810 00:56:34.613"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.614" starttime="20170810 00:56:34.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.615" starttime="20170810 00:56:34.614"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.615" starttime="20170810 00:56:34.614"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.616" starttime="20170810 00:56:34.616"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.616" starttime="20170810 00:56:34.615"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.617" starttime="20170810 00:56:34.611"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.617" starttime="20170810 00:56:34.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:34.617" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:34.617" starttime="20170810 00:56:34.617"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:34.660" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:34.660" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170810 00:56:34.787" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:34.787" starttime="20170810 00:56:34.636"></status>
</kw>
<msg timestamp="20170810 00:56:34.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:34.788" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170810 00:56:34.788" starttime="20170810 00:56:34.618"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:34.788" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170810 00:56:34.789" starttime="20170810 00:56:34.788"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:34.789" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:34.789" starttime="20170810 00:56:34.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.796" starttime="20170810 00:56:34.796"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.795"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.789"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.609"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.609"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.609"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.607"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.797" starttime="20170810 00:56:34.607"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 00:56:34.798" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170810 00:56:34.798" starttime="20170810 00:56:34.798"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.799" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170810 00:56:34.799" starttime="20170810 00:56:34.799"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.802" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.802" starttime="20170810 00:56:34.802"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.802" starttime="20170810 00:56:34.801"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.804" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.804" starttime="20170810 00:56:34.803"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.804" starttime="20170810 00:56:34.803"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.805" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.805" starttime="20170810 00:56:34.805"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.805" starttime="20170810 00:56:34.804"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.806" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.806" starttime="20170810 00:56:34.806"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.806" starttime="20170810 00:56:34.805"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.807" starttime="20170810 00:56:34.801"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.807" starttime="20170810 00:56:34.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:34.807" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:34.807" starttime="20170810 00:56:34.807"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:34.849" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:34.849" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170810 00:56:34.904" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:34.904" starttime="20170810 00:56:34.825"></status>
</kw>
<msg timestamp="20170810 00:56:34.904" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:34.905" level="INFO">${ret_values} = (u' 00:56:40 up 3 min,  load average: 2.64, 1.94, 0.83', u'', 0)</msg>
<status status="PASS" endtime="20170810 00:56:34.905" starttime="20170810 00:56:34.808"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:34.905" level="INFO">${stdout} =  00:56:40 up 3 min,  load average: 2.64, 1.94, 0.83</msg>
<status status="PASS" endtime="20170810 00:56:34.905" starttime="20170810 00:56:34.905"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:34.906" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:34.906" starttime="20170810 00:56:34.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.913" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.913" starttime="20170810 00:56:34.913"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.913" starttime="20170810 00:56:34.912"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.913" starttime="20170810 00:56:34.906"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.913" starttime="20170810 00:56:34.799"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.913" starttime="20170810 00:56:34.799"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.917" starttime="20170810 00:56:34.916"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.917" starttime="20170810 00:56:34.916"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.918" starttime="20170810 00:56:34.918"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.918" starttime="20170810 00:56:34.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.920" starttime="20170810 00:56:34.919"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.920" starttime="20170810 00:56:34.919"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:34.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:34.921" starttime="20170810 00:56:34.920"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.921" starttime="20170810 00:56:34.920"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.921" starttime="20170810 00:56:34.915"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:34.921" starttime="20170810 00:56:34.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:34.922" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:34.922" starttime="20170810 00:56:34.921"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:34.966" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:34.966" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170810 00:56:35.023" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:35.023" starttime="20170810 00:56:34.941"></status>
</kw>
<msg timestamp="20170810 00:56:35.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:35.023" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170810 00:56:35.023" starttime="20170810 00:56:34.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:35.024" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170810 00:56:35.024" starttime="20170810 00:56:35.024"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:35.025" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:35.025" starttime="20170810 00:56:35.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.036" starttime="20170810 00:56:35.035"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.036" starttime="20170810 00:56:35.034"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.036" starttime="20170810 00:56:35.026"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.036" starttime="20170810 00:56:34.914"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.036" starttime="20170810 00:56:34.914"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.040" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.040" starttime="20170810 00:56:35.039"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.040" starttime="20170810 00:56:35.038"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.041" starttime="20170810 00:56:35.041"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.041" starttime="20170810 00:56:35.040"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.042" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.042" starttime="20170810 00:56:35.042"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.042" starttime="20170810 00:56:35.041"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.044" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.044" starttime="20170810 00:56:35.043"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.044" starttime="20170810 00:56:35.043"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.044" starttime="20170810 00:56:35.037"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.044" starttime="20170810 00:56:35.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:35.045" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:35.045" starttime="20170810 00:56:35.044"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:35.086" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:35.087" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170810 00:56:35.154" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:35.154" starttime="20170810 00:56:35.063"></status>
</kw>
<msg timestamp="20170810 00:56:35.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:35.154" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170810 00:56:35.154" starttime="20170810 00:56:35.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:35.155" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170810 00:56:35.155" starttime="20170810 00:56:35.155"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:35.156" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:35.156" starttime="20170810 00:56:35.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.163" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:35.162"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:35.162"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:35.156"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:35.036"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:35.036"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:34.799"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:34.797"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:34.797"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:33.168"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:33.167"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.163" starttime="20170810 00:56:33.154"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.164" starttime="20170810 00:56:33.151"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.164" starttime="20170810 00:56:33.151"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.166" starttime="20170810 00:56:35.165"></status>
</kw>
<msg timestamp="20170810 00:56:35.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:35.166" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:35.166" starttime="20170810 00:56:35.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.166" starttime="20170810 00:56:35.166"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 00:56:35.181" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170810 00:56:35.181" starttime="20170810 00:56:35.181"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 00:56:35.182" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170810 00:56:35.182" starttime="20170810 00:56:35.182"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:35.184" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_elog.txt</msg>
<status status="PASS" endtime="20170810 00:56:35.184" starttime="20170810 00:56:35.183"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:35.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:35.189" starttime="20170810 00:56:35.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:35.190" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:35.190" starttime="20170810 00:56:35.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:35.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:35.191" starttime="20170810 00:56:35.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:35.191" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:35.192" starttime="20170810 00:56:35.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.414" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:35.415" starttime="20170810 00:56:35.192"></status>
</kw>
<msg timestamp="20170810 00:56:35.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:35.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.415" starttime="20170810 00:56:35.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.416" starttime="20170810 00:56:35.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.416" starttime="20170810 00:56:35.416"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.416" starttime="20170810 00:56:35.187"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.416" starttime="20170810 00:56:35.186"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.417" starttime="20170810 00:56:35.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:35.417" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170810 00:56:35.417" starttime="20170810 00:56:35.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.418" starttime="20170810 00:56:35.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:35.551" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:35.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.551" starttime="20170810 00:56:35.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.551" starttime="20170810 00:56:35.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:35.552" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:35.552" starttime="20170810 00:56:35.552"></status>
</kw>
<msg timestamp="20170810 00:56:35.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.552" starttime="20170810 00:56:35.184"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.553" starttime="20170810 00:56:35.553"></status>
</kw>
<msg timestamp="20170810 00:56:35.553" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 00:56:35.554" starttime="20170810 00:56:35.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.554" starttime="20170810 00:56:35.554"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 00:56:35.555" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502326482718, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:35.555" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 00:56:35.555" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170810 00:56:35.555" starttime="20170810 00:56:35.554"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_elog.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.558" starttime="20170810 00:56:35.556"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.558" starttime="20170810 00:56:35.556"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.558" starttime="20170810 00:56:35.183"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:35.559" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170810 00:56:35.559" starttime="20170810 00:56:35.559"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:35.562" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:35.562" starttime="20170810 00:56:35.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:35.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:35.563" starttime="20170810 00:56:35.563"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:35.564" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:35.564" starttime="20170810 00:56:35.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:35.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:35.564" starttime="20170810 00:56:35.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:35.757" starttime="20170810 00:56:35.565"></status>
</kw>
<msg timestamp="20170810 00:56:35.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:35.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.757" starttime="20170810 00:56:35.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.758" starttime="20170810 00:56:35.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.759" starttime="20170810 00:56:35.758"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.759" starttime="20170810 00:56:35.561"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.759" starttime="20170810 00:56:35.561"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.759" starttime="20170810 00:56:35.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:35.760" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170810 00:56:35.760" starttime="20170810 00:56:35.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.760" starttime="20170810 00:56:35.760"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:35.950" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:35.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.950" starttime="20170810 00:56:35.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.951" starttime="20170810 00:56:35.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:35.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:35.951" starttime="20170810 00:56:35.951"></status>
</kw>
<msg timestamp="20170810 00:56:35.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.952" starttime="20170810 00:56:35.559"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:35.953" starttime="20170810 00:56:35.953"></status>
</kw>
<msg timestamp="20170810 00:56:35.953" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 00:56:35.953" starttime="20170810 00:56:35.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:35.954" starttime="20170810 00:56:35.953"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 00:56:35.954" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:35.955" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 00:56:35.955" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170810 00:56:35.955" starttime="20170810 00:56:35.954"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:35.956" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:35.956" starttime="20170810 00:56:35.956"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.956" starttime="20170810 00:56:35.955"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:35.956" starttime="20170810 00:56:35.558"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:35.957" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170810 00:56:35.957" starttime="20170810 00:56:35.957"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:35.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:35.962" starttime="20170810 00:56:35.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:35.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:35.963" starttime="20170810 00:56:35.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:35.963" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:35.963" starttime="20170810 00:56:35.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:35.964" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:35.964" starttime="20170810 00:56:35.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.157" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:36.157" starttime="20170810 00:56:35.965"></status>
</kw>
<msg timestamp="20170810 00:56:36.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:36.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.157" starttime="20170810 00:56:35.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.158" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.158" starttime="20170810 00:56:36.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.159" starttime="20170810 00:56:36.158"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.159" starttime="20170810 00:56:35.961"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.159" starttime="20170810 00:56:35.959"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.159" starttime="20170810 00:56:35.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:36.160" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170810 00:56:36.160" starttime="20170810 00:56:36.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.161" starttime="20170810 00:56:36.160"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:36.456" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:36.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.457" starttime="20170810 00:56:36.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.457" starttime="20170810 00:56:36.457"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:36.458" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:36.458" starttime="20170810 00:56:36.458"></status>
</kw>
<msg timestamp="20170810 00:56:36.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.458" starttime="20170810 00:56:35.957"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.459" starttime="20170810 00:56:36.459"></status>
</kw>
<msg timestamp="20170810 00:56:36.459" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 00:56:36.459" starttime="20170810 00:56:36.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.460" starttime="20170810 00:56:36.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 00:56:36.461" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:36.461" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 00:56:36.461" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170810 00:56:36.461" starttime="20170810 00:56:36.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:36.462" starttime="20170810 00:56:36.462"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.463" starttime="20170810 00:56:36.461"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.463" starttime="20170810 00:56:35.956"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:36.463" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_led.txt</msg>
<status status="PASS" endtime="20170810 00:56:36.463" starttime="20170810 00:56:36.463"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:36.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:36.467" starttime="20170810 00:56:36.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:36.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:36.467" starttime="20170810 00:56:36.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:36.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:36.468" starttime="20170810 00:56:36.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:36.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:36.469" starttime="20170810 00:56:36.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:36.675" starttime="20170810 00:56:36.470"></status>
</kw>
<msg timestamp="20170810 00:56:36.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:36.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.675" starttime="20170810 00:56:36.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.676" starttime="20170810 00:56:36.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.677" starttime="20170810 00:56:36.676"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.677" starttime="20170810 00:56:36.465"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.677" starttime="20170810 00:56:36.465"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.677" starttime="20170810 00:56:36.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:36.678" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170810 00:56:36.678" starttime="20170810 00:56:36.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.678" starttime="20170810 00:56:36.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:36.734" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:36.734" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.734" starttime="20170810 00:56:36.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.735" starttime="20170810 00:56:36.734"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:36.735" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:36.735" starttime="20170810 00:56:36.735"></status>
</kw>
<msg timestamp="20170810 00:56:36.735" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.735" starttime="20170810 00:56:36.464"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:56:36.737" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 00:56:36.737" starttime="20170810 00:56:36.736"></status>
</kw>
<msg timestamp="20170810 00:56:36.737" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:36.737" starttime="20170810 00:56:36.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 00:56:36.738" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 00:56:36.739" starttime="20170810 00:56:36.738"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.739" starttime="20170810 00:56:36.737"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.739" starttime="20170810 00:56:36.463"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:36.740" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170810 00:56:36.740" starttime="20170810 00:56:36.739"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:36.744" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:36.745" starttime="20170810 00:56:36.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:36.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:36.746" starttime="20170810 00:56:36.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:36.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:36.747" starttime="20170810 00:56:36.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:36.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:36.748" starttime="20170810 00:56:36.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.951" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:36.951" starttime="20170810 00:56:36.749"></status>
</kw>
<msg timestamp="20170810 00:56:36.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:36.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.951" starttime="20170810 00:56:36.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.952" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.952" starttime="20170810 00:56:36.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:36.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.953" starttime="20170810 00:56:36.953"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.953" starttime="20170810 00:56:36.743"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.953" starttime="20170810 00:56:36.742"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:36.954" starttime="20170810 00:56:36.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:36.955" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170810 00:56:36.955" starttime="20170810 00:56:36.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.956" starttime="20170810 00:56:36.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:36.998" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:36.998" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:36.998" starttime="20170810 00:56:36.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:36.999" starttime="20170810 00:56:36.999"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:36.999" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:37.000" starttime="20170810 00:56:36.999"></status>
</kw>
<msg timestamp="20170810 00:56:37.000" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:37.000" starttime="20170810 00:56:36.740"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:37.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 00:56:37.001" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 00:56:37.001" starttime="20170810 00:56:37.001"></status>
</kw>
<msg timestamp="20170810 00:56:37.001" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:37.001" starttime="20170810 00:56:37.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 00:56:37.002" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 00:56:37.002" starttime="20170810 00:56:37.002"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:37.002"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:36.739"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.182"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.181"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.181"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.181"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.180"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.167"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.164"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.003" starttime="20170810 00:56:35.164"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.005" starttime="20170810 00:56:37.005"></status>
</kw>
<msg timestamp="20170810 00:56:37.005" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:37.005" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:37.005" starttime="20170810 00:56:37.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.006" starttime="20170810 00:56:37.006"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 00:56:37.040" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:37.040" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170810 00:56:37.096" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170810 00:56:37.106" level="INFO">${core_files} = None</msg>
<msg timestamp="20170810 00:56:37.107" level="INFO">${stderr} = None</msg>
<msg timestamp="20170810 00:56:37.107" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 00:56:37.107" level="FAIL">#(UTC) 2017/08/10 00:56:37.105772 -    3.981121 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170810 00:56:37.107" starttime="20170810 00:56:37.020"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170810 00:56:37.108" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170810 00:56:37.108" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170810 00:56:37.108" starttime="20170810 00:56:37.107"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.117" starttime="20170810 00:56:37.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.787" starttime="20170810 00:56:37.119"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.787" starttime="20170810 00:56:37.118"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.787" starttime="20170810 00:56:37.116"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.787" starttime="20170810 00:56:37.108"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170810 00:56:37.788" starttime="20170810 00:56:37.787"></status>
</kw>
<status status="FAIL" endtime="20170810 00:56:37.788" starttime="20170810 00:56:37.020"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.788" starttime="20170810 00:56:37.006"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.788" starttime="20170810 00:56:37.003"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:37.788" starttime="20170810 00:56:37.003"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.790" starttime="20170810 00:56:37.790"></status>
</kw>
<msg timestamp="20170810 00:56:37.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:37.790" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:37.790" starttime="20170810 00:56:37.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.791" starttime="20170810 00:56:37.791"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 00:56:37.806" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170810 00:56:37.806" starttime="20170810 00:56:37.805"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 00:56:37.807" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170810 00:56:37.807" starttime="20170810 00:56:37.807"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:37.808" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170810 00:56:37.808" starttime="20170810 00:56:37.808"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:37.809" starttime="20170810 00:56:37.809"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:37.811" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:37.811" starttime="20170810 00:56:37.810"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:37.852" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:37.853" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170810 00:56:38.374" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:38.374" starttime="20170810 00:56:37.829"></status>
</kw>
<msg timestamp="20170810 00:56:38.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:38.375" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 10 00:56 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 10 00:56 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170810 00:56:38.376" starttime="20170810 00:56:37.811"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:38.376" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 10 00:56 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 10 00:56 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170810 00:56:38.376" starttime="20170810 00:56:38.376"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:38.377" level="INFO">${stderr} = ls: /proc/1242/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170810 00:56:38.377" starttime="20170810 00:56:38.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:38.385" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:38.385" starttime="20170810 00:56:38.384"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.385" starttime="20170810 00:56:38.383"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.385" starttime="20170810 00:56:38.377"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.385" starttime="20170810 00:56:37.808"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.385" starttime="20170810 00:56:37.807"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:38.386" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170810 00:56:38.386" starttime="20170810 00:56:38.386"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:38.388" starttime="20170810 00:56:38.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:38.388" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:38.388" starttime="20170810 00:56:38.388"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:38.430" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:38.430" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170810 00:56:38.476" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:38.476" starttime="20170810 00:56:38.406"></status>
</kw>
<msg timestamp="20170810 00:56:38.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:38.476" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170810 00:56:38.477" starttime="20170810 00:56:38.389"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:38.477" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170810 00:56:38.477" starttime="20170810 00:56:38.477"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:38.478" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:38.478" starttime="20170810 00:56:38.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:38.485" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:38.485" starttime="20170810 00:56:38.484"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.485" starttime="20170810 00:56:38.483"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.485" starttime="20170810 00:56:38.478"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.485" starttime="20170810 00:56:38.386"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.485" starttime="20170810 00:56:38.385"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:38.486" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170810 00:56:38.486" starttime="20170810 00:56:38.486"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:38.488" starttime="20170810 00:56:38.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:38.488" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:38.488" starttime="20170810 00:56:38.488"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:38.531" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:38.532" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170810 00:56:38.602" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:38.603" starttime="20170810 00:56:38.507"></status>
</kw>
<msg timestamp="20170810 00:56:38.603" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:38.603" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181264 kB\nMemAvailable:     227112 kB\nBuffers:           11264 kB\nCached:           150276 kB\nSwapCached:            0 kB\nActive:           14620...</msg>
<status status="PASS" endtime="20170810 00:56:38.603" starttime="20170810 00:56:38.489"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:38.604" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181264 kB
MemAvailable:     227112 kB
Buffers:           11264 kB
Cached:           150276 kB
SwapCached:            0 kB
Active:           146200 kB
Inac...</msg>
<status status="PASS" endtime="20170810 00:56:38.604" starttime="20170810 00:56:38.603"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:38.605" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:38.605" starttime="20170810 00:56:38.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:38.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:38.615" starttime="20170810 00:56:38.615"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.615" starttime="20170810 00:56:38.614"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.615" starttime="20170810 00:56:38.605"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.615" starttime="20170810 00:56:38.486"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:38.616" starttime="20170810 00:56:38.485"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:38.616" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170810 00:56:38.616" starttime="20170810 00:56:38.616"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:38.618" starttime="20170810 00:56:38.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:38.618" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:38.618" starttime="20170810 00:56:38.618"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:38.660" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:38.660" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170810 00:56:39.000" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:39.001" starttime="20170810 00:56:38.637"></status>
</kw>
<msg timestamp="20170810 00:56:39.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:39.001" level="INFO">${ret_values} = (u'Mem: 250972K used, 181296K free, 113140K shrd, 11264K buff, 150280K cached\nCPU:  16% usr  16% sys   0% nic  66% idle   0% io   0% irq   0% sirq\nLoad average: 2.51 1.93 0.84 1/152 1245\n  PID  PPI...</msg>
<status status="PASS" endtime="20170810 00:56:39.001" starttime="20170810 00:56:38.619"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:39.002" level="INFO">${stdout} = Mem: 250972K used, 181296K free, 113140K shrd, 11264K buff, 150280K cached
CPU:  16% usr  16% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 2.51 1.93 0.84 1/152 1245
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170810 00:56:39.002" starttime="20170810 00:56:39.001"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:39.002" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:39.002" starttime="20170810 00:56:39.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:39.009" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:39.010" starttime="20170810 00:56:39.009"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.010" starttime="20170810 00:56:39.008"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.010" starttime="20170810 00:56:39.003"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.010" starttime="20170810 00:56:38.617"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.010" starttime="20170810 00:56:38.616"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:39.011" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170810 00:56:39.011" starttime="20170810 00:56:39.010"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:39.012" starttime="20170810 00:56:39.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:39.013" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:39.013" starttime="20170810 00:56:39.012"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:39.055" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:39.055" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170810 00:56:39.110" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:39.111" starttime="20170810 00:56:39.031"></status>
</kw>
<msg timestamp="20170810 00:56:39.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:39.111" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170810 00:56:39.111" starttime="20170810 00:56:39.013"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:39.112" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170810 00:56:39.112" starttime="20170810 00:56:39.111"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:39.112" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:39.112" starttime="20170810 00:56:39.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:39.120" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:39.120" starttime="20170810 00:56:39.119"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.120" starttime="20170810 00:56:39.118"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.120" starttime="20170810 00:56:39.113"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.120" starttime="20170810 00:56:39.011"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:39.120" starttime="20170810 00:56:39.010"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:39.121" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170810 00:56:39.121" starttime="20170810 00:56:39.120"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:39.122" starttime="20170810 00:56:39.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 00:56:39.123" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170810 00:56:39.123" starttime="20170810 00:56:39.122"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 00:56:39.165" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 00:56:39.165" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170810 00:56:40.080" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 00:56:40.081" starttime="20170810 00:56:39.141"></status>
</kw>
<msg timestamp="20170810 00:56:40.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:40.082" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-10 00:53:39 UTC, end at Thu 2017-08-10 00:56:43 UTC. --\nAug 10 00:53:39 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 10 00:53:39 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170810 00:56:40.082" starttime="20170810 00:56:39.123"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 00:56:40.083" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-10 00:53:39 UTC, end at Thu 2017-08-10 00:56:43 UTC. --
Aug 10 00:53:39 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 10 00:53:39 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170810 00:56:40.083" starttime="20170810 00:56:40.083"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 00:56:40.084" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 00:56:40.084" starttime="20170810 00:56:40.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:40.092" starttime="20170810 00:56:40.091"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.092" starttime="20170810 00:56:40.090"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.092" starttime="20170810 00:56:40.084"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:39.121"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:39.120"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.807"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.806"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.806"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.806"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.805"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.791"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.788"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.093" starttime="20170810 00:56:37.788"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.095" starttime="20170810 00:56:40.095"></status>
</kw>
<msg timestamp="20170810 00:56:40.095" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:40.095" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:40.095" starttime="20170810 00:56:40.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.096" starttime="20170810 00:56:40.096"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:40.113" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:40.114" starttime="20170810 00:56:40.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:40.114" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:40.114" starttime="20170810 00:56:40.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:40.115" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:40.115" starttime="20170810 00:56:40.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:40.115" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:40.116" starttime="20170810 00:56:40.115"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:40.308" starttime="20170810 00:56:40.116"></status>
</kw>
<msg timestamp="20170810 00:56:40.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:40.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.308" starttime="20170810 00:56:40.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.309" starttime="20170810 00:56:40.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.310" starttime="20170810 00:56:40.309"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.310" starttime="20170810 00:56:40.112"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.310" starttime="20170810 00:56:40.111"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.310" starttime="20170810 00:56:40.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:40.311" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170810 00:56:40.311" starttime="20170810 00:56:40.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.311" starttime="20170810 00:56:40.311"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:40.431" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170810 00:56:40.431" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.431" starttime="20170810 00:56:40.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.432" starttime="20170810 00:56:40.432"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:40.432" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:40.432" starttime="20170810 00:56:40.432"></status>
</kw>
<msg timestamp="20170810 00:56:40.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.433" starttime="20170810 00:56:40.110"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.434" starttime="20170810 00:56:40.433"></status>
</kw>
<msg timestamp="20170810 00:56:40.434" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 00:56:40.434" starttime="20170810 00:56:40.433"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.435" starttime="20170810 00:56:40.434"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:56:40.435" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502326482718, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:40.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:56:40.435" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170810 00:56:40.435" starttime="20170810 00:56:40.435"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170810 00:56:40.436" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170810 00:56:40.436" starttime="20170810 00:56:40.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 00:56:40.437" level="INFO">${logpath} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_esel</msg>
<status status="PASS" endtime="20170810 00:56:40.437" starttime="20170810 00:56:40.436"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.437" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_esel"&gt;/home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/20170810005632194943_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:40.438" starttime="20170810 00:56:40.437"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.439" starttime="20170810 00:56:40.438"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 00:56:40.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 00:56:40.443" starttime="20170810 00:56:40.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 00:56:40.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 00:56:40.443" starttime="20170810 00:56:40.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 00:56:40.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 00:56:40.444" starttime="20170810 00:56:40.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 00:56:40.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 00:56:40.445" starttime="20170810 00:56:40.444"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 00:56:40.634" starttime="20170810 00:56:40.446"></status>
</kw>
<msg timestamp="20170810 00:56:40.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:40.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.634" starttime="20170810 00:56:40.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.635" starttime="20170810 00:56:40.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.636" starttime="20170810 00:56:40.635"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.636" starttime="20170810 00:56:40.442"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.636" starttime="20170810 00:56:40.441"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.636" starttime="20170810 00:56:40.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 00:56:40.637" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170810 00:56:40.637" starttime="20170810 00:56:40.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.637" starttime="20170810 00:56:40.637"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 00:56:40.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 00:56:40.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.722" starttime="20170810 00:56:40.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.723" starttime="20170810 00:56:40.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 00:56:40.723" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 00:56:40.723" starttime="20170810 00:56:40.723"></status>
</kw>
<msg timestamp="20170810 00:56:40.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.724" starttime="20170810 00:56:40.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 00:56:40.724" starttime="20170810 00:56:40.724"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 00:56:40.725" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 00:56:40.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 00:56:40.725" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170810 00:56:40.725" starttime="20170810 00:56:40.725"></status>
</kw>
<msg timestamp="20170810 00:56:40.725" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170810 00:56:40.725" starttime="20170810 00:56:40.439"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 00:56:40.726" level="INFO">Length is 0</msg>
<msg timestamp="20170810 00:56:40.726" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170810 00:56:40.726" starttime="20170810 00:56:40.726"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.727" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 00:56:40.727" starttime="20170810 00:56:40.726"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.727" starttime="20170810 00:56:40.438"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.727" starttime="20170810 00:56:40.438"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170810 00:56:40.734" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 00:56:40.745" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170810 00:56:40.746" starttime="20170810 00:56:40.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170810 00:56:40.770" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170810 00:56:40.770" starttime="20170810 00:56:40.766"></status>
</kw>
<msg timestamp="20170810 00:56:40.770" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 00:56:40.771" starttime="20170810 00:56:40.764"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170810 00:56:40.773" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170810 00:56:40.773" starttime="20170810 00:56:40.771"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.774" starttime="20170810 00:56:40.110"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.774" starttime="20170810 00:56:40.096"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.776" starttime="20170810 00:56:40.094"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.776" starttime="20170810 00:56:40.093"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.782" starttime="20170810 00:56:40.782"></status>
</kw>
<msg timestamp="20170810 00:56:40.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 00:56:40.782" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 00:56:40.782" starttime="20170810 00:56:40.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.783" starttime="20170810 00:56:40.783"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170810 00:56:40.813" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170810 00:56:40.813" starttime="20170810 00:56:40.813"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.813" starttime="20170810 00:56:40.812"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.813" starttime="20170810 00:56:40.784"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:40.777"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:40.776"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:33.151"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:33.148"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:33.148"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.814" starttime="20170810 00:56:33.148"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170810 00:56:40.867" starttime="20170810 00:56:40.822"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.867" starttime="20170810 00:56:40.814"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.867" starttime="20170810 00:56:33.147"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.868" starttime="20170810 00:56:29.123"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.868" starttime="20170810 00:56:29.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.870" starttime="20170810 00:56:40.869"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 00:56:40.871" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170810 00:56:40.871" starttime="20170810 00:56:40.871"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 00:56:40.872" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170810005632194943_UpdateBmc/20170810005632194943_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170810 00:56:40.872" starttime="20170810 00:56:40.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.873" starttime="20170810 00:56:40.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.873" starttime="20170810 00:56:40.873"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.874" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170810 00:56:40.874" starttime="20170810 00:56:40.874"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.877" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170810 00:56:40.877" starttime="20170810 00:56:40.875"></status>
</kw>
<msg timestamp="20170810 00:56:40.877" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170810 00:56:40.877" starttime="20170810 00:56:40.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.877" starttime="20170810 00:56:40.877"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170810 00:56:40.878" starttime="20170810 00:56:40.878"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 00:56:40.880" level="INFO">${cur_time} = 2017-08-10 00:56:40:879456</msg>
<status status="PASS" endtime="20170810 00:56:40.880" starttime="20170810 00:56:40.879"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 00:56:40.880" level="INFO">${cur_time} = 20170810005640879456</msg>
<status status="PASS" endtime="20170810 00:56:40.880" starttime="20170810 00:56:40.880"></status>
</kw>
<msg timestamp="20170810 00:56:40.881" level="INFO">${cur_time} = 20170810005640879456</msg>
<status status="PASS" endtime="20170810 00:56:40.881" starttime="20170810 00:56:40.879"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170810 00:56:40.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 00:56:40.882" starttime="20170810 00:56:40.881"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.882" starttime="20170810 00:56:40.870"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.882" starttime="20170810 00:56:28.831"></status>
</kw>
<status status="PASS" endtime="20170810 00:56:40.882" starttime="20170810 00:56:28.824"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170810 00:56:40.882" critical="yes" starttime="20170810 00:52:32.109">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170810 00:56:40.884" starttime="20170810 00:52:31.208"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170810 00:53:32.123" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa4c6b290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 00:53:52.350" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa4c6b210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
