<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170918 22:07:26.355">
<suite id="s1" source="/tmp/fspcibld/26631/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:27.063">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170918 22:07:27.063" starttime="20170918 22:07:27.063"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:27.063">${has_host} = False</msg>
<status status="PASS" endtime="20170918 22:07:27.064" starttime="20170918 22:07:27.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:27.065" starttime="20170918 22:07:27.064"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:27.065" starttime="20170918 22:07:27.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:27.066">${port_num} = 22</msg>
<status status="PASS" endtime="20170918 22:07:27.066" starttime="20170918 22:07:27.066"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:27.067">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170918 22:07:27.067" starttime="20170918 22:07:27.067"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:27.067">${https_num} = 443</msg>
<status status="PASS" endtime="20170918 22:07:27.067" starttime="20170918 22:07:27.067"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:27.068">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170918 22:07:27.068" starttime="20170918 22:07:27.068"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:27.068" starttime="20170918 22:07:27.066"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:27.068" starttime="20170918 22:07:27.065"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:27.069">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170918 22:07:27.069" starttime="20170918 22:07:27.069"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:27.070">${has_port} = False</msg>
<status status="PASS" endtime="20170918 22:07:27.070" starttime="20170918 22:07:27.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:27.071" starttime="20170918 22:07:27.071"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:27.072" starttime="20170918 22:07:27.072"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:27.072" starttime="20170918 22:07:27.071"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:27.072" starttime="20170918 22:07:27.070"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:27.073">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 22:07:28.853">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170918 22:07:28.854" starttime="20170918 22:07:27.072"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:28.854" starttime="20170918 22:07:27.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.856">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170918 22:07:28.932">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 22:07:28.932">${output} = VERSION_ID="v1.99.10-20-gcaf33b8"</msg>
<msg level="INFO" timestamp="20170918 22:07:28.933">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:07:28.933" starttime="20170918 22:07:28.855"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:28.933">Length is 0</msg>
<status status="PASS" endtime="20170918 22:07:28.933" starttime="20170918 22:07:28.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:28.934">VERSION_ID="v1.99.10-20-gcaf33b8"</msg>
<status status="PASS" endtime="20170918 22:07:28.934" starttime="20170918 22:07:28.934"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:28.934" starttime="20170918 22:07:28.855"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:28.934" starttime="20170918 22:07:28.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.936">${software} = []</msg>
<status status="PASS" endtime="20170918 22:07:28.936" starttime="20170918 22:07:28.936"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.937">${host_list} = []</msg>
<status status="PASS" endtime="20170918 22:07:28.937" starttime="20170918 22:07:28.936"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:28.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:28.940" starttime="20170918 22:07:28.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:28.941" starttime="20170918 22:07:28.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.942">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:28.942" starttime="20170918 22:07:28.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:28.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:28.943" starttime="20170918 22:07:28.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.146">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:29.146" starttime="20170918 22:07:28.943"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.146">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:29.146">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.146" starttime="20170918 22:07:28.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.147">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.147" starttime="20170918 22:07:29.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.148" starttime="20170918 22:07:29.147"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.148" starttime="20170918 22:07:28.939"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.148" starttime="20170918 22:07:28.939"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.148" starttime="20170918 22:07:28.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.149">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" endtime="20170918 22:07:29.149" starttime="20170918 22:07:29.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.151">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:29.151" starttime="20170918 22:07:29.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.152">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:29.152" starttime="20170918 22:07:29.152"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.152" starttime="20170918 22:07:29.151"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.152" starttime="20170918 22:07:29.150"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.152" starttime="20170918 22:07:29.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:29.213">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.214" starttime="20170918 22:07:29.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.215">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:29.215" starttime="20170918 22:07:29.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.216">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:29.216" starttime="20170918 22:07:29.216"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.216" starttime="20170918 22:07:29.215"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.217" starttime="20170918 22:07:29.214"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.217" starttime="20170918 22:07:29.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:29.217">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:29.217" starttime="20170918 22:07:29.217"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.217">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.217" starttime="20170918 22:07:28.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.218" starttime="20170918 22:07:29.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.219">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:29.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:29.219">${content} = {u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:29.219" starttime="20170918 22:07:29.218"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.219">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status status="PASS" endtime="20170918 22:07:29.219" starttime="20170918 22:07:28.937"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.225">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:29.225" starttime="20170918 22:07:29.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.226">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:29.226" starttime="20170918 22:07:29.225"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.227">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:29.227" starttime="20170918 22:07:29.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:29.228" starttime="20170918 22:07:29.227"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:29.405" starttime="20170918 22:07:29.228"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.405">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:29.405">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.405" starttime="20170918 22:07:29.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.406" starttime="20170918 22:07:29.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.407" starttime="20170918 22:07:29.406"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.407" starttime="20170918 22:07:29.221"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.407" starttime="20170918 22:07:29.221"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.407" starttime="20170918 22:07:29.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.407">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" endtime="20170918 22:07:29.408" starttime="20170918 22:07:29.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.408" starttime="20170918 22:07:29.408"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:29.541">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.541" starttime="20170918 22:07:29.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.541" starttime="20170918 22:07:29.541"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:29.542">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:29.542" starttime="20170918 22:07:29.542"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.542" starttime="20170918 22:07:29.220"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.543" starttime="20170918 22:07:29.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.543">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:29.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:29.543">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:29.543" starttime="20170918 22:07:29.543"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.544">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20170918 22:07:29.544" starttime="20170918 22:07:29.219"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.544" starttime="20170918 22:07:29.544"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.545" starttime="20170918 22:07:29.545"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.545" starttime="20170918 22:07:29.219"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.548">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:29.549" starttime="20170918 22:07:29.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:29.549" starttime="20170918 22:07:29.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.550">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:29.550" starttime="20170918 22:07:29.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.551">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:29.551" starttime="20170918 22:07:29.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:29.772" starttime="20170918 22:07:29.551"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:29.772">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.772" starttime="20170918 22:07:29.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.773" starttime="20170918 22:07:29.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.773" starttime="20170918 22:07:29.773"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.774" starttime="20170918 22:07:29.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.774" starttime="20170918 22:07:29.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.774" starttime="20170918 22:07:29.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.774">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" endtime="20170918 22:07:29.774" starttime="20170918 22:07:29.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.775" starttime="20170918 22:07:29.775"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.868">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:29.868">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.868" starttime="20170918 22:07:29.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:29.869" starttime="20170918 22:07:29.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:29.869">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:29.869" starttime="20170918 22:07:29.869"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.869">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:29.869" starttime="20170918 22:07:29.546"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.870">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170918 22:07:29.870" starttime="20170918 22:07:29.870"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.870">${attr_purpose} = None</msg>
<status status="PASS" endtime="20170918 22:07:29.870" starttime="20170918 22:07:29.545"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.871">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:07:29.871" starttime="20170918 22:07:29.871"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.871" starttime="20170918 22:07:29.545"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:29.871" starttime="20170918 22:07:29.219"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:29.871">${pnor_details} = [u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" endtime="20170918 22:07:29.871" starttime="20170918 22:07:28.936"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:29.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:29.875" starttime="20170918 22:07:29.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:29.875" starttime="20170918 22:07:29.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.876">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:29.876" starttime="20170918 22:07:29.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:29.877">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:29.877" starttime="20170918 22:07:29.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:30.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:30.089" starttime="20170918 22:07:29.877"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:30.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:30.090">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:30.090" starttime="20170918 22:07:29.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:30.090">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:30.090" starttime="20170918 22:07:30.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:30.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:30.091" starttime="20170918 22:07:30.091"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.091" starttime="20170918 22:07:29.873"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.091" starttime="20170918 22:07:29.873"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.092" starttime="20170918 22:07:29.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:30.092">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170918 22:07:30.092" starttime="20170918 22:07:30.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:30.093" starttime="20170918 22:07:30.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:30.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:30.213">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:30.214" starttime="20170918 22:07:30.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:30.214" starttime="20170918 22:07:30.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:30.215">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:30.215" starttime="20170918 22:07:30.215"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:30.215">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:30.215" starttime="20170918 22:07:29.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:30.216">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:30.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:30.216">${json} = {u'data': {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Path': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose...</msg>
<status status="PASS" endtime="20170918 22:07:30.216" starttime="20170918 22:07:30.215"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:30.217" starttime="20170918 22:07:30.216"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.217" starttime="20170918 22:07:29.872"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.217" starttime="20170918 22:07:29.871"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:30.217">${software} = [{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Path': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u...</msg>
<status status="PASS" endtime="20170918 22:07:30.217" starttime="20170918 22:07:28.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:30.218">[{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Path': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active'}]</msg>
<status status="PASS" endtime="20170918 22:07:30.218" starttime="20170918 22:07:30.217"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.218" starttime="20170918 22:07:28.935"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:30.218" starttime="20170918 22:07:28.934"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:30.707">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:07:30.707">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 22:07:31.502">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170918 22:07:31.503">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:31.589">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 22:07:31.600">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170918 22:07:31.600">${stderr} = </msg>
<msg level="INFO" timestamp="20170918 22:07:31.601">${rc} = 0</msg>
<status status="PASS" endtime="20170918 22:07:31.601" starttime="20170918 22:07:30.219"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:31.601">Length is 0</msg>
<status status="PASS" endtime="20170918 22:07:31.601" starttime="20170918 22:07:31.601"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:31.602">Length is 11</msg>
<status status="PASS" endtime="20170918 22:07:31.602" starttime="20170918 22:07:31.602"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:31.602">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20170918 22:07:31.602" starttime="20170918 22:07:30.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:31.603">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20170918 22:07:31.603" starttime="20170918 22:07:31.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.603" starttime="20170918 22:07:30.219"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.603" starttime="20170918 22:07:30.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:31.605">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170918 22:07:31.605" starttime="20170918 22:07:31.605"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:31.605">${has_host} = False</msg>
<status status="PASS" endtime="20170918 22:07:31.605" starttime="20170918 22:07:31.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:31.606" starttime="20170918 22:07:31.606"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.606" starttime="20170918 22:07:31.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:31.609">${port_num} = 22</msg>
<status status="PASS" endtime="20170918 22:07:31.609" starttime="20170918 22:07:31.609"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:31.610">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170918 22:07:31.610" starttime="20170918 22:07:31.610"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:31.611">${https_num} = 443</msg>
<status status="PASS" endtime="20170918 22:07:31.611" starttime="20170918 22:07:31.610"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:31.611">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170918 22:07:31.611" starttime="20170918 22:07:31.611"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.612" starttime="20170918 22:07:31.607"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.612" starttime="20170918 22:07:31.607"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:31.613">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170918 22:07:31.613" starttime="20170918 22:07:31.612"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:31.613">${has_port} = False</msg>
<status status="PASS" endtime="20170918 22:07:31.613" starttime="20170918 22:07:31.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:31.615" starttime="20170918 22:07:31.614"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:31.615" starttime="20170918 22:07:31.615"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.615" starttime="20170918 22:07:31.614"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:31.615" starttime="20170918 22:07:31.613"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:31.616">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 22:07:33.359">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170918 22:07:33.359" starttime="20170918 22:07:31.616"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.359" starttime="20170918 22:07:31.604"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.360">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170918 22:07:33.458">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 22:07:33.458">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170918 22:07:33.458">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:07:33.458" starttime="20170918 22:07:33.360"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.458">Length is 0</msg>
<status status="PASS" endtime="20170918 22:07:33.458" starttime="20170918 22:07:33.458"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:33.459">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20170918 22:07:33.459" starttime="20170918 22:07:33.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:33.459" starttime="20170918 22:07:33.459"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.459" starttime="20170918 22:07:31.603"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.459" starttime="20170918 22:07:31.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:33.460" starttime="20170918 22:07:33.460"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.460" starttime="20170918 22:07:27.061"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/26631/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/26631/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.504">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:33.504" starttime="20170918 22:07:33.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.505">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:33.505" starttime="20170918 22:07:33.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.505">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:33.505" starttime="20170918 22:07:33.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:33.506" starttime="20170918 22:07:33.506"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:33.709" starttime="20170918 22:07:33.507"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:33.709">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:33.709">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.709" starttime="20170918 22:07:33.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.710">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.710" starttime="20170918 22:07:33.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.711" starttime="20170918 22:07:33.710"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.711" starttime="20170918 22:07:33.503"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.711" starttime="20170918 22:07:33.502"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.711" starttime="20170918 22:07:33.502"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.716">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:33.716" starttime="20170918 22:07:33.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.717">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:33.717" starttime="20170918 22:07:33.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.718">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:33.718" starttime="20170918 22:07:33.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:33.718" starttime="20170918 22:07:33.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:33.906" starttime="20170918 22:07:33.719"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:33.906">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:33.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.906" starttime="20170918 22:07:33.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.907">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.907" starttime="20170918 22:07:33.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:33.907" starttime="20170918 22:07:33.907"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.908" starttime="20170918 22:07:33.715"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.908" starttime="20170918 22:07:33.715"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.908" starttime="20170918 22:07:33.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.908">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:07:33.908" starttime="20170918 22:07:33.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:33.913">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:33.913" starttime="20170918 22:07:33.910"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:33.914">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:33.914" starttime="20170918 22:07:33.913"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.914" starttime="20170918 22:07:33.913"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.914" starttime="20170918 22:07:33.909"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:33.914" starttime="20170918 22:07:33.909"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.016">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:34.017">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:34.017" starttime="20170918 22:07:33.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.019">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:34.019" starttime="20170918 22:07:34.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.020">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:34.020" starttime="20170918 22:07:34.019"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.020" starttime="20170918 22:07:34.019"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.020" starttime="20170918 22:07:34.018"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.020" starttime="20170918 22:07:34.017"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:34.021">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:34.021" starttime="20170918 22:07:34.021"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.021">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:34.021" starttime="20170918 22:07:33.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:34.022" starttime="20170918 22:07:34.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.022">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:34.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:34.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:34.023" starttime="20170918 22:07:34.022"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.023">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170918 22:07:34.023" starttime="20170918 22:07:33.713"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.023">${host_state} = Off</msg>
<status status="PASS" endtime="20170918 22:07:34.023" starttime="20170918 22:07:33.712"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:34.025">Off != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:07:34.025" starttime="20170918 22:07:34.024"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.025">${status} = False</msg>
<status status="PASS" endtime="20170918 22:07:34.025" starttime="20170918 22:07:34.024"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.025">${status} = False</msg>
<status status="PASS" endtime="20170918 22:07:34.025" starttime="20170918 22:07:33.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.026" starttime="20170918 22:07:34.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.027" starttime="20170918 22:07:34.026"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.042">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170918 22:07:34.042" starttime="20170918 22:07:34.027"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.059">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170918 22:07:34.059" starttime="20170918 22:07:34.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.062">${cur_time} = 2017-09-18 22:07:34:061694</msg>
<status status="PASS" endtime="20170918 22:07:34.062" starttime="20170918 22:07:34.061"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.063">${cur_time} = 20170918220734061694</msg>
<status status="PASS" endtime="20170918 22:07:34.063" starttime="20170918 22:07:34.062"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.063" starttime="20170918 22:07:34.061"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.073">${FFDC_TIME} = 20170918220734061694</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.074">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170918 22:07:34.074" starttime="20170918 22:07:34.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.075">${suite_name} = 20170918220734061694_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170918 22:07:34.075" starttime="20170918 22:07:34.075"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.076">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20170918 22:07:34.076" starttime="20170918 22:07:34.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.076">${test_name} = 20170918220734061694_TestSSLConnection</msg>
<status status="PASS" endtime="20170918 22:07:34.076" starttime="20170918 22:07:34.076"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.077" starttime="20170918 22:07:34.073"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.077">${FFDC_DIR_PATH} = /tmp/fspcibld/26631/obmc-robot/logs/20170918220734061694_TestsSecurityTestSsl/20170918220734061694_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170918 22:07:34.083">${FFDC_PREFIX} = 20170918220734061694_</msg>
<status status="PASS" endtime="20170918 22:07:34.083" starttime="20170918 22:07:34.060"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.083" starttime="20170918 22:07:34.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.084" starttime="20170918 22:07:34.083"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.085" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs"&gt;/tmp/fspcibld/26631/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:07:34.085" starttime="20170918 22:07:34.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:34.086">File '/tmp/fspcibld/26631/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170918 22:07:34.086" starttime="20170918 22:07:34.086"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.086">${exist} = False</msg>
<status status="PASS" endtime="20170918 22:07:34.086" starttime="20170918 22:07:34.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.088" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:07:34.088" starttime="20170918 22:07:34.087"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.088" starttime="20170918 22:07:34.087"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.088" starttime="20170918 22:07:34.088"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.089">${cur_time} = 2017-09-18 22:07:34:089120</msg>
<status status="PASS" endtime="20170918 22:07:34.089" starttime="20170918 22:07:34.089"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.090">${cur_time} = 20170918220734089120</msg>
<status status="PASS" endtime="20170918 22:07:34.090" starttime="20170918 22:07:34.090"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.090">${cur_time} = 20170918220734089120</msg>
<status status="PASS" endtime="20170918 22:07:34.091" starttime="20170918 22:07:34.088"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.091" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:07:34.091" starttime="20170918 22:07:34.091"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.092" starttime="20170918 22:07:34.027"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.092" starttime="20170918 22:07:33.712"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20170918 22:07:34.092" starttime="20170918 22:07:33.501"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:34.093">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:34.093" starttime="20170918 22:07:34.093"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20170918 22:07:34.093" starttime="20170918 22:07:33.463"></status>
</suite>
<status status="PASS" endtime="20170918 22:07:34.096" starttime="20170918 22:07:33.460"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/26631/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.142">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.142" starttime="20170918 22:07:34.142"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.143">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.143" starttime="20170918 22:07:34.143"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.143">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.143" starttime="20170918 22:07:34.141"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.145">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.145" starttime="20170918 22:07:34.145"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.146">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.146" starttime="20170918 22:07:34.145"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.146">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:07:34.146" starttime="20170918 22:07:34.144"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.147">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170918 22:07:34.147" starttime="20170918 22:07:34.147"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.148" starttime="20170918 22:07:34.148"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.153">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:34.156">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:34.157">${output} = /tmp/fspcibld/26631/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:34.157" starttime="20170918 22:07:34.148"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.160" starttime="20170918 22:07:34.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.162" starttime="20170918 22:07:34.161"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.162">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:34.162" starttime="20170918 22:07:34.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.163">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:34.163" starttime="20170918 22:07:34.162"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.163">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:34.163" starttime="20170918 22:07:34.146"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.164">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:34.164" starttime="20170918 22:07:34.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.165">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170918 22:07:34.165" starttime="20170918 22:07:34.164"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.165" starttime="20170918 22:07:34.165"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.169">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:34.178">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:34.178">${os_con_pid} = </msg>
<status status="PASS" endtime="20170918 22:07:34.178" starttime="20170918 22:07:34.166"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.181" starttime="20170918 22:07:34.180"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.182">${os_con_pid} = </msg>
<status status="PASS" endtime="20170918 22:07:34.182" starttime="20170918 22:07:34.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.182">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170918 22:07:34.182" starttime="20170918 22:07:34.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.185" starttime="20170918 22:07:34.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.186">${rc} = None</msg>
<msg level="INFO" timestamp="20170918 22:07:34.186">${output} = None</msg>
<status status="PASS" endtime="20170918 22:07:34.186" starttime="20170918 22:07:34.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.187" starttime="20170918 22:07:34.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:34.189">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" endtime="20170918 22:07:34.189" starttime="20170918 22:07:34.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.189" starttime="20170918 22:07:34.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:34.189" starttime="20170918 22:07:34.187"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.190">${output} = </msg>
<status status="PASS" endtime="20170918 22:07:34.190" starttime="20170918 22:07:34.190"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.191">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170918 22:07:34.191" starttime="20170918 22:07:34.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.255" starttime="20170918 22:07:34.192"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.255">${rc} = 1</msg>
<msg level="INFO" timestamp="20170918 22:07:34.256">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" endtime="20170918 22:07:34.256" starttime="20170918 22:07:34.191"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.256">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" endtime="20170918 22:07:34.256" starttime="20170918 22:07:34.144"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:34.258" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:07:34.259" starttime="20170918 22:07:34.258"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.260">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170918 22:07:34.260" starttime="20170918 22:07:34.259"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.260" starttime="20170918 22:07:34.260"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.264">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:34.269">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:34.269">${output} = /tmp/fspcibld/26631/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:34.269" starttime="20170918 22:07:34.261"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.272" starttime="20170918 22:07:34.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.275" starttime="20170918 22:07:34.275"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.275">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:34.275" starttime="20170918 22:07:34.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.276">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:34.276" starttime="20170918 22:07:34.276"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:34.277">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:34.277" starttime="20170918 22:07:34.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.277">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170918 22:07:34.277" starttime="20170918 22:07:34.277"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.278" starttime="20170918 22:07:34.278"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:34.282">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170918 22:07:34.285">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:34.285">${output} = </msg>
<status status="PASS" endtime="20170918 22:07:34.286" starttime="20170918 22:07:34.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:34.290" starttime="20170918 22:07:34.289"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.291">Slept 1 second</msg>
<status status="PASS" endtime="20170918 22:07:35.291" starttime="20170918 22:07:34.290"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.294">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170918 22:07:35.294" starttime="20170918 22:07:35.293"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.295" starttime="20170918 22:07:35.294"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.299">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:35.305">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:35.305">${output} = /tmp/fspcibld/26631/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:35.305" starttime="20170918 22:07:35.295"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.307" starttime="20170918 22:07:35.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.309" starttime="20170918 22:07:35.309"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:35.309">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20170918 22:07:35.309" starttime="20170918 22:07:35.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.310">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:35.310" starttime="20170918 22:07:35.309"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:35.310">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:35.310" starttime="20170918 22:07:35.293"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.311">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:07:35.311" starttime="20170918 22:07:35.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.311">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170918 22:07:35.311" starttime="20170918 22:07:35.311"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.312" starttime="20170918 22:07:35.312"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.318">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:07:35.328">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:07:35.328">${os_con_pid} = 182</msg>
<status status="PASS" endtime="20170918 22:07:35.328" starttime="20170918 22:07:35.312"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.343" starttime="20170918 22:07:35.340"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:35.345">${os_con_pid} = 182</msg>
<status status="PASS" endtime="20170918 22:07:35.345" starttime="20170918 22:07:35.291"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.347">Length is 3</msg>
<status status="PASS" endtime="20170918 22:07:35.347" starttime="20170918 22:07:35.345"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.347" starttime="20170918 22:07:34.141"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.350">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.354">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170918 22:07:35.354" starttime="20170918 22:07:35.352"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.356">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170918 22:07:35.356" starttime="20170918 22:07:35.355"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.360">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:35.362" starttime="20170918 22:07:35.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:35.362" starttime="20170918 22:07:35.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.363">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:35.363" starttime="20170918 22:07:35.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.364">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:35.364" starttime="20170918 22:07:35.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:35.549" starttime="20170918 22:07:35.365"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:35.549">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:35.550">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.550" starttime="20170918 22:07:35.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.550">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.550" starttime="20170918 22:07:35.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.551" starttime="20170918 22:07:35.551"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.551" starttime="20170918 22:07:35.359"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.551" starttime="20170918 22:07:35.357"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.551" starttime="20170918 22:07:35.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.552">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170918 22:07:35.552" starttime="20170918 22:07:35.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:35.553" starttime="20170918 22:07:35.552"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.553" starttime="20170918 22:07:35.553"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.555">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170918 22:07:35.555" starttime="20170918 22:07:35.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.556">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170918 22:07:35.556" starttime="20170918 22:07:35.556"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.556" starttime="20170918 22:07:35.555"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.556" starttime="20170918 22:07:35.553"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.835">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170918 22:07:35.835">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.835" starttime="20170918 22:07:35.556"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.837">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:35.837" starttime="20170918 22:07:35.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.838">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:35.838" starttime="20170918 22:07:35.838"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.838" starttime="20170918 22:07:35.837"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.838" starttime="20170918 22:07:35.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:35.839">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:35.839" starttime="20170918 22:07:35.838"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:35.839">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.839" starttime="20170918 22:07:35.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:35.840" starttime="20170918 22:07:35.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.840">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:35.840">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:35.840">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:35.840" starttime="20170918 22:07:35.840"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:35.840" starttime="20170918 22:07:35.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:35.841" starttime="20170918 22:07:35.841"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:35.847">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:35.847" starttime="20170918 22:07:35.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.848">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:35.848" starttime="20170918 22:07:35.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.849">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:35.849" starttime="20170918 22:07:35.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:35.849">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:35.849" starttime="20170918 22:07:35.849"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:36.703" starttime="20170918 22:07:35.850"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:36.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:36.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.703" starttime="20170918 22:07:35.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.704" starttime="20170918 22:07:36.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.705" starttime="20170918 22:07:36.704"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.705" starttime="20170918 22:07:35.846"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.705" starttime="20170918 22:07:35.846"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.705" starttime="20170918 22:07:35.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.705">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:07:36.705" starttime="20170918 22:07:36.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.708">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:36.708" starttime="20170918 22:07:36.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.708">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:36.709" starttime="20170918 22:07:36.708"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.709" starttime="20170918 22:07:36.708"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.710" starttime="20170918 22:07:36.706"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.710" starttime="20170918 22:07:36.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.902">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:36.902">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.902" starttime="20170918 22:07:36.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.904">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:36.904" starttime="20170918 22:07:36.903"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.905">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:36.905" starttime="20170918 22:07:36.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.905" starttime="20170918 22:07:36.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.905" starttime="20170918 22:07:36.903"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.905" starttime="20170918 22:07:36.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:36.906">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:36.906" starttime="20170918 22:07:36.905"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:36.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.906" starttime="20170918 22:07:35.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:36.907" starttime="20170918 22:07:36.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.907">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:36.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:36.907">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:36.907" starttime="20170918 22:07:36.907"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:36.908">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170918 22:07:36.908" starttime="20170918 22:07:35.844"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:36.908">${power_state} = Off</msg>
<status status="PASS" endtime="20170918 22:07:36.908" starttime="20170918 22:07:35.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:36.908" starttime="20170918 22:07:36.908"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:36.909" starttime="20170918 22:07:35.843"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:36.912">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:36.913" starttime="20170918 22:07:36.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:36.914" starttime="20170918 22:07:36.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.914">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:36.914" starttime="20170918 22:07:36.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:36.915">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:36.915" starttime="20170918 22:07:36.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:37.385" starttime="20170918 22:07:36.915"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.385">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:37.385">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.385" starttime="20170918 22:07:36.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.386" starttime="20170918 22:07:37.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.387" starttime="20170918 22:07:37.386"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.387" starttime="20170918 22:07:36.911"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.387" starttime="20170918 22:07:36.911"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.387" starttime="20170918 22:07:36.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.388">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:07:37.388" starttime="20170918 22:07:37.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.390">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:37.390" starttime="20170918 22:07:37.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.391">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:37.391" starttime="20170918 22:07:37.390"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.391" starttime="20170918 22:07:37.390"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.391" starttime="20170918 22:07:37.388"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.391" starttime="20170918 22:07:37.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.614">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:37.614">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.614" starttime="20170918 22:07:37.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.616">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:37.616" starttime="20170918 22:07:37.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.617">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:37.617" starttime="20170918 22:07:37.617"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.617" starttime="20170918 22:07:37.616"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.617" starttime="20170918 22:07:37.615"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.617" starttime="20170918 22:07:37.614"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:37.618">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:37.618" starttime="20170918 22:07:37.618"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.618">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.618" starttime="20170918 22:07:36.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.619" starttime="20170918 22:07:37.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.619">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:37.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:37.619">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:37.619" starttime="20170918 22:07:37.619"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.620">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170918 22:07:37.620" starttime="20170918 22:07:36.909"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.620">${host_state} = Off</msg>
<status status="PASS" endtime="20170918 22:07:37.620" starttime="20170918 22:07:36.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:37.621" starttime="20170918 22:07:37.620"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.621" starttime="20170918 22:07:35.842"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.621" starttime="20170918 22:07:35.842"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.621" starttime="20170918 22:07:35.842"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.621">${status} = True</msg>
<status status="PASS" endtime="20170918 22:07:37.621" starttime="20170918 22:07:35.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:37.622" starttime="20170918 22:07:37.621"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.622" starttime="20170918 22:07:35.352"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.623">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170918 22:07:37.623" starttime="20170918 22:07:37.622"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.624">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170918 22:07:37.624" starttime="20170918 22:07:37.624"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.629">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:37.630" starttime="20170918 22:07:37.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.630">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:37.630" starttime="20170918 22:07:37.630"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.631">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:37.631" starttime="20170918 22:07:37.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:37.632" starttime="20170918 22:07:37.631"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:37.853" starttime="20170918 22:07:37.632"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:37.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:37.853">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.853" starttime="20170918 22:07:37.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.854" starttime="20170918 22:07:37.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:37.855" starttime="20170918 22:07:37.854"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.855" starttime="20170918 22:07:37.628"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.855" starttime="20170918 22:07:37.628"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.855" starttime="20170918 22:07:37.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.855">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170918 22:07:37.855" starttime="20170918 22:07:37.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.856">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:37.856" starttime="20170918 22:07:37.856"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:37.857" starttime="20170918 22:07:37.856"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:37.858">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20170918 22:07:37.858" starttime="20170918 22:07:37.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:37.859">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170918 22:07:37.859" starttime="20170918 22:07:37.859"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.859" starttime="20170918 22:07:37.858"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:37.859" starttime="20170918 22:07:37.857"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.289">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170918 22:07:38.289">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:38.289" starttime="20170918 22:07:37.860"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.291">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:38.291" starttime="20170918 22:07:38.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:38.292">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:38.292" starttime="20170918 22:07:38.292"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:38.292" starttime="20170918 22:07:38.291"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:38.292" starttime="20170918 22:07:38.290"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:38.293">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:38.293" starttime="20170918 22:07:38.293"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:38.293">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:38.293" starttime="20170918 22:07:37.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:38.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:38.294" starttime="20170918 22:07:38.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.294">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:38.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:38.294">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:38.294" starttime="20170918 22:07:38.294"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:38.295" starttime="20170918 22:07:37.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:07:38.295" starttime="20170918 22:07:38.295"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:38.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:07:38.302" starttime="20170918 22:07:38.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:07:38.302" starttime="20170918 22:07:38.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:07:38.303" starttime="20170918 22:07:38.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:38.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:07:38.305" starttime="20170918 22:07:38.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:41.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:07:41.001" starttime="20170918 22:07:38.306"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:41.001">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:07:41.001">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:41.002" starttime="20170918 22:07:38.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:41.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:41.002" starttime="20170918 22:07:41.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:41.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:41.003" starttime="20170918 22:07:41.003"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.003" starttime="20170918 22:07:38.300"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.003" starttime="20170918 22:07:38.299"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.003" starttime="20170918 22:07:38.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:41.004">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:07:41.005" starttime="20170918 22:07:41.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:41.008">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:41.008" starttime="20170918 22:07:41.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:41.009">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:07:41.009" starttime="20170918 22:07:41.008"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.009" starttime="20170918 22:07:41.008"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.009" starttime="20170918 22:07:41.006"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:41.009" starttime="20170918 22:07:41.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20170918 22:07:51.022">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20170918 22:07:53.467">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:07:53.468">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:53.468" starttime="20170918 22:07:41.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:53.470">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:53.470" starttime="20170918 22:07:53.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:53.471">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:07:53.471" starttime="20170918 22:07:53.471"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:53.471" starttime="20170918 22:07:53.470"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:53.471" starttime="20170918 22:07:53.469"></status>
</kw>
<status status="PASS" endtime="20170918 22:07:53.471" starttime="20170918 22:07:53.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:07:53.472">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:07:53.472" starttime="20170918 22:07:53.472"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:53.472">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:07:53.472" starttime="20170918 22:07:38.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:07:53.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:07:53.473" starttime="20170918 22:07:53.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:07:53.473">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:07:53.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:07:53.474">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:07:53.474" starttime="20170918 22:07:53.473"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:53.474">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170918 22:07:53.474" starttime="20170918 22:07:38.297"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:07:53.474">${power_state} = Off</msg>
<status status="PASS" endtime="20170918 22:07:53.474" starttime="20170918 22:07:38.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:07:53.475">On != Off</msg>
<status status="FAIL" endtime="20170918 22:07:53.475" starttime="20170918 22:07:53.474"></status>
</kw>
<status status="FAIL" endtime="20170918 22:07:53.475" starttime="20170918 22:07:38.296"></status>
</kw>
<status status="FAIL" endtime="20170918 22:07:53.475" starttime="20170918 22:07:38.296"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.482">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:03.482" starttime="20170918 22:08:03.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:03.483" starttime="20170918 22:08:03.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.484">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:03.484" starttime="20170918 22:08:03.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:03.484" starttime="20170918 22:08:03.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:03.798" starttime="20170918 22:08:03.485"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:03.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:03.799">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.799" starttime="20170918 22:08:03.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.799" starttime="20170918 22:08:03.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.800" starttime="20170918 22:08:03.800"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.800" starttime="20170918 22:08:03.481"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.800" starttime="20170918 22:08:03.480"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.800" starttime="20170918 22:08:03.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.801">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:08:03.801" starttime="20170918 22:08:03.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.803">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:03.803" starttime="20170918 22:08:03.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.804">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:03.805" starttime="20170918 22:08:03.804"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.805" starttime="20170918 22:08:03.804"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.805" starttime="20170918 22:08:03.802"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.805" starttime="20170918 22:08:03.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.912">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:03.912">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.912" starttime="20170918 22:08:03.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.915">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:03.915" starttime="20170918 22:08:03.914"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.916">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:03.916" starttime="20170918 22:08:03.916"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.916" starttime="20170918 22:08:03.915"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.917" starttime="20170918 22:08:03.914"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.917" starttime="20170918 22:08:03.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:03.917">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:03.917" starttime="20170918 22:08:03.917"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:03.917">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.917" starttime="20170918 22:08:03.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:03.918" starttime="20170918 22:08:03.918"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.919">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:03.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:03.919">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:03.919" starttime="20170918 22:08:03.918"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:03.919">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:08:03.919" starttime="20170918 22:08:03.478"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:03.919">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:08:03.919" starttime="20170918 22:08:03.477"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:03.920" starttime="20170918 22:08:03.920"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:03.920" starttime="20170918 22:08:03.477"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:03.924">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:03.925" starttime="20170918 22:08:03.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.925">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:03.925" starttime="20170918 22:08:03.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.926">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:03.926" starttime="20170918 22:08:03.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:03.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:03.926" starttime="20170918 22:08:03.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:04.110" starttime="20170918 22:08:03.927"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:04.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.111" starttime="20170918 22:08:03.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.111" starttime="20170918 22:08:04.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.112" starttime="20170918 22:08:04.112"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.112" starttime="20170918 22:08:03.923"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.112" starttime="20170918 22:08:03.923"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.113" starttime="20170918 22:08:03.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.113">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:08:04.113" starttime="20170918 22:08:04.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.117">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:04.117" starttime="20170918 22:08:04.115"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.118">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:04.118" starttime="20170918 22:08:04.118"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.118" starttime="20170918 22:08:04.117"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.119" starttime="20170918 22:08:04.114"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.119" starttime="20170918 22:08:04.114"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:04.225">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.225" starttime="20170918 22:08:04.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:04.227" starttime="20170918 22:08:04.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:04.228" starttime="20170918 22:08:04.228"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.228" starttime="20170918 22:08:04.227"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.228" starttime="20170918 22:08:04.226"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.228" starttime="20170918 22:08:04.225"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:04.229">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:04.229" starttime="20170918 22:08:04.229"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.229" starttime="20170918 22:08:03.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.230" starttime="20170918 22:08:04.229"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.230">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:04.230">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:04.230">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:04.230" starttime="20170918 22:08:04.230"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.231">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:08:04.231" starttime="20170918 22:08:03.921"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.231">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:08:04.231" starttime="20170918 22:08:03.920"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:04.232" starttime="20170918 22:08:04.231"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.236">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:04.236" starttime="20170918 22:08:04.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:04.237" starttime="20170918 22:08:04.236"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.237">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:04.237" starttime="20170918 22:08:04.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:04.238" starttime="20170918 22:08:04.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:04.436" starttime="20170918 22:08:04.239"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:04.436">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.436" starttime="20170918 22:08:04.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.437" starttime="20170918 22:08:04.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.438" starttime="20170918 22:08:04.437"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.438" starttime="20170918 22:08:04.235"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.438" starttime="20170918 22:08:04.234"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.438" starttime="20170918 22:08:04.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:08:04.439" starttime="20170918 22:08:04.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:04.441" starttime="20170918 22:08:04.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.442">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:04.442" starttime="20170918 22:08:04.442"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.442" starttime="20170918 22:08:04.441"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.442" starttime="20170918 22:08:04.439"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.442" starttime="20170918 22:08:04.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.546">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:04.546">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.546" starttime="20170918 22:08:04.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.548">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:04.548" starttime="20170918 22:08:04.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.549">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:04.549" starttime="20170918 22:08:04.549"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.549" starttime="20170918 22:08:04.548"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.550" starttime="20170918 22:08:04.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:04.550" starttime="20170918 22:08:04.546"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:04.550">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:04.550" starttime="20170918 22:08:04.550"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.550">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.550" starttime="20170918 22:08:04.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:04.551" starttime="20170918 22:08:04.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:04.552">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:04.552">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:04.552">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:04.554" starttime="20170918 22:08:04.551"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.554">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:08:04.554" starttime="20170918 22:08:04.233"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:04.554">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:08:04.554" starttime="20170918 22:08:04.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:04.555">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:08:04.555">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20170918 22:08:04.555" starttime="20170918 22:08:04.555"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:04.555" starttime="20170918 22:08:04.232"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:04.556" starttime="20170918 22:08:03.476"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.561">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:14.562" starttime="20170918 22:08:14.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:14.562" starttime="20170918 22:08:14.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.563">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:14.563" starttime="20170918 22:08:14.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.564">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:14.564" starttime="20170918 22:08:14.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:14.750" starttime="20170918 22:08:14.565"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:14.750">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:14.750">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.750" starttime="20170918 22:08:14.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.751">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.751" starttime="20170918 22:08:14.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.752" starttime="20170918 22:08:14.751"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.752" starttime="20170918 22:08:14.561"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.752" starttime="20170918 22:08:14.560"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.752" starttime="20170918 22:08:14.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.753">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:08:14.753" starttime="20170918 22:08:14.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.755">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:14.755" starttime="20170918 22:08:14.754"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.756">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:14.756" starttime="20170918 22:08:14.756"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.756" starttime="20170918 22:08:14.755"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.756" starttime="20170918 22:08:14.754"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.757" starttime="20170918 22:08:14.753"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.842">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:14.842">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.842" starttime="20170918 22:08:14.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.844">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:14.844" starttime="20170918 22:08:14.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.845">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:14.845" starttime="20170918 22:08:14.845"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.846" starttime="20170918 22:08:14.845"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.846" starttime="20170918 22:08:14.843"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.846" starttime="20170918 22:08:14.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:14.846">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:14.846" starttime="20170918 22:08:14.846"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:14.846">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.846" starttime="20170918 22:08:14.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:14.847" starttime="20170918 22:08:14.847"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.848">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:14.848">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:14.848">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:14.848" starttime="20170918 22:08:14.847"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:14.848">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:08:14.848" starttime="20170918 22:08:14.558"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:14.849">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:08:14.849" starttime="20170918 22:08:14.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:14.849" starttime="20170918 22:08:14.849"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:14.849" starttime="20170918 22:08:14.557"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:14.853">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:14.853" starttime="20170918 22:08:14.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:14.854" starttime="20170918 22:08:14.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.854">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:14.854" starttime="20170918 22:08:14.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:14.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:14.855" starttime="20170918 22:08:14.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:15.138" starttime="20170918 22:08:14.856"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:15.138">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.138" starttime="20170918 22:08:14.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.139" starttime="20170918 22:08:15.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.140" starttime="20170918 22:08:15.139"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.140" starttime="20170918 22:08:14.852"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.140" starttime="20170918 22:08:14.851"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.140" starttime="20170918 22:08:14.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.141">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:08:15.141" starttime="20170918 22:08:15.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.143">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:15.143" starttime="20170918 22:08:15.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:15.144" starttime="20170918 22:08:15.144"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.145" starttime="20170918 22:08:15.144"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.145" starttime="20170918 22:08:15.142"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.145" starttime="20170918 22:08:15.141"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.272">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:15.273">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.273" starttime="20170918 22:08:15.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.274">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:15.274" starttime="20170918 22:08:15.274"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.275">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:15.275" starttime="20170918 22:08:15.275"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.276" starttime="20170918 22:08:15.275"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.276" starttime="20170918 22:08:15.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.276" starttime="20170918 22:08:15.273"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:15.276">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:15.276" starttime="20170918 22:08:15.276"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.276">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.276" starttime="20170918 22:08:14.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.277" starttime="20170918 22:08:15.277"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.278">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:15.278">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:15.278">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:15.278" starttime="20170918 22:08:15.277"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.278">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:08:15.278" starttime="20170918 22:08:14.850"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.279">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:08:15.279" starttime="20170918 22:08:14.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:15.279" starttime="20170918 22:08:15.279"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.283">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:15.283" starttime="20170918 22:08:15.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.284">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:15.284" starttime="20170918 22:08:15.284"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.285">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:15.285" starttime="20170918 22:08:15.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:15.285" starttime="20170918 22:08:15.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:15.624" starttime="20170918 22:08:15.286"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:15.624">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.624" starttime="20170918 22:08:15.286"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.625" starttime="20170918 22:08:15.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.626" starttime="20170918 22:08:15.625"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.626" starttime="20170918 22:08:15.282"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.626" starttime="20170918 22:08:15.282"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.626" starttime="20170918 22:08:15.281"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.627">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:08:15.627" starttime="20170918 22:08:15.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.629">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:15.629" starttime="20170918 22:08:15.628"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.630">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:15.630" starttime="20170918 22:08:15.630"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.630" starttime="20170918 22:08:15.629"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.630" starttime="20170918 22:08:15.628"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.630" starttime="20170918 22:08:15.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:15.984">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.984" starttime="20170918 22:08:15.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:15.986" starttime="20170918 22:08:15.985"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:15.986" starttime="20170918 22:08:15.986"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.987" starttime="20170918 22:08:15.986"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.987" starttime="20170918 22:08:15.984"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:15.987" starttime="20170918 22:08:15.984"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:15.987">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:15.987" starttime="20170918 22:08:15.987"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.988">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.988" starttime="20170918 22:08:15.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:15.988" starttime="20170918 22:08:15.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:15.989">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:15.989">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:15.989">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:15.989" starttime="20170918 22:08:15.989"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.989">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:15.989" starttime="20170918 22:08:15.280"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:15.990">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:15.990" starttime="20170918 22:08:15.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:15.990">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:08:15.990">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:08:15.990" starttime="20170918 22:08:15.990"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:15.991" starttime="20170918 22:08:15.279"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:15.991" starttime="20170918 22:08:14.556"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:25.997">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:25.997" starttime="20170918 22:08:25.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:25.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:25.998" starttime="20170918 22:08:25.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:25.998">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:25.998" starttime="20170918 22:08:25.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:25.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:25.999" starttime="20170918 22:08:25.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.334">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:26.334" starttime="20170918 22:08:26.000"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:26.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:26.334">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.334" starttime="20170918 22:08:25.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.335">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.335" starttime="20170918 22:08:26.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.336" starttime="20170918 22:08:26.335"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.336" starttime="20170918 22:08:25.996"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.336" starttime="20170918 22:08:25.995"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.336" starttime="20170918 22:08:25.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.337">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:08:26.337" starttime="20170918 22:08:26.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.339">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:26.339" starttime="20170918 22:08:26.338"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.340">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:26.340" starttime="20170918 22:08:26.340"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.340" starttime="20170918 22:08:26.339"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.340" starttime="20170918 22:08:26.338"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.341" starttime="20170918 22:08:26.337"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.628">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:26.628">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.628" starttime="20170918 22:08:26.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.633">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:26.633" starttime="20170918 22:08:26.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:26.634" starttime="20170918 22:08:26.634"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.634" starttime="20170918 22:08:26.633"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.634" starttime="20170918 22:08:26.629"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.634" starttime="20170918 22:08:26.629"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:26.635">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:26.635" starttime="20170918 22:08:26.635"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:26.635">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.635" starttime="20170918 22:08:25.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:26.636" starttime="20170918 22:08:26.635"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:26.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:26.636">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:26.637" starttime="20170918 22:08:26.636"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:26.637">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:08:26.637" starttime="20170918 22:08:25.993"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:26.637">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:08:26.637" starttime="20170918 22:08:25.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:26.638" starttime="20170918 22:08:26.637"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:26.638" starttime="20170918 22:08:25.992"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:26.641">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:26.642" starttime="20170918 22:08:26.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:26.643" starttime="20170918 22:08:26.642"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.643">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:26.643" starttime="20170918 22:08:26.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:26.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:26.644" starttime="20170918 22:08:26.644"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:27.175" starttime="20170918 22:08:26.645"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:27.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:27.176">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.176" starttime="20170918 22:08:26.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.176">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.176" starttime="20170918 22:08:27.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.177" starttime="20170918 22:08:27.177"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.177" starttime="20170918 22:08:26.641"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.177" starttime="20170918 22:08:26.640"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.177" starttime="20170918 22:08:26.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.178">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:08:27.178" starttime="20170918 22:08:27.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.215">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:27.215" starttime="20170918 22:08:27.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.217">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:27.217" starttime="20170918 22:08:27.217"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.217" starttime="20170918 22:08:27.216"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.218" starttime="20170918 22:08:27.179"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.218" starttime="20170918 22:08:27.178"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.662">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:27.662">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.662" starttime="20170918 22:08:27.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.664">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:27.664" starttime="20170918 22:08:27.663"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.665">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:27.665" starttime="20170918 22:08:27.665"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.665" starttime="20170918 22:08:27.664"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.665" starttime="20170918 22:08:27.663"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:27.665" starttime="20170918 22:08:27.662"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:27.666">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:27.666" starttime="20170918 22:08:27.666"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:27.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.666" starttime="20170918 22:08:26.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:27.667" starttime="20170918 22:08:27.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.667">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:27.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:27.668">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:27.668" starttime="20170918 22:08:27.667"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:27.668">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:08:27.668" starttime="20170918 22:08:26.638"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:27.668">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:08:27.668" starttime="20170918 22:08:26.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:27.669" starttime="20170918 22:08:27.669"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:27.673">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:27.673" starttime="20170918 22:08:27.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:27.674" starttime="20170918 22:08:27.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.675">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:27.675" starttime="20170918 22:08:27.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:27.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:27.675" starttime="20170918 22:08:27.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.060">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:28.060" starttime="20170918 22:08:27.676"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:28.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:28.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.061" starttime="20170918 22:08:27.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.062" starttime="20170918 22:08:28.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.062" starttime="20170918 22:08:28.062"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.062" starttime="20170918 22:08:27.672"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.063" starttime="20170918 22:08:27.672"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.063" starttime="20170918 22:08:27.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:28.063">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:08:28.063" starttime="20170918 22:08:28.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:28.065">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:28.065" starttime="20170918 22:08:28.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.066">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:28.066" starttime="20170918 22:08:28.066"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.066" starttime="20170918 22:08:28.065"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.067" starttime="20170918 22:08:28.064"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.067" starttime="20170918 22:08:28.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:28.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:28.818">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.818" starttime="20170918 22:08:28.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:28.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:28.820" starttime="20170918 22:08:28.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:28.821" starttime="20170918 22:08:28.821"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.821" starttime="20170918 22:08:28.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.821" starttime="20170918 22:08:28.818"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:28.821" starttime="20170918 22:08:28.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:28.822">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:28.822" starttime="20170918 22:08:28.822"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:28.822">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.822" starttime="20170918 22:08:27.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:28.823" starttime="20170918 22:08:28.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:28.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:28.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:28.823">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:28.824" starttime="20170918 22:08:28.823"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:28.824">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:28.824" starttime="20170918 22:08:27.670"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:28.824">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:28.824" starttime="20170918 22:08:27.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:28.825">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:08:28.825">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:08:28.825" starttime="20170918 22:08:28.824"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:28.825" starttime="20170918 22:08:27.669"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:28.825" starttime="20170918 22:08:25.991"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:38.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:38.834" starttime="20170918 22:08:38.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:38.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:38.834" starttime="20170918 22:08:38.834"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:38.835">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:38.835" starttime="20170918 22:08:38.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:38.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:38.836" starttime="20170918 22:08:38.836"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:39.243" starttime="20170918 22:08:38.837"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:39.243">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:39.243">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.243" starttime="20170918 22:08:38.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.244" starttime="20170918 22:08:39.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.246" starttime="20170918 22:08:39.245"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.246" starttime="20170918 22:08:38.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.246" starttime="20170918 22:08:38.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.246" starttime="20170918 22:08:38.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.247">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:08:39.247" starttime="20170918 22:08:39.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.251">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:39.251" starttime="20170918 22:08:39.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.253">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:39.253" starttime="20170918 22:08:39.253"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.253" starttime="20170918 22:08:39.251"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.254" starttime="20170918 22:08:39.248"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.254" starttime="20170918 22:08:39.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:39.567">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.567" starttime="20170918 22:08:39.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:39.570" starttime="20170918 22:08:39.569"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.571">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:39.571" starttime="20170918 22:08:39.570"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.571" starttime="20170918 22:08:39.570"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.571" starttime="20170918 22:08:39.568"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.571" starttime="20170918 22:08:39.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:39.571">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:39.571" starttime="20170918 22:08:39.571"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:39.572">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.572" starttime="20170918 22:08:38.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:39.573" starttime="20170918 22:08:39.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.573">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:39.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:39.573">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:39.573" starttime="20170918 22:08:39.573"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:39.574">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:08:39.574" starttime="20170918 22:08:38.829"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:39.574">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:08:39.574" starttime="20170918 22:08:38.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:39.575" starttime="20170918 22:08:39.575"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:39.575" starttime="20170918 22:08:38.827"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:39.582">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:39.583" starttime="20170918 22:08:39.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:39.583" starttime="20170918 22:08:39.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:39.584" starttime="20170918 22:08:39.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:39.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:39.585" starttime="20170918 22:08:39.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.043">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:40.043" starttime="20170918 22:08:39.585"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:40.043">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:40.044">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.044" starttime="20170918 22:08:39.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.046" starttime="20170918 22:08:40.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.047" starttime="20170918 22:08:40.047"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.048" starttime="20170918 22:08:39.580"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.048" starttime="20170918 22:08:39.579"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.048" starttime="20170918 22:08:39.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.049">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:08:40.049" starttime="20170918 22:08:40.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.051">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:40.051" starttime="20170918 22:08:40.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.052">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:40.052" starttime="20170918 22:08:40.052"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.052" starttime="20170918 22:08:40.051"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.052" starttime="20170918 22:08:40.049"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.052" starttime="20170918 22:08:40.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:40.818">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.818" starttime="20170918 22:08:40.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:40.820" starttime="20170918 22:08:40.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:40.821" starttime="20170918 22:08:40.821"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.821" starttime="20170918 22:08:40.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.821" starttime="20170918 22:08:40.819"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:40.822" starttime="20170918 22:08:40.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:40.822">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:40.822" starttime="20170918 22:08:40.822"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:40.822">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.822" starttime="20170918 22:08:39.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:40.824" starttime="20170918 22:08:40.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.824">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:40.824">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:40.825">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:40.825" starttime="20170918 22:08:40.824"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:40.825">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:08:40.825" starttime="20170918 22:08:39.576"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:40.825">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:08:40.825" starttime="20170918 22:08:39.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:40.826" starttime="20170918 22:08:40.826"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:40.832">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:40.832" starttime="20170918 22:08:40.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:40.834" starttime="20170918 22:08:40.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.835">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:40.835" starttime="20170918 22:08:40.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:40.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:40.836" starttime="20170918 22:08:40.836"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:41.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:41.256" starttime="20170918 22:08:40.837"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:41.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:41.256">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:41.256" starttime="20170918 22:08:40.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:41.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:41.257" starttime="20170918 22:08:41.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:41.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:41.258" starttime="20170918 22:08:41.257"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.258" starttime="20170918 22:08:40.831"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.258" starttime="20170918 22:08:40.830"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.258" starttime="20170918 22:08:40.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:41.260">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:08:41.260" starttime="20170918 22:08:41.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:41.265">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:41.265" starttime="20170918 22:08:41.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:41.265">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:41.266" starttime="20170918 22:08:41.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.266" starttime="20170918 22:08:41.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.266" starttime="20170918 22:08:41.263"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:41.266" starttime="20170918 22:08:41.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:42.067">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:42.068">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:42.068" starttime="20170918 22:08:41.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:42.071">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:42.071" starttime="20170918 22:08:42.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:42.073">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:42.073" starttime="20170918 22:08:42.073"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:42.073" starttime="20170918 22:08:42.071"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:42.073" starttime="20170918 22:08:42.069"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:42.073" starttime="20170918 22:08:42.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:42.074">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:42.074" starttime="20170918 22:08:42.074"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:42.074">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:42.074" starttime="20170918 22:08:40.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:42.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:42.075" starttime="20170918 22:08:42.075"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:42.076">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:42.076">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:42.077">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:42.077" starttime="20170918 22:08:42.076"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:42.077">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:42.077" starttime="20170918 22:08:40.827"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:42.077">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:42.077" starttime="20170918 22:08:40.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:42.078">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:08:42.078">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:08:42.078" starttime="20170918 22:08:42.078"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:42.078" starttime="20170918 22:08:40.826"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:42.079" starttime="20170918 22:08:38.826"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:52.085">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:52.086" starttime="20170918 22:08:52.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:52.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:52.087" starttime="20170918 22:08:52.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:52.088">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:52.088" starttime="20170918 22:08:52.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:52.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:52.089" starttime="20170918 22:08:52.088"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:52.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:52.596" starttime="20170918 22:08:52.090"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:52.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:52.596">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:52.596" starttime="20170918 22:08:52.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:52.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:52.597" starttime="20170918 22:08:52.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:52.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:52.598" starttime="20170918 22:08:52.597"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.598" starttime="20170918 22:08:52.084"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.598" starttime="20170918 22:08:52.084"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.598" starttime="20170918 22:08:52.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:52.599">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:08:52.599" starttime="20170918 22:08:52.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:52.602">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:52.602" starttime="20170918 22:08:52.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:52.603">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:52.603" starttime="20170918 22:08:52.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.603" starttime="20170918 22:08:52.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.603" starttime="20170918 22:08:52.600"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:52.603" starttime="20170918 22:08:52.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:53.384">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.384" starttime="20170918 22:08:52.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.387">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:53.387" starttime="20170918 22:08:53.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.388">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:53.388" starttime="20170918 22:08:53.388"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.388" starttime="20170918 22:08:53.387"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.388" starttime="20170918 22:08:53.385"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.388" starttime="20170918 22:08:53.384"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:53.389">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:53.389" starttime="20170918 22:08:53.389"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:53.389">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.389" starttime="20170918 22:08:52.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.390" starttime="20170918 22:08:53.390"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.391">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:53.391">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:53.391">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:53.391" starttime="20170918 22:08:53.390"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:53.391">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:08:53.391" starttime="20170918 22:08:52.081"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:53.391">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:08:53.391" starttime="20170918 22:08:52.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:53.393" starttime="20170918 22:08:53.392"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.393" starttime="20170918 22:08:52.080"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.400">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:53.401" starttime="20170918 22:08:53.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.402">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:53.402" starttime="20170918 22:08:53.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.403">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:53.403" starttime="20170918 22:08:53.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.404">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:53.404" starttime="20170918 22:08:53.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:53.812" starttime="20170918 22:08:53.406"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:53.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:53.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.812" starttime="20170918 22:08:53.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.813" starttime="20170918 22:08:53.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:53.815" starttime="20170918 22:08:53.814"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.815" starttime="20170918 22:08:53.399"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.815" starttime="20170918 22:08:53.398"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.815" starttime="20170918 22:08:53.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.816">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:08:53.816" starttime="20170918 22:08:53.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:53.820">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:53.820" starttime="20170918 22:08:53.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:53.821">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:53.821" starttime="20170918 22:08:53.821"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.821" starttime="20170918 22:08:53.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.821" starttime="20170918 22:08:53.817"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:53.822" starttime="20170918 22:08:53.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.586">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:54.586">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.586" starttime="20170918 22:08:53.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.588">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:54.588" starttime="20170918 22:08:54.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.589">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:54.590" starttime="20170918 22:08:54.589"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.590" starttime="20170918 22:08:54.588"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.590" starttime="20170918 22:08:54.587"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.590" starttime="20170918 22:08:54.587"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:54.592">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:54.593" starttime="20170918 22:08:54.591"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:54.593">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.593" starttime="20170918 22:08:53.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.595" starttime="20170918 22:08:54.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.595">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:54.595">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:54.596">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:54.596" starttime="20170918 22:08:54.595"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:54.596">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:08:54.596" starttime="20170918 22:08:53.393"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:54.596">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:08:54.596" starttime="20170918 22:08:53.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:08:54.597" starttime="20170918 22:08:54.597"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.602">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:08:54.602" starttime="20170918 22:08:54.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:08:54.603" starttime="20170918 22:08:54.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.603">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:08:54.603" starttime="20170918 22:08:54.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:08:54.604" starttime="20170918 22:08:54.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:08:54.952" starttime="20170918 22:08:54.605"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:54.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:08:54.952">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.953" starttime="20170918 22:08:54.604"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.953" starttime="20170918 22:08:54.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:54.954" starttime="20170918 22:08:54.954"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.954" starttime="20170918 22:08:54.601"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.954" starttime="20170918 22:08:54.601"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.954" starttime="20170918 22:08:54.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.955">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:08:54.955" starttime="20170918 22:08:54.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:54.959">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:54.959" starttime="20170918 22:08:54.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:54.961">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:08:54.961" starttime="20170918 22:08:54.960"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.962" starttime="20170918 22:08:54.959"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.962" starttime="20170918 22:08:54.957"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:54.962" starttime="20170918 22:08:54.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:55.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:08:55.822">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:55.822" starttime="20170918 22:08:54.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:55.826">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:55.826" starttime="20170918 22:08:55.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:55.827">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:08:55.827" starttime="20170918 22:08:55.827"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:55.827" starttime="20170918 22:08:55.826"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:55.827" starttime="20170918 22:08:55.823"></status>
</kw>
<status status="PASS" endtime="20170918 22:08:55.827" starttime="20170918 22:08:55.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:08:55.828">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:08:55.829" starttime="20170918 22:08:55.828"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:55.830">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:08:55.830" starttime="20170918 22:08:54.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:55.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:08:55.832" starttime="20170918 22:08:55.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:08:55.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:08:55.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:08:55.834">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:08:55.834" starttime="20170918 22:08:55.833"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:55.835">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:55.835" starttime="20170918 22:08:54.598"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:08:55.836">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:08:55.836" starttime="20170918 22:08:54.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:08:55.837">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:08:55.837">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:08:55.837" starttime="20170918 22:08:55.836"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:55.837" starttime="20170918 22:08:54.597"></status>
</kw>
<status status="FAIL" endtime="20170918 22:08:55.837" starttime="20170918 22:08:52.079"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:05.843">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:05.844" starttime="20170918 22:09:05.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:05.844">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:05.844" starttime="20170918 22:09:05.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:05.845">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:05.845" starttime="20170918 22:09:05.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:05.845">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:05.846" starttime="20170918 22:09:05.845"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:06.198" starttime="20170918 22:09:05.847"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:06.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:06.198">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.198" starttime="20170918 22:09:05.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.199" starttime="20170918 22:09:06.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.200" starttime="20170918 22:09:06.199"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.200" starttime="20170918 22:09:05.842"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.200" starttime="20170918 22:09:05.842"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.201" starttime="20170918 22:09:05.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.201">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:09:06.202" starttime="20170918 22:09:06.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.205">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:06.205" starttime="20170918 22:09:06.204"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.206">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:06.206" starttime="20170918 22:09:06.206"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.206" starttime="20170918 22:09:06.205"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.207" starttime="20170918 22:09:06.203"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.207" starttime="20170918 22:09:06.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.810">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:06.811">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.811" starttime="20170918 22:09:06.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.813">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:06.813" starttime="20170918 22:09:06.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.814">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:06.814" starttime="20170918 22:09:06.813"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.814" starttime="20170918 22:09:06.813"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.814" starttime="20170918 22:09:06.812"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.814" starttime="20170918 22:09:06.811"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:06.814">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:06.815" starttime="20170918 22:09:06.814"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:06.815">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.815" starttime="20170918 22:09:05.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:06.816" starttime="20170918 22:09:06.815"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.816">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:06.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:06.816">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:06.816" starttime="20170918 22:09:06.816"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:06.817">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:09:06.817" starttime="20170918 22:09:05.840"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:06.817">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:09:06.817" starttime="20170918 22:09:05.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:06.818" starttime="20170918 22:09:06.817"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:06.818" starttime="20170918 22:09:05.839"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:06.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:06.826" starttime="20170918 22:09:06.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:06.827" starttime="20170918 22:09:06.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.829">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:06.829" starttime="20170918 22:09:06.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:06.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:06.830" starttime="20170918 22:09:06.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:07.251">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:07.251" starttime="20170918 22:09:06.831"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:07.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:07.251">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:07.251" starttime="20170918 22:09:06.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:07.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:07.252" starttime="20170918 22:09:07.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:07.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:07.253" starttime="20170918 22:09:07.252"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.253" starttime="20170918 22:09:06.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.253" starttime="20170918 22:09:06.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.253" starttime="20170918 22:09:06.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:07.254">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:09:07.254" starttime="20170918 22:09:07.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:07.256">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:07.256" starttime="20170918 22:09:07.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:07.257">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:07.257" starttime="20170918 22:09:07.257"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.257" starttime="20170918 22:09:07.256"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.258" starttime="20170918 22:09:07.255"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:07.258" starttime="20170918 22:09:07.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.177">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:08.177">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.177" starttime="20170918 22:09:07.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.179">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:08.180" starttime="20170918 22:09:08.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:08.181" starttime="20170918 22:09:08.181"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.181" starttime="20170918 22:09:08.180"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.181" starttime="20170918 22:09:08.178"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.181" starttime="20170918 22:09:08.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:08.182">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:08.182" starttime="20170918 22:09:08.181"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:08.182">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.182" starttime="20170918 22:09:06.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.183" starttime="20170918 22:09:08.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.183">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:08.183">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:08.183">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:08.183" starttime="20170918 22:09:08.183"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:08.184">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:09:08.184" starttime="20170918 22:09:06.818"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:08.184">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:09:08.184" starttime="20170918 22:09:06.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:08.185" starttime="20170918 22:09:08.184"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.190">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:08.191" starttime="20170918 22:09:08.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:08.192" starttime="20170918 22:09:08.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.192">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:08.192" starttime="20170918 22:09:08.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:08.193" starttime="20170918 22:09:08.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:08.540" starttime="20170918 22:09:08.194"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:08.540">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:08.540">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.540" starttime="20170918 22:09:08.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.541">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.541" starttime="20170918 22:09:08.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:08.542" starttime="20170918 22:09:08.541"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.542" starttime="20170918 22:09:08.189"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.543" starttime="20170918 22:09:08.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.543" starttime="20170918 22:09:08.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.543">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:09:08.543" starttime="20170918 22:09:08.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:08.546">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:08.546" starttime="20170918 22:09:08.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:08.546">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:08.547" starttime="20170918 22:09:08.546"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.547" starttime="20170918 22:09:08.546"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.547" starttime="20170918 22:09:08.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:08.547" starttime="20170918 22:09:08.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:09.302">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:09.303">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:09.303" starttime="20170918 22:09:08.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:09.305">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:09.305" starttime="20170918 22:09:09.304"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:09.306">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:09.306" starttime="20170918 22:09:09.305"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:09.306" starttime="20170918 22:09:09.305"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:09.306" starttime="20170918 22:09:09.304"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:09.306" starttime="20170918 22:09:09.303"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:09.306">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:09.306" starttime="20170918 22:09:09.306"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:09.307">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:09.307" starttime="20170918 22:09:08.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:09.307">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:09.307" starttime="20170918 22:09:09.307"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:09.308">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:09.308">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:09.308">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:09.308" starttime="20170918 22:09:09.308"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:09.309">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:09.309" starttime="20170918 22:09:08.186"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:09.309">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:09.309" starttime="20170918 22:09:08.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:09.309">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:09:09.310">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:09:09.310" starttime="20170918 22:09:09.309"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:09.310" starttime="20170918 22:09:08.185"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:09.310" starttime="20170918 22:09:05.838"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:19.316">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:19.316" starttime="20170918 22:09:19.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:19.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:19.317" starttime="20170918 22:09:19.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:19.317">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:19.317" starttime="20170918 22:09:19.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:19.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:19.318" starttime="20170918 22:09:19.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.035">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:20.036" starttime="20170918 22:09:19.319"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:20.036">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:20.036">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.036" starttime="20170918 22:09:19.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.037" starttime="20170918 22:09:20.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.037" starttime="20170918 22:09:20.037"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.037" starttime="20170918 22:09:19.314"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.038" starttime="20170918 22:09:19.314"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.038" starttime="20170918 22:09:19.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.038">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:09:20.038" starttime="20170918 22:09:20.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.041">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:20.041" starttime="20170918 22:09:20.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.042">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:20.042" starttime="20170918 22:09:20.041"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.042" starttime="20170918 22:09:20.041"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.042" starttime="20170918 22:09:20.039"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.042" starttime="20170918 22:09:20.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.339">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:20.339">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.339" starttime="20170918 22:09:20.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.341">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:20.341" starttime="20170918 22:09:20.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.342">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:20.342" starttime="20170918 22:09:20.341"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.342" starttime="20170918 22:09:20.341"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.342" starttime="20170918 22:09:20.340"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.342" starttime="20170918 22:09:20.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:20.343">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:20.343" starttime="20170918 22:09:20.343"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:20.343">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.343" starttime="20170918 22:09:19.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.344" starttime="20170918 22:09:20.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:20.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:20.344">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:20.344" starttime="20170918 22:09:20.344"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:20.345">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:09:20.345" starttime="20170918 22:09:19.312"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:20.345">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:09:20.345" starttime="20170918 22:09:19.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:20.346" starttime="20170918 22:09:20.345"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.346" starttime="20170918 22:09:19.311"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.351">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:20.351" starttime="20170918 22:09:20.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:20.352" starttime="20170918 22:09:20.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.353">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:20.353" starttime="20170918 22:09:20.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:20.353" starttime="20170918 22:09:20.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:20.847" starttime="20170918 22:09:20.354"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:20.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:20.847">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.847" starttime="20170918 22:09:20.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.848">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.848" starttime="20170918 22:09:20.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:20.849" starttime="20170918 22:09:20.848"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.849" starttime="20170918 22:09:20.349"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.849" starttime="20170918 22:09:20.349"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.849" starttime="20170918 22:09:20.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.850">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:09:20.850" starttime="20170918 22:09:20.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:20.853">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:20.853" starttime="20170918 22:09:20.851"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:20.854">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:20.854" starttime="20170918 22:09:20.854"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.854" starttime="20170918 22:09:20.853"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.855" starttime="20170918 22:09:20.851"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:20.855" starttime="20170918 22:09:20.850"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:21.255">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.255" starttime="20170918 22:09:20.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:21.258" starttime="20170918 22:09:21.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:21.259" starttime="20170918 22:09:21.259"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.259" starttime="20170918 22:09:21.258"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.259" starttime="20170918 22:09:21.256"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.259" starttime="20170918 22:09:21.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:21.260">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:21.260" starttime="20170918 22:09:21.259"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:21.260">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.260" starttime="20170918 22:09:20.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.261" starttime="20170918 22:09:21.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:21.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:21.261">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:21.261" starttime="20170918 22:09:21.261"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:21.262">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:09:21.262" starttime="20170918 22:09:20.346"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:21.262">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:09:21.262" starttime="20170918 22:09:20.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:21.262" starttime="20170918 22:09:21.262"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.266">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:21.267" starttime="20170918 22:09:21.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.267">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:21.267" starttime="20170918 22:09:21.267"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.268">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:21.268" starttime="20170918 22:09:21.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.269">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:21.269" starttime="20170918 22:09:21.268"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.833">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:21.833" starttime="20170918 22:09:21.269"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:21.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:21.833">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.833" starttime="20170918 22:09:21.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.834">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.834" starttime="20170918 22:09:21.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:21.835" starttime="20170918 22:09:21.834"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.835" starttime="20170918 22:09:21.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.835" starttime="20170918 22:09:21.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.835" starttime="20170918 22:09:21.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.836">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:09:21.836" starttime="20170918 22:09:21.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:21.838">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:21.838" starttime="20170918 22:09:21.837"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:21.839">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:21.839" starttime="20170918 22:09:21.839"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.839" starttime="20170918 22:09:21.838"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.839" starttime="20170918 22:09:21.837"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:21.839" starttime="20170918 22:09:21.836"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:22.078">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:22.078">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:22.078" starttime="20170918 22:09:21.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:22.080">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:22.080" starttime="20170918 22:09:22.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:22.081">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:22.082" starttime="20170918 22:09:22.081"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:22.082" starttime="20170918 22:09:22.080"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:22.082" starttime="20170918 22:09:22.079"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:22.082" starttime="20170918 22:09:22.079"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:22.082">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:22.082" starttime="20170918 22:09:22.082"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:22.083">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:22.083" starttime="20170918 22:09:21.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:22.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:22.083" starttime="20170918 22:09:22.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:22.084">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:22.084">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:22.084">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:22.084" starttime="20170918 22:09:22.084"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:22.084">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:22.084" starttime="20170918 22:09:21.263"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:22.085">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:22.085" starttime="20170918 22:09:21.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:22.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:09:22.085">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:09:22.085" starttime="20170918 22:09:22.085"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:22.086" starttime="20170918 22:09:21.263"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:22.086" starttime="20170918 22:09:19.310"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.096">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:32.096" starttime="20170918 22:09:32.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:32.098" starttime="20170918 22:09:32.097"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.099">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:32.099" starttime="20170918 22:09:32.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:32.100" starttime="20170918 22:09:32.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:32.307" starttime="20170918 22:09:32.101"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:32.307">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:32.307">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.307" starttime="20170918 22:09:32.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.308">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.308" starttime="20170918 22:09:32.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.309" starttime="20170918 22:09:32.308"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.309" starttime="20170918 22:09:32.094"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.309" starttime="20170918 22:09:32.093"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.309" starttime="20170918 22:09:32.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.310">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:09:32.310" starttime="20170918 22:09:32.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.312">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:32.312" starttime="20170918 22:09:32.311"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.313">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:32.313" starttime="20170918 22:09:32.313"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.313" starttime="20170918 22:09:32.312"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.313" starttime="20170918 22:09:32.311"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.313" starttime="20170918 22:09:32.310"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.375">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:32.375">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.375" starttime="20170918 22:09:32.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.377">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:32.377" starttime="20170918 22:09:32.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.378">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:32.378" starttime="20170918 22:09:32.378"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.378" starttime="20170918 22:09:32.377"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.378" starttime="20170918 22:09:32.376"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.378" starttime="20170918 22:09:32.375"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:32.379">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:32.379" starttime="20170918 22:09:32.379"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:32.379">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.379" starttime="20170918 22:09:32.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.380" starttime="20170918 22:09:32.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.380">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:32.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:32.380">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:32.381" starttime="20170918 22:09:32.380"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:32.381">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:09:32.381" starttime="20170918 22:09:32.089"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:32.381">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:09:32.381" starttime="20170918 22:09:32.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:32.382" starttime="20170918 22:09:32.381"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.382" starttime="20170918 22:09:32.088"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.386">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:32.386" starttime="20170918 22:09:32.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:32.387" starttime="20170918 22:09:32.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.387">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:32.388" starttime="20170918 22:09:32.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.388">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:32.388" starttime="20170918 22:09:32.388"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:32.832" starttime="20170918 22:09:32.389"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:32.832">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:32.832">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.832" starttime="20170918 22:09:32.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.833">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.833" starttime="20170918 22:09:32.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:32.833" starttime="20170918 22:09:32.833"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.833" starttime="20170918 22:09:32.385"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.834" starttime="20170918 22:09:32.384"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.834" starttime="20170918 22:09:32.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.834">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:09:32.834" starttime="20170918 22:09:32.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:32.837">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:32.837" starttime="20170918 22:09:32.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:32.838">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:32.838" starttime="20170918 22:09:32.838"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.838" starttime="20170918 22:09:32.837"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.838" starttime="20170918 22:09:32.835"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:32.838" starttime="20170918 22:09:32.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.564">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:33.564">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:33.564" starttime="20170918 22:09:32.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.566">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:33.566" starttime="20170918 22:09:33.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:33.567">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:33.567" starttime="20170918 22:09:33.567"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:33.567" starttime="20170918 22:09:33.566"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:33.567" starttime="20170918 22:09:33.565"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:33.567" starttime="20170918 22:09:33.564"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:33.568">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:33.568" starttime="20170918 22:09:33.568"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:33.568">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:33.568" starttime="20170918 22:09:32.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:33.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:33.569" starttime="20170918 22:09:33.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.569">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:33.569">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:33.569">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:33.570" starttime="20170918 22:09:33.569"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:33.570">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:09:33.570" starttime="20170918 22:09:32.382"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:33.570">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:09:33.570" starttime="20170918 22:09:32.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:33.571" starttime="20170918 22:09:33.570"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:33.575">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:33.575" starttime="20170918 22:09:33.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:33.576" starttime="20170918 22:09:33.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.577">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:33.577" starttime="20170918 22:09:33.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:33.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:33.578" starttime="20170918 22:09:33.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:35.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:35.093" starttime="20170918 22:09:33.579"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:35.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:35.093">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:35.094" starttime="20170918 22:09:33.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:35.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:35.094" starttime="20170918 22:09:35.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:35.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:35.095" starttime="20170918 22:09:35.095"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.095" starttime="20170918 22:09:33.574"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.095" starttime="20170918 22:09:33.573"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.095" starttime="20170918 22:09:33.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:35.096">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:09:35.096" starttime="20170918 22:09:35.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:35.098">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:35.098" starttime="20170918 22:09:35.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:35.099">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:35.099" starttime="20170918 22:09:35.099"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.099" starttime="20170918 22:09:35.098"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.099" starttime="20170918 22:09:35.097"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:35.100" starttime="20170918 22:09:35.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:38.109">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:38.109">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:38.109" starttime="20170918 22:09:35.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:38.111">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:38.111" starttime="20170918 22:09:38.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:38.112">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:38.112" starttime="20170918 22:09:38.112"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:38.113" starttime="20170918 22:09:38.112"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:38.113" starttime="20170918 22:09:38.110"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:38.113" starttime="20170918 22:09:38.110"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:38.113">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:38.113" starttime="20170918 22:09:38.113"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:38.113">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:38.113" starttime="20170918 22:09:33.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:38.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:38.114" starttime="20170918 22:09:38.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:38.115">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:38.115">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:38.115">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:38.115" starttime="20170918 22:09:38.114"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:38.115">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:38.115" starttime="20170918 22:09:33.572"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:38.115">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:38.115" starttime="20170918 22:09:33.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:38.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:09:38.116">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:09:38.116" starttime="20170918 22:09:38.116"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:38.116" starttime="20170918 22:09:33.571"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:38.117" starttime="20170918 22:09:32.087"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.123">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:48.124" starttime="20170918 22:09:48.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:48.124" starttime="20170918 22:09:48.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.125">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:48.125" starttime="20170918 22:09:48.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:48.126" starttime="20170918 22:09:48.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:48.419" starttime="20170918 22:09:48.127"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:48.420">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.420" starttime="20170918 22:09:48.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.420" starttime="20170918 22:09:48.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.421" starttime="20170918 22:09:48.421"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.421" starttime="20170918 22:09:48.122"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.421" starttime="20170918 22:09:48.122"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.421" starttime="20170918 22:09:48.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.422">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:09:48.422" starttime="20170918 22:09:48.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.424">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:48.424" starttime="20170918 22:09:48.423"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.425">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:48.425" starttime="20170918 22:09:48.425"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.425" starttime="20170918 22:09:48.424"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.425" starttime="20170918 22:09:48.423"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.426" starttime="20170918 22:09:48.422"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.521">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:48.521">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.521" starttime="20170918 22:09:48.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.526">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:48.526" starttime="20170918 22:09:48.522"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.527">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:48.527" starttime="20170918 22:09:48.527"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.527" starttime="20170918 22:09:48.526"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.527" starttime="20170918 22:09:48.522"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.527" starttime="20170918 22:09:48.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:48.528">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:48.528" starttime="20170918 22:09:48.528"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.528">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.528" starttime="20170918 22:09:48.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.529" starttime="20170918 22:09:48.529"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.530">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:48.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:48.530">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:48.530" starttime="20170918 22:09:48.529"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.530">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:09:48.530" starttime="20170918 22:09:48.119"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.531">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:09:48.531" starttime="20170918 22:09:48.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:48.531" starttime="20170918 22:09:48.531"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.532" starttime="20170918 22:09:48.118"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.536">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:48.536" starttime="20170918 22:09:48.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:48.537" starttime="20170918 22:09:48.536"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.537">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:48.537" starttime="20170918 22:09:48.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:48.538" starttime="20170918 22:09:48.538"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:48.804" starttime="20170918 22:09:48.539"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:48.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.805" starttime="20170918 22:09:48.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.806" starttime="20170918 22:09:48.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.807" starttime="20170918 22:09:48.806"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.807" starttime="20170918 22:09:48.535"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.807" starttime="20170918 22:09:48.535"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.807" starttime="20170918 22:09:48.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.808">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:09:48.808" starttime="20170918 22:09:48.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.810">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:48.810" starttime="20170918 22:09:48.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.811">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:48.811" starttime="20170918 22:09:48.811"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.812" starttime="20170918 22:09:48.811"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.812" starttime="20170918 22:09:48.809"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.812" starttime="20170918 22:09:48.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.950">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:48.950">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.950" starttime="20170918 22:09:48.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.952">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:48.952" starttime="20170918 22:09:48.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.953">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:48.953" starttime="20170918 22:09:48.953"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.953" starttime="20170918 22:09:48.952"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.954" starttime="20170918 22:09:48.951"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:48.954" starttime="20170918 22:09:48.951"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:48.954">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:48.954" starttime="20170918 22:09:48.954"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.954">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.954" starttime="20170918 22:09:48.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:48.955" starttime="20170918 22:09:48.955"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.956">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:48.956">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:48.956">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:48.956" starttime="20170918 22:09:48.955"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.956">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:09:48.956" starttime="20170918 22:09:48.533"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:48.956">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:09:48.956" starttime="20170918 22:09:48.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:09:48.957" starttime="20170918 22:09:48.957"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:48.961">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:48.962" starttime="20170918 22:09:48.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.962">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:48.962" starttime="20170918 22:09:48.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.963">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:48.963" starttime="20170918 22:09:48.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:48.964">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:48.964" starttime="20170918 22:09:48.963"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:09:49.348" starttime="20170918 22:09:48.964"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:49.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:09:49.349">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.349" starttime="20170918 22:09:48.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.350" starttime="20170918 22:09:49.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.350" starttime="20170918 22:09:49.350"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.350" starttime="20170918 22:09:48.960"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.351" starttime="20170918 22:09:48.960"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.351" starttime="20170918 22:09:48.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:49.351">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:09:49.351" starttime="20170918 22:09:49.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:49.353">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:49.353" starttime="20170918 22:09:49.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.354">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:09:49.354" starttime="20170918 22:09:49.354"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.355" starttime="20170918 22:09:49.354"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.355" starttime="20170918 22:09:49.352"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.355" starttime="20170918 22:09:49.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:49.570">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:09:49.570">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.570" starttime="20170918 22:09:49.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:49.572">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:49.572" starttime="20170918 22:09:49.572"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.573">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:09:49.574" starttime="20170918 22:09:49.573"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.574" starttime="20170918 22:09:49.573"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.574" starttime="20170918 22:09:49.571"></status>
</kw>
<status status="PASS" endtime="20170918 22:09:49.574" starttime="20170918 22:09:49.571"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:09:49.574">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:09:49.575" starttime="20170918 22:09:49.574"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:49.575">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.575" starttime="20170918 22:09:48.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:09:49.576" starttime="20170918 22:09:49.575"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:49.577">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:09:49.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:09:49.577">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:09:49.577" starttime="20170918 22:09:49.576"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:49.577">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:49.577" starttime="20170918 22:09:48.958"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:09:49.577">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:09:49.577" starttime="20170918 22:09:48.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:49.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:09:49.578">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:09:49.578" starttime="20170918 22:09:49.578"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:49.578" starttime="20170918 22:09:48.957"></status>
</kw>
<status status="FAIL" endtime="20170918 22:09:49.578" starttime="20170918 22:09:48.117"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:09:59.584">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:09:59.585" starttime="20170918 22:09:59.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:59.586">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:09:59.586" starttime="20170918 22:09:59.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:59.586">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:09:59.586" starttime="20170918 22:09:59.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:09:59.587">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:09:59.587" starttime="20170918 22:09:59.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:01.345">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:01.345" starttime="20170918 22:09:59.588"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:01.345">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:01.345">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:01.345" starttime="20170918 22:09:59.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:01.346">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:01.346" starttime="20170918 22:10:01.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:01.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:01.347" starttime="20170918 22:10:01.346"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.347" starttime="20170918 22:09:59.583"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.347" starttime="20170918 22:09:59.582"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.347" starttime="20170918 22:09:59.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:01.348">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:10:01.348" starttime="20170918 22:10:01.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:01.350">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:01.350" starttime="20170918 22:10:01.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:01.351">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:01.351" starttime="20170918 22:10:01.351"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.351" starttime="20170918 22:10:01.350"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.351" starttime="20170918 22:10:01.349"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:01.351" starttime="20170918 22:10:01.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:05.419">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:05.419">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:05.419" starttime="20170918 22:10:01.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:05.422">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:05.422" starttime="20170918 22:10:05.421"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:05.422">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:05.423" starttime="20170918 22:10:05.422"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:05.423" starttime="20170918 22:10:05.422"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:05.423" starttime="20170918 22:10:05.420"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:05.423" starttime="20170918 22:10:05.419"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:05.423">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:05.423" starttime="20170918 22:10:05.423"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:05.424">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:05.424" starttime="20170918 22:09:59.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:05.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:05.424" starttime="20170918 22:10:05.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:05.425">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:05.425">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:05.425">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:05.425" starttime="20170918 22:10:05.425"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:05.425">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170918 22:10:05.425" starttime="20170918 22:09:59.581"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:05.426">${power_state} = Off</msg>
<status status="PASS" endtime="20170918 22:10:05.426" starttime="20170918 22:09:59.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:10:05.427">On != Off</msg>
<status status="FAIL" endtime="20170918 22:10:05.427" starttime="20170918 22:10:05.426"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:05.427" starttime="20170918 22:09:59.580"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:05.427" starttime="20170918 22:09:59.579"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:15.432">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:15.433" starttime="20170918 22:10:15.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:15.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:15.434" starttime="20170918 22:10:15.433"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:15.434">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:15.434" starttime="20170918 22:10:15.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:15.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:15.435" starttime="20170918 22:10:15.434"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:15.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:15.866" starttime="20170918 22:10:15.435"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:15.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:15.866">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:15.866" starttime="20170918 22:10:15.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:15.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:15.867" starttime="20170918 22:10:15.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:15.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:15.867" starttime="20170918 22:10:15.867"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.868" starttime="20170918 22:10:15.432"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.868" starttime="20170918 22:10:15.431"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.868" starttime="20170918 22:10:15.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:15.868">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:10:15.868" starttime="20170918 22:10:15.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:15.871">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:15.871" starttime="20170918 22:10:15.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:15.872">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:15.872" starttime="20170918 22:10:15.872"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.873" starttime="20170918 22:10:15.871"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.873" starttime="20170918 22:10:15.869"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:15.873" starttime="20170918 22:10:15.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:16.300">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.301" starttime="20170918 22:10:15.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.303">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:16.303" starttime="20170918 22:10:16.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.304">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:16.304" starttime="20170918 22:10:16.303"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.304" starttime="20170918 22:10:16.303"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.304" starttime="20170918 22:10:16.302"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.304" starttime="20170918 22:10:16.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:16.305">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:16.305" starttime="20170918 22:10:16.304"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:16.305">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.305" starttime="20170918 22:10:15.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.306" starttime="20170918 22:10:16.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.306">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:16.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:16.306">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:16.306" starttime="20170918 22:10:16.306"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:16.307">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:10:16.307" starttime="20170918 22:10:15.429"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:16.307">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:10:16.307" starttime="20170918 22:10:15.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:16.307" starttime="20170918 22:10:16.307"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.308" starttime="20170918 22:10:15.428"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.312">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:16.312" starttime="20170918 22:10:16.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.313">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:16.313" starttime="20170918 22:10:16.313"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.314">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:16.314" starttime="20170918 22:10:16.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.315">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:16.315" starttime="20170918 22:10:16.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:16.920" starttime="20170918 22:10:16.315"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:16.920">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:16.921">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.921" starttime="20170918 22:10:16.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.921" starttime="20170918 22:10:16.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:16.922" starttime="20170918 22:10:16.922"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.922" starttime="20170918 22:10:16.311"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.922" starttime="20170918 22:10:16.310"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.923" starttime="20170918 22:10:16.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.923">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:10:16.923" starttime="20170918 22:10:16.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:16.925">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:16.925" starttime="20170918 22:10:16.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:16.926">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:16.926" starttime="20170918 22:10:16.926"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.926" starttime="20170918 22:10:16.925"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.927" starttime="20170918 22:10:16.924"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:16.927" starttime="20170918 22:10:16.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:17.444">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.444" starttime="20170918 22:10:16.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:17.446" starttime="20170918 22:10:17.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.447">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:17.447" starttime="20170918 22:10:17.447"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.448" starttime="20170918 22:10:17.447"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.448" starttime="20170918 22:10:17.445"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.448" starttime="20170918 22:10:17.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:17.448">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:17.448" starttime="20170918 22:10:17.448"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.448">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.448" starttime="20170918 22:10:16.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.449" starttime="20170918 22:10:17.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.450">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:17.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:17.450">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:17.450" starttime="20170918 22:10:17.449"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.450">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:10:17.450" starttime="20170918 22:10:16.308"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.451">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:10:17.451" starttime="20170918 22:10:16.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:17.451" starttime="20170918 22:10:17.451"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.455">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:17.456" starttime="20170918 22:10:17.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.456">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:17.456" starttime="20170918 22:10:17.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.457">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:17.457" starttime="20170918 22:10:17.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:17.458" starttime="20170918 22:10:17.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:17.794" starttime="20170918 22:10:17.462"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.794">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:17.794">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.794" starttime="20170918 22:10:17.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.795" starttime="20170918 22:10:17.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.796" starttime="20170918 22:10:17.795"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.796" starttime="20170918 22:10:17.455"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.796" starttime="20170918 22:10:17.454"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.796" starttime="20170918 22:10:17.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.797">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:10:17.797" starttime="20170918 22:10:17.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.800">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:17.800" starttime="20170918 22:10:17.798"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.801">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:17.801" starttime="20170918 22:10:17.801"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.801" starttime="20170918 22:10:17.800"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.802" starttime="20170918 22:10:17.798"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.802" starttime="20170918 22:10:17.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:17.929">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.929" starttime="20170918 22:10:17.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.932">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:17.932" starttime="20170918 22:10:17.932"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.933">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:17.933" starttime="20170918 22:10:17.933"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.934" starttime="20170918 22:10:17.933"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.934" starttime="20170918 22:10:17.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:17.934" starttime="20170918 22:10:17.931"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:17.934">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:17.934" starttime="20170918 22:10:17.934"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.934" starttime="20170918 22:10:17.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:17.935" starttime="20170918 22:10:17.935"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:17.936">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:17.936">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:17.936">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:17.936" starttime="20170918 22:10:17.935"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.936">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:10:17.936" starttime="20170918 22:10:17.452"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:17.936">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:10:17.936" starttime="20170918 22:10:17.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:17.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:10:17.937">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20170918 22:10:17.937" starttime="20170918 22:10:17.937"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:17.937" starttime="20170918 22:10:17.451"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:17.938" starttime="20170918 22:10:15.428"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:27.943">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:27.943" starttime="20170918 22:10:27.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:27.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:27.944" starttime="20170918 22:10:27.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:27.945">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:27.945" starttime="20170918 22:10:27.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:27.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:27.945" starttime="20170918 22:10:27.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:28.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:28.348" starttime="20170918 22:10:27.946"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:28.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:28.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:28.348" starttime="20170918 22:10:27.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:28.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:28.349" starttime="20170918 22:10:28.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:28.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:28.350" starttime="20170918 22:10:28.349"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.350" starttime="20170918 22:10:27.942"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.350" starttime="20170918 22:10:27.941"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.350" starttime="20170918 22:10:27.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:28.351">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:10:28.351" starttime="20170918 22:10:28.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:28.353">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:28.353" starttime="20170918 22:10:28.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:28.354">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:28.354" starttime="20170918 22:10:28.354"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.354" starttime="20170918 22:10:28.353"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.354" starttime="20170918 22:10:28.352"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:28.354" starttime="20170918 22:10:28.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.155">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:29.155">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.156" starttime="20170918 22:10:28.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.157">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:29.158" starttime="20170918 22:10:29.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.159">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:29.159" starttime="20170918 22:10:29.158"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.159" starttime="20170918 22:10:29.158"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.159" starttime="20170918 22:10:29.156"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.159" starttime="20170918 22:10:29.156"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:29.160">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:29.160" starttime="20170918 22:10:29.160"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:29.160">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.160" starttime="20170918 22:10:27.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.161" starttime="20170918 22:10:29.161"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.162">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:29.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:29.162">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:29.162" starttime="20170918 22:10:29.161"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:29.162">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:10:29.162" starttime="20170918 22:10:27.940"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:29.162">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:10:29.162" starttime="20170918 22:10:27.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:29.163" starttime="20170918 22:10:29.163"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.163" starttime="20170918 22:10:27.939"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.167">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:29.168" starttime="20170918 22:10:29.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:29.168" starttime="20170918 22:10:29.168"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.169">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:29.169" starttime="20170918 22:10:29.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.170">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:29.170" starttime="20170918 22:10:29.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:29.664" starttime="20170918 22:10:29.171"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:29.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:29.665">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.665" starttime="20170918 22:10:29.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.665" starttime="20170918 22:10:29.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:29.666" starttime="20170918 22:10:29.666"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.666" starttime="20170918 22:10:29.166"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.666" starttime="20170918 22:10:29.165"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.666" starttime="20170918 22:10:29.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.667">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:10:29.667" starttime="20170918 22:10:29.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:29.669">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:29.669" starttime="20170918 22:10:29.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:29.670">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:29.670" starttime="20170918 22:10:29.670"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.670" starttime="20170918 22:10:29.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.671" starttime="20170918 22:10:29.668"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:29.671" starttime="20170918 22:10:29.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:30.407">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.407" starttime="20170918 22:10:29.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.409">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:30.409" starttime="20170918 22:10:30.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.410">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:30.410" starttime="20170918 22:10:30.409"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.410" starttime="20170918 22:10:30.409"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.410" starttime="20170918 22:10:30.408"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.410" starttime="20170918 22:10:30.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:30.410">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:30.411" starttime="20170918 22:10:30.410"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:30.411">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.411" starttime="20170918 22:10:29.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.412" starttime="20170918 22:10:30.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.412">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:30.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:30.412">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:30.412" starttime="20170918 22:10:30.412"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:30.412">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:10:30.413" starttime="20170918 22:10:29.164"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:30.413">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:10:30.413" starttime="20170918 22:10:29.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:30.413" starttime="20170918 22:10:30.413"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.418">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:30.419" starttime="20170918 22:10:30.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:30.420" starttime="20170918 22:10:30.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.421">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:30.421" starttime="20170918 22:10:30.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:30.422" starttime="20170918 22:10:30.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:30.792" starttime="20170918 22:10:30.423"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:30.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:30.792">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.792" starttime="20170918 22:10:30.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.793" starttime="20170918 22:10:30.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:30.794" starttime="20170918 22:10:30.793"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.794" starttime="20170918 22:10:30.417"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.794" starttime="20170918 22:10:30.417"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.794" starttime="20170918 22:10:30.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.795">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:10:30.795" starttime="20170918 22:10:30.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:30.797">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:30.797" starttime="20170918 22:10:30.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:30.801">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:30.801" starttime="20170918 22:10:30.798"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.801" starttime="20170918 22:10:30.797"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.801" starttime="20170918 22:10:30.796"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:30.802" starttime="20170918 22:10:30.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:31.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:31.288">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:31.288" starttime="20170918 22:10:30.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:31.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:31.291" starttime="20170918 22:10:31.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:31.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:31.292" starttime="20170918 22:10:31.291"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:31.292" starttime="20170918 22:10:31.291"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:31.292" starttime="20170918 22:10:31.289"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:31.292" starttime="20170918 22:10:31.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:31.292">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:31.292" starttime="20170918 22:10:31.292"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:31.292">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:31.293" starttime="20170918 22:10:30.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:31.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:31.293" starttime="20170918 22:10:31.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:31.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:31.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:31.294">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:31.294" starttime="20170918 22:10:31.293"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:31.294">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:31.294" starttime="20170918 22:10:30.414"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:31.294">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:31.294" starttime="20170918 22:10:30.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:31.295">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:10:31.295">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:10:31.295" starttime="20170918 22:10:31.295"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:31.295" starttime="20170918 22:10:30.414"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:31.296" starttime="20170918 22:10:27.938"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:41.301" starttime="20170918 22:10:41.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:41.302" starttime="20170918 22:10:41.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:41.303" starttime="20170918 22:10:41.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:41.303" starttime="20170918 22:10:41.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.721">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:41.721" starttime="20170918 22:10:41.304"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:41.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:41.721">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.721" starttime="20170918 22:10:41.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.722" starttime="20170918 22:10:41.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.723">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.723" starttime="20170918 22:10:41.722"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.723" starttime="20170918 22:10:41.300"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.723" starttime="20170918 22:10:41.299"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.723" starttime="20170918 22:10:41.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.724">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:10:41.724" starttime="20170918 22:10:41.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.726">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:41.726" starttime="20170918 22:10:41.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.727">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:41.727" starttime="20170918 22:10:41.727"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.727" starttime="20170918 22:10:41.726"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.727" starttime="20170918 22:10:41.724"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.727" starttime="20170918 22:10:41.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:41.963">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.963" starttime="20170918 22:10:41.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:41.965" starttime="20170918 22:10:41.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:41.966" starttime="20170918 22:10:41.966"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.966" starttime="20170918 22:10:41.965"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.966" starttime="20170918 22:10:41.964"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.966" starttime="20170918 22:10:41.964"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:41.967">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:41.967" starttime="20170918 22:10:41.967"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:41.967">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.967" starttime="20170918 22:10:41.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:41.968" starttime="20170918 22:10:41.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:41.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:41.969">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:41.969" starttime="20170918 22:10:41.968"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:41.969">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:10:41.969" starttime="20170918 22:10:41.298"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:41.969">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:10:41.969" starttime="20170918 22:10:41.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:41.970" starttime="20170918 22:10:41.970"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:41.970" starttime="20170918 22:10:41.297"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:41.974">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:41.974" starttime="20170918 22:10:41.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.975">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:41.975" starttime="20170918 22:10:41.975"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.976">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:41.976" starttime="20170918 22:10:41.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:41.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:41.977" starttime="20170918 22:10:41.976"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:42.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:42.434" starttime="20170918 22:10:41.978"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:42.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:42.435">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:42.435" starttime="20170918 22:10:41.977"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:42.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:42.436" starttime="20170918 22:10:42.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:42.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:42.436" starttime="20170918 22:10:42.436"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.436" starttime="20170918 22:10:41.973"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.436" starttime="20170918 22:10:41.972"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.437" starttime="20170918 22:10:41.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:42.437">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:10:42.437" starttime="20170918 22:10:42.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:42.439">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:42.439" starttime="20170918 22:10:42.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:42.441">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:42.441" starttime="20170918 22:10:42.441"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.441" starttime="20170918 22:10:42.440"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.441" starttime="20170918 22:10:42.438"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:42.441" starttime="20170918 22:10:42.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:43.192">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.192" starttime="20170918 22:10:42.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.194">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:43.194" starttime="20170918 22:10:43.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.195">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:43.195" starttime="20170918 22:10:43.195"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.196" starttime="20170918 22:10:43.194"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.196" starttime="20170918 22:10:43.193"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.196" starttime="20170918 22:10:43.193"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:43.196">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:43.196" starttime="20170918 22:10:43.196"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:43.196">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.196" starttime="20170918 22:10:41.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.197" starttime="20170918 22:10:43.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.198">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:43.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:43.198">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:43.198" starttime="20170918 22:10:43.198"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:43.198">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:10:43.199" starttime="20170918 22:10:41.971"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:43.199">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:10:43.199" starttime="20170918 22:10:41.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:43.199" starttime="20170918 22:10:43.199"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.204">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:43.205" starttime="20170918 22:10:43.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:43.205" starttime="20170918 22:10:43.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.206">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:43.206" starttime="20170918 22:10:43.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:43.206" starttime="20170918 22:10:43.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:43.654" starttime="20170918 22:10:43.207"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:43.654">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:43.655">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.655" starttime="20170918 22:10:43.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.655">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.655" starttime="20170918 22:10:43.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:43.656" starttime="20170918 22:10:43.656"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.656" starttime="20170918 22:10:43.203"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.656" starttime="20170918 22:10:43.203"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.656" starttime="20170918 22:10:43.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.657">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:10:43.657" starttime="20170918 22:10:43.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:43.659">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:43.659" starttime="20170918 22:10:43.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:43.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:43.661" starttime="20170918 22:10:43.660"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.661" starttime="20170918 22:10:43.660"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.661" starttime="20170918 22:10:43.658"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:43.661" starttime="20170918 22:10:43.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:44.214">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:44.214">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:44.214" starttime="20170918 22:10:43.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:44.216">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:44.216" starttime="20170918 22:10:44.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:44.217">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:44.217" starttime="20170918 22:10:44.217"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:44.217" starttime="20170918 22:10:44.216"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:44.217" starttime="20170918 22:10:44.215"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:44.217" starttime="20170918 22:10:44.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:44.218">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:44.218" starttime="20170918 22:10:44.218"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:44.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:44.218" starttime="20170918 22:10:43.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:44.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:44.219" starttime="20170918 22:10:44.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:44.219">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:44.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:44.219">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:44.219" starttime="20170918 22:10:44.219"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:44.220">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:44.220" starttime="20170918 22:10:43.201"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:44.220">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:44.220" starttime="20170918 22:10:43.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:44.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:10:44.221">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:10:44.221" starttime="20170918 22:10:44.220"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:44.221" starttime="20170918 22:10:43.200"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:44.221" starttime="20170918 22:10:41.296"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:54.227">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:54.227" starttime="20170918 22:10:54.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:54.228">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:54.228" starttime="20170918 22:10:54.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:54.228">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:54.228" starttime="20170918 22:10:54.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:54.229">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:54.229" starttime="20170918 22:10:54.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:54.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:54.642" starttime="20170918 22:10:54.230"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:54.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:54.642">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:54.642" starttime="20170918 22:10:54.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:54.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:54.643" starttime="20170918 22:10:54.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:54.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:54.644" starttime="20170918 22:10:54.643"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.644" starttime="20170918 22:10:54.226"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.644" starttime="20170918 22:10:54.225"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.644" starttime="20170918 22:10:54.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:54.645">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:10:54.645" starttime="20170918 22:10:54.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:54.647">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:54.647" starttime="20170918 22:10:54.646"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:54.648">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:54.648" starttime="20170918 22:10:54.648"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.648" starttime="20170918 22:10:54.647"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.648" starttime="20170918 22:10:54.646"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:54.648" starttime="20170918 22:10:54.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:55.461">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.461" starttime="20170918 22:10:54.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:55.464" starttime="20170918 22:10:55.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:55.465" starttime="20170918 22:10:55.464"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.465" starttime="20170918 22:10:55.464"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.465" starttime="20170918 22:10:55.462"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.465" starttime="20170918 22:10:55.462"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:55.465">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:55.465" starttime="20170918 22:10:55.465"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:55.466">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.466" starttime="20170918 22:10:54.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.466" starttime="20170918 22:10:55.466"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.467">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:55.467">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:55.467">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:55.467" starttime="20170918 22:10:55.466"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:55.467">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:10:55.467" starttime="20170918 22:10:54.223"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:55.468">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:10:55.468" starttime="20170918 22:10:54.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:55.468" starttime="20170918 22:10:55.468"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.468" starttime="20170918 22:10:54.222"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.472">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:55.473" starttime="20170918 22:10:55.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:55.473" starttime="20170918 22:10:55.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.474">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:55.474" starttime="20170918 22:10:55.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.475">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:55.475" starttime="20170918 22:10:55.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:55.733" starttime="20170918 22:10:55.475"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:55.733">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:55.733">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.733" starttime="20170918 22:10:55.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.734">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.734" starttime="20170918 22:10:55.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:55.735" starttime="20170918 22:10:55.734"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.735" starttime="20170918 22:10:55.471"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.735" starttime="20170918 22:10:55.471"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.735" starttime="20170918 22:10:55.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.736">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:10:55.736" starttime="20170918 22:10:55.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:55.738">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:55.738" starttime="20170918 22:10:55.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:55.740">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:55.740" starttime="20170918 22:10:55.739"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.740" starttime="20170918 22:10:55.739"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.740" starttime="20170918 22:10:55.737"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:55.740" starttime="20170918 22:10:55.736"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.598">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:56.599">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:56.599" starttime="20170918 22:10:55.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.601">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:56.601" starttime="20170918 22:10:56.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:56.602">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:56.602" starttime="20170918 22:10:56.601"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:56.602" starttime="20170918 22:10:56.601"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:56.602" starttime="20170918 22:10:56.600"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:56.602" starttime="20170918 22:10:56.599"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:56.603">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:56.603" starttime="20170918 22:10:56.602"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:56.603">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:56.603" starttime="20170918 22:10:55.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:56.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:56.604" starttime="20170918 22:10:56.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.604">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:56.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:56.604">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:56.605" starttime="20170918 22:10:56.604"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:56.605">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:10:56.605" starttime="20170918 22:10:55.469"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:56.605">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:10:56.605" starttime="20170918 22:10:55.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:10:56.606" starttime="20170918 22:10:56.605"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:56.610">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:10:56.611" starttime="20170918 22:10:56.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:10:56.611" starttime="20170918 22:10:56.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.612">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:10:56.612" starttime="20170918 22:10:56.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:56.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:10:56.613" starttime="20170918 22:10:56.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:10:57.155" starttime="20170918 22:10:56.613"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:57.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:10:57.155">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.155" starttime="20170918 22:10:56.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.156">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.156" starttime="20170918 22:10:57.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.156" starttime="20170918 22:10:57.156"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.156" starttime="20170918 22:10:56.609"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.157" starttime="20170918 22:10:56.609"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.157" starttime="20170918 22:10:56.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:57.157">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:10:57.157" starttime="20170918 22:10:57.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:57.161">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:57.161" starttime="20170918 22:10:57.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.162">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:10:57.163" starttime="20170918 22:10:57.162"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.163" starttime="20170918 22:10:57.161"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.163" starttime="20170918 22:10:57.158"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.163" starttime="20170918 22:10:57.158"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:57.934">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:10:57.935">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.935" starttime="20170918 22:10:57.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:57.937">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:57.937" starttime="20170918 22:10:57.936"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.938">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:10:57.938" starttime="20170918 22:10:57.938"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.938" starttime="20170918 22:10:57.937"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.938" starttime="20170918 22:10:57.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:10:57.938" starttime="20170918 22:10:57.935"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:10:57.939">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:10:57.939" starttime="20170918 22:10:57.938"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:57.939">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.939" starttime="20170918 22:10:56.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:10:57.940" starttime="20170918 22:10:57.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:10:57.941">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:10:57.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:10:57.941">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:10:57.941" starttime="20170918 22:10:57.940"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:57.941">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:57.941" starttime="20170918 22:10:56.607"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:10:57.941">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:10:57.941" starttime="20170918 22:10:56.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:10:57.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:10:57.942">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:10:57.942" starttime="20170918 22:10:57.942"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:57.942" starttime="20170918 22:10:56.606"></status>
</kw>
<status status="FAIL" endtime="20170918 22:10:57.943" starttime="20170918 22:10:54.222"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:07.949">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:07.949" starttime="20170918 22:11:07.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:07.950">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:07.950" starttime="20170918 22:11:07.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:07.950">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:07.950" starttime="20170918 22:11:07.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:07.951">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:07.951" starttime="20170918 22:11:07.951"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:08.398" starttime="20170918 22:11:07.952"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:08.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:08.399">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.399" starttime="20170918 22:11:07.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.399" starttime="20170918 22:11:08.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.400" starttime="20170918 22:11:08.400"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.400" starttime="20170918 22:11:07.948"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.400" starttime="20170918 22:11:07.947"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.401" starttime="20170918 22:11:07.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.401">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:11:08.401" starttime="20170918 22:11:08.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.403">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:08.403" starttime="20170918 22:11:08.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.404">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:08.404" starttime="20170918 22:11:08.404"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.404" starttime="20170918 22:11:08.403"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.405" starttime="20170918 22:11:08.402"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.405" starttime="20170918 22:11:08.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.609">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:08.609">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.609" starttime="20170918 22:11:08.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.611">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:08.611" starttime="20170918 22:11:08.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.612">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:08.612" starttime="20170918 22:11:08.612"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.612" starttime="20170918 22:11:08.611"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.612" starttime="20170918 22:11:08.610"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.612" starttime="20170918 22:11:08.609"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:08.613">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:08.613" starttime="20170918 22:11:08.613"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:08.613">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.613" starttime="20170918 22:11:07.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:08.614" starttime="20170918 22:11:08.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.614">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:08.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:08.614">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:08.615" starttime="20170918 22:11:08.614"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:08.615">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:11:08.615" starttime="20170918 22:11:07.945"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:08.615">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:11:08.615" starttime="20170918 22:11:07.944"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:08.616" starttime="20170918 22:11:08.616"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:08.616" starttime="20170918 22:11:07.944"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:08.622">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:08.623" starttime="20170918 22:11:08.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:08.623" starttime="20170918 22:11:08.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.624">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:08.624" starttime="20170918 22:11:08.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:08.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:08.625" starttime="20170918 22:11:08.625"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:09.041" starttime="20170918 22:11:08.626"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:09.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:09.042">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.042" starttime="20170918 22:11:08.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.043" starttime="20170918 22:11:09.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.043" starttime="20170918 22:11:09.043"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.043" starttime="20170918 22:11:08.620"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.043" starttime="20170918 22:11:08.620"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.044" starttime="20170918 22:11:08.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.044">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:11:09.044" starttime="20170918 22:11:09.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.046">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:09.046" starttime="20170918 22:11:09.046"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.047">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:09.047" starttime="20170918 22:11:09.047"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.047" starttime="20170918 22:11:09.046"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.048" starttime="20170918 22:11:09.045"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.048" starttime="20170918 22:11:09.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.890">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:09.890">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.890" starttime="20170918 22:11:09.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.892">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:09.892" starttime="20170918 22:11:09.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.893">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:09.893" starttime="20170918 22:11:09.893"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.893" starttime="20170918 22:11:09.892"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.893" starttime="20170918 22:11:09.891"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:09.893" starttime="20170918 22:11:09.890"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:09.894">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:09.894" starttime="20170918 22:11:09.893"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:09.894">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.894" starttime="20170918 22:11:08.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:09.895" starttime="20170918 22:11:09.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:09.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:09.895">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:09.895" starttime="20170918 22:11:09.895"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:09.896">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:11:09.896" starttime="20170918 22:11:08.617"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:09.896">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:11:09.896" starttime="20170918 22:11:08.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:09.897" starttime="20170918 22:11:09.896"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:09.901">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:09.901" starttime="20170918 22:11:09.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:09.902" starttime="20170918 22:11:09.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.903">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:09.903" starttime="20170918 22:11:09.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:09.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:09.903" starttime="20170918 22:11:09.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:10.241" starttime="20170918 22:11:09.904"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:10.242">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:10.242">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.242" starttime="20170918 22:11:09.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.242" starttime="20170918 22:11:10.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.243" starttime="20170918 22:11:10.243"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.243" starttime="20170918 22:11:09.900"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.243" starttime="20170918 22:11:09.900"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.244" starttime="20170918 22:11:09.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:10.244">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:11:10.244" starttime="20170918 22:11:10.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:10.250">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:10.250" starttime="20170918 22:11:10.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.251">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:10.251" starttime="20170918 22:11:10.251"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.251" starttime="20170918 22:11:10.250"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.252" starttime="20170918 22:11:10.245"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.252" starttime="20170918 22:11:10.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:10.927">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:10.928">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.928" starttime="20170918 22:11:10.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:10.930">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:10.930" starttime="20170918 22:11:10.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.931">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:10.931" starttime="20170918 22:11:10.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.931" starttime="20170918 22:11:10.930"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.931" starttime="20170918 22:11:10.929"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:10.931" starttime="20170918 22:11:10.928"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:10.932">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:10.932" starttime="20170918 22:11:10.932"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:10.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.932" starttime="20170918 22:11:09.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:10.933" starttime="20170918 22:11:10.932"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:10.933">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:10.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:10.933">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:10.933" starttime="20170918 22:11:10.933"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:10.934">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:10.934" starttime="20170918 22:11:09.898"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:10.934">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:10.934" starttime="20170918 22:11:09.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:10.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:11:10.935">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:11:10.935" starttime="20170918 22:11:10.934"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:10.935" starttime="20170918 22:11:09.897"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:10.935" starttime="20170918 22:11:07.943"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:20.945">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:20.946" starttime="20170918 22:11:20.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:20.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:20.947" starttime="20170918 22:11:20.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:20.949">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:20.949" starttime="20170918 22:11:20.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:20.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:20.950" starttime="20170918 22:11:20.950"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:21.326" starttime="20170918 22:11:20.951"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:21.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:21.326">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.326" starttime="20170918 22:11:20.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.327">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.327" starttime="20170918 22:11:21.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.328" starttime="20170918 22:11:21.327"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.328" starttime="20170918 22:11:20.943"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.328" starttime="20170918 22:11:20.942"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.328" starttime="20170918 22:11:20.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.329">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:11:21.329" starttime="20170918 22:11:21.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.332">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:21.332" starttime="20170918 22:11:21.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.333">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:21.333" starttime="20170918 22:11:21.333"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.333" starttime="20170918 22:11:21.332"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.334" starttime="20170918 22:11:21.330"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.334" starttime="20170918 22:11:21.329"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.650">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:21.650">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.651" starttime="20170918 22:11:21.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.653">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:21.653" starttime="20170918 22:11:21.652"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.654">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:21.655" starttime="20170918 22:11:21.654"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.655" starttime="20170918 22:11:21.653"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.655" starttime="20170918 22:11:21.652"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.655" starttime="20170918 22:11:21.651"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:21.655">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:21.655" starttime="20170918 22:11:21.655"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:21.656">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.656" starttime="20170918 22:11:20.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.656" starttime="20170918 22:11:21.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:21.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:21.657">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:21.657" starttime="20170918 22:11:21.657"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:21.657">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:11:21.657" starttime="20170918 22:11:20.940"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:21.658">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:11:21.658" starttime="20170918 22:11:20.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:21.658" starttime="20170918 22:11:21.658"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.658" starttime="20170918 22:11:20.939"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:21.663" starttime="20170918 22:11:21.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:21.664" starttime="20170918 22:11:21.663"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.664">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:21.664" starttime="20170918 22:11:21.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:21.665" starttime="20170918 22:11:21.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:21.979" starttime="20170918 22:11:21.666"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:21.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:21.979">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.979" starttime="20170918 22:11:21.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.980" starttime="20170918 22:11:21.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:21.981" starttime="20170918 22:11:21.981"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.981" starttime="20170918 22:11:21.662"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.981" starttime="20170918 22:11:21.661"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.981" starttime="20170918 22:11:21.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.982">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:11:21.982" starttime="20170918 22:11:21.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:21.984">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:21.985" starttime="20170918 22:11:21.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:21.985">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:21.986" starttime="20170918 22:11:21.985"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.986" starttime="20170918 22:11:21.985"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.986" starttime="20170918 22:11:21.983"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:21.986" starttime="20170918 22:11:21.982"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.763">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:22.764">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:22.764" starttime="20170918 22:11:21.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.765">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:22.765" starttime="20170918 22:11:22.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:22.767">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:22.767" starttime="20170918 22:11:22.767"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:22.767" starttime="20170918 22:11:22.766"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:22.767" starttime="20170918 22:11:22.764"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:22.767" starttime="20170918 22:11:22.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:22.768">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:22.768" starttime="20170918 22:11:22.767"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:22.768">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:22.768" starttime="20170918 22:11:21.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:22.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:22.769" starttime="20170918 22:11:22.768"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.769">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:22.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:22.769">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:22.769" starttime="20170918 22:11:22.769"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:22.770">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:11:22.770" starttime="20170918 22:11:21.659"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:22.770">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:11:22.770" starttime="20170918 22:11:21.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:22.771" starttime="20170918 22:11:22.770"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:22.774">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:22.775" starttime="20170918 22:11:22.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:22.776" starttime="20170918 22:11:22.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.776">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:22.776" starttime="20170918 22:11:22.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:22.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:22.777" starttime="20170918 22:11:22.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.130">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:23.130" starttime="20170918 22:11:22.778"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:23.130">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:23.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.130" starttime="20170918 22:11:22.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.131">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.131" starttime="20170918 22:11:23.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.132" starttime="20170918 22:11:23.131"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.132" starttime="20170918 22:11:22.774"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.132" starttime="20170918 22:11:22.773"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.132" starttime="20170918 22:11:22.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:23.133">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:11:23.133" starttime="20170918 22:11:23.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:23.135">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:23.135" starttime="20170918 22:11:23.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.136">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:23.136" starttime="20170918 22:11:23.136"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.136" starttime="20170918 22:11:23.135"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.136" starttime="20170918 22:11:23.134"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.136" starttime="20170918 22:11:23.133"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:23.730">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:23.731">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.731" starttime="20170918 22:11:23.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:23.733">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:23.733" starttime="20170918 22:11:23.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.734">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:23.734" starttime="20170918 22:11:23.733"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.734" starttime="20170918 22:11:23.733"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.734" starttime="20170918 22:11:23.732"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:23.734" starttime="20170918 22:11:23.731"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:23.735">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:23.735" starttime="20170918 22:11:23.734"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:23.735">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.735" starttime="20170918 22:11:22.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:23.736" starttime="20170918 22:11:23.735"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:23.736">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:23.736">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:23.736">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:23.736" starttime="20170918 22:11:23.736"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:23.737">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:23.737" starttime="20170918 22:11:22.771"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:23.737">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:23.737" starttime="20170918 22:11:22.771"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:23.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:11:23.738">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:11:23.738" starttime="20170918 22:11:23.737"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:23.738" starttime="20170918 22:11:22.771"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:23.738" starttime="20170918 22:11:20.936"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:33.744">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:33.745" starttime="20170918 22:11:33.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:33.745">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:33.745" starttime="20170918 22:11:33.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:33.746">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:33.746" starttime="20170918 22:11:33.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:33.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:33.746" starttime="20170918 22:11:33.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:34.097" starttime="20170918 22:11:33.747"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.097">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:34.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.097" starttime="20170918 22:11:33.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.097">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.098" starttime="20170918 22:11:34.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.099" starttime="20170918 22:11:34.098"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.099" starttime="20170918 22:11:33.743"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.099" starttime="20170918 22:11:33.742"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.099" starttime="20170918 22:11:33.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.099">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:11:34.099" starttime="20170918 22:11:34.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.102">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.102" starttime="20170918 22:11:34.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.103">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.103" starttime="20170918 22:11:34.102"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.103" starttime="20170918 22:11:34.102"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.103" starttime="20170918 22:11:34.100"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.103" starttime="20170918 22:11:34.100"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.245">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:34.245">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.245" starttime="20170918 22:11:34.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.247">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.247" starttime="20170918 22:11:34.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.248">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.249" starttime="20170918 22:11:34.248"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.249" starttime="20170918 22:11:34.247"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.249" starttime="20170918 22:11:34.246"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.249" starttime="20170918 22:11:34.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:34.249">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:34.249" starttime="20170918 22:11:34.249"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.250">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.250" starttime="20170918 22:11:33.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.250" starttime="20170918 22:11:34.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.251">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:34.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:34.251">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:34.251" starttime="20170918 22:11:34.251"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.251">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:11:34.251" starttime="20170918 22:11:33.740"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.252">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:11:34.252" starttime="20170918 22:11:33.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:34.252" starttime="20170918 22:11:34.252"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.252" starttime="20170918 22:11:33.739"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.256">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:34.256" starttime="20170918 22:11:34.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.257">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:34.257" starttime="20170918 22:11:34.257"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.258">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:34.258" starttime="20170918 22:11:34.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.258">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:34.258" starttime="20170918 22:11:34.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:34.465" starttime="20170918 22:11:34.259"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.465">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:34.465">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.465" starttime="20170918 22:11:34.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.466" starttime="20170918 22:11:34.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.467" starttime="20170918 22:11:34.466"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.467" starttime="20170918 22:11:34.255"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.467" starttime="20170918 22:11:34.255"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.467" starttime="20170918 22:11:34.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.468">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:11:34.468" starttime="20170918 22:11:34.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.470">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.470" starttime="20170918 22:11:34.469"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.471">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.471" starttime="20170918 22:11:34.471"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.471" starttime="20170918 22:11:34.470"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.471" starttime="20170918 22:11:34.468"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.472" starttime="20170918 22:11:34.468"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.601">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:34.601">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.601" starttime="20170918 22:11:34.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.603">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.603" starttime="20170918 22:11:34.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.604">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.604" starttime="20170918 22:11:34.604"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.604" starttime="20170918 22:11:34.603"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.604" starttime="20170918 22:11:34.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.604" starttime="20170918 22:11:34.601"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:34.605">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:34.605" starttime="20170918 22:11:34.604"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.605">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.605" starttime="20170918 22:11:34.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.606" starttime="20170918 22:11:34.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.606">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:34.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:34.606">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:34.606" starttime="20170918 22:11:34.606"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.607">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:11:34.607" starttime="20170918 22:11:34.253"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.607">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:11:34.607" starttime="20170918 22:11:34.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:34.608" starttime="20170918 22:11:34.607"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.612">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:34.613" starttime="20170918 22:11:34.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:34.614" starttime="20170918 22:11:34.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.615">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:34.615" starttime="20170918 22:11:34.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:34.616" starttime="20170918 22:11:34.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.823">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:34.823" starttime="20170918 22:11:34.617"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:34.824">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.824" starttime="20170918 22:11:34.616"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.824">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.824" starttime="20170918 22:11:34.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.825" starttime="20170918 22:11:34.825"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.825" starttime="20170918 22:11:34.611"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.825" starttime="20170918 22:11:34.610"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.825" starttime="20170918 22:11:34.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.826">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:11:34.826" starttime="20170918 22:11:34.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.828">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.828" starttime="20170918 22:11:34.827"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.829">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:34.829" starttime="20170918 22:11:34.829"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.829" starttime="20170918 22:11:34.828"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.829" starttime="20170918 22:11:34.827"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.829" starttime="20170918 22:11:34.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.949">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:34.949">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.949" starttime="20170918 22:11:34.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.951">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.951" starttime="20170918 22:11:34.951"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.952">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:34.952" starttime="20170918 22:11:34.952"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.952" starttime="20170918 22:11:34.951"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.953" starttime="20170918 22:11:34.950"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:34.953" starttime="20170918 22:11:34.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:34.953">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:34.953" starttime="20170918 22:11:34.953"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.953" starttime="20170918 22:11:34.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:34.954" starttime="20170918 22:11:34.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:34.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:34.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:34.955">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:34.955" starttime="20170918 22:11:34.954"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.955">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:34.955" starttime="20170918 22:11:34.608"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:34.955">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:34.955" starttime="20170918 22:11:34.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:34.956">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:11:34.956">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:11:34.956" starttime="20170918 22:11:34.956"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:34.956" starttime="20170918 22:11:34.608"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:34.957" starttime="20170918 22:11:33.739"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:44.962">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:44.963" starttime="20170918 22:11:44.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:44.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:44.963" starttime="20170918 22:11:44.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:44.964">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:44.964" starttime="20170918 22:11:44.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:44.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:44.965" starttime="20170918 22:11:44.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:45.393">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:45.394" starttime="20170918 22:11:44.965"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:45.394">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:45.394">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:45.394" starttime="20170918 22:11:44.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:45.394">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:45.395" starttime="20170918 22:11:45.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:45.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:45.395" starttime="20170918 22:11:45.395"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.395" starttime="20170918 22:11:44.961"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.396" starttime="20170918 22:11:44.960"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.396" starttime="20170918 22:11:44.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:45.396">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:11:45.396" starttime="20170918 22:11:45.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:45.398">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:45.398" starttime="20170918 22:11:45.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:45.399">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:45.400" starttime="20170918 22:11:45.399"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.400" starttime="20170918 22:11:45.399"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.400" starttime="20170918 22:11:45.397"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:45.400" starttime="20170918 22:11:45.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.595">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:49.595">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.595" starttime="20170918 22:11:45.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.598">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:49.598" starttime="20170918 22:11:49.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.599">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:49.599" starttime="20170918 22:11:49.598"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.599" starttime="20170918 22:11:49.598"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.599" starttime="20170918 22:11:49.596"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.599" starttime="20170918 22:11:49.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:49.599">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:49.600" starttime="20170918 22:11:49.599"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:49.600">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.600" starttime="20170918 22:11:44.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.601" starttime="20170918 22:11:49.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.601">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:49.601">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:49.601">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:49.601" starttime="20170918 22:11:49.601"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:49.602">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:11:49.602" starttime="20170918 22:11:44.959"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:49.602">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:11:49.602" starttime="20170918 22:11:44.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:49.602" starttime="20170918 22:11:49.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.603" starttime="20170918 22:11:44.958"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.606">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:49.607" starttime="20170918 22:11:49.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:49.607" starttime="20170918 22:11:49.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.608">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:49.608" starttime="20170918 22:11:49.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:49.609" starttime="20170918 22:11:49.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:49.953" starttime="20170918 22:11:49.609"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:49.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:49.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.953" starttime="20170918 22:11:49.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.954" starttime="20170918 22:11:49.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:49.954" starttime="20170918 22:11:49.954"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.954" starttime="20170918 22:11:49.605"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.954" starttime="20170918 22:11:49.605"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.955" starttime="20170918 22:11:49.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.955">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:11:49.955" starttime="20170918 22:11:49.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:49.958">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:49.958" starttime="20170918 22:11:49.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:49.959">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:49.959" starttime="20170918 22:11:49.958"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.959" starttime="20170918 22:11:49.958"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.959" starttime="20170918 22:11:49.956"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:49.959" starttime="20170918 22:11:49.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.273">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:50.273">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.273" starttime="20170918 22:11:49.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.275">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:50.275" starttime="20170918 22:11:50.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.276">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:50.276" starttime="20170918 22:11:50.276"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.276" starttime="20170918 22:11:50.275"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.276" starttime="20170918 22:11:50.274"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.277" starttime="20170918 22:11:50.274"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:50.277">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:50.277" starttime="20170918 22:11:50.277"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:50.277">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.277" starttime="20170918 22:11:49.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.278" starttime="20170918 22:11:50.277"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.279">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:50.279">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:50.279">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:50.279" starttime="20170918 22:11:50.278"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:50.279">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:11:50.279" starttime="20170918 22:11:49.603"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:50.279">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:11:50.279" starttime="20170918 22:11:49.603"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:11:50.280" starttime="20170918 22:11:50.280"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.284">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:11:50.284" starttime="20170918 22:11:50.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.285">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:11:50.285" starttime="20170918 22:11:50.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.285">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:11:50.286" starttime="20170918 22:11:50.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:11:50.289" starttime="20170918 22:11:50.286"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:11:50.930" starttime="20170918 22:11:50.290"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:50.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:11:50.930">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.931" starttime="20170918 22:11:50.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.931" starttime="20170918 22:11:50.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:50.932" starttime="20170918 22:11:50.932"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.932" starttime="20170918 22:11:50.283"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.932" starttime="20170918 22:11:50.283"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.932" starttime="20170918 22:11:50.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.933">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:11:50.933" starttime="20170918 22:11:50.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:50.935">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:50.935" starttime="20170918 22:11:50.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:50.936">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:11:50.936" starttime="20170918 22:11:50.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.937" starttime="20170918 22:11:50.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.937" starttime="20170918 22:11:50.934"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:50.937" starttime="20170918 22:11:50.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:51.083">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:11:51.083">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:51.083" starttime="20170918 22:11:50.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:51.085">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:51.085" starttime="20170918 22:11:51.084"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:51.086">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:11:51.086" starttime="20170918 22:11:51.085"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:51.086" starttime="20170918 22:11:51.085"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:51.086" starttime="20170918 22:11:51.084"></status>
</kw>
<status status="PASS" endtime="20170918 22:11:51.086" starttime="20170918 22:11:51.083"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:11:51.086">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:11:51.087" starttime="20170918 22:11:51.086"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:51.087">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:11:51.087" starttime="20170918 22:11:50.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:51.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:11:51.087" starttime="20170918 22:11:51.087"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:11:51.088">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:11:51.088">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:11:51.088">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:11:51.088" starttime="20170918 22:11:51.088"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:51.088">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:51.088" starttime="20170918 22:11:50.281"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:11:51.089">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:11:51.089" starttime="20170918 22:11:50.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:11:51.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:11:51.089">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:11:51.089" starttime="20170918 22:11:51.089"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:51.090" starttime="20170918 22:11:50.280"></status>
</kw>
<status status="FAIL" endtime="20170918 22:11:51.090" starttime="20170918 22:11:44.957"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:01.097">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:01.098" starttime="20170918 22:12:01.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:01.099">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:01.099" starttime="20170918 22:12:01.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:01.099">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:01.100" starttime="20170918 22:12:01.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:01.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:01.100" starttime="20170918 22:12:01.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:02.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:02.166" starttime="20170918 22:12:01.101"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:02.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:02.166">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:02.167" starttime="20170918 22:12:01.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:02.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:02.167" starttime="20170918 22:12:02.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:02.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:02.168" starttime="20170918 22:12:02.168"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.168" starttime="20170918 22:12:01.095"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.168" starttime="20170918 22:12:01.095"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.169" starttime="20170918 22:12:01.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:02.169">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:12:02.169" starttime="20170918 22:12:02.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:02.171">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:02.171" starttime="20170918 22:12:02.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:02.173">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:02.173" starttime="20170918 22:12:02.172"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.173" starttime="20170918 22:12:02.172"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.173" starttime="20170918 22:12:02.170"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:02.173" starttime="20170918 22:12:02.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:09.245">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:09.246">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:09.246" starttime="20170918 22:12:02.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:09.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:09.249" starttime="20170918 22:12:09.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:09.250">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:09.251" starttime="20170918 22:12:09.250"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:09.251" starttime="20170918 22:12:09.249"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:09.251" starttime="20170918 22:12:09.247"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:09.251" starttime="20170918 22:12:09.247"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:09.252">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:09.252" starttime="20170918 22:12:09.252"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:09.252">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:09.252" starttime="20170918 22:12:01.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:09.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:09.253" starttime="20170918 22:12:09.253"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:09.254">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:09.254">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:09.255">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:09.255" starttime="20170918 22:12:09.254"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:09.255">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170918 22:12:09.255" starttime="20170918 22:12:01.092"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:09.256">${power_state} = Off</msg>
<status status="PASS" endtime="20170918 22:12:09.256" starttime="20170918 22:12:01.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:12:09.257">On != Off</msg>
<status status="FAIL" endtime="20170918 22:12:09.257" starttime="20170918 22:12:09.257"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:09.257" starttime="20170918 22:12:01.091"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:09.257" starttime="20170918 22:12:01.090"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:19.263">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:19.264" starttime="20170918 22:12:19.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:19.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:19.265" starttime="20170918 22:12:19.264"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:19.265">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:19.265" starttime="20170918 22:12:19.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:19.266">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:19.266" starttime="20170918 22:12:19.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:19.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:19.518" starttime="20170918 22:12:19.267"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:19.518">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:19.518">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:19.518" starttime="20170918 22:12:19.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:19.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:19.519" starttime="20170918 22:12:19.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:19.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:19.520" starttime="20170918 22:12:19.520"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.520" starttime="20170918 22:12:19.262"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.520" starttime="20170918 22:12:19.261"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.520" starttime="20170918 22:12:19.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:19.521">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:12:19.521" starttime="20170918 22:12:19.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:19.523">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:19.523" starttime="20170918 22:12:19.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:19.524">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:19.524" starttime="20170918 22:12:19.524"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.524" starttime="20170918 22:12:19.523"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.524" starttime="20170918 22:12:19.522"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:19.525" starttime="20170918 22:12:19.521"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.345">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:20.346">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.346" starttime="20170918 22:12:19.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.348">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:20.348" starttime="20170918 22:12:20.347"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.349">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:20.349" starttime="20170918 22:12:20.348"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.349" starttime="20170918 22:12:20.348"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.349" starttime="20170918 22:12:20.347"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.349" starttime="20170918 22:12:20.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:20.349">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:20.349" starttime="20170918 22:12:20.349"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:20.350">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.350" starttime="20170918 22:12:19.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.350" starttime="20170918 22:12:20.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.351">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:20.351">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:20.351">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:20.351" starttime="20170918 22:12:20.351"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:20.352">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:12:20.352" starttime="20170918 22:12:19.259"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:20.352">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:12:20.352" starttime="20170918 22:12:19.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:20.353" starttime="20170918 22:12:20.353"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.353" starttime="20170918 22:12:19.258"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.357">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:20.358" starttime="20170918 22:12:20.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:20.359" starttime="20170918 22:12:20.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.359">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:20.359" starttime="20170918 22:12:20.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:20.360" starttime="20170918 22:12:20.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:20.675" starttime="20170918 22:12:20.361"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:20.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:20.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.676" starttime="20170918 22:12:20.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.676" starttime="20170918 22:12:20.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:20.677" starttime="20170918 22:12:20.677"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.677" starttime="20170918 22:12:20.356"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.677" starttime="20170918 22:12:20.356"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.677" starttime="20170918 22:12:20.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.678">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:12:20.678" starttime="20170918 22:12:20.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:20.681">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:20.681" starttime="20170918 22:12:20.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:20.682">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:20.682" starttime="20170918 22:12:20.682"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.683" starttime="20170918 22:12:20.681"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.683" starttime="20170918 22:12:20.679"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:20.683" starttime="20170918 22:12:20.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.578">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:21.578">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.578" starttime="20170918 22:12:20.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:21.581" starttime="20170918 22:12:21.580"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:21.582" starttime="20170918 22:12:21.581"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.582" starttime="20170918 22:12:21.581"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.582" starttime="20170918 22:12:21.580"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.582" starttime="20170918 22:12:21.579"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:21.582">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:21.583" starttime="20170918 22:12:21.582"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:21.583">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.583" starttime="20170918 22:12:20.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.584" starttime="20170918 22:12:21.583"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.584">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:21.585">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:21.585">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:21.585" starttime="20170918 22:12:21.584"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:21.585">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:12:21.585" starttime="20170918 22:12:20.354"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:21.586">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:12:21.586" starttime="20170918 22:12:20.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:21.586" starttime="20170918 22:12:21.586"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.593">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:21.593" starttime="20170918 22:12:21.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:21.594" starttime="20170918 22:12:21.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.595">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:21.595" starttime="20170918 22:12:21.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:21.596" starttime="20170918 22:12:21.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:21.951" starttime="20170918 22:12:21.597"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:21.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:21.951">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.951" starttime="20170918 22:12:21.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.952" starttime="20170918 22:12:21.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:21.953" starttime="20170918 22:12:21.952"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.953" starttime="20170918 22:12:21.591"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.953" starttime="20170918 22:12:21.591"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.953" starttime="20170918 22:12:21.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.954">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:12:21.954" starttime="20170918 22:12:21.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:21.956">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:21.956" starttime="20170918 22:12:21.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:21.957">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:21.958" starttime="20170918 22:12:21.957"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.958" starttime="20170918 22:12:21.956"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.958" starttime="20170918 22:12:21.955"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:21.958" starttime="20170918 22:12:21.954"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:22.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:22.262">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:22.262" starttime="20170918 22:12:21.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:22.264">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:22.264" starttime="20170918 22:12:22.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:22.265">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:22.265" starttime="20170918 22:12:22.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:22.265" starttime="20170918 22:12:22.264"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:22.265" starttime="20170918 22:12:22.263"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:22.265" starttime="20170918 22:12:22.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:22.266">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:22.266" starttime="20170918 22:12:22.266"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:22.266">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:22.266" starttime="20170918 22:12:21.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:22.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:22.267" starttime="20170918 22:12:22.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:22.267">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:22.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:22.267">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:22.267" starttime="20170918 22:12:22.267"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:22.268">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:12:22.268" starttime="20170918 22:12:21.588"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:22.268">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170918 22:12:22.268" starttime="20170918 22:12:21.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:22.269">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:12:22.269">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20170918 22:12:22.269" starttime="20170918 22:12:22.268"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:22.269" starttime="20170918 22:12:21.587"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:22.269" starttime="20170918 22:12:19.258"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:32.276">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:32.277" starttime="20170918 22:12:32.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:32.278">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:32.278" starttime="20170918 22:12:32.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:32.279">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:32.279" starttime="20170918 22:12:32.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:32.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:32.280" starttime="20170918 22:12:32.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:32.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:32.656" starttime="20170918 22:12:32.281"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:32.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:32.656">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:32.656" starttime="20170918 22:12:32.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:32.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:32.657" starttime="20170918 22:12:32.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:32.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:32.657" starttime="20170918 22:12:32.657"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.658" starttime="20170918 22:12:32.275"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.658" starttime="20170918 22:12:32.274"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.658" starttime="20170918 22:12:32.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:32.658">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:12:32.658" starttime="20170918 22:12:32.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:32.660">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:32.661" starttime="20170918 22:12:32.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:32.662">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:32.662" starttime="20170918 22:12:32.661"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.662" starttime="20170918 22:12:32.661"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.662" starttime="20170918 22:12:32.659"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:32.662" starttime="20170918 22:12:32.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.656">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:33.656">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:33.656" starttime="20170918 22:12:32.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.658">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:33.658" starttime="20170918 22:12:33.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:33.659">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:33.659" starttime="20170918 22:12:33.659"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:33.659" starttime="20170918 22:12:33.658"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:33.659" starttime="20170918 22:12:33.657"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:33.659" starttime="20170918 22:12:33.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:33.660">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:33.660" starttime="20170918 22:12:33.660"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:33.660">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:33.660" starttime="20170918 22:12:32.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:33.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:33.661" starttime="20170918 22:12:33.660"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.661">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:33.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:33.661">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:33.661" starttime="20170918 22:12:33.661"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:33.662">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:12:33.662" starttime="20170918 22:12:32.271"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:33.662">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:12:33.662" starttime="20170918 22:12:32.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:33.663" starttime="20170918 22:12:33.662"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:33.663" starttime="20170918 22:12:32.270"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:33.667">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:33.667" starttime="20170918 22:12:33.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:33.668" starttime="20170918 22:12:33.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.669">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:33.669" starttime="20170918 22:12:33.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:33.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:33.669" starttime="20170918 22:12:33.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:34.039" starttime="20170918 22:12:33.670"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:34.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:34.040">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.040" starttime="20170918 22:12:33.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.041" starttime="20170918 22:12:34.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.041" starttime="20170918 22:12:34.041"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.041" starttime="20170918 22:12:33.666"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.041" starttime="20170918 22:12:33.665"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.042" starttime="20170918 22:12:33.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.042">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:12:34.042" starttime="20170918 22:12:34.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.044">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:34.044" starttime="20170918 22:12:34.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.045">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:34.045" starttime="20170918 22:12:34.045"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.045" starttime="20170918 22:12:34.044"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.046" starttime="20170918 22:12:34.043"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.046" starttime="20170918 22:12:34.042"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:34.822">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.822" starttime="20170918 22:12:34.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.824">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:34.824" starttime="20170918 22:12:34.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.825">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:34.825" starttime="20170918 22:12:34.825"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.825" starttime="20170918 22:12:34.824"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.825" starttime="20170918 22:12:34.823"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:34.825" starttime="20170918 22:12:34.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:34.826">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:34.826" starttime="20170918 22:12:34.826"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:34.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.826" starttime="20170918 22:12:33.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:34.827" starttime="20170918 22:12:34.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:34.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:34.828">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:34.828" starttime="20170918 22:12:34.827"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:34.828">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:12:34.828" starttime="20170918 22:12:33.663"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:34.828">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:12:34.828" starttime="20170918 22:12:33.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:34.829" starttime="20170918 22:12:34.829"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:34.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:34.834" starttime="20170918 22:12:34.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:34.834" starttime="20170918 22:12:34.834"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.835">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:34.835" starttime="20170918 22:12:34.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:34.835">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:34.835" starttime="20170918 22:12:34.835"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:35.226" starttime="20170918 22:12:34.836"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:35.227">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:35.227">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.227" starttime="20170918 22:12:34.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.227" starttime="20170918 22:12:35.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.228" starttime="20170918 22:12:35.228"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.228" starttime="20170918 22:12:34.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.228" starttime="20170918 22:12:34.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.228" starttime="20170918 22:12:34.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:35.229">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:12:35.229" starttime="20170918 22:12:35.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:35.231">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:35.231" starttime="20170918 22:12:35.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.232">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:35.232" starttime="20170918 22:12:35.232"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.233" starttime="20170918 22:12:35.232"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.233" starttime="20170918 22:12:35.230"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.233" starttime="20170918 22:12:35.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:35.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:35.965">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.965" starttime="20170918 22:12:35.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:35.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:35.967" starttime="20170918 22:12:35.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:35.968" starttime="20170918 22:12:35.968"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.968" starttime="20170918 22:12:35.967"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.968" starttime="20170918 22:12:35.966"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:35.968" starttime="20170918 22:12:35.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:35.969">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:35.969" starttime="20170918 22:12:35.969"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:35.969">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.969" starttime="20170918 22:12:34.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:35.970" starttime="20170918 22:12:35.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:35.970">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:35.970">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:35.971">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:35.971" starttime="20170918 22:12:35.970"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:35.971">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:12:35.971" starttime="20170918 22:12:34.830"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:35.971">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:12:35.971" starttime="20170918 22:12:34.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:35.972">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:12:35.972">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:12:35.972" starttime="20170918 22:12:35.971"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:35.972" starttime="20170918 22:12:34.829"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:35.972" starttime="20170918 22:12:32.270"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:45.977">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:45.978" starttime="20170918 22:12:45.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:45.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:45.979" starttime="20170918 22:12:45.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:45.979">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:45.979" starttime="20170918 22:12:45.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:45.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:45.980" starttime="20170918 22:12:45.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:46.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:46.379" starttime="20170918 22:12:45.981"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:46.379">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:46.379">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:46.379" starttime="20170918 22:12:45.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:46.380">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:46.380" starttime="20170918 22:12:46.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:46.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:46.381" starttime="20170918 22:12:46.380"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.381" starttime="20170918 22:12:45.977"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.381" starttime="20170918 22:12:45.976"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.381" starttime="20170918 22:12:45.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:46.382">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:12:46.382" starttime="20170918 22:12:46.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:46.384">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:46.384" starttime="20170918 22:12:46.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:46.385">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:46.385" starttime="20170918 22:12:46.385"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.385" starttime="20170918 22:12:46.384"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.385" starttime="20170918 22:12:46.383"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:46.385" starttime="20170918 22:12:46.382"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.226">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:47.226">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.226" starttime="20170918 22:12:46.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.228">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:47.228" starttime="20170918 22:12:47.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.229">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:47.229" starttime="20170918 22:12:47.229"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.229" starttime="20170918 22:12:47.228"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.229" starttime="20170918 22:12:47.227"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.230" starttime="20170918 22:12:47.226"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:47.230">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:47.230" starttime="20170918 22:12:47.230"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:47.230">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.231" starttime="20170918 22:12:45.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.232" starttime="20170918 22:12:47.231"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.233">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:47.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:47.233">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:47.233" starttime="20170918 22:12:47.232"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:47.233">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:12:47.233" starttime="20170918 22:12:45.974"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:47.234">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:12:47.234" starttime="20170918 22:12:45.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:47.235" starttime="20170918 22:12:47.234"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.235" starttime="20170918 22:12:45.973"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:47.244" starttime="20170918 22:12:47.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:47.245" starttime="20170918 22:12:47.244"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.246">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:47.246" starttime="20170918 22:12:47.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:47.247" starttime="20170918 22:12:47.246"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.560">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:47.560" starttime="20170918 22:12:47.248"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:47.560">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:47.560">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.560" starttime="20170918 22:12:47.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.561">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.561" starttime="20170918 22:12:47.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:47.562" starttime="20170918 22:12:47.561"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.562" starttime="20170918 22:12:47.239"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.562" starttime="20170918 22:12:47.238"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.562" starttime="20170918 22:12:47.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.563">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:12:47.563" starttime="20170918 22:12:47.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:47.565">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:47.565" starttime="20170918 22:12:47.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:47.566">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:47.566" starttime="20170918 22:12:47.565"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.566" starttime="20170918 22:12:47.565"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.566" starttime="20170918 22:12:47.563"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:47.566" starttime="20170918 22:12:47.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.191">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:48.191">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.191" starttime="20170918 22:12:47.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.193">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:48.193" starttime="20170918 22:12:48.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.195">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:48.195" starttime="20170918 22:12:48.194"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.195" starttime="20170918 22:12:48.194"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.195" starttime="20170918 22:12:48.192"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.195" starttime="20170918 22:12:48.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:48.195">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:48.195" starttime="20170918 22:12:48.195"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:48.196">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.196" starttime="20170918 22:12:47.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.196" starttime="20170918 22:12:48.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.197">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:48.197">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:48.197">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:48.197" starttime="20170918 22:12:48.197"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:48.197">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:12:48.197" starttime="20170918 22:12:47.236"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:48.198">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:12:48.198" starttime="20170918 22:12:47.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:12:48.198" starttime="20170918 22:12:48.198"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.203">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:48.204" starttime="20170918 22:12:48.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:48.204" starttime="20170918 22:12:48.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.205">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:48.205" starttime="20170918 22:12:48.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:48.205" starttime="20170918 22:12:48.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.556">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:12:48.556" starttime="20170918 22:12:48.206"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:48.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:12:48.556">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.556" starttime="20170918 22:12:48.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.557" starttime="20170918 22:12:48.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:48.558" starttime="20170918 22:12:48.557"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.558" starttime="20170918 22:12:48.202"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.558" starttime="20170918 22:12:48.202"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.558" starttime="20170918 22:12:48.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.559">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:12:48.559" starttime="20170918 22:12:48.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:48.561">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:48.561" starttime="20170918 22:12:48.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:48.562">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:12:48.562" starttime="20170918 22:12:48.562"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.562" starttime="20170918 22:12:48.561"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.563" starttime="20170918 22:12:48.560"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:48.563" starttime="20170918 22:12:48.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:49.564">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:12:49.564">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:49.565" starttime="20170918 22:12:48.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:49.566">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:49.567" starttime="20170918 22:12:49.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:49.567">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:12:49.567" starttime="20170918 22:12:49.567"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:49.568" starttime="20170918 22:12:49.567"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:49.568" starttime="20170918 22:12:49.565"></status>
</kw>
<status status="PASS" endtime="20170918 22:12:49.568" starttime="20170918 22:12:49.565"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:12:49.568">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:12:49.568" starttime="20170918 22:12:49.568"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:49.568">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:12:49.569" starttime="20170918 22:12:48.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:49.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:12:49.569" starttime="20170918 22:12:49.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:49.570">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:12:49.570">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:12:49.570">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:12:49.570" starttime="20170918 22:12:49.569"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:49.570">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:12:49.570" starttime="20170918 22:12:48.199"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:12:49.570">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:12:49.570" starttime="20170918 22:12:48.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:49.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:12:49.571">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:12:49.571" starttime="20170918 22:12:49.571"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:49.571" starttime="20170918 22:12:48.198"></status>
</kw>
<status status="FAIL" endtime="20170918 22:12:49.572" starttime="20170918 22:12:45.973"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:12:59.577">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:12:59.577" starttime="20170918 22:12:59.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:59.578">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:12:59.578" starttime="20170918 22:12:59.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:59.578">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:12:59.578" starttime="20170918 22:12:59.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:12:59.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:12:59.579" starttime="20170918 22:12:59.579"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:00.025" starttime="20170918 22:12:59.580"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:00.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:00.025">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.025" starttime="20170918 22:12:59.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.026" starttime="20170918 22:13:00.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.027" starttime="20170918 22:13:00.026"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.027" starttime="20170918 22:12:59.576"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.027" starttime="20170918 22:12:59.575"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.027" starttime="20170918 22:12:59.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.028">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:00.028" starttime="20170918 22:13:00.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.030">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:00.030" starttime="20170918 22:13:00.030"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.031">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:00.031" starttime="20170918 22:13:00.031"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.032" starttime="20170918 22:13:00.031"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.032" starttime="20170918 22:13:00.029"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.032" starttime="20170918 22:13:00.028"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.906">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:00.906">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.906" starttime="20170918 22:13:00.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.908">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:00.908" starttime="20170918 22:13:00.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.909">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:00.909" starttime="20170918 22:13:00.909"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.909" starttime="20170918 22:13:00.908"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.909" starttime="20170918 22:13:00.907"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.909" starttime="20170918 22:13:00.906"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:00.910">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:00.910" starttime="20170918 22:13:00.910"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:00.910">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.910" starttime="20170918 22:12:59.574"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:00.911" starttime="20170918 22:13:00.911"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.912">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:00.912">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:00.912">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:00.912" starttime="20170918 22:13:00.911"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:00.912">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:13:00.912" starttime="20170918 22:12:59.573"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:00.913">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:13:00.913" starttime="20170918 22:12:59.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:00.913" starttime="20170918 22:13:00.913"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:00.913" starttime="20170918 22:12:59.573"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:00.918">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:00.918" starttime="20170918 22:13:00.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.919">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:00.919" starttime="20170918 22:13:00.919"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.920">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:00.920" starttime="20170918 22:13:00.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:00.921">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:00.922" starttime="20170918 22:13:00.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:01.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:01.284" starttime="20170918 22:13:00.923"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:01.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:01.284">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:01.284" starttime="20170918 22:13:00.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:01.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:01.285" starttime="20170918 22:13:01.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:01.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:01.285" starttime="20170918 22:13:01.285"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.285" starttime="20170918 22:13:00.917"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.286" starttime="20170918 22:13:00.916"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.286" starttime="20170918 22:13:00.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:01.286">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:13:01.286" starttime="20170918 22:13:01.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:01.288">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:01.289" starttime="20170918 22:13:01.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:01.289">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:01.290" starttime="20170918 22:13:01.289"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.290" starttime="20170918 22:13:01.289"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.290" starttime="20170918 22:13:01.287"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:01.290" starttime="20170918 22:13:01.287"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:02.009">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.009" starttime="20170918 22:13:01.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.011">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:02.012" starttime="20170918 22:13:02.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:02.013" starttime="20170918 22:13:02.012"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.013" starttime="20170918 22:13:02.012"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.013" starttime="20170918 22:13:02.010"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.013" starttime="20170918 22:13:02.010"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:02.014">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:02.014" starttime="20170918 22:13:02.013"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:02.014">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.014" starttime="20170918 22:13:00.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.015" starttime="20170918 22:13:02.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.015">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:02.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:02.015">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:02.016" starttime="20170918 22:13:02.015"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:02.016">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:13:02.016" starttime="20170918 22:13:00.914"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:02.016">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:13:02.016" starttime="20170918 22:13:00.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:02.017" starttime="20170918 22:13:02.017"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.022">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:02.022" starttime="20170918 22:13:02.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:02.023" starttime="20170918 22:13:02.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.024">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:02.024" starttime="20170918 22:13:02.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.024">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:02.024" starttime="20170918 22:13:02.024"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.393">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:02.393" starttime="20170918 22:13:02.025"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:02.393">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:02.393">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.393" starttime="20170918 22:13:02.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.394">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.394" starttime="20170918 22:13:02.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:02.395" starttime="20170918 22:13:02.394"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.395" starttime="20170918 22:13:02.021"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.395" starttime="20170918 22:13:02.020"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.395" starttime="20170918 22:13:02.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.396">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:13:02.396" starttime="20170918 22:13:02.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:02.398">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:02.398" starttime="20170918 22:13:02.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:02.399">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:02.399" starttime="20170918 22:13:02.399"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.399" starttime="20170918 22:13:02.398"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.399" starttime="20170918 22:13:02.397"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:02.400" starttime="20170918 22:13:02.396"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:03.022">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:03.022">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:03.022" starttime="20170918 22:13:02.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:03.024">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:03.024" starttime="20170918 22:13:03.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:03.026">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:03.026" starttime="20170918 22:13:03.025"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:03.026" starttime="20170918 22:13:03.025"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:03.026" starttime="20170918 22:13:03.023"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:03.026" starttime="20170918 22:13:03.022"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:03.026">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:03.027" starttime="20170918 22:13:03.026"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:03.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:03.027" starttime="20170918 22:13:02.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:03.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:03.028" starttime="20170918 22:13:03.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:03.028">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:03.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:03.029">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:03.029" starttime="20170918 22:13:03.028"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:03.029">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:03.029" starttime="20170918 22:13:02.018"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:03.030">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:03.030" starttime="20170918 22:13:02.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:03.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:13:03.031">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:13:03.031" starttime="20170918 22:13:03.030"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:03.031" starttime="20170918 22:13:02.017"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:03.032" starttime="20170918 22:12:59.572"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:13.037">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:13.037" starttime="20170918 22:13:13.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:13.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:13.038" starttime="20170918 22:13:13.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:13.038">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:13.038" starttime="20170918 22:13:13.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:13.039">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:13.039" starttime="20170918 22:13:13.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:13.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:13.527" starttime="20170918 22:13:13.040"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:13.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:13.528">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:13.528" starttime="20170918 22:13:13.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:13.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:13.528" starttime="20170918 22:13:13.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:13.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:13.529" starttime="20170918 22:13:13.529"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.529" starttime="20170918 22:13:13.036"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.529" starttime="20170918 22:13:13.035"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.530" starttime="20170918 22:13:13.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:13.530">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:13.530" starttime="20170918 22:13:13.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:13.532">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:13.532" starttime="20170918 22:13:13.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:13.533">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:13.533" starttime="20170918 22:13:13.533"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.534" starttime="20170918 22:13:13.533"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.534" starttime="20170918 22:13:13.531"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:13.534" starttime="20170918 22:13:13.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.267">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:14.267">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.267" starttime="20170918 22:13:13.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.269">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:14.269" starttime="20170918 22:13:14.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.270">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:14.270" starttime="20170918 22:13:14.269"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.270" starttime="20170918 22:13:14.269"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.270" starttime="20170918 22:13:14.268"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.270" starttime="20170918 22:13:14.267"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:14.271">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:14.271" starttime="20170918 22:13:14.270"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:14.271">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.271" starttime="20170918 22:13:13.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.272" starttime="20170918 22:13:14.271"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.272">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:14.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:14.272">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:14.272" starttime="20170918 22:13:14.272"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:14.273">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:13:14.273" starttime="20170918 22:13:13.033"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:14.273">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:13:14.273" starttime="20170918 22:13:13.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:14.274" starttime="20170918 22:13:14.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.274" starttime="20170918 22:13:13.033"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.278">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:14.278" starttime="20170918 22:13:14.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.279">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:14.279" starttime="20170918 22:13:14.278"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.279">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:14.279" starttime="20170918 22:13:14.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:14.280" starttime="20170918 22:13:14.280"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:14.700" starttime="20170918 22:13:14.281"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:14.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:14.701">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.701" starttime="20170918 22:13:14.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.701" starttime="20170918 22:13:14.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:14.702" starttime="20170918 22:13:14.702"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.702" starttime="20170918 22:13:14.276"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.702" starttime="20170918 22:13:14.276"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.702" starttime="20170918 22:13:14.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.703">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:13:14.703" starttime="20170918 22:13:14.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:14.706">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:14.706" starttime="20170918 22:13:14.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:14.707">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:14.707" starttime="20170918 22:13:14.707"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.707" starttime="20170918 22:13:14.706"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.707" starttime="20170918 22:13:14.704"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:14.707" starttime="20170918 22:13:14.703"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.356">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:15.356">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.356" starttime="20170918 22:13:14.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.358">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:15.358" starttime="20170918 22:13:15.358"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.359">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:15.359" starttime="20170918 22:13:15.359"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.359" starttime="20170918 22:13:15.358"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.359" starttime="20170918 22:13:15.357"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.360" starttime="20170918 22:13:15.357"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:15.360">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:15.360" starttime="20170918 22:13:15.360"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:15.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.360" starttime="20170918 22:13:14.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.361" starttime="20170918 22:13:15.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.362">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:15.362">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:15.362">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:15.362" starttime="20170918 22:13:15.361"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:15.362">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:13:15.362" starttime="20170918 22:13:14.274"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:15.362">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:13:15.363" starttime="20170918 22:13:14.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:15.363" starttime="20170918 22:13:15.363"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.367">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:15.368" starttime="20170918 22:13:15.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:15.368" starttime="20170918 22:13:15.368"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.369">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:15.369" starttime="20170918 22:13:15.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:15.370" starttime="20170918 22:13:15.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.796">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:15.796" starttime="20170918 22:13:15.370"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:15.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:15.796">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.796" starttime="20170918 22:13:15.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.797">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.797" starttime="20170918 22:13:15.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:15.798" starttime="20170918 22:13:15.797"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.798" starttime="20170918 22:13:15.366"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.798" starttime="20170918 22:13:15.366"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.798" starttime="20170918 22:13:15.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.799">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:13:15.799" starttime="20170918 22:13:15.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:15.801">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:15.801" starttime="20170918 22:13:15.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:15.802">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:15.803" starttime="20170918 22:13:15.802"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.803" starttime="20170918 22:13:15.802"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.803" starttime="20170918 22:13:15.800"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:15.803" starttime="20170918 22:13:15.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:16.447">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:16.448">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:16.448" starttime="20170918 22:13:15.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:16.450">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:16.450" starttime="20170918 22:13:16.449"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:16.450">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:16.451" starttime="20170918 22:13:16.450"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:16.451" starttime="20170918 22:13:16.450"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:16.451" starttime="20170918 22:13:16.448"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:16.451" starttime="20170918 22:13:16.448"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:16.451">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:16.451" starttime="20170918 22:13:16.451"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:16.452">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:16.452" starttime="20170918 22:13:15.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:16.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:16.452" starttime="20170918 22:13:16.452"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:16.453">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:16.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:16.453">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:16.453" starttime="20170918 22:13:16.453"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:16.453">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:16.453" starttime="20170918 22:13:15.364"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:16.454">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:16.454" starttime="20170918 22:13:15.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:16.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:13:16.454">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:13:16.454" starttime="20170918 22:13:16.454"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:16.455" starttime="20170918 22:13:15.363"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:16.455" starttime="20170918 22:13:13.032"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:26.460">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:26.460" starttime="20170918 22:13:26.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:26.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:26.461" starttime="20170918 22:13:26.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:26.462">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:26.462" starttime="20170918 22:13:26.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:26.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:26.463" starttime="20170918 22:13:26.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:26.918">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:26.918" starttime="20170918 22:13:26.464"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:26.918">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:26.918">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:26.918" starttime="20170918 22:13:26.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:26.919">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:26.919" starttime="20170918 22:13:26.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:26.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:26.920" starttime="20170918 22:13:26.919"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.920" starttime="20170918 22:13:26.459"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.920" starttime="20170918 22:13:26.459"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.920" starttime="20170918 22:13:26.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:26.921">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:26.921" starttime="20170918 22:13:26.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:26.923">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:26.923" starttime="20170918 22:13:26.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:26.925">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:26.925" starttime="20170918 22:13:26.924"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.925" starttime="20170918 22:13:26.924"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.925" starttime="20170918 22:13:26.922"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:26.925" starttime="20170918 22:13:26.921"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:27.028">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.028" starttime="20170918 22:13:26.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.030">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:27.030" starttime="20170918 22:13:27.030"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.031">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:27.031" starttime="20170918 22:13:27.031"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.031" starttime="20170918 22:13:27.030"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.032" starttime="20170918 22:13:27.029"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.032" starttime="20170918 22:13:27.029"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:27.032">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:27.032" starttime="20170918 22:13:27.032"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.032">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.033" starttime="20170918 22:13:26.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.033" starttime="20170918 22:13:27.033"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.034">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:27.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:27.034">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:27.034" starttime="20170918 22:13:27.034"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.034">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:13:27.034" starttime="20170918 22:13:26.457"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.035">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:13:27.035" starttime="20170918 22:13:26.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:27.035" starttime="20170918 22:13:27.035"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.035" starttime="20170918 22:13:26.456"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.043">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:27.043" starttime="20170918 22:13:27.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:27.044" starttime="20170918 22:13:27.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.045">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:27.045" starttime="20170918 22:13:27.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:27.046" starttime="20170918 22:13:27.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.497">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:27.497" starttime="20170918 22:13:27.046"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.498">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:27.498">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.498" starttime="20170918 22:13:27.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.498" starttime="20170918 22:13:27.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.499" starttime="20170918 22:13:27.499"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.499" starttime="20170918 22:13:27.041"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.499" starttime="20170918 22:13:27.038"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.499" starttime="20170918 22:13:27.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.500">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:13:27.500" starttime="20170918 22:13:27.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.502">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:27.503" starttime="20170918 22:13:27.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.504">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:27.504" starttime="20170918 22:13:27.504"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.504" starttime="20170918 22:13:27.503"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.505" starttime="20170918 22:13:27.501"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.505" starttime="20170918 22:13:27.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.739">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:27.740">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.740" starttime="20170918 22:13:27.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.741">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:27.742" starttime="20170918 22:13:27.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:27.743" starttime="20170918 22:13:27.743"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.743" starttime="20170918 22:13:27.742"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.743" starttime="20170918 22:13:27.740"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:27.743" starttime="20170918 22:13:27.740"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:27.744">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:27.744" starttime="20170918 22:13:27.743"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.744">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.744" starttime="20170918 22:13:27.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:27.745" starttime="20170918 22:13:27.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:27.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:27.745">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:27.745" starttime="20170918 22:13:27.745"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.746">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:13:27.746" starttime="20170918 22:13:27.036"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:27.746">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:13:27.746" starttime="20170918 22:13:27.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:27.747" starttime="20170918 22:13:27.746"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:27.750">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:27.751" starttime="20170918 22:13:27.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:27.751" starttime="20170918 22:13:27.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.752">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:27.752" starttime="20170918 22:13:27.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:27.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:27.753" starttime="20170918 22:13:27.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:28.059" starttime="20170918 22:13:27.753"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:28.059">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:28.059">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.060" starttime="20170918 22:13:27.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.060" starttime="20170918 22:13:28.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.061" starttime="20170918 22:13:28.061"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.061" starttime="20170918 22:13:27.750"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.062" starttime="20170918 22:13:27.749"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.062" starttime="20170918 22:13:27.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:28.062">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:13:28.062" starttime="20170918 22:13:28.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:28.065">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:28.065" starttime="20170918 22:13:28.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.065">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:28.066" starttime="20170918 22:13:28.065"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.066" starttime="20170918 22:13:28.065"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.066" starttime="20170918 22:13:28.063"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.066" starttime="20170918 22:13:28.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:28.174">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:28.174">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.175" starttime="20170918 22:13:28.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:28.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:28.177" starttime="20170918 22:13:28.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:28.178" starttime="20170918 22:13:28.177"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.178" starttime="20170918 22:13:28.177"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.178" starttime="20170918 22:13:28.175"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:28.178" starttime="20170918 22:13:28.175"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:28.178">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:28.179" starttime="20170918 22:13:28.178"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:28.179">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.179" starttime="20170918 22:13:27.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:28.180" starttime="20170918 22:13:28.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:28.180">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:28.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:28.180">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:28.180" starttime="20170918 22:13:28.180"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:28.181">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:28.181" starttime="20170918 22:13:27.747"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:28.181">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:28.181" starttime="20170918 22:13:27.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:28.181">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:13:28.182">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:13:28.182" starttime="20170918 22:13:28.181"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:28.182" starttime="20170918 22:13:27.747"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:28.182" starttime="20170918 22:13:26.455"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:38.188" starttime="20170918 22:13:38.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:38.189" starttime="20170918 22:13:38.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.189">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:38.189" starttime="20170918 22:13:38.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:38.190" starttime="20170918 22:13:38.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:38.389" starttime="20170918 22:13:38.191"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:38.389">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.389" starttime="20170918 22:13:38.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.390" starttime="20170918 22:13:38.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.390" starttime="20170918 22:13:38.390"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.390" starttime="20170918 22:13:38.186"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.390" starttime="20170918 22:13:38.186"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.391" starttime="20170918 22:13:38.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.391">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:38.391" starttime="20170918 22:13:38.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.393">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:38.393" starttime="20170918 22:13:38.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.394">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:38.394" starttime="20170918 22:13:38.394"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.394" starttime="20170918 22:13:38.394"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.395" starttime="20170918 22:13:38.392"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.395" starttime="20170918 22:13:38.391"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:38.456">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.456" starttime="20170918 22:13:38.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:38.458" starttime="20170918 22:13:38.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:38.459" starttime="20170918 22:13:38.459"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.460" starttime="20170918 22:13:38.458"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.460" starttime="20170918 22:13:38.457"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.460" starttime="20170918 22:13:38.457"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:38.460">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:38.460" starttime="20170918 22:13:38.460"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.461">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.461" starttime="20170918 22:13:38.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.461" starttime="20170918 22:13:38.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.462">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:38.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:38.462">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:38.462" starttime="20170918 22:13:38.461"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.462">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:13:38.462" starttime="20170918 22:13:38.184"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.463">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:13:38.463" starttime="20170918 22:13:38.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:38.463" starttime="20170918 22:13:38.463"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.463" starttime="20170918 22:13:38.183"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.467">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:38.467" starttime="20170918 22:13:38.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:38.468" starttime="20170918 22:13:38.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.468">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:38.468" starttime="20170918 22:13:38.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:38.469" starttime="20170918 22:13:38.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:38.693" starttime="20170918 22:13:38.470"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:38.693">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.693" starttime="20170918 22:13:38.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.694" starttime="20170918 22:13:38.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.695" starttime="20170918 22:13:38.694"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.695" starttime="20170918 22:13:38.466"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.695" starttime="20170918 22:13:38.466"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.695" starttime="20170918 22:13:38.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.696">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:13:38.696" starttime="20170918 22:13:38.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.698">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:38.698" starttime="20170918 22:13:38.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.699">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:38.699" starttime="20170918 22:13:38.699"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.699" starttime="20170918 22:13:38.698"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.700" starttime="20170918 22:13:38.697"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.700" starttime="20170918 22:13:38.696"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.819">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:38.819">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.819" starttime="20170918 22:13:38.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.822">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:38.822" starttime="20170918 22:13:38.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:38.823" starttime="20170918 22:13:38.823"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.823" starttime="20170918 22:13:38.822"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.823" starttime="20170918 22:13:38.820"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:38.824" starttime="20170918 22:13:38.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:38.824">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:38.824" starttime="20170918 22:13:38.824"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.824">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.824" starttime="20170918 22:13:38.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:38.825" starttime="20170918 22:13:38.825"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:38.826">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:38.826">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:38.826" starttime="20170918 22:13:38.825"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.826">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170918 22:13:38.826" starttime="20170918 22:13:38.464"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:38.826">${host_state} = Running</msg>
<status status="PASS" endtime="20170918 22:13:38.826" starttime="20170918 22:13:38.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:38.827" starttime="20170918 22:13:38.827"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:38.831">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:38.831" starttime="20170918 22:13:38.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:38.832" starttime="20170918 22:13:38.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.832">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:38.832" starttime="20170918 22:13:38.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:38.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:38.833" starttime="20170918 22:13:38.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:39.073" starttime="20170918 22:13:38.834"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:39.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:39.073">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.073" starttime="20170918 22:13:38.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.074">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.074" starttime="20170918 22:13:39.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.075" starttime="20170918 22:13:39.074"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.075" starttime="20170918 22:13:38.830"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.075" starttime="20170918 22:13:38.829"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.075" starttime="20170918 22:13:38.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:39.076">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170918 22:13:39.076" starttime="20170918 22:13:39.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:39.079">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:39.079" starttime="20170918 22:13:39.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.080">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:39.080" starttime="20170918 22:13:39.079"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.080" starttime="20170918 22:13:39.079"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.080" starttime="20170918 22:13:39.077"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.080" starttime="20170918 22:13:39.077"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:39.167">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:39.167">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.167" starttime="20170918 22:13:39.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:39.169">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:39.169" starttime="20170918 22:13:39.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.170">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:39.171" starttime="20170918 22:13:39.170"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.171" starttime="20170918 22:13:39.169"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.171" starttime="20170918 22:13:39.168"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:39.171" starttime="20170918 22:13:39.168"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:39.171">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:39.171" starttime="20170918 22:13:39.171"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:39.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.172" starttime="20170918 22:13:38.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:39.172" starttime="20170918 22:13:39.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:39.173">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:39.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:39.173">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:39.173" starttime="20170918 22:13:39.172"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:39.173">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:39.173" starttime="20170918 22:13:38.828"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:39.174">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20170918 22:13:39.174" starttime="20170918 22:13:38.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:39.174">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 22:13:39.175">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20170918 22:13:39.175" starttime="20170918 22:13:39.174"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:39.175" starttime="20170918 22:13:38.827"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:39.175" starttime="20170918 22:13:38.183"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.180">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:49.181" starttime="20170918 22:13:49.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:49.181" starttime="20170918 22:13:49.181"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.182">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:49.182" starttime="20170918 22:13:49.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.183">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:49.183" starttime="20170918 22:13:49.182"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:49.359" starttime="20170918 22:13:49.183"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:49.359">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.359" starttime="20170918 22:13:49.183"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.360" starttime="20170918 22:13:49.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.360" starttime="20170918 22:13:49.360"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.360" starttime="20170918 22:13:49.179"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.361" starttime="20170918 22:13:49.179"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.361" starttime="20170918 22:13:49.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.361">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:49.361" starttime="20170918 22:13:49.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.364">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:49.364" starttime="20170918 22:13:49.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.365">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:49.365" starttime="20170918 22:13:49.365"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.365" starttime="20170918 22:13:49.364"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.365" starttime="20170918 22:13:49.362"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.365" starttime="20170918 22:13:49.362"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:49.441">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.441" starttime="20170918 22:13:49.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:49.444" starttime="20170918 22:13:49.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:49.445" starttime="20170918 22:13:49.444"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.445" starttime="20170918 22:13:49.444"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.445" starttime="20170918 22:13:49.442"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.445" starttime="20170918 22:13:49.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:49.445">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:49.446" starttime="20170918 22:13:49.445"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.446">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.446" starttime="20170918 22:13:49.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.446" starttime="20170918 22:13:49.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:49.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:49.447">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:49.447" starttime="20170918 22:13:49.447"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.447">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:13:49.447" starttime="20170918 22:13:49.177"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.448">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:13:49.448" starttime="20170918 22:13:49.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:13:49.449" starttime="20170918 22:13:49.448"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.449" starttime="20170918 22:13:49.176"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.453">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:49.453" starttime="20170918 22:13:49.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:49.454" starttime="20170918 22:13:49.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.455">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:49.455" starttime="20170918 22:13:49.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:49.456" starttime="20170918 22:13:49.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.680">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:49.680" starttime="20170918 22:13:49.457"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:49.681">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.681" starttime="20170918 22:13:49.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.681">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.681" starttime="20170918 22:13:49.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.682" starttime="20170918 22:13:49.682"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.682" starttime="20170918 22:13:49.452"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.682" starttime="20170918 22:13:49.451"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.682" starttime="20170918 22:13:49.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.683">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:13:49.683" starttime="20170918 22:13:49.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.685">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:49.686" starttime="20170918 22:13:49.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.686">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:49.687" starttime="20170918 22:13:49.686"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.687" starttime="20170918 22:13:49.686"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.687" starttime="20170918 22:13:49.684"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.687" starttime="20170918 22:13:49.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:13:49.793">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.793" starttime="20170918 22:13:49.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:49.795" starttime="20170918 22:13:49.794"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.796">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:13:49.796" starttime="20170918 22:13:49.795"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.796" starttime="20170918 22:13:49.795"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.796" starttime="20170918 22:13:49.793"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:49.796" starttime="20170918 22:13:49.793"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:13:49.796">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:13:49.796" starttime="20170918 22:13:49.796"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.797">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.797" starttime="20170918 22:13:49.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:49.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:49.797" starttime="20170918 22:13:49.797"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:49.798">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:13:49.798">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:13:49.798">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:13:49.798" starttime="20170918 22:13:49.798"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.799">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:13:49.799" starttime="20170918 22:13:49.449"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:49.799">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:13:49.799" starttime="20170918 22:13:49.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:13:49.800">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:13:49.800" starttime="20170918 22:13:49.799"></status>
</kw>
<status status="FAIL" endtime="20170918 22:13:49.800" starttime="20170918 22:13:49.175"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:59.805">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:13:59.805" starttime="20170918 22:13:59.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:59.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:13:59.806" starttime="20170918 22:13:59.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:59.806">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:13:59.806" starttime="20170918 22:13:59.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:59.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:13:59.807" starttime="20170918 22:13:59.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:59.986">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:13:59.986" starttime="20170918 22:13:59.808"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:13:59.986">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:13:59.986">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:13:59.986" starttime="20170918 22:13:59.808"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:59.987">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:59.987" starttime="20170918 22:13:59.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:59.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:13:59.988" starttime="20170918 22:13:59.987"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.988" starttime="20170918 22:13:59.804"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.988" starttime="20170918 22:13:59.803"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.988" starttime="20170918 22:13:59.803"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:59.988">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:13:59.988" starttime="20170918 22:13:59.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:13:59.990">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:59.991" starttime="20170918 22:13:59.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:13:59.991">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:13:59.992" starttime="20170918 22:13:59.991"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.992" starttime="20170918 22:13:59.991"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.992" starttime="20170918 22:13:59.989"></status>
</kw>
<status status="PASS" endtime="20170918 22:13:59.992" starttime="20170918 22:13:59.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:00.054">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.054" starttime="20170918 22:13:59.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:00.056" starttime="20170918 22:14:00.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:00.057" starttime="20170918 22:14:00.056"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.057" starttime="20170918 22:14:00.056"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.057" starttime="20170918 22:14:00.054"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.057" starttime="20170918 22:14:00.054"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:00.058">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:00.058" starttime="20170918 22:14:00.057"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.058">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.058" starttime="20170918 22:13:59.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.059" starttime="20170918 22:14:00.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:00.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:00.059">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:00.059" starttime="20170918 22:14:00.059"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:00.060" starttime="20170918 22:13:59.802"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.060">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:00.060" starttime="20170918 22:13:59.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:00.061" starttime="20170918 22:14:00.060"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.061" starttime="20170918 22:13:59.801"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.065">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:00.065" starttime="20170918 22:14:00.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:00.066" starttime="20170918 22:14:00.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.066">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:00.066" starttime="20170918 22:14:00.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:00.067" starttime="20170918 22:14:00.066"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:00.266" starttime="20170918 22:14:00.068"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.267">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:00.267">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.267" starttime="20170918 22:14:00.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.268" starttime="20170918 22:14:00.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.268" starttime="20170918 22:14:00.268"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.268" starttime="20170918 22:14:00.064"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.268" starttime="20170918 22:14:00.063"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.269" starttime="20170918 22:14:00.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.269">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:00.269" starttime="20170918 22:14:00.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.272">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:00.273" starttime="20170918 22:14:00.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.274">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:00.274" starttime="20170918 22:14:00.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.274" starttime="20170918 22:14:00.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.274" starttime="20170918 22:14:00.270"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.274" starttime="20170918 22:14:00.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.360">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:00.361">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.361" starttime="20170918 22:14:00.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:00.363" starttime="20170918 22:14:00.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:00.367" starttime="20170918 22:14:00.366"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.367" starttime="20170918 22:14:00.363"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.367" starttime="20170918 22:14:00.362"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:00.367" starttime="20170918 22:14:00.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:00.367">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:00.367" starttime="20170918 22:14:00.367"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.367">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.368" starttime="20170918 22:14:00.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:00.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:00.368" starttime="20170918 22:14:00.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:00.369">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:00.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:00.369">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:00.369" starttime="20170918 22:14:00.368"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.369">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:00.369" starttime="20170918 22:14:00.061"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:00.370">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:00.370" starttime="20170918 22:14:00.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:00.371">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:00.371" starttime="20170918 22:14:00.370"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:00.371" starttime="20170918 22:13:59.800"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.376">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:10.376" starttime="20170918 22:14:10.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:10.377" starttime="20170918 22:14:10.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.377">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:10.378" starttime="20170918 22:14:10.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:10.378" starttime="20170918 22:14:10.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:10.623" starttime="20170918 22:14:10.379"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:10.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:10.623">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.623" starttime="20170918 22:14:10.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.624">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.624" starttime="20170918 22:14:10.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.625" starttime="20170918 22:14:10.624"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.625" starttime="20170918 22:14:10.375"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.625" starttime="20170918 22:14:10.374"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.625" starttime="20170918 22:14:10.374"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.626">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:14:10.626" starttime="20170918 22:14:10.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.629">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:10.629" starttime="20170918 22:14:10.628"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.631">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:10.631" starttime="20170918 22:14:10.630"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.631" starttime="20170918 22:14:10.630"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.631" starttime="20170918 22:14:10.627"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.631" starttime="20170918 22:14:10.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.721">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:10.721">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.721" starttime="20170918 22:14:10.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.723">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:10.723" starttime="20170918 22:14:10.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.724">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:10.724" starttime="20170918 22:14:10.724"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.724" starttime="20170918 22:14:10.723"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.724" starttime="20170918 22:14:10.722"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.725" starttime="20170918 22:14:10.721"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:10.725">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:10.725" starttime="20170918 22:14:10.725"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:10.725">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.725" starttime="20170918 22:14:10.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.726" starttime="20170918 22:14:10.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:10.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:10.727">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:10.727" starttime="20170918 22:14:10.726"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:10.727">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:10.727" starttime="20170918 22:14:10.373"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:10.727">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:10.727" starttime="20170918 22:14:10.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:10.728" starttime="20170918 22:14:10.728"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.728" starttime="20170918 22:14:10.372"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:10.734" starttime="20170918 22:14:10.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:10.734" starttime="20170918 22:14:10.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.735">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:10.735" starttime="20170918 22:14:10.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:10.736" starttime="20170918 22:14:10.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:10.930" starttime="20170918 22:14:10.737"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:10.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:10.930">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.930" starttime="20170918 22:14:10.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.931" starttime="20170918 22:14:10.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:10.932" starttime="20170918 22:14:10.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.932" starttime="20170918 22:14:10.731"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.932" starttime="20170918 22:14:10.731"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.932" starttime="20170918 22:14:10.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.933">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:10.933" starttime="20170918 22:14:10.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:10.935">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:10.935" starttime="20170918 22:14:10.934"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:10.936">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:10.936" starttime="20170918 22:14:10.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.936" starttime="20170918 22:14:10.935"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.936" starttime="20170918 22:14:10.934"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:10.936" starttime="20170918 22:14:10.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:11.037">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:11.037">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:11.038" starttime="20170918 22:14:10.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:11.040">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:11.040" starttime="20170918 22:14:11.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:11.041">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:11.041" starttime="20170918 22:14:11.040"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:11.041" starttime="20170918 22:14:11.040"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:11.041" starttime="20170918 22:14:11.038"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:11.041" starttime="20170918 22:14:11.038"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:11.041">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:11.042" starttime="20170918 22:14:11.041"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:11.042">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:11.042" starttime="20170918 22:14:10.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:11.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:11.042" starttime="20170918 22:14:11.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:11.043">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:11.043">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:11.043">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:11.043" starttime="20170918 22:14:11.043"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:11.043">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:11.044" starttime="20170918 22:14:10.729"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:11.044">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:11.044" starttime="20170918 22:14:10.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:11.044">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:11.045" starttime="20170918 22:14:11.044"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:11.045" starttime="20170918 22:14:10.371"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.050">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:21.051" starttime="20170918 22:14:21.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:21.052" starttime="20170918 22:14:21.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.052">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:21.053" starttime="20170918 22:14:21.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:21.054" starttime="20170918 22:14:21.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.316">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:21.316" starttime="20170918 22:14:21.055"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:21.316">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.316" starttime="20170918 22:14:21.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.317" starttime="20170918 22:14:21.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.317" starttime="20170918 22:14:21.317"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.318" starttime="20170918 22:14:21.049"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.318" starttime="20170918 22:14:21.049"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.318" starttime="20170918 22:14:21.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.318">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:14:21.318" starttime="20170918 22:14:21.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.320">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:21.320" starttime="20170918 22:14:21.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.321">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:21.322" starttime="20170918 22:14:21.321"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.322" starttime="20170918 22:14:21.321"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.322" starttime="20170918 22:14:21.319"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.322" starttime="20170918 22:14:21.319"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.476">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:21.476">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.477" starttime="20170918 22:14:21.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.479">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:21.479" starttime="20170918 22:14:21.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.480">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:21.480" starttime="20170918 22:14:21.480"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.480" starttime="20170918 22:14:21.479"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.480" starttime="20170918 22:14:21.478"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.480" starttime="20170918 22:14:21.477"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:21.481">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:21.481" starttime="20170918 22:14:21.481"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.481">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.481" starttime="20170918 22:14:21.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.482" starttime="20170918 22:14:21.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.482">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:21.482">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:21.483">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:21.483" starttime="20170918 22:14:21.482"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.483">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:21.483" starttime="20170918 22:14:21.047"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.483">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:21.483" starttime="20170918 22:14:21.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:21.484" starttime="20170918 22:14:21.484"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.484" starttime="20170918 22:14:21.046"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.487">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:21.488" starttime="20170918 22:14:21.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:21.488" starttime="20170918 22:14:21.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.489">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:21.489" starttime="20170918 22:14:21.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:21.490" starttime="20170918 22:14:21.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:21.678" starttime="20170918 22:14:21.490"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:21.678">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.678" starttime="20170918 22:14:21.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.679">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.679" starttime="20170918 22:14:21.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.680" starttime="20170918 22:14:21.679"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.680" starttime="20170918 22:14:21.487"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.680" starttime="20170918 22:14:21.486"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.680" starttime="20170918 22:14:21.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.681">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:21.681" starttime="20170918 22:14:21.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.683">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:21.683" starttime="20170918 22:14:21.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.684">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:21.684" starttime="20170918 22:14:21.684"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.684" starttime="20170918 22:14:21.683"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.685" starttime="20170918 22:14:21.682"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.685" starttime="20170918 22:14:21.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.769">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:21.770">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.770" starttime="20170918 22:14:21.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.771">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:21.771" starttime="20170918 22:14:21.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.772">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:21.772" starttime="20170918 22:14:21.772"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.773" starttime="20170918 22:14:21.772"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.773" starttime="20170918 22:14:21.770"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:21.773" starttime="20170918 22:14:21.770"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:21.773">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:21.773" starttime="20170918 22:14:21.773"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.773">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.774" starttime="20170918 22:14:21.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:21.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:21.774" starttime="20170918 22:14:21.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:21.775">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:21.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:21.775">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:21.775" starttime="20170918 22:14:21.774"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.775">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:21.775" starttime="20170918 22:14:21.485"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:21.775">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:21.776" starttime="20170918 22:14:21.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:21.776">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:21.776" starttime="20170918 22:14:21.776"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:21.776" starttime="20170918 22:14:21.045"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:31.782">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:31.782" starttime="20170918 22:14:31.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:31.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:31.783" starttime="20170918 22:14:31.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:31.784">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:31.784" starttime="20170918 22:14:31.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:31.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:31.784" starttime="20170918 22:14:31.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.013">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:32.013" starttime="20170918 22:14:31.785"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.013">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:32.013">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.013" starttime="20170918 22:14:31.785"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.014">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.014" starttime="20170918 22:14:32.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.015" starttime="20170918 22:14:32.014"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.015" starttime="20170918 22:14:31.781"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.015" starttime="20170918 22:14:31.780"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.016" starttime="20170918 22:14:31.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.016">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:14:32.016" starttime="20170918 22:14:32.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.020">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:32.020" starttime="20170918 22:14:32.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.021">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:32.021" starttime="20170918 22:14:32.021"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.021" starttime="20170918 22:14:32.020"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.022" starttime="20170918 22:14:32.018"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.022" starttime="20170918 22:14:32.017"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.094">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:32.094">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.094" starttime="20170918 22:14:32.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.096">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:32.096" starttime="20170918 22:14:32.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.097">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:32.097" starttime="20170918 22:14:32.097"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.098" starttime="20170918 22:14:32.096"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.098" starttime="20170918 22:14:32.095"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.098" starttime="20170918 22:14:32.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:32.098">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:32.098" starttime="20170918 22:14:32.098"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.098">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.098" starttime="20170918 22:14:31.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.099" starttime="20170918 22:14:32.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.100">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:32.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:32.100">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:32.100" starttime="20170918 22:14:32.099"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.100">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:32.100" starttime="20170918 22:14:31.778"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.100">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:32.101" starttime="20170918 22:14:31.778"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:32.101" starttime="20170918 22:14:32.101"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.101" starttime="20170918 22:14:31.777"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.105">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:32.105" starttime="20170918 22:14:32.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:32.106" starttime="20170918 22:14:32.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.106">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:32.106" starttime="20170918 22:14:32.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:32.107" starttime="20170918 22:14:32.107"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:32.389" starttime="20170918 22:14:32.108"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:32.389">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.389" starttime="20170918 22:14:32.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.390" starttime="20170918 22:14:32.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.391" starttime="20170918 22:14:32.390"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.391" starttime="20170918 22:14:32.104"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.391" starttime="20170918 22:14:32.104"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.391" starttime="20170918 22:14:32.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.391">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:32.391" starttime="20170918 22:14:32.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.394">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:32.394" starttime="20170918 22:14:32.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.395">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:32.396" starttime="20170918 22:14:32.395"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.396" starttime="20170918 22:14:32.394"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.396" starttime="20170918 22:14:32.392"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.396" starttime="20170918 22:14:32.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.483">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:32.483">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.483" starttime="20170918 22:14:32.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.485">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:32.485" starttime="20170918 22:14:32.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:32.486" starttime="20170918 22:14:32.485"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.486" starttime="20170918 22:14:32.485"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.486" starttime="20170918 22:14:32.484"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:32.486" starttime="20170918 22:14:32.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:32.486">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:32.487" starttime="20170918 22:14:32.486"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.487">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.487" starttime="20170918 22:14:32.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:32.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:32.487" starttime="20170918 22:14:32.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:32.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:32.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:32.488">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:32.488" starttime="20170918 22:14:32.488"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.488">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:32.488" starttime="20170918 22:14:32.102"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:32.489">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:32.489" starttime="20170918 22:14:32.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:32.490">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:32.490" starttime="20170918 22:14:32.489"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:32.490" starttime="20170918 22:14:31.777"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.495">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:42.495" starttime="20170918 22:14:42.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:42.496" starttime="20170918 22:14:42.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.496">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:42.496" starttime="20170918 22:14:42.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:42.497" starttime="20170918 22:14:42.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.704">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:42.704" starttime="20170918 22:14:42.498"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:42.704">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:42.704">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.704" starttime="20170918 22:14:42.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.705">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.705" starttime="20170918 22:14:42.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.706" starttime="20170918 22:14:42.705"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.706" starttime="20170918 22:14:42.494"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.706" starttime="20170918 22:14:42.493"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.706" starttime="20170918 22:14:42.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.707">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:14:42.707" starttime="20170918 22:14:42.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.709">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:42.709" starttime="20170918 22:14:42.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.710">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:42.710" starttime="20170918 22:14:42.710"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.710" starttime="20170918 22:14:42.709"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.710" starttime="20170918 22:14:42.707"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.710" starttime="20170918 22:14:42.707"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.800">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:42.800">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.800" starttime="20170918 22:14:42.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.802">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:42.802" starttime="20170918 22:14:42.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.803">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:42.803" starttime="20170918 22:14:42.803"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.803" starttime="20170918 22:14:42.802"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.803" starttime="20170918 22:14:42.801"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.803" starttime="20170918 22:14:42.800"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:42.804">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:42.804" starttime="20170918 22:14:42.803"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:42.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.804" starttime="20170918 22:14:42.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:42.805" starttime="20170918 22:14:42.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.805">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:42.805">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:42.805">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:42.805" starttime="20170918 22:14:42.805"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:42.806">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:42.806" starttime="20170918 22:14:42.492"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:42.806">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:42.806" starttime="20170918 22:14:42.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:42.807" starttime="20170918 22:14:42.806"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:42.807" starttime="20170918 22:14:42.491"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:42.811">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:42.811" starttime="20170918 22:14:42.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.812">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:42.812" starttime="20170918 22:14:42.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.813">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:42.813" starttime="20170918 22:14:42.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:42.814">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:42.814" starttime="20170918 22:14:42.813"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.092">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:43.092" starttime="20170918 22:14:42.814"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:43.092">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:43.092">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.092" starttime="20170918 22:14:42.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.093">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.093" starttime="20170918 22:14:43.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.094" starttime="20170918 22:14:43.093"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.094" starttime="20170918 22:14:42.810"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.094" starttime="20170918 22:14:42.809"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.094" starttime="20170918 22:14:42.808"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:43.095">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:43.095" starttime="20170918 22:14:43.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:43.097">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:43.097" starttime="20170918 22:14:43.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.098">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:43.098" starttime="20170918 22:14:43.097"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.098" starttime="20170918 22:14:43.097"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.098" starttime="20170918 22:14:43.095"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.098" starttime="20170918 22:14:43.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:43.210">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:43.210">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.211" starttime="20170918 22:14:43.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:43.212">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:43.212" starttime="20170918 22:14:43.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.214">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:43.214" starttime="20170918 22:14:43.214"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.214" starttime="20170918 22:14:43.213"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.215" starttime="20170918 22:14:43.211"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:43.215" starttime="20170918 22:14:43.211"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:43.215">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:43.215" starttime="20170918 22:14:43.215"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:43.215">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.215" starttime="20170918 22:14:42.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:43.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:43.216" starttime="20170918 22:14:43.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:43.217">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:43.217">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:43.217">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:43.217" starttime="20170918 22:14:43.216"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:43.217">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:43.217" starttime="20170918 22:14:42.807"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:43.217">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:43.217" starttime="20170918 22:14:42.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:43.218">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:43.218" starttime="20170918 22:14:43.218"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:43.218" starttime="20170918 22:14:42.490"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.223">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:53.224" starttime="20170918 22:14:53.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.224">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:53.225" starttime="20170918 22:14:53.224"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.225">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:53.225" starttime="20170918 22:14:53.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:53.226" starttime="20170918 22:14:53.225"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:53.404" starttime="20170918 22:14:53.226"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:53.404">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.404" starttime="20170918 22:14:53.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.405" starttime="20170918 22:14:53.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.406" starttime="20170918 22:14:53.406"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.406" starttime="20170918 22:14:53.223"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.406" starttime="20170918 22:14:53.222"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.406" starttime="20170918 22:14:53.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.407">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:14:53.407" starttime="20170918 22:14:53.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.409">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:53.409" starttime="20170918 22:14:53.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.410">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:53.410" starttime="20170918 22:14:53.410"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.410" starttime="20170918 22:14:53.409"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.410" starttime="20170918 22:14:53.408"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.410" starttime="20170918 22:14:53.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.491">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:53.491">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.491" starttime="20170918 22:14:53.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.493">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:53.493" starttime="20170918 22:14:53.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:53.494" starttime="20170918 22:14:53.494"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.494" starttime="20170918 22:14:53.493"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.494" starttime="20170918 22:14:53.492"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.494" starttime="20170918 22:14:53.492"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:53.495">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:53.495" starttime="20170918 22:14:53.495"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.495">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.495" starttime="20170918 22:14:53.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.496" starttime="20170918 22:14:53.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.496">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:53.496">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:53.496">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:53.497" starttime="20170918 22:14:53.496"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.497">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:14:53.497" starttime="20170918 22:14:53.220"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.497">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:14:53.497" starttime="20170918 22:14:53.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:14:53.498" starttime="20170918 22:14:53.497"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.498" starttime="20170918 22:14:53.220"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.503">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:14:53.504" starttime="20170918 22:14:53.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.505">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:14:53.505" starttime="20170918 22:14:53.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.506">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:14:53.506" starttime="20170918 22:14:53.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:14:53.506" starttime="20170918 22:14:53.506"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:14:53.750" starttime="20170918 22:14:53.507"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.751">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:14:53.751">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.751" starttime="20170918 22:14:53.507"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.751">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.751" starttime="20170918 22:14:53.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.752" starttime="20170918 22:14:53.752"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.752" starttime="20170918 22:14:53.502"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.752" starttime="20170918 22:14:53.501"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.752" starttime="20170918 22:14:53.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.753">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:14:53.753" starttime="20170918 22:14:53.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.755">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:53.755" starttime="20170918 22:14:53.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.756">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:14:53.756" starttime="20170918 22:14:53.756"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.756" starttime="20170918 22:14:53.755"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.757" starttime="20170918 22:14:53.754"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.757" starttime="20170918 22:14:53.753"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.925">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:14:53.925">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.925" starttime="20170918 22:14:53.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.927">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:53.927" starttime="20170918 22:14:53.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.928">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:14:53.928" starttime="20170918 22:14:53.927"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.928" starttime="20170918 22:14:53.927"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.928" starttime="20170918 22:14:53.926"></status>
</kw>
<status status="PASS" endtime="20170918 22:14:53.928" starttime="20170918 22:14:53.925"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:14:53.929">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:14:53.929" starttime="20170918 22:14:53.929"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.929">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.929" starttime="20170918 22:14:53.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:14:53.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:14:53.930" starttime="20170918 22:14:53.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:14:53.930">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:14:53.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:14:53.931">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:14:53.931" starttime="20170918 22:14:53.930"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.931">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:53.931" starttime="20170918 22:14:53.499"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:14:53.931">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:14:53.931" starttime="20170918 22:14:53.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:14:53.932">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:14:53.932" starttime="20170918 22:14:53.932"></status>
</kw>
<status status="FAIL" endtime="20170918 22:14:53.932" starttime="20170918 22:14:53.219"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:03.938">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:03.938" starttime="20170918 22:15:03.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:03.939">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:03.939" starttime="20170918 22:15:03.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:03.939">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:03.939" starttime="20170918 22:15:03.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:03.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:03.940" starttime="20170918 22:15:03.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:04.119" starttime="20170918 22:15:03.941"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.119">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:04.119">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.119" starttime="20170918 22:15:03.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.120">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.120" starttime="20170918 22:15:04.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.121" starttime="20170918 22:15:04.120"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.121" starttime="20170918 22:15:03.937"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.121" starttime="20170918 22:15:03.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.121" starttime="20170918 22:15:03.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.122">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:04.122" starttime="20170918 22:15:04.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.124">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:04.124" starttime="20170918 22:15:04.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.125">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:04.126" starttime="20170918 22:15:04.125"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.126" starttime="20170918 22:15:04.124"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.126" starttime="20170918 22:15:04.123"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.126" starttime="20170918 22:15:04.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:04.189">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.189" starttime="20170918 22:15:04.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.191">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:04.191" starttime="20170918 22:15:04.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.192">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:04.192" starttime="20170918 22:15:04.192"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.192" starttime="20170918 22:15:04.191"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.192" starttime="20170918 22:15:04.190"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.192" starttime="20170918 22:15:04.190"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:04.193">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:04.193" starttime="20170918 22:15:04.193"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.193">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.193" starttime="20170918 22:15:03.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.194" starttime="20170918 22:15:04.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:04.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:04.195">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:04.195" starttime="20170918 22:15:04.194"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.195">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:04.195" starttime="20170918 22:15:03.934"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.195">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:04.195" starttime="20170918 22:15:03.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:04.196" starttime="20170918 22:15:04.195"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.196" starttime="20170918 22:15:03.933"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:04.200" starttime="20170918 22:15:04.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:04.200" starttime="20170918 22:15:04.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.201">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:04.201" starttime="20170918 22:15:04.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:04.202" starttime="20170918 22:15:04.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:04.538" starttime="20170918 22:15:04.202"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:04.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.538" starttime="20170918 22:15:04.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.539" starttime="20170918 22:15:04.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.539" starttime="20170918 22:15:04.539"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.540" starttime="20170918 22:15:04.199"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.540" starttime="20170918 22:15:04.198"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.540" starttime="20170918 22:15:04.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.540">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:04.540" starttime="20170918 22:15:04.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.543">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:04.543" starttime="20170918 22:15:04.542"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.544">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:04.544" starttime="20170918 22:15:04.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.544" starttime="20170918 22:15:04.543"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.545" starttime="20170918 22:15:04.541"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.545" starttime="20170918 22:15:04.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.657">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:04.657">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.657" starttime="20170918 22:15:04.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.659">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:04.660" starttime="20170918 22:15:04.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.661">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:04.661" starttime="20170918 22:15:04.660"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.661" starttime="20170918 22:15:04.660"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.661" starttime="20170918 22:15:04.658"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:04.661" starttime="20170918 22:15:04.658"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:04.661">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:04.661" starttime="20170918 22:15:04.661"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.662">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.662" starttime="20170918 22:15:04.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:04.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:04.662" starttime="20170918 22:15:04.662"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:04.663">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:04.663">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:04.663">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:04.663" starttime="20170918 22:15:04.663"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.664">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:04.664" starttime="20170918 22:15:04.196"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:04.664">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:04.664" starttime="20170918 22:15:04.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:04.665">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:04.665" starttime="20170918 22:15:04.665"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:04.665" starttime="20170918 22:15:03.933"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.671">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:14.671" starttime="20170918 22:15:14.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:14.672" starttime="20170918 22:15:14.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.673">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:14.673" starttime="20170918 22:15:14.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:14.673" starttime="20170918 22:15:14.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.868">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:14.868" starttime="20170918 22:15:14.674"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:14.868">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:14.868">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.868" starttime="20170918 22:15:14.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.869">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.869" starttime="20170918 22:15:14.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.870" starttime="20170918 22:15:14.869"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.870" starttime="20170918 22:15:14.670"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.870" starttime="20170918 22:15:14.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.870" starttime="20170918 22:15:14.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.871">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:14.871" starttime="20170918 22:15:14.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.873">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:14.873" starttime="20170918 22:15:14.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.874">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:14.874" starttime="20170918 22:15:14.873"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.874" starttime="20170918 22:15:14.873"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.874" starttime="20170918 22:15:14.871"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.874" starttime="20170918 22:15:14.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.936">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:14.936">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.936" starttime="20170918 22:15:14.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.938">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:14.938" starttime="20170918 22:15:14.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.939">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:14.939" starttime="20170918 22:15:14.939"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.939" starttime="20170918 22:15:14.938"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.940" starttime="20170918 22:15:14.937"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.940" starttime="20170918 22:15:14.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:14.940">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:14.940" starttime="20170918 22:15:14.940"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:14.940">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.940" starttime="20170918 22:15:14.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:14.941" starttime="20170918 22:15:14.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.942">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:14.942">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:14.942">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:14.942" starttime="20170918 22:15:14.941"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:14.942">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:14.942" starttime="20170918 22:15:14.667"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:14.942">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:14.942" starttime="20170918 22:15:14.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:14.943" starttime="20170918 22:15:14.943"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:14.943" starttime="20170918 22:15:14.667"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:14.947">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:14.947" starttime="20170918 22:15:14.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.948">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:14.948" starttime="20170918 22:15:14.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.948">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:14.948" starttime="20170918 22:15:14.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:14.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:14.949" starttime="20170918 22:15:14.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.136">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:15.136" starttime="20170918 22:15:14.950"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:15.136">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:15.136">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.136" starttime="20170918 22:15:14.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.137">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.137" starttime="20170918 22:15:15.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.138" starttime="20170918 22:15:15.137"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.138" starttime="20170918 22:15:14.946"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.138" starttime="20170918 22:15:14.945"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.138" starttime="20170918 22:15:14.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:15.139">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:15.139" starttime="20170918 22:15:15.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:15.141">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:15.141" starttime="20170918 22:15:15.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.142">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:15.142" starttime="20170918 22:15:15.142"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.142" starttime="20170918 22:15:15.141"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.143" starttime="20170918 22:15:15.140"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.143" starttime="20170918 22:15:15.139"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:15.265">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:15.265">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.265" starttime="20170918 22:15:15.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:15.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:15.267" starttime="20170918 22:15:15.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.268">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:15.268" starttime="20170918 22:15:15.267"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.268" starttime="20170918 22:15:15.267"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.268" starttime="20170918 22:15:15.266"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:15.268" starttime="20170918 22:15:15.265"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:15.268">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:15.268" starttime="20170918 22:15:15.268"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:15.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.269" starttime="20170918 22:15:14.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:15.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:15.269" starttime="20170918 22:15:15.269"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:15.270">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:15.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:15.270">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:15.270" starttime="20170918 22:15:15.270"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:15.270">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:15.270" starttime="20170918 22:15:14.944"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:15.271">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:15.271" starttime="20170918 22:15:14.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:15.271">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:15.271" starttime="20170918 22:15:15.271"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:15.272" starttime="20170918 22:15:14.666"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.277">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:25.277" starttime="20170918 22:15:25.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.278">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:25.278" starttime="20170918 22:15:25.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.278">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:25.278" starttime="20170918 22:15:25.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:25.280" starttime="20170918 22:15:25.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.462">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:25.462" starttime="20170918 22:15:25.280"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:25.463">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.463" starttime="20170918 22:15:25.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.463" starttime="20170918 22:15:25.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.464" starttime="20170918 22:15:25.464"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.464" starttime="20170918 22:15:25.276"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.464" starttime="20170918 22:15:25.275"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.465" starttime="20170918 22:15:25.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.465">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:25.465" starttime="20170918 22:15:25.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.467">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:25.467" starttime="20170918 22:15:25.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.468">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:25.468" starttime="20170918 22:15:25.468"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.468" starttime="20170918 22:15:25.467"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.469" starttime="20170918 22:15:25.466"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.469" starttime="20170918 22:15:25.466"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:25.542">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.542" starttime="20170918 22:15:25.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.544">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:25.544" starttime="20170918 22:15:25.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:25.545" starttime="20170918 22:15:25.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.545" starttime="20170918 22:15:25.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.545" starttime="20170918 22:15:25.543"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.545" starttime="20170918 22:15:25.542"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:25.546">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:25.546" starttime="20170918 22:15:25.545"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.546">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.546" starttime="20170918 22:15:25.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.547" starttime="20170918 22:15:25.546"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.548">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:25.548">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:25.548">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:25.548" starttime="20170918 22:15:25.547"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.548">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:25.549" starttime="20170918 22:15:25.274"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.549">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:25.549" starttime="20170918 22:15:25.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:25.549" starttime="20170918 22:15:25.549"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.550" starttime="20170918 22:15:25.273"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.554">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:25.554" starttime="20170918 22:15:25.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.555">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:25.555" starttime="20170918 22:15:25.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.555">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:25.555" starttime="20170918 22:15:25.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.556">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:25.556" starttime="20170918 22:15:25.555"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.755">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:25.755" starttime="20170918 22:15:25.557"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:25.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.755" starttime="20170918 22:15:25.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.756">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.756" starttime="20170918 22:15:25.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.757" starttime="20170918 22:15:25.757"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.757" starttime="20170918 22:15:25.553"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.757" starttime="20170918 22:15:25.552"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.757" starttime="20170918 22:15:25.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.758">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:25.758" starttime="20170918 22:15:25.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.760">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:25.760" starttime="20170918 22:15:25.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.761">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:25.761" starttime="20170918 22:15:25.761"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.762" starttime="20170918 22:15:25.760"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.762" starttime="20170918 22:15:25.759"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.762" starttime="20170918 22:15:25.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.871">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:25.871">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.871" starttime="20170918 22:15:25.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.873">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:25.873" starttime="20170918 22:15:25.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.875">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:25.875" starttime="20170918 22:15:25.874"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.875" starttime="20170918 22:15:25.873"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.875" starttime="20170918 22:15:25.872"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:25.875" starttime="20170918 22:15:25.872"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:25.875">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:25.876" starttime="20170918 22:15:25.875"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.876">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.876" starttime="20170918 22:15:25.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:25.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:25.876" starttime="20170918 22:15:25.876"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:25.877">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:25.877">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:25.877">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:25.877" starttime="20170918 22:15:25.877"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.877">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:25.877" starttime="20170918 22:15:25.550"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:25.878">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:25.878" starttime="20170918 22:15:25.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:25.878">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:25.878" starttime="20170918 22:15:25.878"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:25.879" starttime="20170918 22:15:25.272"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:35.884">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:35.885" starttime="20170918 22:15:35.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:35.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:35.886" starttime="20170918 22:15:35.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:35.887">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:35.887" starttime="20170918 22:15:35.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:35.888">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:35.888" starttime="20170918 22:15:35.887"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:36.168" starttime="20170918 22:15:35.889"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:36.168">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.168" starttime="20170918 22:15:35.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.169" starttime="20170918 22:15:36.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.170" starttime="20170918 22:15:36.169"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.170" starttime="20170918 22:15:35.883"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.170" starttime="20170918 22:15:35.883"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.170" starttime="20170918 22:15:35.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.171">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:36.171" starttime="20170918 22:15:36.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.173">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:36.173" starttime="20170918 22:15:36.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.174">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:36.174" starttime="20170918 22:15:36.173"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.174" starttime="20170918 22:15:36.173"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.174" starttime="20170918 22:15:36.171"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.174" starttime="20170918 22:15:36.171"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.257">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:36.257">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.257" starttime="20170918 22:15:36.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.259">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:36.259" starttime="20170918 22:15:36.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.260">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:36.260" starttime="20170918 22:15:36.260"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.260" starttime="20170918 22:15:36.259"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.261" starttime="20170918 22:15:36.258"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.261" starttime="20170918 22:15:36.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:36.261">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:36.261" starttime="20170918 22:15:36.261"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.261">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.261" starttime="20170918 22:15:35.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.262" starttime="20170918 22:15:36.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.263">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:36.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:36.263">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:36.263" starttime="20170918 22:15:36.262"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.263">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:36.263" starttime="20170918 22:15:35.881"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.264">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:36.264" starttime="20170918 22:15:35.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:36.264" starttime="20170918 22:15:36.264"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.265" starttime="20170918 22:15:35.880"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.270">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:36.273" starttime="20170918 22:15:36.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:36.274" starttime="20170918 22:15:36.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.276">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:36.276" starttime="20170918 22:15:36.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.277">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:36.277" starttime="20170918 22:15:36.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:36.471" starttime="20170918 22:15:36.278"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:36.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.471" starttime="20170918 22:15:36.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.472" starttime="20170918 22:15:36.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.473" starttime="20170918 22:15:36.472"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.473" starttime="20170918 22:15:36.269"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.473" starttime="20170918 22:15:36.268"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.473" starttime="20170918 22:15:36.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.473">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:36.474" starttime="20170918 22:15:36.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.476">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:36.476" starttime="20170918 22:15:36.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.477">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:36.477" starttime="20170918 22:15:36.476"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.477" starttime="20170918 22:15:36.476"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.477" starttime="20170918 22:15:36.474"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.477" starttime="20170918 22:15:36.474"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.563">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:36.563">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.564" starttime="20170918 22:15:36.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.565">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:36.565" starttime="20170918 22:15:36.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.566">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:36.567" starttime="20170918 22:15:36.566"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.567" starttime="20170918 22:15:36.566"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.567" starttime="20170918 22:15:36.564"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:36.567" starttime="20170918 22:15:36.564"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:36.567">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:36.567" starttime="20170918 22:15:36.567"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.568">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.568" starttime="20170918 22:15:36.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:36.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:36.568" starttime="20170918 22:15:36.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:36.569">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:36.569">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:36.569">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:36.569" starttime="20170918 22:15:36.568"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.569">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:36.569" starttime="20170918 22:15:36.265"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:36.570">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:36.570" starttime="20170918 22:15:36.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:36.570">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:36.570" starttime="20170918 22:15:36.570"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:36.570" starttime="20170918 22:15:35.879"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.576">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:46.576" starttime="20170918 22:15:46.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:46.577" starttime="20170918 22:15:46.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.578">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:46.578" starttime="20170918 22:15:46.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:46.578" starttime="20170918 22:15:46.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:46.818" starttime="20170918 22:15:46.579"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:46.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:46.818">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.818" starttime="20170918 22:15:46.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.819">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.819" starttime="20170918 22:15:46.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.819" starttime="20170918 22:15:46.819"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.820" starttime="20170918 22:15:46.575"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.820" starttime="20170918 22:15:46.575"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.820" starttime="20170918 22:15:46.574"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.821">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:46.821" starttime="20170918 22:15:46.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.824">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:46.824" starttime="20170918 22:15:46.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.826">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:46.826" starttime="20170918 22:15:46.825"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.826" starttime="20170918 22:15:46.824"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.826" starttime="20170918 22:15:46.822"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.826" starttime="20170918 22:15:46.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:46.948">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.948" starttime="20170918 22:15:46.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.950">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:46.950" starttime="20170918 22:15:46.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.951">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:46.951" starttime="20170918 22:15:46.951"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.951" starttime="20170918 22:15:46.950"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.951" starttime="20170918 22:15:46.949"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.951" starttime="20170918 22:15:46.949"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:46.952">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:46.952" starttime="20170918 22:15:46.952"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:46.952">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.952" starttime="20170918 22:15:46.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:46.953" starttime="20170918 22:15:46.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.953">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:46.953">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:46.954">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:46.954" starttime="20170918 22:15:46.953"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:46.954">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:46.954" starttime="20170918 22:15:46.573"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:46.954">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:46.954" starttime="20170918 22:15:46.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:46.955" starttime="20170918 22:15:46.954"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:46.955" starttime="20170918 22:15:46.572"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:46.959">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:46.959" starttime="20170918 22:15:46.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.960">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:46.960" starttime="20170918 22:15:46.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.960">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:46.960" starttime="20170918 22:15:46.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:46.961">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:46.961" starttime="20170918 22:15:46.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.181">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:47.181" starttime="20170918 22:15:46.962"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:47.181">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:47.181">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.181" starttime="20170918 22:15:46.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.182">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.182" starttime="20170918 22:15:47.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.183" starttime="20170918 22:15:47.182"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.183" starttime="20170918 22:15:46.958"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.183" starttime="20170918 22:15:46.957"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.183" starttime="20170918 22:15:46.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:47.184">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:47.184" starttime="20170918 22:15:47.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:47.187">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:47.187" starttime="20170918 22:15:47.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.188">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:47.188" starttime="20170918 22:15:47.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.188" starttime="20170918 22:15:47.187"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.188" starttime="20170918 22:15:47.185"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.188" starttime="20170918 22:15:47.184"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:47.309">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:47.310">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.310" starttime="20170918 22:15:47.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:47.313">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:47.313" starttime="20170918 22:15:47.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.314">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:47.314" starttime="20170918 22:15:47.314"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.314" starttime="20170918 22:15:47.313"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.315" starttime="20170918 22:15:47.311"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:47.315" starttime="20170918 22:15:47.310"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:47.315">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:47.315" starttime="20170918 22:15:47.315"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:47.316">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.316" starttime="20170918 22:15:46.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:47.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:47.317" starttime="20170918 22:15:47.316"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:47.318">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:47.318">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:47.318">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:47.318" starttime="20170918 22:15:47.317"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:47.318">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:47.318" starttime="20170918 22:15:46.955"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:47.319">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:47.319" starttime="20170918 22:15:46.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:47.320">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:47.320" starttime="20170918 22:15:47.319"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:47.320" starttime="20170918 22:15:46.571"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.326">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:57.326" starttime="20170918 22:15:57.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:57.327" starttime="20170918 22:15:57.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.328">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:57.328" starttime="20170918 22:15:57.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:57.328" starttime="20170918 22:15:57.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:57.533" starttime="20170918 22:15:57.329"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:57.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:57.533">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.533" starttime="20170918 22:15:57.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.534" starttime="20170918 22:15:57.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.534" starttime="20170918 22:15:57.534"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.534" starttime="20170918 22:15:57.324"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.535" starttime="20170918 22:15:57.324"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.535" starttime="20170918 22:15:57.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.535">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:15:57.535" starttime="20170918 22:15:57.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.537">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:57.537" starttime="20170918 22:15:57.537"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.538">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:57.538" starttime="20170918 22:15:57.538"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.539" starttime="20170918 22:15:57.538"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.539" starttime="20170918 22:15:57.536"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.539" starttime="20170918 22:15:57.536"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.637">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:57.637">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.637" starttime="20170918 22:15:57.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.639">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:57.639" starttime="20170918 22:15:57.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.640">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:57.640" starttime="20170918 22:15:57.640"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.641" starttime="20170918 22:15:57.639"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.641" starttime="20170918 22:15:57.638"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.641" starttime="20170918 22:15:57.637"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:57.641">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:57.641" starttime="20170918 22:15:57.641"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:57.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.641" starttime="20170918 22:15:57.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.642" starttime="20170918 22:15:57.642"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.643">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:57.643">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:57.643">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:57.643" starttime="20170918 22:15:57.642"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:57.643">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:15:57.643" starttime="20170918 22:15:57.322"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:57.643">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:15:57.643" starttime="20170918 22:15:57.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:15:57.644" starttime="20170918 22:15:57.644"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.644" starttime="20170918 22:15:57.321"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.648">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:15:57.648" starttime="20170918 22:15:57.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:15:57.649" starttime="20170918 22:15:57.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.649">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:15:57.649" starttime="20170918 22:15:57.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:15:57.650" starttime="20170918 22:15:57.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:15:57.939" starttime="20170918 22:15:57.651"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:57.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:15:57.939">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.939" starttime="20170918 22:15:57.650"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.940">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.940" starttime="20170918 22:15:57.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:57.941" starttime="20170918 22:15:57.940"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.941" starttime="20170918 22:15:57.647"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.941" starttime="20170918 22:15:57.646"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.941" starttime="20170918 22:15:57.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.942">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:15:57.942" starttime="20170918 22:15:57.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:57.946">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:57.946" starttime="20170918 22:15:57.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:57.947">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:15:57.947" starttime="20170918 22:15:57.947"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.947" starttime="20170918 22:15:57.946"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.947" starttime="20170918 22:15:57.943"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:57.948" starttime="20170918 22:15:57.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:58.034">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:15:58.034">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:58.034" starttime="20170918 22:15:57.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:58.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:58.036" starttime="20170918 22:15:58.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:58.037">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:15:58.037" starttime="20170918 22:15:58.037"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:58.037" starttime="20170918 22:15:58.036"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:58.038" starttime="20170918 22:15:58.035"></status>
</kw>
<status status="PASS" endtime="20170918 22:15:58.038" starttime="20170918 22:15:58.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:15:58.038">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:15:58.038" starttime="20170918 22:15:58.038"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:58.038">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:15:58.038" starttime="20170918 22:15:57.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:15:58.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:15:58.039" starttime="20170918 22:15:58.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:15:58.040">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:15:58.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:15:58.040">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:15:58.040" starttime="20170918 22:15:58.039"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:58.040">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:58.040" starttime="20170918 22:15:57.645"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:15:58.040">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:15:58.040" starttime="20170918 22:15:57.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:15:58.041">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:15:58.041" starttime="20170918 22:15:58.041"></status>
</kw>
<status status="FAIL" endtime="20170918 22:15:58.041" starttime="20170918 22:15:57.320"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.047">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:08.047" starttime="20170918 22:16:08.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:08.048" starttime="20170918 22:16:08.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.048">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:08.048" starttime="20170918 22:16:08.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:08.049" starttime="20170918 22:16:08.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.240">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:08.240" starttime="20170918 22:16:08.050"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.240">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:08.240">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.240" starttime="20170918 22:16:08.050"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.241">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.241" starttime="20170918 22:16:08.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.242" starttime="20170918 22:16:08.241"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.242" starttime="20170918 22:16:08.046"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.242" starttime="20170918 22:16:08.045"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.242" starttime="20170918 22:16:08.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.243">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:16:08.243" starttime="20170918 22:16:08.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.245">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:08.245" starttime="20170918 22:16:08.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.246">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:08.246" starttime="20170918 22:16:08.245"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.246" starttime="20170918 22:16:08.245"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.246" starttime="20170918 22:16:08.243"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.246" starttime="20170918 22:16:08.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.317">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:08.317">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.317" starttime="20170918 22:16:08.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:08.320" starttime="20170918 22:16:08.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.320">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:08.321" starttime="20170918 22:16:08.320"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.321" starttime="20170918 22:16:08.320"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.321" starttime="20170918 22:16:08.318"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.321" starttime="20170918 22:16:08.318"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:08.321">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:08.322" starttime="20170918 22:16:08.321"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.322">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.322" starttime="20170918 22:16:08.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.322" starttime="20170918 22:16:08.322"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.323">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:08.323">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:08.323">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:08.323" starttime="20170918 22:16:08.323"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.324">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:16:08.324" starttime="20170918 22:16:08.043"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.324">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:16:08.324" starttime="20170918 22:16:08.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:16:08.325" starttime="20170918 22:16:08.324"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.325" starttime="20170918 22:16:08.042"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.330">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:08.331" starttime="20170918 22:16:08.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:08.331" starttime="20170918 22:16:08.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.332">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:08.332" starttime="20170918 22:16:08.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.333">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:08.333" starttime="20170918 22:16:08.332"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.539">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:08.539" starttime="20170918 22:16:08.333"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.539">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:08.539">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.539" starttime="20170918 22:16:08.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.540" starttime="20170918 22:16:08.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.541" starttime="20170918 22:16:08.540"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.541" starttime="20170918 22:16:08.329"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.541" starttime="20170918 22:16:08.327"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.541" starttime="20170918 22:16:08.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.542">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:16:08.542" starttime="20170918 22:16:08.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.544">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:08.544" starttime="20170918 22:16:08.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.545">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:08.545" starttime="20170918 22:16:08.545"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.546" starttime="20170918 22:16:08.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.546" starttime="20170918 22:16:08.543"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.546" starttime="20170918 22:16:08.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.679">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:08.679">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.679" starttime="20170918 22:16:08.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.681">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:08.681" starttime="20170918 22:16:08.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.682">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:08.682" starttime="20170918 22:16:08.682"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.682" starttime="20170918 22:16:08.681"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.682" starttime="20170918 22:16:08.680"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:08.682" starttime="20170918 22:16:08.679"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:08.683">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:08.683" starttime="20170918 22:16:08.683"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.683">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.683" starttime="20170918 22:16:08.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:08.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:08.684" starttime="20170918 22:16:08.683"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:08.684">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:08.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:08.685">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:08.685" starttime="20170918 22:16:08.684"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.685">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:08.685" starttime="20170918 22:16:08.325"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:08.685">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:08.685" starttime="20170918 22:16:08.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:16:08.686">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:16:08.686" starttime="20170918 22:16:08.686"></status>
</kw>
<status status="FAIL" endtime="20170918 22:16:08.686" starttime="20170918 22:16:08.042"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.692">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:18.692" starttime="20170918 22:16:18.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:18.693" starttime="20170918 22:16:18.693"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.694">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:18.694" starttime="20170918 22:16:18.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:18.694" starttime="20170918 22:16:18.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:18.874" starttime="20170918 22:16:18.695"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:18.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:18.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.874" starttime="20170918 22:16:18.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.875" starttime="20170918 22:16:18.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.875" starttime="20170918 22:16:18.875"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.876" starttime="20170918 22:16:18.691"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.876" starttime="20170918 22:16:18.691"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.876" starttime="20170918 22:16:18.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.876">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:16:18.876" starttime="20170918 22:16:18.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.878">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:18.879" starttime="20170918 22:16:18.878"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.880">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:18.880" starttime="20170918 22:16:18.879"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.880" starttime="20170918 22:16:18.879"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.880" starttime="20170918 22:16:18.877"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.880" starttime="20170918 22:16:18.877"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:18.963">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.963" starttime="20170918 22:16:18.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:18.964" starttime="20170918 22:16:18.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:18.966" starttime="20170918 22:16:18.965"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.966" starttime="20170918 22:16:18.965"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.966" starttime="20170918 22:16:18.963"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.966" starttime="20170918 22:16:18.963"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:18.966">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:18.966" starttime="20170918 22:16:18.966"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:18.966">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.967" starttime="20170918 22:16:18.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:18.967" starttime="20170918 22:16:18.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:18.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:18.968">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:18.968" starttime="20170918 22:16:18.967"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:18.968">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:16:18.968" starttime="20170918 22:16:18.689"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:18.969">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:16:18.969" starttime="20170918 22:16:18.688"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:16:18.969" starttime="20170918 22:16:18.969"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:18.969" starttime="20170918 22:16:18.688"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:18.973">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:18.974" starttime="20170918 22:16:18.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:18.974" starttime="20170918 22:16:18.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.975">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:18.975" starttime="20170918 22:16:18.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:18.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:18.976" starttime="20170918 22:16:18.975"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:19.189" starttime="20170918 22:16:18.976"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:19.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:19.190">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.190" starttime="20170918 22:16:18.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.190" starttime="20170918 22:16:19.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.191" starttime="20170918 22:16:19.191"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.191" starttime="20170918 22:16:18.972"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.191" starttime="20170918 22:16:18.971"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.191" starttime="20170918 22:16:18.971"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:19.192">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:16:19.192" starttime="20170918 22:16:19.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:19.194">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:19.194" starttime="20170918 22:16:19.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.195">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:19.195" starttime="20170918 22:16:19.195"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.195" starttime="20170918 22:16:19.194"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.196" starttime="20170918 22:16:19.193"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.196" starttime="20170918 22:16:19.192"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:19.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:19.281">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.282" starttime="20170918 22:16:19.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:19.283">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:19.283" starttime="20170918 22:16:19.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.284">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:19.284" starttime="20170918 22:16:19.284"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.285" starttime="20170918 22:16:19.284"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.285" starttime="20170918 22:16:19.282"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:19.285" starttime="20170918 22:16:19.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:19.285">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:19.285" starttime="20170918 22:16:19.285"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:19.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.285" starttime="20170918 22:16:18.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:19.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:19.286" starttime="20170918 22:16:19.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:19.287">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:19.287">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:19.287">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:19.287" starttime="20170918 22:16:19.286"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:19.287">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:19.287" starttime="20170918 22:16:18.970"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:19.288">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:19.288" starttime="20170918 22:16:18.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:16:19.288">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:16:19.288" starttime="20170918 22:16:19.288"></status>
</kw>
<status status="FAIL" endtime="20170918 22:16:19.288" starttime="20170918 22:16:18.687"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.299">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:29.300" starttime="20170918 22:16:29.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:29.301" starttime="20170918 22:16:29.300"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.302">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:29.302" starttime="20170918 22:16:29.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:29.303" starttime="20170918 22:16:29.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.541">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:29.541" starttime="20170918 22:16:29.305"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.541">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:29.541">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.541" starttime="20170918 22:16:29.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.542">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.542" starttime="20170918 22:16:29.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.543" starttime="20170918 22:16:29.542"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.543" starttime="20170918 22:16:29.298"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.543" starttime="20170918 22:16:29.297"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.543" starttime="20170918 22:16:29.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.544">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:16:29.544" starttime="20170918 22:16:29.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.546">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:29.546" starttime="20170918 22:16:29.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.547">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:29.548" starttime="20170918 22:16:29.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.548" starttime="20170918 22:16:29.546"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.548" starttime="20170918 22:16:29.544"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.548" starttime="20170918 22:16:29.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.612">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:29.612">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.612" starttime="20170918 22:16:29.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.614">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:29.614" starttime="20170918 22:16:29.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.615">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:29.615" starttime="20170918 22:16:29.614"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.615" starttime="20170918 22:16:29.614"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.615" starttime="20170918 22:16:29.613"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.615" starttime="20170918 22:16:29.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:29.615">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:29.615" starttime="20170918 22:16:29.615"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.616">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.616" starttime="20170918 22:16:29.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.616" starttime="20170918 22:16:29.616"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:29.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:29.617">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:29.617" starttime="20170918 22:16:29.617"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.617">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:16:29.617" starttime="20170918 22:16:29.294"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.618">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:16:29.618" starttime="20170918 22:16:29.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:16:29.618" starttime="20170918 22:16:29.618"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.618" starttime="20170918 22:16:29.290"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.622">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:29.622" starttime="20170918 22:16:29.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:29.623" starttime="20170918 22:16:29.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.624">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:29.624" starttime="20170918 22:16:29.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:29.624" starttime="20170918 22:16:29.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:29.827" starttime="20170918 22:16:29.625"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:29.827">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.827" starttime="20170918 22:16:29.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.828" starttime="20170918 22:16:29.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.829" starttime="20170918 22:16:29.828"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.829" starttime="20170918 22:16:29.621"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.829" starttime="20170918 22:16:29.621"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.829" starttime="20170918 22:16:29.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.830">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:16:29.830" starttime="20170918 22:16:29.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.832">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:29.832" starttime="20170918 22:16:29.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.833">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:29.833" starttime="20170918 22:16:29.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.833" starttime="20170918 22:16:29.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.833" starttime="20170918 22:16:29.830"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.833" starttime="20170918 22:16:29.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:29.923">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.923" starttime="20170918 22:16:29.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:29.925" starttime="20170918 22:16:29.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:29.926" starttime="20170918 22:16:29.925"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.926" starttime="20170918 22:16:29.925"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.926" starttime="20170918 22:16:29.923"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:29.926" starttime="20170918 22:16:29.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:29.926">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:29.926" starttime="20170918 22:16:29.926"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.927">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.927" starttime="20170918 22:16:29.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:29.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:29.927" starttime="20170918 22:16:29.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:29.928">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:29.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:29.928">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:29.928" starttime="20170918 22:16:29.928"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.928">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:29.928" starttime="20170918 22:16:29.619"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:29.929">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:29.929" starttime="20170918 22:16:29.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:16:29.929">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:16:29.929" starttime="20170918 22:16:29.929"></status>
</kw>
<status status="FAIL" endtime="20170918 22:16:29.930" starttime="20170918 22:16:29.289"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:39.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:39.936" starttime="20170918 22:16:39.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:39.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:39.937" starttime="20170918 22:16:39.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:39.937">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:39.937" starttime="20170918 22:16:39.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:39.938">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:39.938" starttime="20170918 22:16:39.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.192">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:40.192" starttime="20170918 22:16:39.938"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:40.193">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.193" starttime="20170918 22:16:39.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.194" starttime="20170918 22:16:40.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.195" starttime="20170918 22:16:40.194"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.195" starttime="20170918 22:16:39.934"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.195" starttime="20170918 22:16:39.934"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.195" starttime="20170918 22:16:39.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.196">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:16:40.196" starttime="20170918 22:16:40.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.198">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:40.198" starttime="20170918 22:16:40.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.199">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:40.199" starttime="20170918 22:16:40.199"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.200" starttime="20170918 22:16:40.199"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.200" starttime="20170918 22:16:40.197"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.200" starttime="20170918 22:16:40.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:40.262">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.262" starttime="20170918 22:16:40.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.264">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:40.264" starttime="20170918 22:16:40.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.265">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:40.265" starttime="20170918 22:16:40.265"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.265" starttime="20170918 22:16:40.264"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.266" starttime="20170918 22:16:40.263"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.266" starttime="20170918 22:16:40.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:40.266">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:40.266" starttime="20170918 22:16:40.266"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.267">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.267" starttime="20170918 22:16:39.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.267" starttime="20170918 22:16:40.267"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.268">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:40.268">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:40.268">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:40.268" starttime="20170918 22:16:40.267"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.268">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:16:40.268" starttime="20170918 22:16:39.932"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.269">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:16:40.269" starttime="20170918 22:16:39.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:16:40.269" starttime="20170918 22:16:40.269"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.269" starttime="20170918 22:16:39.931"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.273">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:40.274" starttime="20170918 22:16:40.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:40.274" starttime="20170918 22:16:40.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.275">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:40.276" starttime="20170918 22:16:40.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:40.276" starttime="20170918 22:16:40.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:40.486" starttime="20170918 22:16:40.277"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:40.486">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.486" starttime="20170918 22:16:40.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.487" starttime="20170918 22:16:40.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.488" starttime="20170918 22:16:40.487"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.488" starttime="20170918 22:16:40.272"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.488" starttime="20170918 22:16:40.271"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.488" starttime="20170918 22:16:40.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.489">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:16:40.489" starttime="20170918 22:16:40.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.491">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:40.491" starttime="20170918 22:16:40.490"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.492">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:40.492" starttime="20170918 22:16:40.492"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.492" starttime="20170918 22:16:40.491"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.493" starttime="20170918 22:16:40.489"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.493" starttime="20170918 22:16:40.489"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:40.579">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.579" starttime="20170918 22:16:40.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:40.581" starttime="20170918 22:16:40.580"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:40.582" starttime="20170918 22:16:40.582"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.582" starttime="20170918 22:16:40.581"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.582" starttime="20170918 22:16:40.580"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:40.582" starttime="20170918 22:16:40.579"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:40.583">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:40.583" starttime="20170918 22:16:40.583"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.583">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.583" starttime="20170918 22:16:40.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:40.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:40.584" starttime="20170918 22:16:40.583"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:40.585">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:40.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:40.586">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:40.586" starttime="20170918 22:16:40.584"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.586">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:40.586" starttime="20170918 22:16:40.270"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:40.587">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:40.587" starttime="20170918 22:16:40.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:16:40.587">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:16:40.587" starttime="20170918 22:16:40.587"></status>
</kw>
<status status="FAIL" endtime="20170918 22:16:40.588" starttime="20170918 22:16:39.930"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.595">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:50.595" starttime="20170918 22:16:50.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:50.596" starttime="20170918 22:16:50.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.597">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:50.597" starttime="20170918 22:16:50.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:50.599" starttime="20170918 22:16:50.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:50.826" starttime="20170918 22:16:50.600"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:50.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:50.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.826" starttime="20170918 22:16:50.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.827" starttime="20170918 22:16:50.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.828" starttime="20170918 22:16:50.828"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.828" starttime="20170918 22:16:50.594"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.828" starttime="20170918 22:16:50.593"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.829" starttime="20170918 22:16:50.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.829">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:16:50.829" starttime="20170918 22:16:50.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.831">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:50.831" starttime="20170918 22:16:50.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.832">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:50.832" starttime="20170918 22:16:50.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.832" starttime="20170918 22:16:50.831"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.833" starttime="20170918 22:16:50.830"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.833" starttime="20170918 22:16:50.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.902">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:50.902">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.902" starttime="20170918 22:16:50.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.904">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:50.904" starttime="20170918 22:16:50.903"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.904">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:50.905" starttime="20170918 22:16:50.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.905" starttime="20170918 22:16:50.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.905" starttime="20170918 22:16:50.903"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.905" starttime="20170918 22:16:50.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:50.905">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:50.905" starttime="20170918 22:16:50.905"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:50.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.906" starttime="20170918 22:16:50.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:50.906" starttime="20170918 22:16:50.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.907">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:50.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:50.907">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:50.907" starttime="20170918 22:16:50.907"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:50.907">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:16:50.907" starttime="20170918 22:16:50.590"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:50.908">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:16:50.908" starttime="20170918 22:16:50.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:16:50.908" starttime="20170918 22:16:50.908"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:50.908" starttime="20170918 22:16:50.589"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:50.913">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:16:50.914" starttime="20170918 22:16:50.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:16:50.915" starttime="20170918 22:16:50.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.916">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:16:50.916" starttime="20170918 22:16:50.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:50.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:16:50.917" starttime="20170918 22:16:50.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.117">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:16:51.117" starttime="20170918 22:16:50.918"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:51.117">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:16:51.117">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.118" starttime="20170918 22:16:50.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.118">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.118" starttime="20170918 22:16:51.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.119" starttime="20170918 22:16:51.119"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.119" starttime="20170918 22:16:50.912"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.119" starttime="20170918 22:16:50.911"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.120" starttime="20170918 22:16:50.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:51.120">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:16:51.121" starttime="20170918 22:16:51.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:51.124">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:51.124" starttime="20170918 22:16:51.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.125">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:16:51.125" starttime="20170918 22:16:51.125"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.125" starttime="20170918 22:16:51.124"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.125" starttime="20170918 22:16:51.122"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.125" starttime="20170918 22:16:51.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:51.234">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:16:51.235">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.235" starttime="20170918 22:16:51.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:51.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:51.237" starttime="20170918 22:16:51.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.239">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:16:51.239" starttime="20170918 22:16:51.238"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.239" starttime="20170918 22:16:51.237"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.239" starttime="20170918 22:16:51.236"></status>
</kw>
<status status="PASS" endtime="20170918 22:16:51.239" starttime="20170918 22:16:51.235"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:16:51.240">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:16:51.240" starttime="20170918 22:16:51.240"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:51.240">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.240" starttime="20170918 22:16:50.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:16:51.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:16:51.241" starttime="20170918 22:16:51.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:16:51.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:16:51.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:16:51.241">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:16:51.241" starttime="20170918 22:16:51.241"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:51.242">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:51.242" starttime="20170918 22:16:50.909"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:16:51.242">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:16:51.242" starttime="20170918 22:16:50.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:16:51.243">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:16:51.243" starttime="20170918 22:16:51.243"></status>
</kw>
<status status="FAIL" endtime="20170918 22:16:51.243" starttime="20170918 22:16:50.588"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.249">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:01.249" starttime="20170918 22:17:01.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:01.250" starttime="20170918 22:17:01.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.250">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:01.250" starttime="20170918 22:17:01.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:01.251" starttime="20170918 22:17:01.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:01.503" starttime="20170918 22:17:01.252"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:01.503">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.503" starttime="20170918 22:17:01.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.504" starttime="20170918 22:17:01.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.504" starttime="20170918 22:17:01.504"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.505" starttime="20170918 22:17:01.248"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.505" starttime="20170918 22:17:01.247"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.505" starttime="20170918 22:17:01.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.505">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:17:01.506" starttime="20170918 22:17:01.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.508">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:01.508" starttime="20170918 22:17:01.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.509">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:01.509" starttime="20170918 22:17:01.508"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.509" starttime="20170918 22:17:01.508"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.509" starttime="20170918 22:17:01.506"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.509" starttime="20170918 22:17:01.506"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.615">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:01.616">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.616" starttime="20170918 22:17:01.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.618">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:01.618" starttime="20170918 22:17:01.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.620">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:01.620" starttime="20170918 22:17:01.619"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.620" starttime="20170918 22:17:01.619"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.620" starttime="20170918 22:17:01.617"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.620" starttime="20170918 22:17:01.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:01.620">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:01.621" starttime="20170918 22:17:01.620"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.621">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.621" starttime="20170918 22:17:01.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.621" starttime="20170918 22:17:01.621"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:01.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:01.622">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:01.622" starttime="20170918 22:17:01.622"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.623">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:17:01.623" starttime="20170918 22:17:01.245"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.623">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:17:01.623" starttime="20170918 22:17:01.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:01.623" starttime="20170918 22:17:01.623"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.624" starttime="20170918 22:17:01.245"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.627">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:01.628" starttime="20170918 22:17:01.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:01.629" starttime="20170918 22:17:01.628"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.629">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:01.629" starttime="20170918 22:17:01.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.630">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:01.630" starttime="20170918 22:17:01.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:01.850" starttime="20170918 22:17:01.631"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.851">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:01.851">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.851" starttime="20170918 22:17:01.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.851">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.851" starttime="20170918 22:17:01.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.852" starttime="20170918 22:17:01.852"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.852" starttime="20170918 22:17:01.626"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.852" starttime="20170918 22:17:01.626"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.852" starttime="20170918 22:17:01.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.853">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:01.853" starttime="20170918 22:17:01.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.856">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:01.856" starttime="20170918 22:17:01.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.857">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:01.858" starttime="20170918 22:17:01.857"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.858" starttime="20170918 22:17:01.856"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.858" starttime="20170918 22:17:01.854"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.858" starttime="20170918 22:17:01.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.943">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:01.943">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.943" starttime="20170918 22:17:01.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.945">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:01.945" starttime="20170918 22:17:01.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.946">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:01.946" starttime="20170918 22:17:01.946"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.946" starttime="20170918 22:17:01.945"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.946" starttime="20170918 22:17:01.944"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:01.946" starttime="20170918 22:17:01.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:01.947">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:01.947" starttime="20170918 22:17:01.947"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.947">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.947" starttime="20170918 22:17:01.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:01.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:01.948" starttime="20170918 22:17:01.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:01.949">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:01.949">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:01.949">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:01.949" starttime="20170918 22:17:01.948"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.949">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:01.949" starttime="20170918 22:17:01.624"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:01.949">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:01.950" starttime="20170918 22:17:01.624"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:17:01.950">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:01.950" starttime="20170918 22:17:01.950"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:01.950" starttime="20170918 22:17:01.244"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:11.958">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:11.959" starttime="20170918 22:17:11.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:11.960">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:11.960" starttime="20170918 22:17:11.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:11.961">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:11.961" starttime="20170918 22:17:11.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:11.962">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:11.962" starttime="20170918 22:17:11.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:12.140" starttime="20170918 22:17:11.963"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:12.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.141" starttime="20170918 22:17:11.962"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.141" starttime="20170918 22:17:12.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.142" starttime="20170918 22:17:12.142"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.142" starttime="20170918 22:17:11.957"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.142" starttime="20170918 22:17:11.956"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.142" starttime="20170918 22:17:11.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.143">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:17:12.143" starttime="20170918 22:17:12.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.145">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:12.145" starttime="20170918 22:17:12.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.149">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:12.150" starttime="20170918 22:17:12.146"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.150" starttime="20170918 22:17:12.146"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.150" starttime="20170918 22:17:12.144"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.150" starttime="20170918 22:17:12.143"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.275">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:12.276">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.276" starttime="20170918 22:17:12.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.278">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:12.278" starttime="20170918 22:17:12.277"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.279">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:12.279" starttime="20170918 22:17:12.279"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.279" starttime="20170918 22:17:12.278"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.279" starttime="20170918 22:17:12.277"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.279" starttime="20170918 22:17:12.276"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:12.280">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:12.280" starttime="20170918 22:17:12.280"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.280">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.280" starttime="20170918 22:17:11.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.281">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.281" starttime="20170918 22:17:12.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.281">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:12.281">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:12.282">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:12.282" starttime="20170918 22:17:12.281"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.282">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:17:12.282" starttime="20170918 22:17:11.953"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.282">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:17:12.282" starttime="20170918 22:17:11.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:12.283" starttime="20170918 22:17:12.282"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.283" starttime="20170918 22:17:11.952"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.287">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:12.288" starttime="20170918 22:17:12.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:12.288" starttime="20170918 22:17:12.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.289">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:12.289" starttime="20170918 22:17:12.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:12.289" starttime="20170918 22:17:12.289"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.541">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:12.541" starttime="20170918 22:17:12.290"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.541">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:12.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.542" starttime="20170918 22:17:12.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.542">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.542" starttime="20170918 22:17:12.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.543" starttime="20170918 22:17:12.543"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.543" starttime="20170918 22:17:12.286"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.543" starttime="20170918 22:17:12.286"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.544" starttime="20170918 22:17:12.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.544">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:12.544" starttime="20170918 22:17:12.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.547">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:12.547" starttime="20170918 22:17:12.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.548">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:12.548" starttime="20170918 22:17:12.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.548" starttime="20170918 22:17:12.547"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.548" starttime="20170918 22:17:12.545"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.548" starttime="20170918 22:17:12.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.672">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:12.672">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.672" starttime="20170918 22:17:12.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.674">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:12.674" starttime="20170918 22:17:12.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.675">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:12.675" starttime="20170918 22:17:12.674"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.675" starttime="20170918 22:17:12.674"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.675" starttime="20170918 22:17:12.673"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:12.675" starttime="20170918 22:17:12.672"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:12.675">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:12.675" starttime="20170918 22:17:12.675"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.676" starttime="20170918 22:17:12.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:12.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:12.676" starttime="20170918 22:17:12.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:12.677">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:12.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:12.677">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:12.677" starttime="20170918 22:17:12.677"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.677">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:12.677" starttime="20170918 22:17:12.283"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:12.678">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:12.678" starttime="20170918 22:17:12.283"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:17:12.678">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:12.679" starttime="20170918 22:17:12.678"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:12.679" starttime="20170918 22:17:11.951"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.685">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:22.685" starttime="20170918 22:17:22.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.686">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:22.686" starttime="20170918 22:17:22.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.687">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:22.687" starttime="20170918 22:17:22.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:22.688" starttime="20170918 22:17:22.687"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:22.878" starttime="20170918 22:17:22.689"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:22.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:22.878">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.878" starttime="20170918 22:17:22.688"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.879" starttime="20170918 22:17:22.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.880" starttime="20170918 22:17:22.879"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.880" starttime="20170918 22:17:22.683"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.880" starttime="20170918 22:17:22.683"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.880" starttime="20170918 22:17:22.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.881">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:17:22.881" starttime="20170918 22:17:22.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.884">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:22.884" starttime="20170918 22:17:22.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.885">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:22.885" starttime="20170918 22:17:22.885"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.885" starttime="20170918 22:17:22.884"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.885" starttime="20170918 22:17:22.882"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.885" starttime="20170918 22:17:22.882"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:22.957">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.957" starttime="20170918 22:17:22.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.959">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:22.959" starttime="20170918 22:17:22.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.960">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:22.961" starttime="20170918 22:17:22.960"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.961" starttime="20170918 22:17:22.959"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.961" starttime="20170918 22:17:22.958"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.961" starttime="20170918 22:17:22.958"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:22.961">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:22.961" starttime="20170918 22:17:22.961"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:22.962">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.962" starttime="20170918 22:17:22.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:22.962" starttime="20170918 22:17:22.962"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.963">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:22.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:22.963">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:22.963" starttime="20170918 22:17:22.963"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:22.963">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:17:22.963" starttime="20170918 22:17:22.681"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:22.964">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:17:22.964" starttime="20170918 22:17:22.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:22.964" starttime="20170918 22:17:22.964"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:22.964" starttime="20170918 22:17:22.680"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:22.968">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:22.968" starttime="20170918 22:17:22.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.969">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:22.969" starttime="20170918 22:17:22.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.970">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:22.970" starttime="20170918 22:17:22.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:22.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:22.970" starttime="20170918 22:17:22.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:23.178" starttime="20170918 22:17:22.971"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:23.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:23.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.178" starttime="20170918 22:17:22.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.179" starttime="20170918 22:17:23.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.180" starttime="20170918 22:17:23.180"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.181" starttime="20170918 22:17:22.967"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.181" starttime="20170918 22:17:22.967"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.181" starttime="20170918 22:17:22.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:23.185">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:23.185" starttime="20170918 22:17:23.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:23.187">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:23.188" starttime="20170918 22:17:23.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.188">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:23.189" starttime="20170918 22:17:23.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.189" starttime="20170918 22:17:23.188"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.189" starttime="20170918 22:17:23.186"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.189" starttime="20170918 22:17:23.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:23.312">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:23.312">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.313" starttime="20170918 22:17:23.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:23.318">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:23.318" starttime="20170918 22:17:23.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.319">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:23.319" starttime="20170918 22:17:23.318"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.319" starttime="20170918 22:17:23.318"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.319" starttime="20170918 22:17:23.314"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:23.319" starttime="20170918 22:17:23.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:23.319">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:23.320" starttime="20170918 22:17:23.319"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:23.320">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.320" starttime="20170918 22:17:22.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:23.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:23.320" starttime="20170918 22:17:23.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:23.321">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:23.321">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:23.321">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:23.321" starttime="20170918 22:17:23.321"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:23.321">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:23.322" starttime="20170918 22:17:22.965"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:23.322">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:23.322" starttime="20170918 22:17:22.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:17:23.323">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:23.323" starttime="20170918 22:17:23.322"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:23.323" starttime="20170918 22:17:22.679"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.329">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:33.329" starttime="20170918 22:17:33.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:33.330" starttime="20170918 22:17:33.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.330">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:33.330" starttime="20170918 22:17:33.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.331">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:33.331" starttime="20170918 22:17:33.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:33.509" starttime="20170918 22:17:33.332"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:33.509">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.509" starttime="20170918 22:17:33.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.510" starttime="20170918 22:17:33.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.510" starttime="20170918 22:17:33.510"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.511" starttime="20170918 22:17:33.328"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.511" starttime="20170918 22:17:33.327"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.511" starttime="20170918 22:17:33.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.511">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:17:33.511" starttime="20170918 22:17:33.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.514">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:33.514" starttime="20170918 22:17:33.513"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.514">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:33.515" starttime="20170918 22:17:33.514"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.515" starttime="20170918 22:17:33.514"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.515" starttime="20170918 22:17:33.512"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.515" starttime="20170918 22:17:33.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.577">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:33.577">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.577" starttime="20170918 22:17:33.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.579">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:33.579" starttime="20170918 22:17:33.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.580">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:33.580" starttime="20170918 22:17:33.580"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.580" starttime="20170918 22:17:33.579"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.581" starttime="20170918 22:17:33.578"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.581" starttime="20170918 22:17:33.578"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:33.581">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:33.581" starttime="20170918 22:17:33.581"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.581">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.581" starttime="20170918 22:17:33.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.582" starttime="20170918 22:17:33.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.583">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:33.583">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:33.583">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:33.583" starttime="20170918 22:17:33.583"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.583">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:17:33.583" starttime="20170918 22:17:33.325"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.584">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:17:33.584" starttime="20170918 22:17:33.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:33.584" starttime="20170918 22:17:33.584"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.584" starttime="20170918 22:17:33.324"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.588">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:33.589" starttime="20170918 22:17:33.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.589">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:33.589" starttime="20170918 22:17:33.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.590">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:33.590" starttime="20170918 22:17:33.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.591">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:33.591" starttime="20170918 22:17:33.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.809">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:33.809" starttime="20170918 22:17:33.591"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.809">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:33.810">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.810" starttime="20170918 22:17:33.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.810">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.810" starttime="20170918 22:17:33.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.811" starttime="20170918 22:17:33.811"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.811" starttime="20170918 22:17:33.588"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.811" starttime="20170918 22:17:33.587"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.812" starttime="20170918 22:17:33.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.812">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:33.812" starttime="20170918 22:17:33.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.814">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:33.814" starttime="20170918 22:17:33.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.815">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:33.815" starttime="20170918 22:17:33.815"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.815" starttime="20170918 22:17:33.814"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.816" starttime="20170918 22:17:33.813"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.816" starttime="20170918 22:17:33.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.901">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:33.901">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.902" starttime="20170918 22:17:33.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.904">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:33.904" starttime="20170918 22:17:33.903"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.905">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:33.905" starttime="20170918 22:17:33.905"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.905" starttime="20170918 22:17:33.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.906" starttime="20170918 22:17:33.903"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:33.906" starttime="20170918 22:17:33.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:33.906">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:33.906" starttime="20170918 22:17:33.906"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.907" starttime="20170918 22:17:33.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:33.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:33.907" starttime="20170918 22:17:33.907"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:33.908">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:33.908">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:33.908">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:33.908" starttime="20170918 22:17:33.908"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.908">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:33.909" starttime="20170918 22:17:33.585"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:33.909">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:33.909" starttime="20170918 22:17:33.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:17:33.909">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:33.910" starttime="20170918 22:17:33.909"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:33.910" starttime="20170918 22:17:33.323"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:43.916">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:43.916" starttime="20170918 22:17:43.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:43.917">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:43.917" starttime="20170918 22:17:43.916"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:43.918">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:43.918" starttime="20170918 22:17:43.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:43.918">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:43.918" starttime="20170918 22:17:43.918"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.136">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:44.136" starttime="20170918 22:17:43.919"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.136">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:44.136">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.136" starttime="20170918 22:17:43.918"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.137">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.137" starttime="20170918 22:17:44.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.138" starttime="20170918 22:17:44.138"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.138" starttime="20170918 22:17:43.915"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.138" starttime="20170918 22:17:43.914"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.138" starttime="20170918 22:17:43.914"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.139">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:17:44.139" starttime="20170918 22:17:44.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.141">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.141" starttime="20170918 22:17:44.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.142">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.142" starttime="20170918 22:17:44.142"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.142" starttime="20170918 22:17:44.141"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.142" starttime="20170918 22:17:44.140"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.142" starttime="20170918 22:17:44.139"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.217">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:44.218">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.218" starttime="20170918 22:17:44.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.219">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.220" starttime="20170918 22:17:44.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.221">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.221" starttime="20170918 22:17:44.220"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.221" starttime="20170918 22:17:44.220"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.221" starttime="20170918 22:17:44.218"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.221" starttime="20170918 22:17:44.218"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:44.221">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:44.222" starttime="20170918 22:17:44.221"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.222">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.222" starttime="20170918 22:17:43.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.222" starttime="20170918 22:17:44.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.223">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:44.223">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:44.223">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:44.223" starttime="20170918 22:17:44.223"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.223">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:17:44.224" starttime="20170918 22:17:43.912"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.224">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:17:44.224" starttime="20170918 22:17:43.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:44.224" starttime="20170918 22:17:44.224"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.225" starttime="20170918 22:17:43.912"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.228">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:44.229" starttime="20170918 22:17:44.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:44.230" starttime="20170918 22:17:44.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.230">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:44.230" starttime="20170918 22:17:44.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:44.231" starttime="20170918 22:17:44.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:44.409" starttime="20170918 22:17:44.231"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:44.409">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.409" starttime="20170918 22:17:44.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.410">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.410" starttime="20170918 22:17:44.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.411" starttime="20170918 22:17:44.410"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.411" starttime="20170918 22:17:44.227"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.411" starttime="20170918 22:17:44.227"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.411" starttime="20170918 22:17:44.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.412">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:44.412" starttime="20170918 22:17:44.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.415">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.415" starttime="20170918 22:17:44.414"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.417">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.417" starttime="20170918 22:17:44.416"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.417" starttime="20170918 22:17:44.415"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.417" starttime="20170918 22:17:44.413"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.417" starttime="20170918 22:17:44.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:44.538">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.538" starttime="20170918 22:17:44.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.540">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.540" starttime="20170918 22:17:44.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.541">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.541" starttime="20170918 22:17:44.541"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.541" starttime="20170918 22:17:44.540"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.541" starttime="20170918 22:17:44.539"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.541" starttime="20170918 22:17:44.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:44.542">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:44.542" starttime="20170918 22:17:44.542"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.542" starttime="20170918 22:17:44.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.543" starttime="20170918 22:17:44.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.543">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:44.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:44.543">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:44.544" starttime="20170918 22:17:44.543"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.544">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:44.544" starttime="20170918 22:17:44.225"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.544">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:44.544" starttime="20170918 22:17:44.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:17:44.545">Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:44.545" starttime="20170918 22:17:44.544"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:44.545" starttime="20170918 22:17:43.911"></status>
</kw>
<msg level="FAIL" timestamp="20170918 22:17:44.545">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:17:44.545" starttime="20170918 22:07:38.295"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:44.545" starttime="20170918 22:07:37.622"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:44.546" starttime="20170918 22:07:35.350"></status>
</kw>
<status status="FAIL" endtime="20170918 22:17:44.546" starttime="20170918 22:07:35.349"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.552">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:17:44.552" starttime="20170918 22:17:44.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:17:44.553" starttime="20170918 22:17:44.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.553">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:17:44.553" starttime="20170918 22:17:44.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.554">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:17:44.554" starttime="20170918 22:17:44.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:17:44.730" starttime="20170918 22:17:44.555"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.730">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:44.730">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.730" starttime="20170918 22:17:44.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.731">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.731" starttime="20170918 22:17:44.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.732" starttime="20170918 22:17:44.731"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.732" starttime="20170918 22:17:44.551"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.732" starttime="20170918 22:17:44.550"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.732" starttime="20170918 22:17:44.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.733">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:17:44.733" starttime="20170918 22:17:44.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.735">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.735" starttime="20170918 22:17:44.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.736">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:17:44.736" starttime="20170918 22:17:44.736"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.736" starttime="20170918 22:17:44.735"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.736" starttime="20170918 22:17:44.733"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.736" starttime="20170918 22:17:44.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:17:44.823">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.823" starttime="20170918 22:17:44.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.825" starttime="20170918 22:17:44.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:17:44.826" starttime="20170918 22:17:44.826"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.826" starttime="20170918 22:17:44.825"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.826" starttime="20170918 22:17:44.824"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:44.826" starttime="20170918 22:17:44.824"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:17:44.827">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:17:44.827" starttime="20170918 22:17:44.827"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.827">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.827" starttime="20170918 22:17:44.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:17:44.828" starttime="20170918 22:17:44.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:17:44.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:17:44.829">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:17:44.829" starttime="20170918 22:17:44.828"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.829">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:44.829" starttime="20170918 22:17:44.548"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.829">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:17:44.829" starttime="20170918 22:17:44.547"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:44.830" starttime="20170918 22:17:44.830"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.830">${status} = True</msg>
<status status="PASS" endtime="20170918 22:17:44.830" starttime="20170918 22:17:44.830"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:44.831">${status} = True</msg>
<status status="PASS" endtime="20170918 22:17:44.831" starttime="20170918 22:17:44.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:44.862">Length is 10</msg>
<status status="PASS" endtime="20170918 22:17:44.862" starttime="20170918 22:17:44.862"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:44.868">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:17:47.872">${RC} = 0</msg>
<msg level="INFO" timestamp="20170918 22:17:47.873">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.26 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.657 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170918 22:17:47.873" starttime="20170918 22:17:44.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:47.876">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.26 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.657 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.588 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.598 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.588/1.277/3.267/1.149 ms</msg>
<status status="PASS" endtime="20170918 22:17:47.876" starttime="20170918 22:17:47.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:47.876" starttime="20170918 22:17:47.876"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:47.877" starttime="20170918 22:17:44.861"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.902">${cur_time} = 2017-09-18 22:17:47:901967</msg>
<status status="PASS" endtime="20170918 22:17:47.902" starttime="20170918 22:17:47.902"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.903">${cur_time} = 20170918221747901967</msg>
<status status="PASS" endtime="20170918 22:17:47.903" starttime="20170918 22:17:47.903"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:47.903" starttime="20170918 22:17:47.901"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:47.903">${FFDC_TIME} = 20170918221747901967</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.918">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170918 22:17:47.918" starttime="20170918 22:17:47.918"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.919">${suite_name} = 20170918221747901967_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170918 22:17:47.919" starttime="20170918 22:17:47.918"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.919">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20170918 22:17:47.919" starttime="20170918 22:17:47.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:47.920">${test_name} = 20170918221747901967_PowerOnTest</msg>
<status status="PASS" endtime="20170918 22:17:47.920" starttime="20170918 22:17:47.920"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:47.920" starttime="20170918 22:17:47.917"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:47.921">${FFDC_DIR_PATH} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170918 22:17:47.921">${FFDC_PREFIX} = 20170918221747901967_</msg>
<msg level="INFO" timestamp="20170918 22:17:47.954">${LOG_PREFIX} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:47.956" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:47.956" starttime="20170918 22:17:47.955"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:47.964">${FFDC_FILE_PATH} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.002" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.002" starttime="20170918 22:17:48.000"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.003" starttime="20170918 22:17:47.999"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.004" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.004" starttime="20170918 22:17:48.003"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.004" starttime="20170918 22:17:48.003"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.005" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.005" starttime="20170918 22:17:48.005"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.005" starttime="20170918 22:17:48.004"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.007" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.007" starttime="20170918 22:17:48.006"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.007" starttime="20170918 22:17:48.006"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.008" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.008" starttime="20170918 22:17:48.008"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.008" starttime="20170918 22:17:48.007"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.009" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.009" starttime="20170918 22:17:48.009"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.010" starttime="20170918 22:17:48.008"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.011" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.011" starttime="20170918 22:17:48.010"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.011" starttime="20170918 22:17:48.010"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.012" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.013" starttime="20170918 22:17:48.012"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.013" starttime="20170918 22:17:48.011"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.014" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.014" starttime="20170918 22:17:48.013"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.014" starttime="20170918 22:17:48.013"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.016" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.016" starttime="20170918 22:17:48.015"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.016" starttime="20170918 22:17:48.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.018" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.018" starttime="20170918 22:17:48.017"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.018" starttime="20170918 22:17:48.016"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.020" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.020" starttime="20170918 22:17:48.019"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.020" starttime="20170918 22:17:48.018"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.022" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.022" starttime="20170918 22:17:48.022"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.023" starttime="20170918 22:17:48.021"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.071">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:48.071">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170918 22:17:48.152">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 22:17:48.168">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170918 22:17:48.168">${stderr} = </msg>
<msg level="INFO" timestamp="20170918 22:17:48.168">${rc} = 0</msg>
<status status="PASS" endtime="20170918 22:17:48.168" starttime="20170918 22:17:48.024"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.169">Length is 0</msg>
<status status="PASS" endtime="20170918 22:17:48.169" starttime="20170918 22:17:48.169"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.169">Length is 11</msg>
<status status="PASS" endtime="20170918 22:17:48.169" starttime="20170918 22:17:48.169"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:48.170">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170918 22:17:48.170" starttime="20170918 22:17:48.023"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.171" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.171" starttime="20170918 22:17:48.171"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.171" starttime="20170918 22:17:48.170"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.171" starttime="20170918 22:17:48.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.173" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.173" starttime="20170918 22:17:48.172"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.173" starttime="20170918 22:17:48.171"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.173">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170918 22:17:48.173" starttime="20170918 22:17:48.173"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.175" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.175" starttime="20170918 22:17:48.174"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.175" starttime="20170918 22:17:48.174"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.177" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.177" starttime="20170918 22:17:48.176"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.177" starttime="20170918 22:17:48.176"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.177" starttime="20170918 22:17:48.174"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.178" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.178" starttime="20170918 22:17:48.178"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.178" starttime="20170918 22:17:48.177"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.179" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.179" starttime="20170918 22:17:48.179"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.180" starttime="20170918 22:17:48.178"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.180" starttime="20170918 22:17:48.177"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.184" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.184" starttime="20170918 22:17:48.183"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.184" starttime="20170918 22:17:48.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.185" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.185" starttime="20170918 22:17:48.185"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.186" starttime="20170918 22:17:48.184"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.186" starttime="20170918 22:17:48.180"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.186" starttime="20170918 22:17:48.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.187" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:48.187" starttime="20170918 22:17:48.186"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.187" starttime="20170918 22:17:48.186"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:48.187" starttime="20170918 22:17:47.999"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.198">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170918 22:17:48.198" starttime="20170918 22:17:48.198"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.199">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Sys Inventory Files', 'System Inventory Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFD...</msg>
<status status="PASS" endtime="20170918 22:17:48.199" starttime="20170918 22:17:48.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:48.201" starttime="20170918 22:17:48.201"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:48.201">@{ffdc_function_list} = [ BMC Specific Files | Sys Inventory Files | FFDC Generic Report | Get Request FFDC | OS FFDC | SEL Log | Core Files ]</msg>
<status status="PASS" endtime="20170918 22:17:48.201" starttime="20170918 22:17:48.200"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:48.203" starttime="20170918 22:17:48.203"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:48.204">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:48.204">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:17:48.204" starttime="20170918 22:17:48.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:48.204" starttime="20170918 22:17:48.204"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.257">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170918 22:17:48.257" starttime="20170918 22:17:48.257"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.259">@{cmd_list} = [ ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl_pretty', '...</msg>
<status status="PASS" endtime="20170918 22:17:48.259" starttime="20170918 22:17:48.258"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.260">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170918 22:17:48.260" starttime="20170918 22:17:48.260"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:48.261" starttime="20170918 22:17:48.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:48.262">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:17:48.262" starttime="20170918 22:17:48.262"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:48.412">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:48.414">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170918 22:17:51.656">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:17:51.657" starttime="20170918 22:17:48.331"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:51.658">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:51.664">${ret_values} = (u'-- Logs begin at Mon 2017-09-18 22:04:25 UTC, end at Mon 2017-09-18 22:17:56 UTC. --\nSep 18 22:04:25 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 18 22:04:25 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170918 22:17:51.664" starttime="20170918 22:17:48.263"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:51.668">${stdout} = -- Logs begin at Mon 2017-09-18 22:04:25 UTC, end at Mon 2017-09-18 22:17:56 UTC. --
Sep 18 22:04:25 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 18 22:04:25 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170918 22:17:51.668" starttime="20170918 22:17:51.665"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:51.669">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:17:51.669" starttime="20170918 22:17:51.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:51.686" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:51.686" starttime="20170918 22:17:51.684"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:51.686" starttime="20170918 22:17:51.680"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:51.686" starttime="20170918 22:17:51.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:51.687" starttime="20170918 22:17:48.260"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:51.687" starttime="20170918 22:17:48.259"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:51.688">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170918 22:17:51.688" starttime="20170918 22:17:51.687"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:51.691" starttime="20170918 22:17:51.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:51.692">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:17:51.692" starttime="20170918 22:17:51.691"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:51.855">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:51.855">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170918 22:17:52.460">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:17:52.461" starttime="20170918 22:17:51.768"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:52.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:52.462">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 18 22:18 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 18 22:18 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170918 22:17:52.462" starttime="20170918 22:17:51.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.463">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 18 22:18 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 18 22:18 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170918 22:17:52.463" starttime="20170918 22:17:52.462"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.464">${stderr} = ls: /proc/2922/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170918 22:17:52.464" starttime="20170918 22:17:52.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:52.472" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:52.472" starttime="20170918 22:17:52.471"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.472" starttime="20170918 22:17:52.470"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.472" starttime="20170918 22:17:52.464"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.472" starttime="20170918 22:17:51.689"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.472" starttime="20170918 22:17:51.687"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.473">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170918 22:17:52.473" starttime="20170918 22:17:52.473"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:52.475" starttime="20170918 22:17:52.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.476">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:17:52.476" starttime="20170918 22:17:52.475"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:52.611">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:52.612">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170918 22:17:52.690">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:17:52.691" starttime="20170918 22:17:52.536"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:52.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:52.691">${ret_values} = (u'[    0.000000] NR_IRQS:16 nr_irqs:16 16\n[    0.000000] i2c controller registered, irq 16\n[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7722264433...</msg>
<status status="PASS" endtime="20170918 22:17:52.691" starttime="20170918 22:17:52.476"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.692">${stdout} = [    0.000000] NR_IRQS:16 nr_irqs:16 16
[    0.000000] i2c controller registered, irq 16
[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 77222644334 ns
...</msg>
<status status="PASS" endtime="20170918 22:17:52.692" starttime="20170918 22:17:52.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.693">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:17:52.693" starttime="20170918 22:17:52.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:52.700" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_dmesg.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:52.700" starttime="20170918 22:17:52.699"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.700" starttime="20170918 22:17:52.699"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.701" starttime="20170918 22:17:52.693"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.701" starttime="20170918 22:17:52.474"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.701" starttime="20170918 22:17:52.472"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.702">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170918 22:17:52.702" starttime="20170918 22:17:52.701"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:52.703" starttime="20170918 22:17:52.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.704">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:17:52.704" starttime="20170918 22:17:52.703"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:52.829">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:52.829">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170918 22:17:52.915">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:17:52.915" starttime="20170918 22:17:52.767"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:17:52.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:17:52.915">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170918 22:17:52.916" starttime="20170918 22:17:52.704"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.916">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170918 22:17:52.916" starttime="20170918 22:17:52.916"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.917">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:17:52.917" starttime="20170918 22:17:52.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:52.926" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_procinfo.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:17:52.926" starttime="20170918 22:17:52.925"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.926" starttime="20170918 22:17:52.924"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.926" starttime="20170918 22:17:52.917"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.926" starttime="20170918 22:17:52.702"></status>
</kw>
<status status="PASS" endtime="20170918 22:17:52.926" starttime="20170918 22:17:52.701"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.927">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170918 22:17:52.927" starttime="20170918 22:17:52.927"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:17:52.929" starttime="20170918 22:17:52.928"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:17:52.929">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:17:52.929" starttime="20170918 22:17:52.929"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:17:53.058">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:17:53.059">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20170918 22:18:02.295">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:02.299" starttime="20170918 22:17:52.990"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:02.300">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:02.346">${ret_values} = (u'{\n\t"__CURSOR" : "s=1a8429fca4a74f768e772f8a4794d015;i=1;b=842bf9865ea849b592a175db241068ff;m=d02ac7;t=5597decfed884;x=9540ead200870053",\n\t"__REALTIME_TIMESTAMP" : "1505772265461892",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170918 22:18:02.346" starttime="20170918 22:17:52.930"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.358">${stdout} = {
	"__CURSOR" : "s=1a8429fca4a74f768e772f8a4794d015;i=1;b=842bf9865ea849b592a175db241068ff;m=d02ac7;t=5597decfed884;x=9540ead200870053",
	"__REALTIME_TIMESTAMP" : "1505772265461892",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170918 22:18:02.358" starttime="20170918 22:18:02.347"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.359">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:02.359" starttime="20170918 22:18:02.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:02.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:02.391" starttime="20170918 22:18:02.382"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.391" starttime="20170918 22:18:02.368"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.391" starttime="20170918 22:18:02.359"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.391" starttime="20170918 22:17:52.927"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.391" starttime="20170918 22:17:52.926"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.392">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170918 22:18:02.393" starttime="20170918 22:18:02.392"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:02.394" starttime="20170918 22:18:02.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.395">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:02.395" starttime="20170918 22:18:02.394"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:02.521">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:02.522">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170918 22:18:02.604">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:02.604" starttime="20170918 22:18:02.454"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:02.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:02.604">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          242340 kB\nMemAvailable:     317572 kB\nBuffers:           16532 kB\nCached:            74732 kB\nSwapCached:            0 kB\nActive:           12874...</msg>
<status status="PASS" endtime="20170918 22:18:02.605" starttime="20170918 22:18:02.395"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.605">${stdout} = MemTotal:         432240 kB
MemFree:          242340 kB
MemAvailable:     317572 kB
Buffers:           16532 kB
Cached:            74732 kB
SwapCached:            0 kB
Active:           128748 kB
Inac...</msg>
<status status="PASS" endtime="20170918 22:18:02.605" starttime="20170918 22:18:02.605"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.606">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:02.606" starttime="20170918 22:18:02.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:02.614" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_meminfo.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:02.614" starttime="20170918 22:18:02.613"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.614" starttime="20170918 22:18:02.612"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.614" starttime="20170918 22:18:02.606"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.614" starttime="20170918 22:18:02.393"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:02.614" starttime="20170918 22:18:02.392"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.615">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170918 22:18:02.615" starttime="20170918 22:18:02.614"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:02.616" starttime="20170918 22:18:02.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:02.617">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:02.617" starttime="20170918 22:18:02.616"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:02.752">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:02.752">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170918 22:18:03.162">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:03.162" starttime="20170918 22:18:02.669"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.162">${ret_values} = (u'Mem: 189868K used, 242372K free, 14996K shrd, 16532K buff, 74736K cached\nCPU:   7% usr  28% sys   0% nic  64% idle   0% io   0% irq   0% sirq\nLoad average: 0.72 1.61 1.36 3/156 2927\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170918 22:18:03.163" starttime="20170918 22:18:02.617"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.163">${stdout} = Mem: 189868K used, 242372K free, 14996K shrd, 16532K buff, 74736K cached
CPU:   7% usr  28% sys   0% nic  64% idle   0% io   0% irq   0% sirq
Load average: 0.72 1.61 1.36 3/156 2927
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170918 22:18:03.163" starttime="20170918 22:18:03.163"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.164">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:03.164" starttime="20170918 22:18:03.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.171" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_list.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:18:03.171"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:18:03.170"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:18:03.164"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:18:02.615"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:18:02.614"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:17:48.259"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:17:48.258"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:17:48.258"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:17:48.257"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.172" starttime="20170918 22:17:48.256"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.173" starttime="20170918 22:17:48.204"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.173" starttime="20170918 22:17:48.202"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.173" starttime="20170918 22:17:48.201"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:03.175" starttime="20170918 22:18:03.174"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.175">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:03.175" starttime="20170918 22:18:03.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:03.176" starttime="20170918 22:18:03.175"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:03.224" starttime="20170918 22:18:03.222"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.225" html="yes">File '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/26631/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170918 22:18:03.225" starttime="20170918 22:18:03.224"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.225" starttime="20170918 22:18:03.222"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.225" starttime="20170918 22:18:03.176"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.225" starttime="20170918 22:18:03.173"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.225" starttime="20170918 22:18:03.173"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:03.227" starttime="20170918 22:18:03.227"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.227">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.227">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:03.227" starttime="20170918 22:18:03.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:03.228" starttime="20170918 22:18:03.228"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.283">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170918 22:18:03.283" starttime="20170918 22:18:03.283"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.285">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20170918 22:18:03.285" starttime="20170918 22:18:03.284"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.292">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170918 22:18:03.292" starttime="20170918 22:18:03.285"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.295" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.295" starttime="20170918 22:18:03.294"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.295" starttime="20170918 22:18:03.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.297" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.297" starttime="20170918 22:18:03.297"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.298" starttime="20170918 22:18:03.296"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.299" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.299" starttime="20170918 22:18:03.298"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.299" starttime="20170918 22:18:03.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.300" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.300" starttime="20170918 22:18:03.300"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.300" starttime="20170918 22:18:03.299"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.300" starttime="20170918 22:18:03.293"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.300" starttime="20170918 22:18:03.293"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.301">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:03.301" starttime="20170918 22:18:03.301"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.432">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:03.433">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170918 22:18:03.491">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:03.491" starttime="20170918 22:18:03.362"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.491">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170918 22:18:03.491" starttime="20170918 22:18:03.302"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.492">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" endtime="20170918 22:18:03.492" starttime="20170918 22:18:03.491"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.493">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:03.493" starttime="20170918 22:18:03.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.500" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.500" starttime="20170918 22:18:03.500"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.501" starttime="20170918 22:18:03.499"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.501" starttime="20170918 22:18:03.493"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.501" starttime="20170918 22:18:03.292"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.501" starttime="20170918 22:18:03.292"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.504" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.504" starttime="20170918 22:18:03.503"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.504" starttime="20170918 22:18:03.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.505" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.505" starttime="20170918 22:18:03.505"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.506" starttime="20170918 22:18:03.504"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.507" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.507" starttime="20170918 22:18:03.506"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.507" starttime="20170918 22:18:03.506"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.508" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.508" starttime="20170918 22:18:03.508"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.508" starttime="20170918 22:18:03.507"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.508" starttime="20170918 22:18:03.502"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.509" starttime="20170918 22:18:03.502"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.509">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:03.509" starttime="20170918 22:18:03.509"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.633">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:03.634">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170918 22:18:03.695">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:03.696" starttime="20170918 22:18:03.570"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.696">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 20:14:46 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170918 22:18:03.696" starttime="20170918 22:18:03.510"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.697">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 20:14:46 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170918 22:18:03.697" starttime="20170918 22:18:03.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.697">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:03.697" starttime="20170918 22:18:03.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.707" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.707" starttime="20170918 22:18:03.706"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.707" starttime="20170918 22:18:03.705"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.708" starttime="20170918 22:18:03.698"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.708" starttime="20170918 22:18:03.501"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.708" starttime="20170918 22:18:03.501"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.711" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.711" starttime="20170918 22:18:03.711"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.711" starttime="20170918 22:18:03.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.713" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.713" starttime="20170918 22:18:03.712"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.713" starttime="20170918 22:18:03.712"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.714" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.714" starttime="20170918 22:18:03.714"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.714" starttime="20170918 22:18:03.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.715" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.715" starttime="20170918 22:18:03.715"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.716" starttime="20170918 22:18:03.714"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.716" starttime="20170918 22:18:03.710"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.716" starttime="20170918 22:18:03.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.717">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:03.717" starttime="20170918 22:18:03.716"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.850">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:03.850">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170918 22:18:03.918">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:03.918" starttime="20170918 22:18:03.781"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:03.918">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:03.918">${ret_values} = (u' 22:18:16 up 14 min,  load average: 0.72, 1.61, 1.36', u'', 0)</msg>
<status status="PASS" endtime="20170918 22:18:03.919" starttime="20170918 22:18:03.717"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.919">${stdout} =  22:18:16 up 14 min,  load average: 0.72, 1.61, 1.36</msg>
<status status="PASS" endtime="20170918 22:18:03.919" starttime="20170918 22:18:03.919"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.920">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:03.920" starttime="20170918 22:18:03.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.928" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.927"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.926"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.920"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.708"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.708"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.292"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.284"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.928" starttime="20170918 22:18:03.284"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.930">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170918 22:18:03.930" starttime="20170918 22:18:03.929"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.931">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170918 22:18:03.931" starttime="20170918 22:18:03.930"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.934" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.934" starttime="20170918 22:18:03.933"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.934" starttime="20170918 22:18:03.933"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.935" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.935" starttime="20170918 22:18:03.935"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.936" starttime="20170918 22:18:03.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.937" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.937" starttime="20170918 22:18:03.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.937" starttime="20170918 22:18:03.936"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:03.938" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:03.938" starttime="20170918 22:18:03.938"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.938" starttime="20170918 22:18:03.937"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.938" starttime="20170918 22:18:03.932"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:03.938" starttime="20170918 22:18:03.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:03.939">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:03.939" starttime="20170918 22:18:03.939"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.080">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:04.080">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170918 22:18:04.167">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:04.167" starttime="20170918 22:18:03.999"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:04.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:04.168">${ret_values} = (u'20170918201556', u'', 0)</msg>
<status status="PASS" endtime="20170918 22:18:04.168" starttime="20170918 22:18:03.939"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.169">${stdout} = 20170918201556</msg>
<status status="PASS" endtime="20170918 22:18:04.169" starttime="20170918 22:18:04.168"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.169">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:04.169" starttime="20170918 22:18:04.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.176" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.176" starttime="20170918 22:18:04.176"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.177" starttime="20170918 22:18:04.175"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.177" starttime="20170918 22:18:04.169"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.177" starttime="20170918 22:18:03.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.177" starttime="20170918 22:18:03.931"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.180" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.180" starttime="20170918 22:18:04.179"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.180" starttime="20170918 22:18:04.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.181" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.181" starttime="20170918 22:18:04.181"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.181" starttime="20170918 22:18:04.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.183" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.183" starttime="20170918 22:18:04.182"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.183" starttime="20170918 22:18:04.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.184" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.184" starttime="20170918 22:18:04.183"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.184" starttime="20170918 22:18:04.183"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.184" starttime="20170918 22:18:04.178"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.184" starttime="20170918 22:18:04.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.185">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:04.185" starttime="20170918 22:18:04.184"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.323">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:04.324">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170918 22:18:04.435">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:04.435" starttime="20170918 22:18:04.239"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:04.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:04.435">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-20"\nVERSION_ID="v1.99.10-20-gcaf33b8"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170918 22:18:04.435" starttime="20170918 22:18:04.185"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.436">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-20"
VERSION_ID="v1.99.10-20-gcaf33b8"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170918 22:18:04.436" starttime="20170918 22:18:04.435"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.436">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:04.437" starttime="20170918 22:18:04.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.444" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:04.443"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:04.442"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:04.437"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:04.177"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:04.177"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:03.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:03.929"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.444" starttime="20170918 22:18:03.929"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.445">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170918 22:18:04.445" starttime="20170918 22:18:04.445"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.446">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170918 22:18:04.446" starttime="20170918 22:18:04.446"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.449" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.449" starttime="20170918 22:18:04.449"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.450" starttime="20170918 22:18:04.448"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.451" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.451" starttime="20170918 22:18:04.450"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.451" starttime="20170918 22:18:04.450"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.452" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.452" starttime="20170918 22:18:04.452"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.452" starttime="20170918 22:18:04.451"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.453" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:04.453" starttime="20170918 22:18:04.453"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.454" starttime="20170918 22:18:04.452"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.454" starttime="20170918 22:18:04.448"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:04.454" starttime="20170918 22:18:04.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:04.455">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170918 22:18:04.455" starttime="20170918 22:18:04.454"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:04.588">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:04.589">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170918 22:18:06.037">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:06.038" starttime="20170918 22:18:04.517"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:06.038">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:06.038">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status status="PASS" endtime="20170918 22:18:06.038" starttime="20170918 22:18:04.455"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.039">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status status="PASS" endtime="20170918 22:18:06.039" starttime="20170918 22:18:06.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.040">${stderr} = </msg>
<status status="PASS" endtime="20170918 22:18:06.040" starttime="20170918 22:18:06.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:06.048" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:06.047"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:06.046"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:06.040"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:04.447"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:04.446"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:04.446"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:04.444"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:04.444"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.048" starttime="20170918 22:18:03.283"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.049" starttime="20170918 22:18:03.282"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.049" starttime="20170918 22:18:03.228"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.049" starttime="20170918 22:18:03.225"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.049" starttime="20170918 22:18:03.225"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:06.051" starttime="20170918 22:18:06.050"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:06.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:06.051">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:06.051" starttime="20170918 22:18:06.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:06.051" starttime="20170918 22:18:06.051"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.099">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170918 22:18:06.099" starttime="20170918 22:18:06.099"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.100">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('BMC_l...</msg>
<status status="PASS" endtime="20170918 22:18:06.100" starttime="20170918 22:18:06.100"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.101">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170918 22:18:06.101" starttime="20170918 22:18:06.101"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:06.105">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:06.106" starttime="20170918 22:18:06.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:06.107" starttime="20170918 22:18:06.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.108">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:06.108" starttime="20170918 22:18:06.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:06.109" starttime="20170918 22:18:06.109"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:06.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:06.318" starttime="20170918 22:18:06.110"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:06.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:06.318">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:06.318" starttime="20170918 22:18:06.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:06.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:06.319" starttime="20170918 22:18:06.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:06.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:06.320" starttime="20170918 22:18:06.319"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.320" starttime="20170918 22:18:06.104"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.320" starttime="20170918 22:18:06.103"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:06.320" starttime="20170918 22:18:06.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:06.320">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:06.320" starttime="20170918 22:18:06.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:06.321" starttime="20170918 22:18:06.321"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.044">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:07.045">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.045" starttime="20170918 22:18:06.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:07.046" starttime="20170918 22:18:07.045"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:07.046">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:07.046" starttime="20170918 22:18:07.046"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:07.046">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.046" starttime="20170918 22:18:06.102"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.048" starttime="20170918 22:18:07.047"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:07.048">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:07.048" starttime="20170918 22:18:07.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:07.049" starttime="20170918 22:18:07.048"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.050">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 25375
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 1000
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9590
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10080
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10387
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 352000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23350
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 250
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:07.050">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:07.050">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170918 22:18:07.050" starttime="20170918 22:18:07.049"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.052" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_sensor_list.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:07.052" starttime="20170918 22:18:07.051"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:07.052" starttime="20170918 22:18:07.050"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:07.052" starttime="20170918 22:18:06.101"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.053">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170918 22:18:07.053" starttime="20170918 22:18:07.053"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.056">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:07.057" starttime="20170918 22:18:07.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:07.057" starttime="20170918 22:18:07.057"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.058">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:07.058" starttime="20170918 22:18:07.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.059">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:07.059" starttime="20170918 22:18:07.058"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.238">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:07.238" starttime="20170918 22:18:07.059"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:07.238">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:07.238">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.238" starttime="20170918 22:18:07.059"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.239">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.239" starttime="20170918 22:18:07.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:07.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:07.240" starttime="20170918 22:18:07.240"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:07.241" starttime="20170918 22:18:07.055"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:07.241" starttime="20170918 22:18:07.055"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:07.241" starttime="20170918 22:18:07.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:07.242">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:07.242" starttime="20170918 22:18:07.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:07.243" starttime="20170918 22:18:07.242"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.620">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:09.621">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.621" starttime="20170918 22:18:07.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:09.622" starttime="20170918 22:18:09.621"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:09.622">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:09.622" starttime="20170918 22:18:09.622"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:09.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.622" starttime="20170918 22:18:07.053"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.623" starttime="20170918 22:18:09.623"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:09.623">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:09.624" starttime="20170918 22:18:09.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:09.624" starttime="20170918 22:18:09.624"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.627">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/9", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/3", 
        "/xyz/openbmc_project/logging/entry/2", 
        "/xyz/openbmc_project/logging/entry/6", 
        "/xyz/openbmc_project/logging/entry/5"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:09.628">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:09.628">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170918 22:18:09.628" starttime="20170918 22:18:09.624"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.630" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_inventory.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:09.630" starttime="20170918 22:18:09.629"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:09.630" starttime="20170918 22:18:09.628"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:09.630" starttime="20170918 22:18:07.053"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.631">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170918 22:18:09.631" starttime="20170918 22:18:09.631"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.634">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:09.634" starttime="20170918 22:18:09.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:09.635" starttime="20170918 22:18:09.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.636">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:09.636" starttime="20170918 22:18:09.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:09.636" starttime="20170918 22:18:09.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:09.874" starttime="20170918 22:18:09.637"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:09.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:09.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.874" starttime="20170918 22:18:09.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.875" starttime="20170918 22:18:09.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:09.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:09.876" starttime="20170918 22:18:09.875"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:09.876" starttime="20170918 22:18:09.633"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:09.876" starttime="20170918 22:18:09.632"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:09.876" starttime="20170918 22:18:09.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:09.877">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:09.877" starttime="20170918 22:18:09.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:09.877" starttime="20170918 22:18:09.877"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.076">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:10.077">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.077" starttime="20170918 22:18:09.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:10.077" starttime="20170918 22:18:10.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:10.078">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:10.078" starttime="20170918 22:18:10.078"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:10.078">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.078" starttime="20170918 22:18:09.631"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.079" starttime="20170918 22:18:10.079"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:10.079">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:10.079" starttime="20170918 22:18:10.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:10.080" starttime="20170918 22:18:10.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.081">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:10.081">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:10.081">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status status="PASS" endtime="20170918 22:18:10.081" starttime="20170918 22:18:10.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.083" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_FIRMWARE_list.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:10.083" starttime="20170918 22:18:10.082"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:10.083" starttime="20170918 22:18:10.081"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:10.083" starttime="20170918 22:18:09.630"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.084">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_led.txt</msg>
<status status="PASS" endtime="20170918 22:18:10.084" starttime="20170918 22:18:10.083"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.087">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:10.087" starttime="20170918 22:18:10.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:10.088" starttime="20170918 22:18:10.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.088">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:10.088" starttime="20170918 22:18:10.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:10.089" starttime="20170918 22:18:10.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:10.303" starttime="20170918 22:18:10.090"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:10.303">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:10.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.303" starttime="20170918 22:18:10.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.304" starttime="20170918 22:18:10.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:10.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:10.305" starttime="20170918 22:18:10.304"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:10.305" starttime="20170918 22:18:10.085"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:10.305" starttime="20170918 22:18:10.085"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:10.305" starttime="20170918 22:18:10.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:10.306">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:10.306" starttime="20170918 22:18:10.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:10.306" starttime="20170918 22:18:10.306"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.138">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:12.139">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.139" starttime="20170918 22:18:10.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.139" starttime="20170918 22:18:12.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:12.140">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:12.140" starttime="20170918 22:18:12.140"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.140" starttime="20170918 22:18:10.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.141" starttime="20170918 22:18:12.141"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.141">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:12.142" starttime="20170918 22:18:12.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.142" starttime="20170918 22:18:12.142"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.144">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:12.144">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:12.145">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170918 22:18:12.145" starttime="20170918 22:18:12.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.146" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_led.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:12.146" starttime="20170918 22:18:12.146"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.146" starttime="20170918 22:18:12.145"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.147" starttime="20170918 22:18:10.083"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.147">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170918 22:18:12.147" starttime="20170918 22:18:12.147"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.151">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:12.151" starttime="20170918 22:18:12.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:12.152" starttime="20170918 22:18:12.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.153">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:12.153" starttime="20170918 22:18:12.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.154">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:12.154" starttime="20170918 22:18:12.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:12.439" starttime="20170918 22:18:12.155"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.439">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:12.439">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.439" starttime="20170918 22:18:12.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.440" starttime="20170918 22:18:12.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.440" starttime="20170918 22:18:12.440"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.440" starttime="20170918 22:18:12.149"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.440" starttime="20170918 22:18:12.149"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.441" starttime="20170918 22:18:12.148"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.441">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:12.441" starttime="20170918 22:18:12.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.442" starttime="20170918 22:18:12.441"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.668">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:12.668">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.668" starttime="20170918 22:18:12.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.669" starttime="20170918 22:18:12.668"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:12.669">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:12.669" starttime="20170918 22:18:12.669"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.669" starttime="20170918 22:18:12.148"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.670" starttime="20170918 22:18:12.670"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.670">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:12.671" starttime="20170918 22:18:12.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.671" starttime="20170918 22:18:12.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.672">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:12.672">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:12.672">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170918 22:18:12.672" starttime="20170918 22:18:12.671"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.674" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_control_list.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:12.674" starttime="20170918 22:18:12.673"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.674" starttime="20170918 22:18:12.672"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.674" starttime="20170918 22:18:12.147"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.675">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_elog.txt</msg>
<status status="PASS" endtime="20170918 22:18:12.675" starttime="20170918 22:18:12.674"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.678">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:12.678" starttime="20170918 22:18:12.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:12.679" starttime="20170918 22:18:12.679"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.680">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:12.680" starttime="20170918 22:18:12.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:12.680" starttime="20170918 22:18:12.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.868">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:12.869" starttime="20170918 22:18:12.681"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:12.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:12.869">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.869" starttime="20170918 22:18:12.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.870">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.870" starttime="20170918 22:18:12.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:12.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:12.870" starttime="20170918 22:18:12.870"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.870" starttime="20170918 22:18:12.677"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.871" starttime="20170918 22:18:12.676"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:12.871" starttime="20170918 22:18:12.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:12.871">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170918 22:18:12.871" starttime="20170918 22:18:12.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:12.872" starttime="20170918 22:18:12.872"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.360">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:13.361">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.361" starttime="20170918 22:18:12.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.361" starttime="20170918 22:18:13.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:13.362">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:13.362" starttime="20170918 22:18:13.362"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:13.362">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.362" starttime="20170918 22:18:12.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.363">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.363" starttime="20170918 22:18:13.363"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:13.363">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:13.363" starttime="20170918 22:18:13.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.364" starttime="20170918 22:18:13.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.366">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2904"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772833570, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2910"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772942540, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 17 e7 00 00 00 0a 03 af 84 12 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 01 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 1d 04 93 b4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 a6 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 b1 eb 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 d7 28 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 e2 8e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 f5 97 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 00 88 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 13 3d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 1e 4f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 31 02 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 3b ed 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 4f 09 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 5a 08 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 53 3a 2d e8 28 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 53 3a a4 ce 0d 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 00 67 a8 e7 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772577602, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 2e 9d 00 00 00 0a 05 9f e9 cb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 01 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772578727, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1750"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772585189, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b d6 c7 00 00 00 09 7a 1c 49 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 03 40 f9 21 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d 14 af 7b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 c2 74 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 cd 40 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 f2 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 fd 93 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 10 86 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 1b 7d 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 2e 6d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 39 69 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 4c 1a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 57 36 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 69 84 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 74 a5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 1a 65 8a 7d 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 1a e7 22 25 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 1d ba 00 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772704112, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b ed 5e 00 00 00 09 7b 8e c3 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 40 f9 21 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772705177, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2321"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772711209, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb c4 8b 00 00 00 09 3b ec 31 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0c f0 8b 39 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 9e 6f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 a9 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 cd c6 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 d9 30 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 ec 37 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 f6 fa 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 09 d9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 14 c7 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 27 b3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 32 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 45 36 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 50 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4d 12 6d d3 81 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4d 19 62 75 ba 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4d 1b 79 b0 1b 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772826075, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb da 67 00 00 00 09 3d 40 9b 9e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772827202, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:13.366">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 22:18:13.367">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "_PID=2904"
            ],
            "Id": 10,
            "Message": "org.open_pow...</msg>
<status status="PASS" endtime="20170918 22:18:13.367" starttime="20170918 22:18:13.364"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.369" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_elog.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:13.368"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:13.367"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:12.674"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.100"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.099"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.099"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.099"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.098"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.052"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.049"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.369" starttime="20170918 22:18:06.049"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.371" starttime="20170918 22:18:13.371"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:13.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:13.371">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:13.371" starttime="20170918 22:18:13.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.372" starttime="20170918 22:18:13.372"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.420">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170918 22:18:13.421" starttime="20170918 22:18:13.420"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.421" starttime="20170918 22:18:13.419"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.421" starttime="20170918 22:18:13.372"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.421" starttime="20170918 22:18:13.370"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.421" starttime="20170918 22:18:13.370"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.423" starttime="20170918 22:18:13.422"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:13.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:13.423">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:13.423" starttime="20170918 22:18:13.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.424" starttime="20170918 22:18:13.423"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.477">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:13.477" starttime="20170918 22:18:13.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:13.478" starttime="20170918 22:18:13.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.479">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:13.479" starttime="20170918 22:18:13.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:13.479" starttime="20170918 22:18:13.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:13.743" starttime="20170918 22:18:13.480"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:13.743">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:13.743">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.743" starttime="20170918 22:18:13.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.744" starttime="20170918 22:18:13.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:13.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:13.745" starttime="20170918 22:18:13.744"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.745" starttime="20170918 22:18:13.476"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.745" starttime="20170918 22:18:13.475"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:13.745" starttime="20170918 22:18:13.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:13.746">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170918 22:18:13.746" starttime="20170918 22:18:13.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:13.746" starttime="20170918 22:18:13.746"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:14.188">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.189" starttime="20170918 22:18:13.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.189" starttime="20170918 22:18:14.189"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:14.190">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:14.190" starttime="20170918 22:18:14.190"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.190">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.190" starttime="20170918 22:18:13.474"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.191" starttime="20170918 22:18:14.191"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.191">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:14.191" starttime="20170918 22:18:14.190"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.192" starttime="20170918 22:18:14.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.193">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2904"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772833570, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2910"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772942540, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 17 e7 00 00 00 0a 03 af 84 12 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 01 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 1d 04 93 b4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 a6 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 b1 eb 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 d7 28 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 e2 8e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 f5 97 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 00 88 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 13 3d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 1e 4f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 31 02 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 3b ed 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 4f 09 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 5a 08 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 53 3a 2d e8 28 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 53 3a a4 ce 0d 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 00 67 a8 e7 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772577602, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 2e 9d 00 00 00 0a 05 9f e9 cb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 01 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772578727, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1750"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772585189, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b d6 c7 00 00 00 09 7a 1c 49 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 03 40 f9 21 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d 14 af 7b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 c2 74 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 cd 40 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 f2 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 fd 93 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 10 86 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 1b 7d 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 2e 6d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 39 69 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 4c 1a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 57 36 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 69 84 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 74 a5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 1a 65 8a 7d 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 1a e7 22 25 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 1d ba 00 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772704112, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b ed 5e 00 00 00 09 7b 8e c3 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 40 f9 21 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772705177, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2321"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772711209, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb c4 8b 00 00 00 09 3b ec 31 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0c f0 8b 39 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 9e 6f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 a9 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 cd c6 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 d9 30 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 ec 37 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 f6 fa 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 09 d9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 14 c7 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 27 b3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 32 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 45 36 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 50 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4d 12 6d d3 81 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4d 19 62 75 ba 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4d 1b 79 b0 1b 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1183"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772826075, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb da 67 00 00 00 09 3d 40 9b 9e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1183"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505772827202, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:14.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:14.194">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/10': {u'Id': 10, u'associations': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'AdditionalData': [u'_PID=2904'], u'Message': u'or...</msg>
<status status="PASS" endtime="20170918 22:18:14.194" starttime="20170918 22:18:14.192"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.195">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/2/callout', u'/xyz/openbmc_project/lo...</msg>
<status status="PASS" endtime="20170918 22:18:14.195" starttime="20170918 22:18:14.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.195">${logpath} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel</msg>
<status status="PASS" endtime="20170918 22:18:14.195" starttime="20170918 22:18:14.195"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.196" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:14.196" starttime="20170918 22:18:14.196"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.197" starttime="20170918 22:18:14.197"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.201">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:14.203" starttime="20170918 22:18:14.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:14.204" starttime="20170918 22:18:14.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.205">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:14.205" starttime="20170918 22:18:14.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:14.206" starttime="20170918 22:18:14.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:14.423" starttime="20170918 22:18:14.207"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:14.423">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.423" starttime="20170918 22:18:14.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.424" starttime="20170918 22:18:14.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.425" starttime="20170918 22:18:14.424"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.425" starttime="20170918 22:18:14.200"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.425" starttime="20170918 22:18:14.199"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.425" starttime="20170918 22:18:14.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.425">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:14.426" starttime="20170918 22:18:14.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.426" starttime="20170918 22:18:14.426"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:14.517">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.517" starttime="20170918 22:18:14.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.518" starttime="20170918 22:18:14.517"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:14.518">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:14.518" starttime="20170918 22:18:14.518"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.519">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.519" starttime="20170918 22:18:14.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.519">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.519" starttime="20170918 22:18:14.519"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.520">To JSON using : content={
  "data": [
    "_PID=2904"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:14.520">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:14.520">${content} = {u'data': [u'_PID=2904'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:14.520" starttime="20170918 22:18:14.520"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.520">${esel_data} = [u'_PID=2904']</msg>
<status status="PASS" endtime="20170918 22:18:14.520" starttime="20170918 22:18:14.198"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.521">Length is 1</msg>
<msg level="INFO" timestamp="20170918 22:18:14.521">${length} = 1</msg>
<status status="PASS" endtime="20170918 22:18:14.521" starttime="20170918 22:18:14.521"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.522" starttime="20170918 22:18:14.522"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.523">${index} = None</msg>
<msg level="FAIL" timestamp="20170918 22:18:14.523">IndexError: list index out of range</msg>
<status status="FAIL" endtime="20170918 22:18:14.523" starttime="20170918 22:18:14.523"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:14.524">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" endtime="20170918 22:18:14.524" starttime="20170918 22:18:14.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.525" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:14.525" starttime="20170918 22:18:14.525"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.526" starttime="20170918 22:18:14.524"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:14.526" starttime="20170918 22:18:14.197"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/11">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.526" starttime="20170918 22:18:14.526"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:14.531" starttime="20170918 22:18:14.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:14.531" starttime="20170918 22:18:14.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.532">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:14.532" starttime="20170918 22:18:14.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:14.533" starttime="20170918 22:18:14.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:14.837" starttime="20170918 22:18:14.533"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.837">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:14.837">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.837" starttime="20170918 22:18:14.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.838" starttime="20170918 22:18:14.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.839" starttime="20170918 22:18:14.838"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.839" starttime="20170918 22:18:14.529"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.839" starttime="20170918 22:18:14.529"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.839" starttime="20170918 22:18:14.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.840">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:14.840" starttime="20170918 22:18:14.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.841" starttime="20170918 22:18:14.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:14.922">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.923" starttime="20170918 22:18:14.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.923" starttime="20170918 22:18:14.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:14.924">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:14.924" starttime="20170918 22:18:14.923"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.924">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.924" starttime="20170918 22:18:14.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:14.925" starttime="20170918 22:18:14.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.926">To JSON using : content={
  "data": [
    "_PID=2910"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:14.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:14.926">${content} = {u'data': [u'_PID=2910'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:14.926" starttime="20170918 22:18:14.926"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:14.927">${esel_data} = [u'_PID=2910']</msg>
<status status="PASS" endtime="20170918 22:18:14.927" starttime="20170918 22:18:14.527"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.928">Length is 1</msg>
<msg level="INFO" timestamp="20170918 22:18:14.928">${length} = 1</msg>
<status status="PASS" endtime="20170918 22:18:14.928" starttime="20170918 22:18:14.927"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.929" starttime="20170918 22:18:14.928"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.930">${index} = None</msg>
<msg level="FAIL" timestamp="20170918 22:18:14.930">IndexError: list index out of range</msg>
<status status="FAIL" endtime="20170918 22:18:14.930" starttime="20170918 22:18:14.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:14.930">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" endtime="20170918 22:18:14.931" starttime="20170918 22:18:14.930"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.932" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:14.932" starttime="20170918 22:18:14.931"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:14.932" starttime="20170918 22:18:14.931"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:14.932" starttime="20170918 22:18:14.526"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:14.933" starttime="20170918 22:18:14.933"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:14.937">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:14.938" starttime="20170918 22:18:14.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.938">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:14.938" starttime="20170918 22:18:14.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.939">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:14.939" starttime="20170918 22:18:14.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:14.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:14.940" starttime="20170918 22:18:14.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:15.170" starttime="20170918 22:18:14.941"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:15.170">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.170" starttime="20170918 22:18:14.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.171">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.171" starttime="20170918 22:18:15.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.172" starttime="20170918 22:18:15.171"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.172" starttime="20170918 22:18:14.936"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.172" starttime="20170918 22:18:14.935"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.173" starttime="20170918 22:18:14.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.173">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:15.173" starttime="20170918 22:18:15.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.174" starttime="20170918 22:18:15.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:15.260">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.260" starttime="20170918 22:18:15.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.261" starttime="20170918 22:18:15.260"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:15.261">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:15.261" starttime="20170918 22:18:15.261"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.262">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.262" starttime="20170918 22:18:14.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.262" starttime="20170918 22:18:15.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.263">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 17 e7 00 00 00 0a 03 af 84 12 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 01 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 1d 04 93 b4 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 a6 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 b1 eb 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 d7 28 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 04 e2 8e 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 04 f5 97 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 00 88 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 13 3d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 1e 4f 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 31 02 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 3b ed 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 1d 05 4f 09 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 1d 05 5a 08 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 53 3a 2d e8 28 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 53 3a a4 ce 0d 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 00 67 a8 e7 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:15.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:15.263">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 17 e7 00 00 00 0a 03 af 84 ...</msg>
<status status="PASS" endtime="20170918 22:18:15.263" starttime="20170918 22:18:15.263"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.264">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 17 e7 00 00 00 0a 03 af 84 12 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:15.264" starttime="20170918 22:18:14.933"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.264">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:15.264">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:15.264" starttime="20170918 22:18:15.264"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.265" starttime="20170918 22:18:15.265"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.265">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:15.265" starttime="20170918 22:18:15.265"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.267" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:15.267" starttime="20170918 22:18:15.266"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.267" starttime="20170918 22:18:15.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:15.269" starttime="20170918 22:18:15.268"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.269" starttime="20170918 22:18:15.267"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.269" starttime="20170918 22:18:14.932"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.270">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:15.270" starttime="20170918 22:18:15.269"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.270" starttime="20170918 22:18:15.269"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.271" starttime="20170918 22:18:15.270"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.274">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:15.274" starttime="20170918 22:18:15.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:15.275" starttime="20170918 22:18:15.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.276">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:15.276" starttime="20170918 22:18:15.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:15.276" starttime="20170918 22:18:15.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:15.493" starttime="20170918 22:18:15.278"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:15.493">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.493" starttime="20170918 22:18:15.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.494" starttime="20170918 22:18:15.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.495" starttime="20170918 22:18:15.494"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.495" starttime="20170918 22:18:15.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.495" starttime="20170918 22:18:15.273"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.495" starttime="20170918 22:18:15.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.496">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:15.496" starttime="20170918 22:18:15.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.497" starttime="20170918 22:18:15.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.593">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:15.593">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.593" starttime="20170918 22:18:15.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.594" starttime="20170918 22:18:15.593"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:15.594">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:15.594" starttime="20170918 22:18:15.594"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.595">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.595" starttime="20170918 22:18:15.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.595" starttime="20170918 22:18:15.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.596">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 2e 9d 00 00 00 0a 05 9f e9 cb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 01 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:15.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:15.596">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 2e 9d 00 00 00 0a 05 9f e9 ...</msg>
<status status="PASS" endtime="20170918 22:18:15.596" starttime="20170918 22:18:15.596"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.596">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 03 af 2e 9d 00 00 00 0a 05 9f e9 cb 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:15.596" starttime="20170918 22:18:15.271"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.597">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:15.597">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:15.597" starttime="20170918 22:18:15.597"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.598" starttime="20170918 22:18:15.597"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.598">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:15.598" starttime="20170918 22:18:15.598"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.600" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:15.600" starttime="20170918 22:18:15.599"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.600" starttime="20170918 22:18:15.598"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.601" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:15.601" starttime="20170918 22:18:15.601"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.601" starttime="20170918 22:18:15.600"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.601" starttime="20170918 22:18:15.270"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.602">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:15.602" starttime="20170918 22:18:15.602"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.602" starttime="20170918 22:18:15.601"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.603" starttime="20170918 22:18:15.603"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.606">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:15.607" starttime="20170918 22:18:15.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:15.607" starttime="20170918 22:18:15.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.608">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:15.608" starttime="20170918 22:18:15.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:15.609" starttime="20170918 22:18:15.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:15.830" starttime="20170918 22:18:15.609"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.831">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:15.831">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.831" starttime="20170918 22:18:15.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.832" starttime="20170918 22:18:15.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.833" starttime="20170918 22:18:15.832"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.833" starttime="20170918 22:18:15.606"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.833" starttime="20170918 22:18:15.605"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.834" starttime="20170918 22:18:15.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.834">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:15.835" starttime="20170918 22:18:15.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.835" starttime="20170918 22:18:15.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.930">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:15.930">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.930" starttime="20170918 22:18:15.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.931" starttime="20170918 22:18:15.931"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:15.932">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:15.932" starttime="20170918 22:18:15.931"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.932" starttime="20170918 22:18:15.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:15.933" starttime="20170918 22:18:15.932"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.933">To JSON using : content={
  "data": [
    "_PID=1750"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:15.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:15.934">${content} = {u'data': [u'_PID=1750'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:15.934" starttime="20170918 22:18:15.933"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:15.934">${esel_data} = [u'_PID=1750']</msg>
<status status="PASS" endtime="20170918 22:18:15.934" starttime="20170918 22:18:15.603"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.934">Length is 1</msg>
<msg level="INFO" timestamp="20170918 22:18:15.934">${length} = 1</msg>
<status status="PASS" endtime="20170918 22:18:15.935" starttime="20170918 22:18:15.934"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.935" starttime="20170918 22:18:15.935"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.936">${index} = None</msg>
<msg level="FAIL" timestamp="20170918 22:18:15.936">IndexError: list index out of range</msg>
<status status="FAIL" endtime="20170918 22:18:15.936" starttime="20170918 22:18:15.935"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:15.937">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" endtime="20170918 22:18:15.937" starttime="20170918 22:18:15.936"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.938" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:15.938" starttime="20170918 22:18:15.938"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:15.939" starttime="20170918 22:18:15.937"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:15.939" starttime="20170918 22:18:15.602"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:15.940" starttime="20170918 22:18:15.939"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:15.943">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:15.944" starttime="20170918 22:18:15.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:15.945" starttime="20170918 22:18:15.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.945">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:15.945" starttime="20170918 22:18:15.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:15.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:15.946" starttime="20170918 22:18:15.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:16.235" starttime="20170918 22:18:15.948"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:16.235">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.235" starttime="20170918 22:18:15.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.236" starttime="20170918 22:18:16.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.237" starttime="20170918 22:18:16.236"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.237" starttime="20170918 22:18:15.942"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.237" starttime="20170918 22:18:15.942"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.237" starttime="20170918 22:18:15.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.238">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:16.238" starttime="20170918 22:18:16.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.238" starttime="20170918 22:18:16.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.332">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:16.332">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.332" starttime="20170918 22:18:16.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.333" starttime="20170918 22:18:16.332"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:16.333">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:16.333" starttime="20170918 22:18:16.333"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.333">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.333" starttime="20170918 22:18:15.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.334" starttime="20170918 22:18:16.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.335">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b d6 c7 00 00 00 09 7a 1c 49 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 03 40 f9 21 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0d 14 af 7b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 c2 74 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 cd 40 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 14 f2 9a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 14 fd 93 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 10 86 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 1b 7d 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 2e 6d 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 39 69 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 4c 1a 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 57 36 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0d 15 69 84 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0d 15 74 a5 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4f 1a 65 8a 7d 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4f 1a e7 22 25 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4f 1d ba 00 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:16.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:16.335">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b d6 c7 00 00 00 09 7a 1c 49 ...</msg>
<status status="PASS" endtime="20170918 22:18:16.335" starttime="20170918 22:18:16.334"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.336">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b d6 c7 00 00 00 09 7a 1c 49 f8 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:16.336" starttime="20170918 22:18:15.940"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.336">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:16.336">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:16.336" starttime="20170918 22:18:16.336"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.337" starttime="20170918 22:18:16.336"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.337">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:16.337" starttime="20170918 22:18:16.337"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.339" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:16.339" starttime="20170918 22:18:16.338"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.339" starttime="20170918 22:18:16.338"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.340" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:16.340" starttime="20170918 22:18:16.340"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.341" starttime="20170918 22:18:16.339"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.341" starttime="20170918 22:18:15.939"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.341">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:16.342" starttime="20170918 22:18:16.341"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.342" starttime="20170918 22:18:16.341"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.342" starttime="20170918 22:18:16.342"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.346">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:16.346" starttime="20170918 22:18:16.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:16.347" starttime="20170918 22:18:16.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.348">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:16.348" starttime="20170918 22:18:16.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.349">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:16.349" starttime="20170918 22:18:16.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:16.574" starttime="20170918 22:18:16.350"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:16.575">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.575" starttime="20170918 22:18:16.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.576" starttime="20170918 22:18:16.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.576" starttime="20170918 22:18:16.576"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.576" starttime="20170918 22:18:16.345"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.576" starttime="20170918 22:18:16.345"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.577" starttime="20170918 22:18:16.344"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.577">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:16.577" starttime="20170918 22:18:16.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.578" starttime="20170918 22:18:16.578"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.662">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:16.662">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.662" starttime="20170918 22:18:16.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.663" starttime="20170918 22:18:16.662"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:16.663">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:16.663" starttime="20170918 22:18:16.663"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.663">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.663" starttime="20170918 22:18:16.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.664" starttime="20170918 22:18:16.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.665">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b ed 5e 00 00 00 09 7b 8e c3 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 40 f9 21 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:16.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:16.665">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b ed 5e 00 00 00 09 7b 8e c3 ...</msg>
<status status="PASS" endtime="20170918 22:18:16.665" starttime="20170918 22:18:16.664"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.665">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 7a 1b ed 5e 00 00 00 09 7b 8e c3 98 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:16.665" starttime="20170918 22:18:16.343"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.666">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:16.666">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:16.666" starttime="20170918 22:18:16.665"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.666" starttime="20170918 22:18:16.666"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.667">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:16.667" starttime="20170918 22:18:16.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.669" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:16.669" starttime="20170918 22:18:16.668"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.669" starttime="20170918 22:18:16.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.670" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:16.670" starttime="20170918 22:18:16.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.670" starttime="20170918 22:18:16.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.670" starttime="20170918 22:18:16.342"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.671">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:16.671" starttime="20170918 22:18:16.670"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.671" starttime="20170918 22:18:16.670"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.672" starttime="20170918 22:18:16.672"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.676">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:16.676" starttime="20170918 22:18:16.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:16.677" starttime="20170918 22:18:16.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.677">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:16.677" starttime="20170918 22:18:16.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.678">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:16.678" starttime="20170918 22:18:16.677"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:16.858" starttime="20170918 22:18:16.679"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:16.858">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.859" starttime="20170918 22:18:16.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.859" starttime="20170918 22:18:16.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.860" starttime="20170918 22:18:16.860"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.860" starttime="20170918 22:18:16.675"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.860" starttime="20170918 22:18:16.674"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.860" starttime="20170918 22:18:16.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.861">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:16.861" starttime="20170918 22:18:16.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.862" starttime="20170918 22:18:16.861"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.945">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:16.945">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.945" starttime="20170918 22:18:16.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.946" starttime="20170918 22:18:16.946"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:16.946">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:16.946" starttime="20170918 22:18:16.946"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.947">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.947" starttime="20170918 22:18:16.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:16.948" starttime="20170918 22:18:16.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.948">To JSON using : content={
  "data": [
    "_PID=2321"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:16.948">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:16.948">${content} = {u'data': [u'_PID=2321'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:16.948" starttime="20170918 22:18:16.948"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:16.949">${esel_data} = [u'_PID=2321']</msg>
<status status="PASS" endtime="20170918 22:18:16.949" starttime="20170918 22:18:16.672"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.949">Length is 1</msg>
<msg level="INFO" timestamp="20170918 22:18:16.949">${length} = 1</msg>
<status status="PASS" endtime="20170918 22:18:16.949" starttime="20170918 22:18:16.949"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.950" starttime="20170918 22:18:16.950"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.951">${index} = None</msg>
<msg level="FAIL" timestamp="20170918 22:18:16.951">IndexError: list index out of range</msg>
<status status="FAIL" endtime="20170918 22:18:16.951" starttime="20170918 22:18:16.950"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:16.951">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" endtime="20170918 22:18:16.951" starttime="20170918 22:18:16.951"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.953" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:16.953" starttime="20170918 22:18:16.952"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:16.953" starttime="20170918 22:18:16.951"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:16.953" starttime="20170918 22:18:16.672"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:16.954" starttime="20170918 22:18:16.953"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:16.957">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:16.957" starttime="20170918 22:18:16.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.958">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:16.958" starttime="20170918 22:18:16.958"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.959">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:16.959" starttime="20170918 22:18:16.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:16.959">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:16.959" starttime="20170918 22:18:16.959"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:17.223" starttime="20170918 22:18:16.960"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:17.223">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.223" starttime="20170918 22:18:16.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.224" starttime="20170918 22:18:17.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.224" starttime="20170918 22:18:17.224"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.225" starttime="20170918 22:18:16.956"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.225" starttime="20170918 22:18:16.956"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.225" starttime="20170918 22:18:16.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.225">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:17.225" starttime="20170918 22:18:17.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.226" starttime="20170918 22:18:17.226"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.372">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:17.372">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.372" starttime="20170918 22:18:17.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.373" starttime="20170918 22:18:17.373"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:17.374">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:17.374" starttime="20170918 22:18:17.373"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.374">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.374" starttime="20170918 22:18:16.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.375" starttime="20170918 22:18:17.374"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.375">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb c4 8b 00 00 00 09 3b ec 31 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1a 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 0c f0 8b 39 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 9e 6f 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 a9 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 cd c6 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 d9 30 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f0 ec 37 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f0 f6 fa 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 09 d9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 14 c7 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 27 b3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 32 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 0c f1 45 36 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 0c f1 50 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4d 12 6d d3 81 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4d 19 62 75 ba 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4d 1b 79 b0 1b 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:17.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:17.376">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb c4 8b 00 00 00 09 3b ec 31 ...</msg>
<status status="PASS" endtime="20170918 22:18:17.376" starttime="20170918 22:18:17.375"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.376">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb c4 8b 00 00 00 09 3b ec 31 f1 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:17.376" starttime="20170918 22:18:16.954"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.376">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:17.377">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:17.377" starttime="20170918 22:18:17.376"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.377" starttime="20170918 22:18:17.377"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.378">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:17.378" starttime="20170918 22:18:17.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.379" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:17.379" starttime="20170918 22:18:17.379"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.379" starttime="20170918 22:18:17.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.381" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:17.381" starttime="20170918 22:18:17.380"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.381" starttime="20170918 22:18:17.380"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.381" starttime="20170918 22:18:16.953"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.382">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:17.382" starttime="20170918 22:18:17.381"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.382" starttime="20170918 22:18:17.381"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.383" starttime="20170918 22:18:17.383"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.388">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:17.389" starttime="20170918 22:18:17.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:17.390" starttime="20170918 22:18:17.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.390">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:17.390" starttime="20170918 22:18:17.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:17.391" starttime="20170918 22:18:17.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.613">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:17.613" starttime="20170918 22:18:17.392"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.613">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:17.613">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.613" starttime="20170918 22:18:17.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.614">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.614" starttime="20170918 22:18:17.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.615" starttime="20170918 22:18:17.614"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.615" starttime="20170918 22:18:17.387"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.615" starttime="20170918 22:18:17.386"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.615" starttime="20170918 22:18:17.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.615">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status status="PASS" endtime="20170918 22:18:17.616" starttime="20170918 22:18:17.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.616" starttime="20170918 22:18:17.616"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:17.707">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.707" starttime="20170918 22:18:17.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.708" starttime="20170918 22:18:17.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:17.708">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:17.708" starttime="20170918 22:18:17.708"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.709">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.709" starttime="20170918 22:18:17.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:17.709" starttime="20170918 22:18:17.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.710">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb da 67 00 00 00 09 3d 40 9b 9e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1a 90 00 00 1b 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 1a 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 1a 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1183"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:17.710">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:17.710">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb da 67 00 00 00 09 3d 40 9b ...</msg>
<status status="PASS" endtime="20170918 22:18:17.710" starttime="20170918 22:18:17.710"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.710">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 3b eb da 67 00 00 00 09 3d 40 9b 9e 42 00 0...</msg>
<status status="PASS" endtime="20170918 22:18:17.710" starttime="20170918 22:18:17.383"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.711">Length is 3</msg>
<msg level="INFO" timestamp="20170918 22:18:17.711">${length} = 3</msg>
<status status="PASS" endtime="20170918 22:18:17.711" starttime="20170918 22:18:17.711"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.712" starttime="20170918 22:18:17.711"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.712">${index} = 1</msg>
<status status="PASS" endtime="20170918 22:18:17.712" starttime="20170918 22:18:17.712"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.714" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:17.714" starttime="20170918 22:18:17.713"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.714" starttime="20170918 22:18:17.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.715" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel"&gt;/tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/20170918221747901967_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:17.715" starttime="20170918 22:18:17.715"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.715" starttime="20170918 22:18:17.714"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.715" starttime="20170918 22:18:17.382"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9/callout">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.716">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170918 22:18:17.716" starttime="20170918 22:18:17.716"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.716" starttime="20170918 22:18:17.716"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:17.717" starttime="20170918 22:18:14.196"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.722">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:18:17.725">${out} = </msg>
<status status="PASS" endtime="20170918 22:18:17.725" starttime="20170918 22:18:17.717"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:17.729">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170918 22:18:17.730" starttime="20170918 22:18:17.729"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.730">${status} = False</msg>
<status status="PASS" endtime="20170918 22:18:17.730" starttime="20170918 22:18:17.728"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:17.730">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170918 22:18:17.731" starttime="20170918 22:18:17.730"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:17.731" starttime="20170918 22:18:13.473"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.731" starttime="20170918 22:18:13.424"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.732" starttime="20170918 22:18:13.421"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:17.732" starttime="20170918 22:18:13.421"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.734" starttime="20170918 22:18:17.734"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:17.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:17.734">${ret_values} = None</msg>
<status status="PASS" endtime="20170918 22:18:17.734" starttime="20170918 22:18:17.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.735" starttime="20170918 22:18:17.735"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.850">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:17.851">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170918 22:18:17.907">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 22:18:17.926">${core_files} = /tmp/core_phosphor-hwmon-.2397</msg>
<msg level="INFO" timestamp="20170918 22:18:17.926">${stderr} = </msg>
<msg level="INFO" timestamp="20170918 22:18:17.927">${rc} = 0</msg>
<status status="PASS" endtime="20170918 22:18:17.927" starttime="20170918 22:18:17.794"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:17.927">@{core_list} = [ /tmp/core_phosphor-hwmon-.2397 ]</msg>
<status status="PASS" endtime="20170918 22:18:17.928" starttime="20170918 22:18:17.927"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:17.966" starttime="20170918 22:18:17.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:18.716" starttime="20170918 22:18:17.968"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:18.716" starttime="20170918 22:18:17.967"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:18.716" starttime="20170918 22:18:17.966"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:18.716" starttime="20170918 22:18:17.949"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:18.716" starttime="20170918 22:18:17.928"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2397">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:18.972" starttime="20170918 22:18:18.717"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.031">encoding=UTF-8
alias=bmc_connection
port=22
timeout=25 seconds
height=24
width=80
host=9.3.86.161
index=1
term_type=vt100
newline=

prompt=# 
path_separator=/</msg>
<msg level="INFO" timestamp="20170918 22:18:19.032">Executing command 'rm /tmp/core_phosphor-hwmon-.2397'.</msg>
<msg level="INFO" timestamp="20170918 22:18:19.080">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:18.973"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:18.717"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:18.716"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:17.793"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:17.735"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:17.732"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:18:17.732"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:17:48.201"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:17:48.198"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.101" starttime="20170918 22:17:48.198"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.102" starttime="20170918 22:17:48.198"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170918 22:18:19.116" starttime="20170918 22:18:19.116"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.116" starttime="20170918 22:18:19.102"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.116" starttime="20170918 22:17:48.197"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.117" starttime="20170918 22:17:44.831"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.117" starttime="20170918 22:17:44.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.124">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:19.124" starttime="20170918 22:18:19.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:19.125" starttime="20170918 22:18:19.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.125">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:19.126" starttime="20170918 22:18:19.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:19.126" starttime="20170918 22:18:19.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:19.328" starttime="20170918 22:18:19.127"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:19.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.328" starttime="20170918 22:18:19.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.329" starttime="20170918 22:18:19.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.330" starttime="20170918 22:18:19.329"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.330" starttime="20170918 22:18:19.123"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.330" starttime="20170918 22:18:19.122"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.330" starttime="20170918 22:18:19.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.331">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:18:19.331" starttime="20170918 22:18:19.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.333">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:19.333" starttime="20170918 22:18:19.332"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.334">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:19.334" starttime="20170918 22:18:19.334"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.334" starttime="20170918 22:18:19.333"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.334" starttime="20170918 22:18:19.331"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.334" starttime="20170918 22:18:19.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.438">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:19.438">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.438" starttime="20170918 22:18:19.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.440">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:19.440" starttime="20170918 22:18:19.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.441">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:19.441" starttime="20170918 22:18:19.440"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.441" starttime="20170918 22:18:19.440"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.441" starttime="20170918 22:18:19.439"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.441" starttime="20170918 22:18:19.438"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:19.441">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:19.441" starttime="20170918 22:18:19.441"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.442">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.442" starttime="20170918 22:18:19.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.442" starttime="20170918 22:18:19.442"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.443">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:19.443">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:19.443">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:19.443" starttime="20170918 22:18:19.443"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.444">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:18:19.444" starttime="20170918 22:18:19.119"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.444">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:18:19.444" starttime="20170918 22:18:19.119"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:19.445" starttime="20170918 22:18:19.445"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.445">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:19.445" starttime="20170918 22:18:19.444"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.445" starttime="20170918 22:18:19.118"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.445">${resp} = True</msg>
<status status="PASS" endtime="20170918 22:18:19.445" starttime="20170918 22:18:19.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.448">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170918 22:18:19.448" starttime="20170918 22:18:19.447"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.449">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170918 22:18:19.449" starttime="20170918 22:18:19.449"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.452">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:19.452" starttime="20170918 22:18:19.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:19.453" starttime="20170918 22:18:19.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.454">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:19.454" starttime="20170918 22:18:19.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:19.454" starttime="20170918 22:18:19.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:19.679" starttime="20170918 22:18:19.455"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:19.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:19.680">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.680" starttime="20170918 22:18:19.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.681">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.681" starttime="20170918 22:18:19.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:19.682" starttime="20170918 22:18:19.681"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.682" starttime="20170918 22:18:19.451"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.682" starttime="20170918 22:18:19.450"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.682" starttime="20170918 22:18:19.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.683">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170918 22:18:19.683" starttime="20170918 22:18:19.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:19.684" starttime="20170918 22:18:19.683"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:19.685" starttime="20170918 22:18:19.684"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:19.687">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170918 22:18:19.687" starttime="20170918 22:18:19.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:19.689">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170918 22:18:19.689" starttime="20170918 22:18:19.689"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.689" starttime="20170918 22:18:19.687"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:19.689" starttime="20170918 22:18:19.685"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.068">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170918 22:18:20.068">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:20.069" starttime="20170918 22:18:19.690"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.070">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:20.070" starttime="20170918 22:18:20.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:20.071">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:20.071" starttime="20170918 22:18:20.071"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:20.072" starttime="20170918 22:18:20.070"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:20.072" starttime="20170918 22:18:20.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:20.072">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:20.072" starttime="20170918 22:18:20.072"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:20.073">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:20.073" starttime="20170918 22:18:19.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:20.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:20.074" starttime="20170918 22:18:20.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.074">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:20.075">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:20.075">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:20.075" starttime="20170918 22:18:20.074"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:20.075" starttime="20170918 22:18:19.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:20.076" starttime="20170918 22:18:20.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:20.082">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:20.082" starttime="20170918 22:18:20.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:20.083" starttime="20170918 22:18:20.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.084">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:20.084" starttime="20170918 22:18:20.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:20.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:20.084" starttime="20170918 22:18:20.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:21.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:21.254" starttime="20170918 22:18:20.085"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:21.254">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:21.254">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:21.255" starttime="20170918 22:18:20.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:21.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:21.255" starttime="20170918 22:18:21.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:21.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:21.256" starttime="20170918 22:18:21.256"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.256" starttime="20170918 22:18:20.081"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.256" starttime="20170918 22:18:20.080"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.256" starttime="20170918 22:18:20.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:21.257">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:18:21.257" starttime="20170918 22:18:21.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:21.259">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:21.259" starttime="20170918 22:18:21.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:21.260">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:21.260" starttime="20170918 22:18:21.260"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.260" starttime="20170918 22:18:21.259"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.261" starttime="20170918 22:18:21.258"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:21.261" starttime="20170918 22:18:21.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.072">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:23.073">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.073" starttime="20170918 22:18:21.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.075">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:23.075" starttime="20170918 22:18:23.074"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.076">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:23.076" starttime="20170918 22:18:23.076"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.076" starttime="20170918 22:18:23.075"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.076" starttime="20170918 22:18:23.074"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.076" starttime="20170918 22:18:23.073"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:23.077">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:23.077" starttime="20170918 22:18:23.076"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:23.077">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.077" starttime="20170918 22:18:20.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.078" starttime="20170918 22:18:23.077"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.078">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:23.078">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:23.078">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:23.078" starttime="20170918 22:18:23.078"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:23.079">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170918 22:18:23.079" starttime="20170918 22:18:20.078"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:23.079">${power_state} = On</msg>
<status status="PASS" endtime="20170918 22:18:23.079" starttime="20170918 22:18:20.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:23.080">Off != On</msg>
<status status="FAIL" endtime="20170918 22:18:23.080" starttime="20170918 22:18:23.079"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:23.080" starttime="20170918 22:18:20.078"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.086">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:23.087" starttime="20170918 22:18:23.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:23.088" starttime="20170918 22:18:23.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.089">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:23.089" starttime="20170918 22:18:23.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:23.090" starttime="20170918 22:18:23.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:23.664" starttime="20170918 22:18:23.090"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:23.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:23.664">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.664" starttime="20170918 22:18:23.090"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.665" starttime="20170918 22:18:23.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:23.666" starttime="20170918 22:18:23.665"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.666" starttime="20170918 22:18:23.085"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.666" starttime="20170918 22:18:23.084"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.667" starttime="20170918 22:18:23.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.668">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:18:23.668" starttime="20170918 22:18:23.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:23.671">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:23.671" starttime="20170918 22:18:23.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:23.672">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:23.672" starttime="20170918 22:18:23.672"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.672" starttime="20170918 22:18:23.671"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.672" starttime="20170918 22:18:23.669"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:23.673" starttime="20170918 22:18:23.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:29.424">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:29.425">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:29.425" starttime="20170918 22:18:23.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:29.427">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:29.427" starttime="20170918 22:18:29.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:29.428">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:29.428" starttime="20170918 22:18:29.428"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:29.429" starttime="20170918 22:18:29.427"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:29.429" starttime="20170918 22:18:29.426"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:29.429" starttime="20170918 22:18:29.425"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:29.429">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:29.429" starttime="20170918 22:18:29.429"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:29.429">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:29.429" starttime="20170918 22:18:23.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:29.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:29.430" starttime="20170918 22:18:29.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:29.431">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:29.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:29.431">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:29.431" starttime="20170918 22:18:29.430"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:29.431">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" endtime="20170918 22:18:29.431" starttime="20170918 22:18:23.081"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:29.432">${host_state} = Quiesced</msg>
<status status="PASS" endtime="20170918 22:18:29.432" starttime="20170918 22:18:23.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 22:18:29.432">Off != Quiesced</msg>
<status status="FAIL" endtime="20170918 22:18:29.432" starttime="20170918 22:18:29.432"></status>
</kw>
<status status="FAIL" endtime="20170918 22:18:29.433" starttime="20170918 22:18:20.077"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.439">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:39.439" starttime="20170918 22:18:39.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.440">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:39.440" starttime="20170918 22:18:39.439"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.440">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:39.440" starttime="20170918 22:18:39.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.441">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:39.441" starttime="20170918 22:18:39.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:39.622" starttime="20170918 22:18:39.442"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:39.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:39.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.622" starttime="20170918 22:18:39.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.623" starttime="20170918 22:18:39.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.624" starttime="20170918 22:18:39.623"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.624" starttime="20170918 22:18:39.438"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.624" starttime="20170918 22:18:39.437"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.624" starttime="20170918 22:18:39.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.624">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170918 22:18:39.624" starttime="20170918 22:18:39.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.627">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:39.627" starttime="20170918 22:18:39.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.628">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:39.628" starttime="20170918 22:18:39.627"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.628" starttime="20170918 22:18:39.627"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.628" starttime="20170918 22:18:39.625"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.628" starttime="20170918 22:18:39.625"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.690">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:39.690">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.690" starttime="20170918 22:18:39.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.692">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:39.692" starttime="20170918 22:18:39.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.693">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:39.693" starttime="20170918 22:18:39.693"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.693" starttime="20170918 22:18:39.692"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.693" starttime="20170918 22:18:39.691"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.693" starttime="20170918 22:18:39.690"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:39.694">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:39.694" starttime="20170918 22:18:39.694"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:39.694">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.694" starttime="20170918 22:18:39.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.695" starttime="20170918 22:18:39.694"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.695">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:39.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:39.695">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:39.695" starttime="20170918 22:18:39.695"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:39.696">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170918 22:18:39.696" starttime="20170918 22:18:39.435"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:39.696">${power_state} = Off</msg>
<status status="PASS" endtime="20170918 22:18:39.696" starttime="20170918 22:18:39.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:39.697" starttime="20170918 22:18:39.696"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.697" starttime="20170918 22:18:39.434"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.701">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170918 22:18:39.701" starttime="20170918 22:18:39.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170918 22:18:39.702" starttime="20170918 22:18:39.702"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.703">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170918 22:18:39.703" starttime="20170918 22:18:39.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170918 22:18:39.704" starttime="20170918 22:18:39.703"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.899">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170918 22:18:39.899" starttime="20170918 22:18:39.705"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:39.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 22:18:39.899">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.899" starttime="20170918 22:18:39.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.900">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.900" starttime="20170918 22:18:39.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:39.901" starttime="20170918 22:18:39.901"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.901" starttime="20170918 22:18:39.700"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.901" starttime="20170918 22:18:39.699"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.901" starttime="20170918 22:18:39.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.902">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170918 22:18:39.902" starttime="20170918 22:18:39.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:39.904">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:39.904" starttime="20170918 22:18:39.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:39.905">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170918 22:18:39.905" starttime="20170918 22:18:39.905"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.905" starttime="20170918 22:18:39.904"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.905" starttime="20170918 22:18:39.903"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:39.906" starttime="20170918 22:18:39.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.034">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 22:18:40.034">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:40.035" starttime="20170918 22:18:39.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:40.037" starttime="20170918 22:18:40.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.038">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170918 22:18:40.038" starttime="20170918 22:18:40.037"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.038" starttime="20170918 22:18:40.037"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.038" starttime="20170918 22:18:40.035"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.038" starttime="20170918 22:18:40.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 22:18:40.039">Delete All Sessions</msg>
<status status="PASS" endtime="20170918 22:18:40.039" starttime="20170918 22:18:40.039"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.039">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170918 22:18:40.039" starttime="20170918 22:18:39.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170918 22:18:40.040" starttime="20170918 22:18:40.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.040">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 22:18:40.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 22:18:40.040">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170918 22:18:40.040" starttime="20170918 22:18:40.040"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.041">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170918 22:18:40.041" starttime="20170918 22:18:39.697"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.041">${host_state} = Off</msg>
<status status="PASS" endtime="20170918 22:18:40.041" starttime="20170918 22:18:39.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.042" starttime="20170918 22:18:40.041"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.042" starttime="20170918 22:18:39.433"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.042" starttime="20170918 22:18:20.077"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.042" starttime="20170918 22:18:20.076"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.042">${status} = True</msg>
<status status="PASS" endtime="20170918 22:18:40.042" starttime="20170918 22:18:20.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.043" starttime="20170918 22:18:40.042"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.043" starttime="20170918 22:18:19.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.043">HOST is recovered from quiesced state</msg>
<status status="PASS" endtime="20170918 22:18:40.043" starttime="20170918 22:18:40.043"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.043" starttime="20170918 22:18:19.446"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.043" starttime="20170918 22:18:19.446"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.044" starttime="20170918 22:18:19.118"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.044" starttime="20170918 22:18:19.117"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.055">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170918 22:18:40.055" starttime="20170918 22:18:40.045"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.056">${FFDC_DIR_PATH} = /tmp/fspcibld/26631/obmc-robot/logs/20170918221747901967_TestsTestBasicPoweron/20170918221747901967_PowerOnTest/</msg>
<status status="PASS" endtime="20170918 22:18:40.056" starttime="20170918 22:18:40.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.057" starttime="20170918 22:18:40.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.057" starttime="20170918 22:18:40.057"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.058" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs"&gt;/tmp/fspcibld/26631/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170918 22:18:40.058" starttime="20170918 22:18:40.058"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.059" html="yes">File '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170918 22:18:40.059" starttime="20170918 22:18:40.059"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.059">${exist} = True</msg>
<status status="PASS" endtime="20170918 22:18:40.059" starttime="20170918 22:18:40.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.060" starttime="20170918 22:18:40.059"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.060" starttime="20170918 22:18:40.060"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.061">${cur_time} = 2017-09-18 22:18:40:061295</msg>
<status status="PASS" endtime="20170918 22:18:40.062" starttime="20170918 22:18:40.061"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.062">${cur_time} = 20170918221840061295</msg>
<status status="PASS" endtime="20170918 22:18:40.062" starttime="20170918 22:18:40.062"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.062">${cur_time} = 20170918221840061295</msg>
<status status="PASS" endtime="20170918 22:18:40.062" starttime="20170918 22:18:40.061"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.063" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:40.063" starttime="20170918 22:18:40.063"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.064" starttime="20170918 22:18:40.044"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.064" starttime="20170918 22:17:44.546"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.065">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:18:40.065" starttime="20170918 22:18:40.065"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.066">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:18:40.066" starttime="20170918 22:18:40.066"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.066">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20170918 22:18:40.066" starttime="20170918 22:18:40.065"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.068">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170918 22:18:40.068" starttime="20170918 22:18:40.067"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.068" starttime="20170918 22:18:40.068"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.075">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:18:40.085">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:18:40.085">${output} = /tmp/fspcibld/26631/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170918 22:18:40.086" starttime="20170918 22:18:40.069"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.102" starttime="20170918 22:18:40.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.105" starttime="20170918 22:18:40.105"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.105">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" endtime="20170918 22:18:40.105" starttime="20170918 22:18:40.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.106">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:18:40.106" starttime="20170918 22:18:40.105"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.106">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:18:40.106" starttime="20170918 22:18:40.067"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.107">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20170918 22:18:40.107" starttime="20170918 22:18:40.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.108">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170918 22:18:40.108" starttime="20170918 22:18:40.107"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.109" starttime="20170918 22:18:40.108"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.114">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 22:18:40.142">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:18:40.142">${os_con_pid} = 182</msg>
<status status="PASS" endtime="20170918 22:18:40.143" starttime="20170918 22:18:40.109"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.146" starttime="20170918 22:18:40.145"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.146">${os_con_pid} = 182</msg>
<status status="PASS" endtime="20170918 22:18:40.147" starttime="20170918 22:18:40.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.147">${cmd_buf} = kill -9 182</msg>
<status status="PASS" endtime="20170918 22:18:40.147" starttime="20170918 22:18:40.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.156" starttime="20170918 22:18:40.156"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.156" starttime="20170918 22:18:40.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.173">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170918 22:18:40.189" starttime="20170918 22:18:40.157"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.193">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:18:40.193">${output} = </msg>
<status status="PASS" endtime="20170918 22:18:40.194" starttime="20170918 22:18:40.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.212" starttime="20170918 22:18:40.212"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.212" starttime="20170918 22:18:40.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.218" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/26631/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/26631/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170918 22:18:40.218" starttime="20170918 22:18:40.214"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.218" starttime="20170918 22:18:40.214"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.218" starttime="20170918 22:18:40.213"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.218">${output} = </msg>
<status status="PASS" endtime="20170918 22:18:40.219" starttime="20170918 22:18:40.218"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170918 22:18:40.219">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170918 22:18:40.219" starttime="20170918 22:18:40.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170918 22:18:40.288" starttime="20170918 22:18:40.220"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.290">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 22:18:40.290">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20170918 22:18:40.290" starttime="20170918 22:18:40.219"></status>
</kw>
<msg level="INFO" timestamp="20170918 22:18:40.292">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20170918 22:18:40.292" starttime="20170918 22:18:40.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 22:18:40.294">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.93158|secure|Booting in non-secure mode.
  3.93160|secure|SecureROM valid - enabling functionality
  7.07734|ISTEP  6. 5 - host_init_fsi
  7.19757|ISTEP  6. 6 - host_set_ipl_parms
  7.21937|ISTEP  6. 7 - host_discover_targets
 12.46516|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.46517|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.48750|ISTEP  6. 8 - host_update_master_tpm
 83.97440|SECURE|Security Access Bit&gt; 0x0000000000000000
 83.97440|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 83.97500|ISTEP  6. 9 - host_gard
 84.02400|================================================
 84.02735|Error reported by istep (0x1700) PLID 0x9000000E
 84.03072|  host_gard: no masterCore found
 84.03072|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 84.03073|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 84.03411|  UserData1  0 : 0x0000000000000000
 84.03411|  UserData2  0 : 0x0000000000000000
 84.03411|------------------------------------------------
 84.03412|  Callout type             : Procedure Callout
 84.03412|  Procedure                : EPUB_PRC_HB_CODE
 84.03413|  Priority                 : SRCI_PRIORITY_HIGH
 84.03413|------------------------------------------------
 84.03414|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 84.03414|================================================
 84.07037|System shutting down with error status 0x9000000E
 84.07737|================================================
 84.07737|Error reported by istep (0x1700) PLID 0x9000000E
 84.08075|  IStep failed, see other log(s) with the same PLID for reason.
 84.08075|  ModuleId   0x01 MOD_REPORTING_ERROR
 84.08076|  ReasonCode 0x1703 RC_FAILURE
 84.08076|  UserData1  eid of first error : 0x9000000e00001710
 84.08077|  UserData2  Reason code of first error : 0x0000000100000609
 84.08077|------------------------------------------------
 84.08078|  host_gard
 84.08078|------------------------------------------------
 84.08078|  Callout type             : Procedure Callout
 84.08079|  Procedure                : EPUB_PRC_HB_CODE
 84.08079|  Priority                 : SRCI_PRIORITY_LOW
 84.08080|------------------------------------------------
 84.08080|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 84.08081|================================================


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.93254|secure|Booting in non-secure mode.
  3.93255|secure|SecureROM valid - enabling functionality
  5.64700|ISTEP  6. 5 - host_init_fsi
  5.76162|ISTEP  6. 6 - host_set_ipl_parms
  5.77655|ISTEP  6. 7 - host_discover_targets
  6.20022|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.20023|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.22046|ISTEP  6. 8 - host_update_master_tpm
 79.44137|SECURE|Security Access Bit&gt; 0x0000000000000000
 79.44138|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 79.44148|ISTEP  6. 9 - host_gard
 79.51563|================================================
 79.51896|Error reported by istep (0x1700) PLID 0x90000014
 79.52233|  host_gard: no masterCore found
 79.52234|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 79.52234|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 79.52571|  UserData1  0 : 0x0000000000000000
 79.52572|  UserData2  0 : 0x0000000000000000
 79.52572|------------------------------------------------
 79.52573|  Callout type             : Procedure Callout
 79.52573|  Procedure                : EPUB_PRC_HB_CODE
 79.52574|  Priority                 : SRCI_PRIORITY_HIGH
 79.52574|------------------------------------------------
 79.52575|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 79.52575|================================================
 79.54620|System shutting down with error status 0x90000014
 79.55379|================================================
 79.55380|Error reported by istep (0x1700) PLID 0x90000014
 79.55716|  IStep failed, see other log(s) with the same PLID for reason.
 79.55716|  ModuleId   0x01 MOD_REPORTING_ERROR
 79.55717|  ReasonCode 0x1703 RC_FAILURE
 79.55717|  UserData1  eid of first error : 0x9000001400001710
 79.55718|  UserData2  Reason code of first error : 0x0000000100000609
 79.55718|------------------------------------------------
 79.55719|  host_gard
 79.55719|------------------------------------------------
 79.55720|  Callout type             : Procedure Callout
 79.55720|  Procedure                : EPUB_PRC_HB_CODE
 79.55720|  Priority                 : SRCI_PRIORITY_LOW
 79.55721|------------------------------------------------
 79.55721|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 79.55722|================================================


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.93327|secure|Booting in non-secure mode.
  3.93328|secure|SecureROM valid - enabling functionality
  5.62107|ISTEP  6. 5 - host_init_fsi
  5.74121|ISTEP  6. 6 - host_set_ipl_parms
  5.75015|ISTEP  6. 7 - host_discover_targets
  6.19760|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.19761|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.21753|ISTEP  6. 8 - host_update_master_tpm
 77.30772|SECURE|Security Access Bit&gt; 0x0000000000000000
 77.30773|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 77.30783|ISTEP  6. 9 - host_gard
 77.47872|================================================
 77.48271|Error reported by istep (0x1700) PLID 0x9000001A
 77.48647|  host_gard: no masterCore found
 77.48649|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 77.48649|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 77.48986|  UserData1  0 : 0x0000000000000000
 77.48986|  UserData2  0 : 0x0000000000000000
 77.48986|------------------------------------------------
 77.48987|  Callout type             : Procedure Callout
 77.48987|  Procedure                : EPUB_PRC_HB_CODE
 77.48988|  Priority                 : SRCI_PRIORITY_HIGH
 77.48988|------------------------------------------------
 77.48989|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 77.48989|================================================
 77.50458|System shutting down with error status 0x9000001A
 77.51229|================================================
 77.51229|Error reported by istep (0x1700) PLID 0x9000001A
 77.51567|  IStep failed, see other log(s) with the same PLID for reason.
 77.51568|  ModuleId   0x01 MOD_REPORTING_ERROR
 77.51568|  ReasonCode 0x1703 RC_FAILURE
 77.51569|  UserData1  eid of first error : 0x9000001a00001710
 77.51569|  UserData2  Reason code of first error : 0x0000000100000609
 77.51570|------------------------------------------------
 77.51570|  host_gard
 77.51570|------------------------------------------------
 77.51571|  Callout type             : Procedure Callout
 77.51571|  Procedure                : EPUB_PRC_HB_CODE
 77.51572|  Priority                 : SRCI_PRIORITY_LOW
 77.51572|------------------------------------------------
 77.51572|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 77.51573|================================================
</msg>
<status status="PASS" endtime="20170918 22:18:40.295" starttime="20170918 22:18:40.294"></status>
</kw>
<status status="PASS" endtime="20170918 22:18:40.295" starttime="20170918 22:17:44.546"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20170918 22:18:40.295" starttime="20170918 22:07:34.139">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20170918 22:18:40.297" starttime="20170918 22:07:34.098"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20170918 22:18:40.302" starttime="20170918 22:07:26.357"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20170918 22:07:51.022">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
