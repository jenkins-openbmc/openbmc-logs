<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170629 21:45:35.589">
<suite id="s1" source="/tmp/fspcibld/31264/obmc-robot/tests" name="Tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:45:36.051" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:45:36.051" starttime="20170629 21:45:36.050"></status>
</kw>
<msg timestamp="20170629 21:45:36.051" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:45:36.051" starttime="20170629 21:45:36.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:36.052" starttime="20170629 21:45:36.052"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:36.052" starttime="20170629 21:45:36.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:45:36.053" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:45:36.053" starttime="20170629 21:45:36.053"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:45:36.054" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:45:36.054" starttime="20170629 21:45:36.054"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:45:36.054" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:45:36.054" starttime="20170629 21:45:36.054"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:45:36.055" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:45:36.055" starttime="20170629 21:45:36.055"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:36.055" starttime="20170629 21:45:36.053"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:36.055" starttime="20170629 21:45:36.052"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:45:36.056" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:45:36.056" starttime="20170629 21:45:36.056"></status>
</kw>
<msg timestamp="20170629 21:45:36.057" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:45:36.057" starttime="20170629 21:45:36.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:36.058" starttime="20170629 21:45:36.058"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:36.059" starttime="20170629 21:45:36.058"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:36.059" starttime="20170629 21:45:36.057"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:36.059" starttime="20170629 21:45:36.057"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:45:36.059" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:45:37.850" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:45:37.851" starttime="20170629 21:45:36.059"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:37.851" starttime="20170629 21:45:36.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:45:37.852" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170629 21:45:37.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:45:37.930" level="INFO">${output} = VERSION_ID="v1.99.7-68-g9a12da1"</msg>
<msg timestamp="20170629 21:45:37.930" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:45:37.930" starttime="20170629 21:45:37.852"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170629 21:45:37.931" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170629 21:45:37.931" starttime="20170629 21:45:37.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170629 21:45:37.931" level="INFO">VERSION_ID="v1.99.7-68-g9a12da1"</msg>
<status status="PASS" endtime="20170629 21:45:37.931" starttime="20170629 21:45:37.931"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:37.932" starttime="20170629 21:45:37.852"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:37.932" starttime="20170629 21:45:37.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:45:37.933" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170629 21:45:38.069" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:45:38.069" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-...</msg>
<msg timestamp="20170629 21:45:38.069" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:45:38.069" starttime="20170629 21:45:37.933"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170629 21:45:38.070" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170629 21:45:38.070" starttime="20170629 21:45:38.069"></status>
</kw>
<msg timestamp="20170629 21:45:38.070" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-...</msg>
<status status="PASS" endtime="20170629 21:45:38.070" starttime="20170629 21:45:37.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170629 21:45:38.070" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-105-gf736aad-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-site_local-hostboot-hb0507a_1519.840-4189-gd3b102b
	linux-4.11.6-openpower1-p1c63872
	petitboot-v1.4.3-p9f74a13
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-02021c6
</msg>
<status status="PASS" endtime="20170629 21:45:38.071" starttime="20170629 21:45:38.070"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.071" starttime="20170629 21:45:37.932"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.072" starttime="20170629 21:45:37.932"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:45:38.074" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:45:38.074" starttime="20170629 21:45:38.074"></status>
</kw>
<msg timestamp="20170629 21:45:38.074" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:45:38.074" starttime="20170629 21:45:38.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:38.075" starttime="20170629 21:45:38.075"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.075" starttime="20170629 21:45:38.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:45:38.077" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:45:38.077" starttime="20170629 21:45:38.077"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:45:38.077" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:45:38.077" starttime="20170629 21:45:38.077"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:45:38.078" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:45:38.078" starttime="20170629 21:45:38.078"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:45:38.079" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:45:38.079" starttime="20170629 21:45:38.078"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.079" starttime="20170629 21:45:38.076"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.079" starttime="20170629 21:45:38.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:45:38.080" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:45:38.080" starttime="20170629 21:45:38.080"></status>
</kw>
<msg timestamp="20170629 21:45:38.080" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:45:38.080" starttime="20170629 21:45:38.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:38.082" starttime="20170629 21:45:38.082"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:38.082" starttime="20170629 21:45:38.082"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.083" starttime="20170629 21:45:38.081"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:38.083" starttime="20170629 21:45:38.081"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:45:38.083" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:45:39.861" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:45:39.861" starttime="20170629 21:45:38.083"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.861" starttime="20170629 21:45:38.073"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:45:39.862" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170629 21:45:39.939" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:45:39.939" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170629 21:45:39.939" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:45:39.939" starttime="20170629 21:45:39.862"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170629 21:45:39.939" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170629 21:45:39.939" starttime="20170629 21:45:39.939"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170629 21:45:39.940" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170629 21:45:39.940" starttime="20170629 21:45:39.940"></status>
</kw>
<msg timestamp="20170629 21:45:39.940" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20170629 21:45:39.940" starttime="20170629 21:45:38.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170629 21:45:39.941" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20170629 21:45:39.941" starttime="20170629 21:45:39.940"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.941" starttime="20170629 21:45:38.072"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.941" starttime="20170629 21:45:38.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:45:39.943" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:45:39.943" starttime="20170629 21:45:39.943"></status>
</kw>
<msg timestamp="20170629 21:45:39.943" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:45:39.943" starttime="20170629 21:45:39.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:39.944" starttime="20170629 21:45:39.944"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.944" starttime="20170629 21:45:39.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:45:39.946" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:45:39.946" starttime="20170629 21:45:39.946"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:45:39.946" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:45:39.946" starttime="20170629 21:45:39.946"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:45:39.947" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:45:39.947" starttime="20170629 21:45:39.947"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:45:39.948" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:45:39.948" starttime="20170629 21:45:39.947"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.948" starttime="20170629 21:45:39.945"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.948" starttime="20170629 21:45:39.944"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:45:39.949" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:45:39.949" starttime="20170629 21:45:39.948"></status>
</kw>
<msg timestamp="20170629 21:45:39.949" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:45:39.949" starttime="20170629 21:45:39.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:39.951" starttime="20170629 21:45:39.950"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:39.951" starttime="20170629 21:45:39.951"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.951" starttime="20170629 21:45:39.950"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:39.951" starttime="20170629 21:45:39.949"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:45:39.952" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:45:41.597" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:45:41.598" starttime="20170629 21:45:39.952"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:41.598" starttime="20170629 21:45:39.942"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:45:41.599" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170629 21:45:41.675" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:45:41.675" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170629 21:45:41.676" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:45:41.676" starttime="20170629 21:45:41.598"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170629 21:45:41.676" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170629 21:45:41.676" starttime="20170629 21:45:41.676"></status>
</kw>
<msg timestamp="20170629 21:45:41.676" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20170629 21:45:41.676" starttime="20170629 21:45:41.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:41.677" starttime="20170629 21:45:41.677"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:41.677" starttime="20170629 21:45:39.941"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:41.677" starttime="20170629 21:45:39.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:41.678" starttime="20170629 21:45:41.677"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:41.678" starttime="20170629 21:45:36.049"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/31264/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/31264/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:41.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:41.759" starttime="20170629 21:45:41.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:41.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:41.760" starttime="20170629 21:45:41.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:41.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:41.760" starttime="20170629 21:45:41.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:41.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:41.761" starttime="20170629 21:45:41.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:42.055" starttime="20170629 21:45:41.762"></status>
</kw>
<msg timestamp="20170629 21:45:42.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:42.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.056" starttime="20170629 21:45:41.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.056" starttime="20170629 21:45:42.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.057" starttime="20170629 21:45:42.057"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.057" starttime="20170629 21:45:41.758"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.057" starttime="20170629 21:45:41.757"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.057" starttime="20170629 21:45:41.757"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:42.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:42.063" starttime="20170629 21:45:42.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:42.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:42.063" starttime="20170629 21:45:42.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:42.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:42.064" starttime="20170629 21:45:42.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:42.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:42.064" starttime="20170629 21:45:42.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:42.241" starttime="20170629 21:45:42.065"></status>
</kw>
<msg timestamp="20170629 21:45:42.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:42.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.241" starttime="20170629 21:45:42.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.242" starttime="20170629 21:45:42.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.242" starttime="20170629 21:45:42.242"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.243" starttime="20170629 21:45:42.061"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.243" starttime="20170629 21:45:42.061"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.243" starttime="20170629 21:45:42.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:42.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:45:42.243" starttime="20170629 21:45:42.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:42.245" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:42.245" starttime="20170629 21:45:42.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:42.247" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:42.247" starttime="20170629 21:45:42.246"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.247" starttime="20170629 21:45:42.246"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.247" starttime="20170629 21:45:42.244"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.247" starttime="20170629 21:45:42.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:42.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:45:42.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.317" starttime="20170629 21:45:42.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:42.319" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:42.319" starttime="20170629 21:45:42.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:42.320" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:42.320" starttime="20170629 21:45:42.320"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.320" starttime="20170629 21:45:42.319"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.320" starttime="20170629 21:45:42.318"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.320" starttime="20170629 21:45:42.317"></status>
</kw>
<msg timestamp="20170629 21:45:42.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.321" starttime="20170629 21:45:42.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:42.321" starttime="20170629 21:45:42.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:45:42.322" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:42.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:42.322" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:42.322" starttime="20170629 21:45:42.321"></status>
</kw>
<msg timestamp="20170629 21:45:42.322" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170629 21:45:42.322" starttime="20170629 21:45:42.059"></status>
</kw>
<msg timestamp="20170629 21:45:42.322" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170629 21:45:42.323" starttime="20170629 21:45:42.059"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170629 21:45:42.324" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170629 21:45:42.324" starttime="20170629 21:45:42.323"></status>
</kw>
<msg timestamp="20170629 21:45:42.324" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:45:42.324" starttime="20170629 21:45:42.323"></status>
</kw>
<msg timestamp="20170629 21:45:42.324" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:45:42.324" starttime="20170629 21:45:42.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.325" starttime="20170629 21:45:42.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.325" starttime="20170629 21:45:42.325"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170629 21:45:42.334" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170629 21:45:42.334" starttime="20170629 21:45:42.326"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170629 21:45:42.342" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170629 21:45:42.342" starttime="20170629 21:45:42.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:45:42.343" level="INFO">${cur_time} = 2017-06-29 21:45:42:343252</msg>
<status status="PASS" endtime="20170629 21:45:42.343" starttime="20170629 21:45:42.343"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:45:42.344" level="INFO">${cur_time} = 20170629214542343252</msg>
<status status="PASS" endtime="20170629 21:45:42.344" starttime="20170629 21:45:42.344"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.344" starttime="20170629 21:45:42.343"></status>
</kw>
<msg timestamp="20170629 21:45:42.349" level="INFO">${FFDC_TIME} = 20170629214542343252</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170629 21:45:42.350" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170629 21:45:42.350" starttime="20170629 21:45:42.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170629 21:45:42.351" level="INFO">${suite_name} = 20170629214542343252_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170629 21:45:42.351" starttime="20170629 21:45:42.350"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170629 21:45:42.351" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20170629 21:45:42.351" starttime="20170629 21:45:42.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170629 21:45:42.352" level="INFO">${test_name} = 20170629214542343252_TestSSLConnection</msg>
<status status="PASS" endtime="20170629 21:45:42.352" starttime="20170629 21:45:42.352"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.352" starttime="20170629 21:45:42.349"></status>
</kw>
<msg timestamp="20170629 21:45:42.352" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214542343252_TestsSecurityTestSsl/20170629214542343252_TestSSLConnection/</msg>
<msg timestamp="20170629 21:45:42.357" level="INFO">${FFDC_PREFIX} = 20170629214542343252_</msg>
<status status="PASS" endtime="20170629 21:45:42.357" starttime="20170629 21:45:42.342"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.357" starttime="20170629 21:45:42.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.357" starttime="20170629 21:45:42.357"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.358" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs"&gt;/tmp/fspcibld/31264/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:45:42.358" starttime="20170629 21:45:42.358"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.359" level="FAIL">File '/tmp/fspcibld/31264/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170629 21:45:42.359" starttime="20170629 21:45:42.359"></status>
</kw>
<msg timestamp="20170629 21:45:42.360" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170629 21:45:42.360" starttime="20170629 21:45:42.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.361" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:45:42.361" starttime="20170629 21:45:42.360"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.361" starttime="20170629 21:45:42.360"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.361" starttime="20170629 21:45:42.361"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:45:42.363" level="INFO">${cur_time} = 2017-06-29 21:45:42:362386</msg>
<status status="PASS" endtime="20170629 21:45:42.363" starttime="20170629 21:45:42.362"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:45:42.363" level="INFO">${cur_time} = 20170629214542362386</msg>
<status status="PASS" endtime="20170629 21:45:42.363" starttime="20170629 21:45:42.363"></status>
</kw>
<msg timestamp="20170629 21:45:42.363" level="INFO">${cur_time} = 20170629214542362386</msg>
<status status="PASS" endtime="20170629 21:45:42.363" starttime="20170629 21:45:42.361"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.364" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:45:42.364" starttime="20170629 21:45:42.364"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.364" starttime="20170629 21:45:42.325"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.364" starttime="20170629 21:45:42.058"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" endtime="20170629 21:45:42.365" critical="yes" starttime="20170629 21:45:41.756"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170629 21:45:42.365" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170629 21:45:42.366" starttime="20170629 21:45:42.365"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20170629 21:45:42.366" starttime="20170629 21:45:41.680"></status>
</suite>
<status status="PASS" endtime="20170629 21:45:42.368" starttime="20170629 21:45:41.678"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/31264/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170629 21:45:42.401" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.401" starttime="20170629 21:45:42.401"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170629 21:45:42.402" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.402" starttime="20170629 21:45:42.401"></status>
</kw>
<msg timestamp="20170629 21:45:42.402" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.402" starttime="20170629 21:45:42.400"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170629 21:45:42.404" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.404" starttime="20170629 21:45:42.404"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170629 21:45:42.405" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.405" starttime="20170629 21:45:42.404"></status>
</kw>
<msg timestamp="20170629 21:45:42.405" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:45:42.405" starttime="20170629 21:45:42.403"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.406" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170629 21:45:42.406" starttime="20170629 21:45:42.406"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.406" starttime="20170629 21:45:42.406"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:45:42.411" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:45:42.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:45:42.417" level="INFO">${output} = /tmp/fspcibld/31264/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170629 21:45:42.417" starttime="20170629 21:45:42.407"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.420" starttime="20170629 21:45:42.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.421" starttime="20170629 21:45:42.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.422" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:45:42.422" starttime="20170629 21:45:42.421"></status>
</kw>
<msg timestamp="20170629 21:45:42.422" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:45:42.422" starttime="20170629 21:45:42.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.423" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170629 21:45:42.423" starttime="20170629 21:45:42.422"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.423" starttime="20170629 21:45:42.423"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170629 21:45:42.428" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:45:42.443" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:45:42.443" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170629 21:45:42.443" starttime="20170629 21:45:42.423"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.446" starttime="20170629 21:45:42.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.447" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170629 21:45:42.447" starttime="20170629 21:45:42.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.448" starttime="20170629 21:45:42.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:45:42.449" level="INFO">${rc} = None</msg>
<msg timestamp="20170629 21:45:42.449" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170629 21:45:42.449" starttime="20170629 21:45:42.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.450" starttime="20170629 21:45:42.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.453" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status status="FAIL" endtime="20170629 21:45:42.453" starttime="20170629 21:45:42.452"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.453" starttime="20170629 21:45:42.451"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.453" starttime="20170629 21:45:42.450"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:45:42.454" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170629 21:45:42.454" starttime="20170629 21:45:42.453"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170629 21:45:42.454" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170629 21:45:42.454" starttime="20170629 21:45:42.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.656" starttime="20170629 21:45:42.455"></status>
</kw>
<msg timestamp="20170629 21:45:42.657" level="INFO">${rc} = 1</msg>
<msg timestamp="20170629 21:45:42.657" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170629 21:45:42.657" starttime="20170629 21:45:42.455"></status>
</kw>
<msg timestamp="20170629 21:45:42.657" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170629 21:45:42.658" starttime="20170629 21:45:42.402"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170629 21:45:42.659" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:45:42.659" starttime="20170629 21:45:42.659"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.660" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170629 21:45:42.661" starttime="20170629 21:45:42.660"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.661" starttime="20170629 21:45:42.661"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:45:42.665" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:45:42.667" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:45:42.667" level="INFO">${output} = /tmp/fspcibld/31264/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170629 21:45:42.668" starttime="20170629 21:45:42.661"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.670" starttime="20170629 21:45:42.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.671" starttime="20170629 21:45:42.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.672" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:45:42.672" starttime="20170629 21:45:42.672"></status>
</kw>
<msg timestamp="20170629 21:45:42.673" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:45:42.673" starttime="20170629 21:45:42.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:45:42.673" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170629 21:45:42.673" starttime="20170629 21:45:42.673"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.674" starttime="20170629 21:45:42.674"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:45:42.679" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170629 21:45:42.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:45:42.681" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170629 21:45:42.681" starttime="20170629 21:45:42.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:42.684" starttime="20170629 21:45:42.683"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:42.684" starttime="20170629 21:45:42.400"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170629 21:45:42.685" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170629 21:45:42.687" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170629 21:45:42.687" starttime="20170629 21:45:42.686"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:42.688" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170629 21:45:42.688" starttime="20170629 21:45:42.688"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:42.692" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:42.693" starttime="20170629 21:45:42.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:42.694" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:42.694" starttime="20170629 21:45:42.694"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:42.695" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:42.695" starttime="20170629 21:45:42.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:42.695" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:42.696" starttime="20170629 21:45:42.695"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:43.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:43.395" starttime="20170629 21:45:42.696"></status>
</kw>
<msg timestamp="20170629 21:45:43.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:43.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.395" starttime="20170629 21:45:42.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:43.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.396" starttime="20170629 21:45:43.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:43.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.396" starttime="20170629 21:45:43.396"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.396" starttime="20170629 21:45:42.691"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.396" starttime="20170629 21:45:42.690"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.397" starttime="20170629 21:45:42.689"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:43.397" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170629 21:45:43.397" starttime="20170629 21:45:43.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:43.398" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:43.398" starttime="20170629 21:45:43.397"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:43.398" starttime="20170629 21:45:43.398"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:43.400" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170629 21:45:43.400" starttime="20170629 21:45:43.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:43.401" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170629 21:45:43.401" starttime="20170629 21:45:43.401"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.401" starttime="20170629 21:45:43.400"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.401" starttime="20170629 21:45:43.398"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:43.870" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170629 21:45:43.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.870" starttime="20170629 21:45:43.401"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:43.872" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:43.872" starttime="20170629 21:45:43.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:43.873" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:43.873" starttime="20170629 21:45:43.872"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.873" starttime="20170629 21:45:43.872"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.873" starttime="20170629 21:45:43.870"></status>
</kw>
<msg timestamp="20170629 21:45:43.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.873" starttime="20170629 21:45:42.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:43.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:43.874" starttime="20170629 21:45:43.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170629 21:45:43.875" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:43.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:43.875" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:43.875" starttime="20170629 21:45:43.874"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:43.875" starttime="20170629 21:45:42.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:43.876" starttime="20170629 21:45:43.875"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:43.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:43.881" starttime="20170629 21:45:43.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:43.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:43.882" starttime="20170629 21:45:43.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:43.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:43.883" starttime="20170629 21:45:43.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:43.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:43.884" starttime="20170629 21:45:43.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:45.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:45.336" starttime="20170629 21:45:43.885"></status>
</kw>
<msg timestamp="20170629 21:45:45.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:45.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:45.336" starttime="20170629 21:45:43.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:45.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:45.337" starttime="20170629 21:45:45.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:45.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:45.338" starttime="20170629 21:45:45.337"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.338" starttime="20170629 21:45:43.880"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.338" starttime="20170629 21:45:43.879"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.338" starttime="20170629 21:45:43.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:45.338" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:45:45.339" starttime="20170629 21:45:45.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:45.341" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:45.341" starttime="20170629 21:45:45.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:45.342" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:45.342" starttime="20170629 21:45:45.341"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.342" starttime="20170629 21:45:45.341"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.342" starttime="20170629 21:45:45.339"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:45.342" starttime="20170629 21:45:45.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:49.298" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:45:49.299" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:49.299" starttime="20170629 21:45:45.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:49.301" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:49.301" starttime="20170629 21:45:49.300"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:49.302" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:49.302" starttime="20170629 21:45:49.302"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.302" starttime="20170629 21:45:49.301"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.302" starttime="20170629 21:45:49.300"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.302" starttime="20170629 21:45:49.299"></status>
</kw>
<msg timestamp="20170629 21:45:49.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:49.302" starttime="20170629 21:45:43.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:49.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:49.303" starttime="20170629 21:45:49.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:45:49.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:49.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:49.304" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:49.304" starttime="20170629 21:45:49.303"></status>
</kw>
<msg timestamp="20170629 21:45:49.304" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170629 21:45:49.304" starttime="20170629 21:45:43.877"></status>
</kw>
<msg timestamp="20170629 21:45:49.305" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170629 21:45:49.305" starttime="20170629 21:45:43.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:49.305" starttime="20170629 21:45:49.305"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.306" starttime="20170629 21:45:43.876"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.306" starttime="20170629 21:45:43.876"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:49.306" starttime="20170629 21:45:42.686"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:49.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:49.312" starttime="20170629 21:45:49.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:49.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:49.312" starttime="20170629 21:45:49.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:49.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:49.313" starttime="20170629 21:45:49.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:49.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:49.313" starttime="20170629 21:45:49.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.482" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:50.482" starttime="20170629 21:45:49.314"></status>
</kw>
<msg timestamp="20170629 21:45:50.482" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:50.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.482" starttime="20170629 21:45:49.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.483" starttime="20170629 21:45:50.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.484" starttime="20170629 21:45:50.483"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.484" starttime="20170629 21:45:49.310"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.484" starttime="20170629 21:45:49.309"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.484" starttime="20170629 21:45:49.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:50.485" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:45:50.485" starttime="20170629 21:45:50.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:50.487" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:50.487" starttime="20170629 21:45:50.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:50.487" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:50.488" starttime="20170629 21:45:50.487"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.488" starttime="20170629 21:45:50.487"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.488" starttime="20170629 21:45:50.485"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.488" starttime="20170629 21:45:50.485"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:50.636" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:45:50.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.636" starttime="20170629 21:45:50.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:50.638" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:50.638" starttime="20170629 21:45:50.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:50.639" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:50.639" starttime="20170629 21:45:50.638"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.639" starttime="20170629 21:45:50.638"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.639" starttime="20170629 21:45:50.637"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.639" starttime="20170629 21:45:50.636"></status>
</kw>
<msg timestamp="20170629 21:45:50.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.639" starttime="20170629 21:45:49.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.640" starttime="20170629 21:45:50.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:45:50.641" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:50.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:50.641" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:50.641" starttime="20170629 21:45:50.640"></status>
</kw>
<msg timestamp="20170629 21:45:50.641" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170629 21:45:50.641" starttime="20170629 21:45:49.308"></status>
</kw>
<msg timestamp="20170629 21:45:50.641" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" endtime="20170629 21:45:50.641" starttime="20170629 21:45:49.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:50.642" starttime="20170629 21:45:50.642"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.642" starttime="20170629 21:45:49.307"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.642" starttime="20170629 21:45:49.306"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170629 21:45:50.643" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170629 21:45:50.643" starttime="20170629 21:45:50.643"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:50.645" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170629 21:45:50.645" starttime="20170629 21:45:50.644"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:50.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:50.648" starttime="20170629 21:45:50.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:50.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:50.648" starttime="20170629 21:45:50.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:50.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:50.649" starttime="20170629 21:45:50.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:50.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:50.650" starttime="20170629 21:45:50.649"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:50.825" starttime="20170629 21:45:50.650"></status>
</kw>
<msg timestamp="20170629 21:45:50.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:50.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.826" starttime="20170629 21:45:50.650"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.826" starttime="20170629 21:45:50.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:50.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:50.827" starttime="20170629 21:45:50.826"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.827" starttime="20170629 21:45:50.646"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.827" starttime="20170629 21:45:50.646"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.827" starttime="20170629 21:45:50.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:50.828" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170629 21:45:50.828" starttime="20170629 21:45:50.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:50.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:50.829" starttime="20170629 21:45:50.828"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:50.829" starttime="20170629 21:45:50.829"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:50.831" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20170629 21:45:50.831" starttime="20170629 21:45:50.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:50.832" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170629 21:45:50.832" starttime="20170629 21:45:50.832"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.832" starttime="20170629 21:45:50.831"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:50.832" starttime="20170629 21:45:50.829"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:51.114" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170629 21:45:51.114" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:51.114" starttime="20170629 21:45:50.832"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:51.115" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:51.115" starttime="20170629 21:45:51.115"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:51.116" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:51.116" starttime="20170629 21:45:51.116"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:51.116" starttime="20170629 21:45:51.115"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:51.116" starttime="20170629 21:45:51.114"></status>
</kw>
<msg timestamp="20170629 21:45:51.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:51.117" starttime="20170629 21:45:50.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:51.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:51.117" starttime="20170629 21:45:51.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170629 21:45:51.118" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:51.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:51.118" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:51.118" starttime="20170629 21:45:51.118"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:51.118" starttime="20170629 21:45:50.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:45:51.119" starttime="20170629 21:45:51.118"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:45:51.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:45:51.123" starttime="20170629 21:45:51.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:45:51.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:45:51.124" starttime="20170629 21:45:51.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:45:51.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:45:51.125" starttime="20170629 21:45:51.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:45:51.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:45:51.126" starttime="20170629 21:45:51.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:45:52.651" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:45:52.651" starttime="20170629 21:45:51.126"></status>
</kw>
<msg timestamp="20170629 21:45:52.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:45:52.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:52.652" starttime="20170629 21:45:51.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:45:52.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:52.652" starttime="20170629 21:45:52.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:52.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:52.653" starttime="20170629 21:45:52.652"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.653" starttime="20170629 21:45:51.122"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.653" starttime="20170629 21:45:51.122"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.653" starttime="20170629 21:45:51.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:45:52.654" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:45:52.654" starttime="20170629 21:45:52.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:52.656" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:52.656" starttime="20170629 21:45:52.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:52.657" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:45:52.657" starttime="20170629 21:45:52.656"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.657" starttime="20170629 21:45:52.656"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.657" starttime="20170629 21:45:52.654"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:52.657" starttime="20170629 21:45:52.654"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:45:55.947" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:45:55.947" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:55.947" starttime="20170629 21:45:52.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:45:55.949" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:55.949" starttime="20170629 21:45:55.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:45:55.950" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:45:55.950" starttime="20170629 21:45:55.950"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:55.950" starttime="20170629 21:45:55.949"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:55.950" starttime="20170629 21:45:55.948"></status>
</kw>
<status status="PASS" endtime="20170629 21:45:55.950" starttime="20170629 21:45:55.947"></status>
</kw>
<msg timestamp="20170629 21:45:55.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:45:55.950" starttime="20170629 21:45:51.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:45:55.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:45:55.951" starttime="20170629 21:45:55.951"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:45:55.952" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:45:55.952" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:45:55.952" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:45:55.952" starttime="20170629 21:45:55.952"></status>
</kw>
<msg timestamp="20170629 21:45:55.952" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170629 21:45:55.952" starttime="20170629 21:45:51.120"></status>
</kw>
<msg timestamp="20170629 21:45:55.953" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170629 21:45:55.953" starttime="20170629 21:45:51.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:45:55.953" level="FAIL">Running != Off</msg>
<status status="FAIL" endtime="20170629 21:45:55.953" starttime="20170629 21:45:55.953"></status>
</kw>
<status status="FAIL" endtime="20170629 21:45:55.954" starttime="20170629 21:45:51.119"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:05.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:05.959" starttime="20170629 21:46:05.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:05.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:05.960" starttime="20170629 21:46:05.960"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:05.961" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:05.961" starttime="20170629 21:46:05.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:05.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:05.961" starttime="20170629 21:46:05.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:07.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:07.128" starttime="20170629 21:46:05.962"></status>
</kw>
<msg timestamp="20170629 21:46:07.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:07.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.128" starttime="20170629 21:46:05.962"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:07.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.129" starttime="20170629 21:46:07.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:07.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.130" starttime="20170629 21:46:07.129"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.130" starttime="20170629 21:46:05.958"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.130" starttime="20170629 21:46:05.958"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.130" starttime="20170629 21:46:05.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:07.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:46:07.131" starttime="20170629 21:46:07.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:07.133" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:07.133" starttime="20170629 21:46:07.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:07.134" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:07.134" starttime="20170629 21:46:07.134"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.134" starttime="20170629 21:46:07.133"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.134" starttime="20170629 21:46:07.132"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.134" starttime="20170629 21:46:07.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:07.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:46:07.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.749" starttime="20170629 21:46:07.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:07.751" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:07.751" starttime="20170629 21:46:07.750"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:07.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:07.752" starttime="20170629 21:46:07.751"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.752" starttime="20170629 21:46:07.751"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.752" starttime="20170629 21:46:07.750"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.752" starttime="20170629 21:46:07.749"></status>
</kw>
<msg timestamp="20170629 21:46:07.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.752" starttime="20170629 21:46:05.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:07.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:07.753" starttime="20170629 21:46:07.752"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:07.753" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:07.753" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:07.754" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:07.754" starttime="20170629 21:46:07.753"></status>
</kw>
<msg timestamp="20170629 21:46:07.754" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:46:07.754" starttime="20170629 21:46:05.955"></status>
</kw>
<msg timestamp="20170629 21:46:07.754" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:46:07.754" starttime="20170629 21:46:05.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:46:07.755" starttime="20170629 21:46:07.754"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.755" starttime="20170629 21:46:05.954"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.755" starttime="20170629 21:45:51.119"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:07.755" starttime="20170629 21:45:50.642"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:07.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:07.760" starttime="20170629 21:46:07.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:07.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:07.760" starttime="20170629 21:46:07.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:07.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:07.761" starttime="20170629 21:46:07.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:07.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:07.762" starttime="20170629 21:46:07.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:08.132" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:08.132" starttime="20170629 21:46:07.762"></status>
</kw>
<msg timestamp="20170629 21:46:08.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:08.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.132" starttime="20170629 21:46:07.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:08.133" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.133" starttime="20170629 21:46:08.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:08.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.134" starttime="20170629 21:46:08.133"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.134" starttime="20170629 21:46:07.758"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.134" starttime="20170629 21:46:07.758"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.134" starttime="20170629 21:46:07.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:08.135" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:46:08.135" starttime="20170629 21:46:08.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:08.137" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:08.137" starttime="20170629 21:46:08.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:08.137" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:08.138" starttime="20170629 21:46:08.137"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.138" starttime="20170629 21:46:08.137"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.138" starttime="20170629 21:46:08.135"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.138" starttime="20170629 21:46:08.135"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:08.460" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:46:08.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.460" starttime="20170629 21:46:08.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:08.461" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:08.461" starttime="20170629 21:46:08.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:08.462" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:08.462" starttime="20170629 21:46:08.462"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.463" starttime="20170629 21:46:08.462"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.463" starttime="20170629 21:46:08.460"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:08.463" starttime="20170629 21:46:08.460"></status>
</kw>
<msg timestamp="20170629 21:46:08.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.463" starttime="20170629 21:46:07.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:08.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:08.464" starttime="20170629 21:46:08.463"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:08.464" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:08.464" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:08.464" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:08.464" starttime="20170629 21:46:08.464"></status>
</kw>
<msg timestamp="20170629 21:46:08.465" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170629 21:46:08.465" starttime="20170629 21:46:07.756"></status>
</kw>
<msg timestamp="20170629 21:46:08.465" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" endtime="20170629 21:46:08.465" starttime="20170629 21:46:07.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170629 21:46:08.465" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" endtime="20170629 21:46:08.466" starttime="20170629 21:46:08.465"></status>
</kw>
<status status="FAIL" endtime="20170629 21:46:08.466" starttime="20170629 21:46:07.756"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:18.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:18.471" starttime="20170629 21:46:18.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:18.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:18.472" starttime="20170629 21:46:18.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:18.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:18.472" starttime="20170629 21:46:18.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:18.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:18.473" starttime="20170629 21:46:18.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:18.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:18.665" starttime="20170629 21:46:18.473"></status>
</kw>
<msg timestamp="20170629 21:46:18.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:18.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.665" starttime="20170629 21:46:18.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:18.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.666" starttime="20170629 21:46:18.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:18.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.666" starttime="20170629 21:46:18.666"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.667" starttime="20170629 21:46:18.469"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.667" starttime="20170629 21:46:18.469"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.667" starttime="20170629 21:46:18.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:18.667" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:46:18.667" starttime="20170629 21:46:18.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:18.669" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:18.670" starttime="20170629 21:46:18.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:18.670" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:18.670" starttime="20170629 21:46:18.670"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.671" starttime="20170629 21:46:18.670"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.671" starttime="20170629 21:46:18.668"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.671" starttime="20170629 21:46:18.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:18.736" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:46:18.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.736" starttime="20170629 21:46:18.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:18.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:18.739" starttime="20170629 21:46:18.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:18.740" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:18.740" starttime="20170629 21:46:18.740"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.740" starttime="20170629 21:46:18.739"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.741" starttime="20170629 21:46:18.737"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:18.741" starttime="20170629 21:46:18.737"></status>
</kw>
<msg timestamp="20170629 21:46:18.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.741" starttime="20170629 21:46:18.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:18.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:18.742" starttime="20170629 21:46:18.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:18.743" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:18.743" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:18.743" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:18.743" starttime="20170629 21:46:18.742"></status>
</kw>
<msg timestamp="20170629 21:46:18.743" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170629 21:46:18.743" starttime="20170629 21:46:18.467"></status>
</kw>
<msg timestamp="20170629 21:46:18.744" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" endtime="20170629 21:46:18.744" starttime="20170629 21:46:18.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170629 21:46:18.745" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" endtime="20170629 21:46:18.745" starttime="20170629 21:46:18.744"></status>
</kw>
<status status="FAIL" endtime="20170629 21:46:18.745" starttime="20170629 21:46:18.466"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:28.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:28.750" starttime="20170629 21:46:28.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:28.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:28.750" starttime="20170629 21:46:28.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:28.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:28.751" starttime="20170629 21:46:28.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:28.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:28.752" starttime="20170629 21:46:28.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:29.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:29.306" starttime="20170629 21:46:28.752"></status>
</kw>
<msg timestamp="20170629 21:46:29.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:29.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.306" starttime="20170629 21:46:28.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:29.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.307" starttime="20170629 21:46:29.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:29.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.307" starttime="20170629 21:46:29.307"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.308" starttime="20170629 21:46:28.749"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.308" starttime="20170629 21:46:28.748"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.308" starttime="20170629 21:46:28.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:29.308" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:46:29.308" starttime="20170629 21:46:29.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:29.310" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:29.311" starttime="20170629 21:46:29.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:29.311" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:29.311" starttime="20170629 21:46:29.311"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.312" starttime="20170629 21:46:29.311"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.312" starttime="20170629 21:46:29.309"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.312" starttime="20170629 21:46:29.309"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:29.458" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:46:29.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.458" starttime="20170629 21:46:29.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:29.460" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:29.460" starttime="20170629 21:46:29.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:29.461" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:29.461" starttime="20170629 21:46:29.461"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.462" starttime="20170629 21:46:29.460"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.462" starttime="20170629 21:46:29.459"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:29.462" starttime="20170629 21:46:29.458"></status>
</kw>
<msg timestamp="20170629 21:46:29.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.462" starttime="20170629 21:46:28.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:29.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:29.463" starttime="20170629 21:46:29.462"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:29.463" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:29.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:29.463" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:29.463" starttime="20170629 21:46:29.463"></status>
</kw>
<msg timestamp="20170629 21:46:29.464" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170629 21:46:29.464" starttime="20170629 21:46:28.746"></status>
</kw>
<msg timestamp="20170629 21:46:29.464" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170629 21:46:29.464" starttime="20170629 21:46:28.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170629 21:46:29.465" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" endtime="20170629 21:46:29.465" starttime="20170629 21:46:29.464"></status>
</kw>
<status status="FAIL" endtime="20170629 21:46:29.465" starttime="20170629 21:46:28.745"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:39.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:39.471" starttime="20170629 21:46:39.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:39.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:39.472" starttime="20170629 21:46:39.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:39.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:39.472" starttime="20170629 21:46:39.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:39.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:39.473" starttime="20170629 21:46:39.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:39.873" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:39.873" starttime="20170629 21:46:39.474"></status>
</kw>
<msg timestamp="20170629 21:46:39.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:39.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:39.873" starttime="20170629 21:46:39.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:39.874" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:39.874" starttime="20170629 21:46:39.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:39.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:39.875" starttime="20170629 21:46:39.874"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.875" starttime="20170629 21:46:39.469"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.875" starttime="20170629 21:46:39.468"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.875" starttime="20170629 21:46:39.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:39.876" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:46:39.876" starttime="20170629 21:46:39.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:39.878" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:39.878" starttime="20170629 21:46:39.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:39.879" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:39.879" starttime="20170629 21:46:39.879"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.879" starttime="20170629 21:46:39.878"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.879" starttime="20170629 21:46:39.877"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:39.879" starttime="20170629 21:46:39.876"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:40.049" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:46:40.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:40.049" starttime="20170629 21:46:39.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:40.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:40.051" starttime="20170629 21:46:40.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:40.054" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:40.054" starttime="20170629 21:46:40.052"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:40.054" starttime="20170629 21:46:40.051"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:40.054" starttime="20170629 21:46:40.050"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:40.054" starttime="20170629 21:46:40.049"></status>
</kw>
<msg timestamp="20170629 21:46:40.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:40.054" starttime="20170629 21:46:39.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:40.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:40.055" starttime="20170629 21:46:40.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:40.056" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:40.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:40.056" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:40.056" starttime="20170629 21:46:40.055"></status>
</kw>
<msg timestamp="20170629 21:46:40.056" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170629 21:46:40.056" starttime="20170629 21:46:39.466"></status>
</kw>
<msg timestamp="20170629 21:46:40.056" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170629 21:46:40.056" starttime="20170629 21:46:39.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170629 21:46:40.057" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" endtime="20170629 21:46:40.057" starttime="20170629 21:46:40.057"></status>
</kw>
<status status="FAIL" endtime="20170629 21:46:40.057" starttime="20170629 21:46:39.465"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:50.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:50.063" starttime="20170629 21:46:50.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:50.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:50.063" starttime="20170629 21:46:50.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:50.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:50.064" starttime="20170629 21:46:50.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:50.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:50.064" starttime="20170629 21:46:50.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:50.257" starttime="20170629 21:46:50.065"></status>
</kw>
<msg timestamp="20170629 21:46:50.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:50.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.258" starttime="20170629 21:46:50.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.258" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.258" starttime="20170629 21:46:50.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.259" starttime="20170629 21:46:50.258"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.259" starttime="20170629 21:46:50.061"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.259" starttime="20170629 21:46:50.061"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.259" starttime="20170629 21:46:50.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:50.260" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170629 21:46:50.260" starttime="20170629 21:46:50.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:50.262" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:50.262" starttime="20170629 21:46:50.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:50.263" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:50.263" starttime="20170629 21:46:50.263"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.263" starttime="20170629 21:46:50.262"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.263" starttime="20170629 21:46:50.261"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.263" starttime="20170629 21:46:50.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:50.425" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170629 21:46:50.425" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.425" starttime="20170629 21:46:50.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:50.427" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:50.427" starttime="20170629 21:46:50.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:50.428" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:50.428" starttime="20170629 21:46:50.428"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.429" starttime="20170629 21:46:50.428"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.429" starttime="20170629 21:46:50.426"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.429" starttime="20170629 21:46:50.426"></status>
</kw>
<msg timestamp="20170629 21:46:50.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.429" starttime="20170629 21:46:50.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.430" starttime="20170629 21:46:50.429"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:50.430" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:50.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:50.430" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Starting OS', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:50.430" starttime="20170629 21:46:50.430"></status>
</kw>
<msg timestamp="20170629 21:46:50.431" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" endtime="20170629 21:46:50.431" starttime="20170629 21:46:50.059"></status>
</kw>
<msg timestamp="20170629 21:46:50.431" level="INFO">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" endtime="20170629 21:46:50.431" starttime="20170629 21:46:50.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" endtime="20170629 21:46:50.431" starttime="20170629 21:46:50.431"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.432" starttime="20170629 21:46:50.058"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.432" starttime="20170629 21:46:07.755"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170629 21:46:50.432" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170629 21:46:50.434" starttime="20170629 21:46:50.432"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.434" starttime="20170629 21:46:50.432"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.434" starttime="20170629 21:45:42.685"></status>
</kw>
<msg timestamp="20170629 21:46:50.434" level="INFO">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170629 21:46:50.435" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170629 21:46:50.435" starttime="20170629 21:46:50.435"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:50.436" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170629 21:46:50.436" starttime="20170629 21:46:50.436"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:50.439" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:50.440" starttime="20170629 21:46:50.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:50.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:50.440" starttime="20170629 21:46:50.440"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:50.441" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:50.441" starttime="20170629 21:46:50.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:50.442" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:50.442" starttime="20170629 21:46:50.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:50.804" starttime="20170629 21:46:50.442"></status>
</kw>
<msg timestamp="20170629 21:46:50.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:50.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.805" starttime="20170629 21:46:50.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.805" starttime="20170629 21:46:50.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:50.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:50.806" starttime="20170629 21:46:50.806"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.806" starttime="20170629 21:46:50.438"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.806" starttime="20170629 21:46:50.438"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.806" starttime="20170629 21:46:50.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:50.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170629 21:46:50.807" starttime="20170629 21:46:50.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:50.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:50.808" starttime="20170629 21:46:50.807"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:46:50.808" starttime="20170629 21:46:50.808"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:50.809" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170629 21:46:50.810" starttime="20170629 21:46:50.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:50.810" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170629 21:46:50.811" starttime="20170629 21:46:50.810"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.811" starttime="20170629 21:46:50.810"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:50.811" starttime="20170629 21:46:50.808"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:51.027" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170629 21:46:51.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:51.028" starttime="20170629 21:46:50.811"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:51.029" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:51.029" starttime="20170629 21:46:51.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:51.030" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:51.030" starttime="20170629 21:46:51.030"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:51.030" starttime="20170629 21:46:51.029"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:51.030" starttime="20170629 21:46:51.028"></status>
</kw>
<msg timestamp="20170629 21:46:51.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:51.030" starttime="20170629 21:46:50.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:51.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:51.031" starttime="20170629 21:46:51.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170629 21:46:51.032" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:51.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:51.032" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:51.032" starttime="20170629 21:46:51.031"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:51.032" starttime="20170629 21:46:50.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:46:51.033" starttime="20170629 21:46:51.032"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:46:51.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:46:51.037" starttime="20170629 21:46:51.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:46:51.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:46:51.038" starttime="20170629 21:46:51.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:46:51.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:46:51.039" starttime="20170629 21:46:51.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:46:51.039" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:46:51.039" starttime="20170629 21:46:51.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:46:52.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:46:52.049" starttime="20170629 21:46:51.040"></status>
</kw>
<msg timestamp="20170629 21:46:52.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:46:52.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:52.049" starttime="20170629 21:46:51.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:46:52.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:52.050" starttime="20170629 21:46:52.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:52.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:52.051" starttime="20170629 21:46:52.050"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.051" starttime="20170629 21:46:51.036"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.051" starttime="20170629 21:46:51.036"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.051" starttime="20170629 21:46:51.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:46:52.052" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:46:52.052" starttime="20170629 21:46:52.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:52.054" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:52.054" starttime="20170629 21:46:52.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:52.055" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:46:52.055" starttime="20170629 21:46:52.054"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.055" starttime="20170629 21:46:52.054"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.055" starttime="20170629 21:46:52.052"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:52.055" starttime="20170629 21:46:52.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:46:59.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:46:59.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:59.581" starttime="20170629 21:46:52.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:46:59.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:59.583" starttime="20170629 21:46:59.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:46:59.585" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:46:59.585" starttime="20170629 21:46:59.585"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:59.585" starttime="20170629 21:46:59.584"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:59.585" starttime="20170629 21:46:59.582"></status>
</kw>
<status status="PASS" endtime="20170629 21:46:59.585" starttime="20170629 21:46:59.582"></status>
</kw>
<msg timestamp="20170629 21:46:59.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:46:59.585" starttime="20170629 21:46:51.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:46:59.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:46:59.586" starttime="20170629 21:46:59.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:46:59.587" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:46:59.587" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:46:59.587" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:46:59.587" starttime="20170629 21:46:59.586"></status>
</kw>
<msg timestamp="20170629 21:46:59.587" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:46:59.587" starttime="20170629 21:46:51.034"></status>
</kw>
<msg timestamp="20170629 21:46:59.587" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:46:59.587" starttime="20170629 21:46:51.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:46:59.588" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:46:59.588" starttime="20170629 21:46:59.588"></status>
</kw>
<status status="FAIL" endtime="20170629 21:46:59.588" starttime="20170629 21:46:51.033"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:47:09.593" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:47:09.594" starttime="20170629 21:47:09.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:47:09.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:47:09.595" starttime="20170629 21:47:09.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:47:09.595" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:47:09.595" starttime="20170629 21:47:09.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:47:09.596" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:47:09.596" starttime="20170629 21:47:09.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:47:10.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:47:10.197" starttime="20170629 21:47:09.597"></status>
</kw>
<msg timestamp="20170629 21:47:10.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:47:10.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.197" starttime="20170629 21:47:09.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:47:10.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.198" starttime="20170629 21:47:10.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:10.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.199" starttime="20170629 21:47:10.198"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.200" starttime="20170629 21:47:09.592"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.200" starttime="20170629 21:47:09.592"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.200" starttime="20170629 21:47:09.591"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:47:10.201" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:47:10.201" starttime="20170629 21:47:10.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:10.204" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:10.204" starttime="20170629 21:47:10.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:10.205" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:10.205" starttime="20170629 21:47:10.204"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.205" starttime="20170629 21:47:10.204"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.205" starttime="20170629 21:47:10.202"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.205" starttime="20170629 21:47:10.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:47:10.372" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:47:10.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.372" starttime="20170629 21:47:10.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:10.374" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:10.374" starttime="20170629 21:47:10.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:10.375" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:10.375" starttime="20170629 21:47:10.375"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.375" starttime="20170629 21:47:10.374"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.375" starttime="20170629 21:47:10.373"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:10.375" starttime="20170629 21:47:10.373"></status>
</kw>
<msg timestamp="20170629 21:47:10.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.376" starttime="20170629 21:47:09.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:10.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:10.376" starttime="20170629 21:47:10.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:47:10.377" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:47:10.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:47:10.377" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:47:10.377" starttime="20170629 21:47:10.377"></status>
</kw>
<msg timestamp="20170629 21:47:10.377" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:47:10.377" starttime="20170629 21:47:09.590"></status>
</kw>
<msg timestamp="20170629 21:47:10.378" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:47:10.378" starttime="20170629 21:47:09.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:47:10.378" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:47:10.378" starttime="20170629 21:47:10.378"></status>
</kw>
<status status="FAIL" endtime="20170629 21:47:10.379" starttime="20170629 21:47:09.589"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:47:20.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:47:20.385" starttime="20170629 21:47:20.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:47:20.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:47:20.385" starttime="20170629 21:47:20.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:47:20.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:47:20.386" starttime="20170629 21:47:20.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:47:20.386" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:47:20.386" starttime="20170629 21:47:20.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:47:20.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:47:20.630" starttime="20170629 21:47:20.387"></status>
</kw>
<msg timestamp="20170629 21:47:20.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:47:20.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.630" starttime="20170629 21:47:20.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:47:20.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.631" starttime="20170629 21:47:20.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:20.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.632" starttime="20170629 21:47:20.631"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.632" starttime="20170629 21:47:20.383"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.632" starttime="20170629 21:47:20.382"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.632" starttime="20170629 21:47:20.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:47:20.633" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:47:20.633" starttime="20170629 21:47:20.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:20.635" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:20.635" starttime="20170629 21:47:20.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:20.636" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:20.636" starttime="20170629 21:47:20.636"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.636" starttime="20170629 21:47:20.635"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.636" starttime="20170629 21:47:20.633"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.636" starttime="20170629 21:47:20.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:47:20.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:47:20.744" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.744" starttime="20170629 21:47:20.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:20.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:20.745" starttime="20170629 21:47:20.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:20.746" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:20.746" starttime="20170629 21:47:20.746"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.746" starttime="20170629 21:47:20.745"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.747" starttime="20170629 21:47:20.744"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:20.747" starttime="20170629 21:47:20.744"></status>
</kw>
<msg timestamp="20170629 21:47:20.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.747" starttime="20170629 21:47:20.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:20.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:20.747" starttime="20170629 21:47:20.747"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:47:20.748" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:47:20.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:47:20.748" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:47:20.748" starttime="20170629 21:47:20.748"></status>
</kw>
<msg timestamp="20170629 21:47:20.749" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:47:20.749" starttime="20170629 21:47:20.380"></status>
</kw>
<msg timestamp="20170629 21:47:20.749" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:47:20.749" starttime="20170629 21:47:20.380"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:47:20.750" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:47:20.750" starttime="20170629 21:47:20.749"></status>
</kw>
<status status="FAIL" endtime="20170629 21:47:20.750" starttime="20170629 21:47:20.379"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:47:30.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:47:30.755" starttime="20170629 21:47:30.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:47:30.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:47:30.756" starttime="20170629 21:47:30.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:47:30.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:47:30.757" starttime="20170629 21:47:30.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:47:30.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:47:30.757" starttime="20170629 21:47:30.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:47:31.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:47:31.006" starttime="20170629 21:47:30.758"></status>
</kw>
<msg timestamp="20170629 21:47:31.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:47:31.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.006" starttime="20170629 21:47:30.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:47:31.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.007" starttime="20170629 21:47:31.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:31.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.008" starttime="20170629 21:47:31.007"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.008" starttime="20170629 21:47:30.754"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.008" starttime="20170629 21:47:30.754"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.008" starttime="20170629 21:47:30.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:47:31.009" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:47:31.009" starttime="20170629 21:47:31.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:31.011" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:31.011" starttime="20170629 21:47:31.010"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:31.012" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:31.012" starttime="20170629 21:47:31.012"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.012" starttime="20170629 21:47:31.011"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.012" starttime="20170629 21:47:31.009"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.013" starttime="20170629 21:47:31.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:47:31.074" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:47:31.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.074" starttime="20170629 21:47:31.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:31.076" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:31.076" starttime="20170629 21:47:31.075"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:31.077" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:31.077" starttime="20170629 21:47:31.076"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.077" starttime="20170629 21:47:31.076"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.077" starttime="20170629 21:47:31.075"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:31.077" starttime="20170629 21:47:31.074"></status>
</kw>
<msg timestamp="20170629 21:47:31.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.077" starttime="20170629 21:47:30.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:31.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:31.078" starttime="20170629 21:47:31.077"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:47:31.078" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:47:31.078" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:47:31.079" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:47:31.079" starttime="20170629 21:47:31.078"></status>
</kw>
<msg timestamp="20170629 21:47:31.079" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:47:31.079" starttime="20170629 21:47:30.752"></status>
</kw>
<msg timestamp="20170629 21:47:31.079" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:47:31.079" starttime="20170629 21:47:30.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:47:31.080" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:47:31.080" starttime="20170629 21:47:31.079"></status>
</kw>
<status status="FAIL" endtime="20170629 21:47:31.080" starttime="20170629 21:47:30.750"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:47:41.085" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:47:41.085" starttime="20170629 21:47:41.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:47:41.086" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:47:41.086" starttime="20170629 21:47:41.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:47:41.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:47:41.086" starttime="20170629 21:47:41.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:47:41.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:47:41.087" starttime="20170629 21:47:41.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:47:41.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:47:41.265" starttime="20170629 21:47:41.087"></status>
</kw>
<msg timestamp="20170629 21:47:41.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:47:41.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.266" starttime="20170629 21:47:41.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:47:41.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.267" starttime="20170629 21:47:41.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:41.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.268" starttime="20170629 21:47:41.267"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.268" starttime="20170629 21:47:41.084"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.268" starttime="20170629 21:47:41.083"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.268" starttime="20170629 21:47:41.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:47:41.269" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:47:41.269" starttime="20170629 21:47:41.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:41.271" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:41.271" starttime="20170629 21:47:41.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:41.272" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:41.272" starttime="20170629 21:47:41.271"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.272" starttime="20170629 21:47:41.271"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.272" starttime="20170629 21:47:41.269"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.272" starttime="20170629 21:47:41.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:47:41.337" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:47:41.337" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.337" starttime="20170629 21:47:41.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:41.338" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:41.339" starttime="20170629 21:47:41.338"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:41.339" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:41.339" starttime="20170629 21:47:41.339"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.340" starttime="20170629 21:47:41.339"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.340" starttime="20170629 21:47:41.338"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:41.340" starttime="20170629 21:47:41.337"></status>
</kw>
<msg timestamp="20170629 21:47:41.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.340" starttime="20170629 21:47:41.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:41.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:41.341" starttime="20170629 21:47:41.340"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:47:41.341" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:47:41.341" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:47:41.341" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:47:41.341" starttime="20170629 21:47:41.341"></status>
</kw>
<msg timestamp="20170629 21:47:41.342" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:47:41.342" starttime="20170629 21:47:41.081"></status>
</kw>
<msg timestamp="20170629 21:47:41.342" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:47:41.342" starttime="20170629 21:47:41.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:47:41.343" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:47:41.343" starttime="20170629 21:47:41.342"></status>
</kw>
<status status="FAIL" endtime="20170629 21:47:41.343" starttime="20170629 21:47:41.080"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:47:51.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:47:51.348" starttime="20170629 21:47:51.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:47:51.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:47:51.349" starttime="20170629 21:47:51.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:47:51.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:47:51.349" starttime="20170629 21:47:51.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:47:51.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:47:51.350" starttime="20170629 21:47:51.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:47:51.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:47:51.528" starttime="20170629 21:47:51.351"></status>
</kw>
<msg timestamp="20170629 21:47:51.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:47:51.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.528" starttime="20170629 21:47:51.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:47:51.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.529" starttime="20170629 21:47:51.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:51.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.529" starttime="20170629 21:47:51.529"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.530" starttime="20170629 21:47:51.347"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.530" starttime="20170629 21:47:51.346"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.530" starttime="20170629 21:47:51.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:47:51.530" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:47:51.530" starttime="20170629 21:47:51.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:51.532" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:51.533" starttime="20170629 21:47:51.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:51.533" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:47:51.533" starttime="20170629 21:47:51.533"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.534" starttime="20170629 21:47:51.533"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.534" starttime="20170629 21:47:51.531"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.534" starttime="20170629 21:47:51.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:47:51.599" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:47:51.599" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.599" starttime="20170629 21:47:51.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:47:51.601" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:51.601" starttime="20170629 21:47:51.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:47:51.602" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:47:51.602" starttime="20170629 21:47:51.602"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.602" starttime="20170629 21:47:51.601"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.602" starttime="20170629 21:47:51.600"></status>
</kw>
<status status="PASS" endtime="20170629 21:47:51.602" starttime="20170629 21:47:51.599"></status>
</kw>
<msg timestamp="20170629 21:47:51.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.602" starttime="20170629 21:47:51.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:47:51.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:47:51.603" starttime="20170629 21:47:51.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:47:51.604" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:47:51.604" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:47:51.604" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:47:51.604" starttime="20170629 21:47:51.603"></status>
</kw>
<msg timestamp="20170629 21:47:51.604" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:47:51.604" starttime="20170629 21:47:51.344"></status>
</kw>
<msg timestamp="20170629 21:47:51.604" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:47:51.604" starttime="20170629 21:47:51.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:47:51.605" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:47:51.605" starttime="20170629 21:47:51.605"></status>
</kw>
<status status="FAIL" endtime="20170629 21:47:51.605" starttime="20170629 21:47:51.343"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:01.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:01.610" starttime="20170629 21:48:01.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:01.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:01.611" starttime="20170629 21:48:01.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:01.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:01.612" starttime="20170629 21:48:01.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:01.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:01.612" starttime="20170629 21:48:01.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:01.840" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:01.840" starttime="20170629 21:48:01.613"></status>
</kw>
<msg timestamp="20170629 21:48:01.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:01.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.840" starttime="20170629 21:48:01.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:01.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.841" starttime="20170629 21:48:01.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:01.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.844" starttime="20170629 21:48:01.841"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.844" starttime="20170629 21:48:01.609"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.844" starttime="20170629 21:48:01.609"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.844" starttime="20170629 21:48:01.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:01.845" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:01.845" starttime="20170629 21:48:01.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:01.847" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:01.847" starttime="20170629 21:48:01.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:01.848" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:01.848" starttime="20170629 21:48:01.847"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.848" starttime="20170629 21:48:01.847"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.848" starttime="20170629 21:48:01.845"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.848" starttime="20170629 21:48:01.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:01.921" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:01.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.922" starttime="20170629 21:48:01.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:01.923" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:01.923" starttime="20170629 21:48:01.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:01.924" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:01.924" starttime="20170629 21:48:01.924"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.924" starttime="20170629 21:48:01.923"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.925" starttime="20170629 21:48:01.922"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:01.925" starttime="20170629 21:48:01.922"></status>
</kw>
<msg timestamp="20170629 21:48:01.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.925" starttime="20170629 21:48:01.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:01.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:01.925" starttime="20170629 21:48:01.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:01.926" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:01.926" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:01.926" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:01.926" starttime="20170629 21:48:01.926"></status>
</kw>
<msg timestamp="20170629 21:48:01.926" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:01.926" starttime="20170629 21:48:01.607"></status>
</kw>
<msg timestamp="20170629 21:48:01.927" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:01.927" starttime="20170629 21:48:01.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:01.927" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:01.927" starttime="20170629 21:48:01.927"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:01.928" starttime="20170629 21:48:01.606"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:11.933" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:11.934" starttime="20170629 21:48:11.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:11.934" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:11.934" starttime="20170629 21:48:11.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:11.935" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:11.935" starttime="20170629 21:48:11.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:11.936" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:11.936" starttime="20170629 21:48:11.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:12.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:12.271" starttime="20170629 21:48:11.936"></status>
</kw>
<msg timestamp="20170629 21:48:12.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:12.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.271" starttime="20170629 21:48:11.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:12.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.272" starttime="20170629 21:48:12.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:12.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.273" starttime="20170629 21:48:12.272"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.273" starttime="20170629 21:48:11.932"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.273" starttime="20170629 21:48:11.932"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.273" starttime="20170629 21:48:11.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:12.274" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:12.274" starttime="20170629 21:48:12.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:12.276" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:12.276" starttime="20170629 21:48:12.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:12.277" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:12.277" starttime="20170629 21:48:12.276"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.277" starttime="20170629 21:48:12.276"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.277" starttime="20170629 21:48:12.274"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.277" starttime="20170629 21:48:12.274"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:12.371" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:12.371" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.371" starttime="20170629 21:48:12.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:12.373" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:12.373" starttime="20170629 21:48:12.372"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:12.374" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:12.374" starttime="20170629 21:48:12.374"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.374" starttime="20170629 21:48:12.373"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.374" starttime="20170629 21:48:12.372"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:12.374" starttime="20170629 21:48:12.371"></status>
</kw>
<msg timestamp="20170629 21:48:12.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.375" starttime="20170629 21:48:11.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:12.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:12.375" starttime="20170629 21:48:12.375"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:12.376" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:12.376" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:12.376" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:12.376" starttime="20170629 21:48:12.375"></status>
</kw>
<msg timestamp="20170629 21:48:12.376" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:12.376" starttime="20170629 21:48:11.929"></status>
</kw>
<msg timestamp="20170629 21:48:12.377" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:12.377" starttime="20170629 21:48:11.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:12.377" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:12.377" starttime="20170629 21:48:12.377"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:12.377" starttime="20170629 21:48:11.928"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:22.383" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:22.384" starttime="20170629 21:48:22.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:22.384" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:22.384" starttime="20170629 21:48:22.384"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:22.385" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:22.385" starttime="20170629 21:48:22.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:22.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:22.385" starttime="20170629 21:48:22.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:22.602" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:22.602" starttime="20170629 21:48:22.386"></status>
</kw>
<msg timestamp="20170629 21:48:22.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:22.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.602" starttime="20170629 21:48:22.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:22.603" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.603" starttime="20170629 21:48:22.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:22.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.604" starttime="20170629 21:48:22.603"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.604" starttime="20170629 21:48:22.382"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.604" starttime="20170629 21:48:22.382"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.604" starttime="20170629 21:48:22.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:22.605" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:22.605" starttime="20170629 21:48:22.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:22.607" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:22.607" starttime="20170629 21:48:22.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:22.608" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:22.608" starttime="20170629 21:48:22.608"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.608" starttime="20170629 21:48:22.607"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.608" starttime="20170629 21:48:22.605"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.608" starttime="20170629 21:48:22.605"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:22.674" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:22.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.674" starttime="20170629 21:48:22.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:22.675" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:22.676" starttime="20170629 21:48:22.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:22.676" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:22.677" starttime="20170629 21:48:22.676"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.677" starttime="20170629 21:48:22.676"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.677" starttime="20170629 21:48:22.675"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:22.677" starttime="20170629 21:48:22.674"></status>
</kw>
<msg timestamp="20170629 21:48:22.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.677" starttime="20170629 21:48:22.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:22.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:22.678" starttime="20170629 21:48:22.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:22.678" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:22.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:22.678" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:22.678" starttime="20170629 21:48:22.678"></status>
</kw>
<msg timestamp="20170629 21:48:22.679" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:22.679" starttime="20170629 21:48:22.380"></status>
</kw>
<msg timestamp="20170629 21:48:22.679" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:22.679" starttime="20170629 21:48:22.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:22.680" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:22.680" starttime="20170629 21:48:22.679"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:22.680" starttime="20170629 21:48:22.378"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:32.685" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:32.685" starttime="20170629 21:48:32.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:32.686" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:32.686" starttime="20170629 21:48:32.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:32.686" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:32.686" starttime="20170629 21:48:32.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:32.687" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:32.687" starttime="20170629 21:48:32.687"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:32.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:32.877" starttime="20170629 21:48:32.688"></status>
</kw>
<msg timestamp="20170629 21:48:32.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:32.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.877" starttime="20170629 21:48:32.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:32.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.878" starttime="20170629 21:48:32.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:32.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.878" starttime="20170629 21:48:32.878"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.879" starttime="20170629 21:48:32.684"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.879" starttime="20170629 21:48:32.683"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.879" starttime="20170629 21:48:32.683"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:32.879" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:32.879" starttime="20170629 21:48:32.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:32.881" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:32.881" starttime="20170629 21:48:32.881"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:32.882" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:32.882" starttime="20170629 21:48:32.882"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.883" starttime="20170629 21:48:32.882"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.883" starttime="20170629 21:48:32.880"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.883" starttime="20170629 21:48:32.880"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:32.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:32.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.977" starttime="20170629 21:48:32.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:32.979" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:32.979" starttime="20170629 21:48:32.979"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:32.980" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:32.980" starttime="20170629 21:48:32.980"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.980" starttime="20170629 21:48:32.979"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.980" starttime="20170629 21:48:32.978"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:32.980" starttime="20170629 21:48:32.978"></status>
</kw>
<msg timestamp="20170629 21:48:32.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.981" starttime="20170629 21:48:32.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:32.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:32.981" starttime="20170629 21:48:32.981"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:32.982" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:32.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:32.982" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:32.982" starttime="20170629 21:48:32.982"></status>
</kw>
<msg timestamp="20170629 21:48:32.982" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:32.982" starttime="20170629 21:48:32.682"></status>
</kw>
<msg timestamp="20170629 21:48:32.983" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:32.983" starttime="20170629 21:48:32.681"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:32.983" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:32.983" starttime="20170629 21:48:32.983"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:32.984" starttime="20170629 21:48:32.680"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:42.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:42.989" starttime="20170629 21:48:42.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:42.990" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:42.990" starttime="20170629 21:48:42.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:42.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:42.990" starttime="20170629 21:48:42.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:42.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:42.991" starttime="20170629 21:48:42.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:43.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:43.192" starttime="20170629 21:48:42.992"></status>
</kw>
<msg timestamp="20170629 21:48:43.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:43.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.193" starttime="20170629 21:48:42.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:43.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.193" starttime="20170629 21:48:43.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:43.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.194" starttime="20170629 21:48:43.194"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.194" starttime="20170629 21:48:42.988"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.194" starttime="20170629 21:48:42.987"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.194" starttime="20170629 21:48:42.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:43.195" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:43.195" starttime="20170629 21:48:43.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:43.197" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:43.197" starttime="20170629 21:48:43.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:43.198" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:43.198" starttime="20170629 21:48:43.198"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.198" starttime="20170629 21:48:43.197"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.198" starttime="20170629 21:48:43.196"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.199" starttime="20170629 21:48:43.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:43.284" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:43.284" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.285" starttime="20170629 21:48:43.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:43.287" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:43.287" starttime="20170629 21:48:43.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:43.287" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:43.288" starttime="20170629 21:48:43.287"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.288" starttime="20170629 21:48:43.287"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.288" starttime="20170629 21:48:43.285"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:43.288" starttime="20170629 21:48:43.285"></status>
</kw>
<msg timestamp="20170629 21:48:43.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.288" starttime="20170629 21:48:42.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:43.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:43.289" starttime="20170629 21:48:43.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:43.289" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:43.289" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:43.289" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:43.289" starttime="20170629 21:48:43.289"></status>
</kw>
<msg timestamp="20170629 21:48:43.290" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:43.290" starttime="20170629 21:48:42.985"></status>
</kw>
<msg timestamp="20170629 21:48:43.290" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:43.290" starttime="20170629 21:48:42.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:43.291" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:43.291" starttime="20170629 21:48:43.290"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:43.291" starttime="20170629 21:48:42.984"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:48:53.296" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:48:53.296" starttime="20170629 21:48:53.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:48:53.297" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:48:53.297" starttime="20170629 21:48:53.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:48:53.297" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:48:53.297" starttime="20170629 21:48:53.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:48:53.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:48:53.298" starttime="20170629 21:48:53.298"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:48:53.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:48:53.513" starttime="20170629 21:48:53.299"></status>
</kw>
<msg timestamp="20170629 21:48:53.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:48:53.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.514" starttime="20170629 21:48:53.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:48:53.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.514" starttime="20170629 21:48:53.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:53.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.515" starttime="20170629 21:48:53.514"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.515" starttime="20170629 21:48:53.295"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.515" starttime="20170629 21:48:53.294"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.515" starttime="20170629 21:48:53.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:48:53.516" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:48:53.516" starttime="20170629 21:48:53.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:53.518" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:53.518" starttime="20170629 21:48:53.518"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:53.519" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:48:53.519" starttime="20170629 21:48:53.519"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.519" starttime="20170629 21:48:53.518"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.519" starttime="20170629 21:48:53.517"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.520" starttime="20170629 21:48:53.516"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:48:53.584" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:48:53.584" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.584" starttime="20170629 21:48:53.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:48:53.586" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:53.586" starttime="20170629 21:48:53.586"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:48:53.587" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:48:53.587" starttime="20170629 21:48:53.587"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.587" starttime="20170629 21:48:53.586"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.587" starttime="20170629 21:48:53.585"></status>
</kw>
<status status="PASS" endtime="20170629 21:48:53.587" starttime="20170629 21:48:53.585"></status>
</kw>
<msg timestamp="20170629 21:48:53.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.588" starttime="20170629 21:48:53.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:48:53.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:48:53.588" starttime="20170629 21:48:53.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:48:53.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:48:53.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:48:53.589" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:48:53.589" starttime="20170629 21:48:53.589"></status>
</kw>
<msg timestamp="20170629 21:48:53.589" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:48:53.589" starttime="20170629 21:48:53.293"></status>
</kw>
<msg timestamp="20170629 21:48:53.590" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:48:53.590" starttime="20170629 21:48:53.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:48:53.590" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:48:53.590" starttime="20170629 21:48:53.590"></status>
</kw>
<status status="FAIL" endtime="20170629 21:48:53.590" starttime="20170629 21:48:53.291"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:03.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:03.625" starttime="20170629 21:49:03.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:03.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:03.626" starttime="20170629 21:49:03.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:03.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:03.627" starttime="20170629 21:49:03.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:03.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:03.627" starttime="20170629 21:49:03.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:03.897" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:03.897" starttime="20170629 21:49:03.628"></status>
</kw>
<msg timestamp="20170629 21:49:03.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:03.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:03.898" starttime="20170629 21:49:03.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:03.898" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:03.898" starttime="20170629 21:49:03.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:03.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:03.899" starttime="20170629 21:49:03.899"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.899" starttime="20170629 21:49:03.624"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.899" starttime="20170629 21:49:03.623"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.899" starttime="20170629 21:49:03.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:03.900" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:03.900" starttime="20170629 21:49:03.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:03.902" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:03.902" starttime="20170629 21:49:03.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:03.903" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:03.903" starttime="20170629 21:49:03.903"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.903" starttime="20170629 21:49:03.902"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.903" starttime="20170629 21:49:03.901"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:03.903" starttime="20170629 21:49:03.900"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:04.027" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:04.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:04.027" starttime="20170629 21:49:03.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:04.029" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:04.029" starttime="20170629 21:49:04.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:04.030" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:04.030" starttime="20170629 21:49:04.030"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:04.030" starttime="20170629 21:49:04.029"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:04.031" starttime="20170629 21:49:04.028"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:04.031" starttime="20170629 21:49:04.028"></status>
</kw>
<msg timestamp="20170629 21:49:04.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:04.031" starttime="20170629 21:49:03.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:04.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:04.032" starttime="20170629 21:49:04.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:04.032" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:04.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:04.032" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:04.032" starttime="20170629 21:49:04.032"></status>
</kw>
<msg timestamp="20170629 21:49:04.033" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:04.033" starttime="20170629 21:49:03.621"></status>
</kw>
<msg timestamp="20170629 21:49:04.033" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:04.033" starttime="20170629 21:49:03.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:04.034" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:04.034" starttime="20170629 21:49:04.033"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:04.034" starttime="20170629 21:49:03.620"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:14.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:14.040" starttime="20170629 21:49:14.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:14.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:14.041" starttime="20170629 21:49:14.040"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:14.041" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:14.041" starttime="20170629 21:49:14.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:14.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:14.042" starttime="20170629 21:49:14.042"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:14.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:14.309" starttime="20170629 21:49:14.043"></status>
</kw>
<msg timestamp="20170629 21:49:14.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:14.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.309" starttime="20170629 21:49:14.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:14.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.309" starttime="20170629 21:49:14.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:14.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.310" starttime="20170629 21:49:14.310"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.310" starttime="20170629 21:49:14.039"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.310" starttime="20170629 21:49:14.038"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.311" starttime="20170629 21:49:14.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:14.311" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:14.311" starttime="20170629 21:49:14.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:14.313" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:14.313" starttime="20170629 21:49:14.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:14.314" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:14.314" starttime="20170629 21:49:14.314"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.315" starttime="20170629 21:49:14.313"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.315" starttime="20170629 21:49:14.312"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.315" starttime="20170629 21:49:14.311"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:14.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:14.382" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.382" starttime="20170629 21:49:14.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:14.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:14.384" starttime="20170629 21:49:14.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:14.384" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:14.384" starttime="20170629 21:49:14.384"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.385" starttime="20170629 21:49:14.384"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.385" starttime="20170629 21:49:14.383"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:14.385" starttime="20170629 21:49:14.382"></status>
</kw>
<msg timestamp="20170629 21:49:14.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.385" starttime="20170629 21:49:14.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:14.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:14.386" starttime="20170629 21:49:14.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:14.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:14.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:14.386" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:14.386" starttime="20170629 21:49:14.386"></status>
</kw>
<msg timestamp="20170629 21:49:14.387" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:14.387" starttime="20170629 21:49:14.036"></status>
</kw>
<msg timestamp="20170629 21:49:14.387" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:14.387" starttime="20170629 21:49:14.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:14.388" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:14.388" starttime="20170629 21:49:14.388"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:14.388" starttime="20170629 21:49:14.034"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:24.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:24.393" starttime="20170629 21:49:24.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:24.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:24.394" starttime="20170629 21:49:24.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:24.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:24.395" starttime="20170629 21:49:24.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:24.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:24.395" starttime="20170629 21:49:24.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:24.646" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:24.646" starttime="20170629 21:49:24.396"></status>
</kw>
<msg timestamp="20170629 21:49:24.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:24.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.646" starttime="20170629 21:49:24.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:24.647" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.647" starttime="20170629 21:49:24.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:24.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.648" starttime="20170629 21:49:24.647"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.648" starttime="20170629 21:49:24.392"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.648" starttime="20170629 21:49:24.392"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.648" starttime="20170629 21:49:24.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:24.649" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:24.649" starttime="20170629 21:49:24.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:24.651" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:24.651" starttime="20170629 21:49:24.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:24.652" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:24.652" starttime="20170629 21:49:24.651"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.652" starttime="20170629 21:49:24.651"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.652" starttime="20170629 21:49:24.649"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.652" starttime="20170629 21:49:24.649"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:24.729" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:24.729" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.729" starttime="20170629 21:49:24.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:24.731" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:24.731" starttime="20170629 21:49:24.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:24.732" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:24.732" starttime="20170629 21:49:24.731"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.732" starttime="20170629 21:49:24.731"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.732" starttime="20170629 21:49:24.730"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:24.732" starttime="20170629 21:49:24.729"></status>
</kw>
<msg timestamp="20170629 21:49:24.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.732" starttime="20170629 21:49:24.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:24.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:24.733" starttime="20170629 21:49:24.733"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:24.733" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:24.733" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:24.734" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:24.734" starttime="20170629 21:49:24.733"></status>
</kw>
<msg timestamp="20170629 21:49:24.734" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:24.734" starttime="20170629 21:49:24.390"></status>
</kw>
<msg timestamp="20170629 21:49:24.734" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:24.734" starttime="20170629 21:49:24.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:24.735" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:24.735" starttime="20170629 21:49:24.735"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:24.735" starttime="20170629 21:49:24.389"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:34.741" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:34.742" starttime="20170629 21:49:34.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:34.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:34.742" starttime="20170629 21:49:34.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:34.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:34.743" starttime="20170629 21:49:34.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:34.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:34.744" starttime="20170629 21:49:34.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:34.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:34.949" starttime="20170629 21:49:34.744"></status>
</kw>
<msg timestamp="20170629 21:49:34.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:34.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:34.949" starttime="20170629 21:49:34.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:34.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:34.949" starttime="20170629 21:49:34.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:34.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:34.950" starttime="20170629 21:49:34.950"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.950" starttime="20170629 21:49:34.739"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.950" starttime="20170629 21:49:34.738"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.950" starttime="20170629 21:49:34.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:34.951" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:34.951" starttime="20170629 21:49:34.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:34.953" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:34.953" starttime="20170629 21:49:34.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:34.954" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:34.954" starttime="20170629 21:49:34.954"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.954" starttime="20170629 21:49:34.953"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.954" starttime="20170629 21:49:34.952"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:34.954" starttime="20170629 21:49:34.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:35.028" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:35.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:35.028" starttime="20170629 21:49:34.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:35.029" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:35.030" starttime="20170629 21:49:35.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:35.058" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:35.059" starttime="20170629 21:49:35.058"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:35.059" starttime="20170629 21:49:35.030"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:35.059" starttime="20170629 21:49:35.029"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:35.059" starttime="20170629 21:49:35.028"></status>
</kw>
<msg timestamp="20170629 21:49:35.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:35.059" starttime="20170629 21:49:34.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:35.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:35.060" starttime="20170629 21:49:35.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:35.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:35.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:35.061" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:35.061" starttime="20170629 21:49:35.060"></status>
</kw>
<msg timestamp="20170629 21:49:35.061" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:35.061" starttime="20170629 21:49:34.736"></status>
</kw>
<msg timestamp="20170629 21:49:35.061" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:35.061" starttime="20170629 21:49:34.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:35.062" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:35.062" starttime="20170629 21:49:35.061"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:35.062" starttime="20170629 21:49:34.735"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:45.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:45.067" starttime="20170629 21:49:45.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:45.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:45.067" starttime="20170629 21:49:45.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:45.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:45.068" starttime="20170629 21:49:45.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:45.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:45.069" starttime="20170629 21:49:45.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:45.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:45.251" starttime="20170629 21:49:45.069"></status>
</kw>
<msg timestamp="20170629 21:49:45.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:45.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.251" starttime="20170629 21:49:45.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:45.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.252" starttime="20170629 21:49:45.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:45.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.252" starttime="20170629 21:49:45.252"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.252" starttime="20170629 21:49:45.066"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.253" starttime="20170629 21:49:45.065"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.253" starttime="20170629 21:49:45.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:45.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:45.253" starttime="20170629 21:49:45.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:45.255" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:45.255" starttime="20170629 21:49:45.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:45.256" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:45.256" starttime="20170629 21:49:45.256"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.256" starttime="20170629 21:49:45.255"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.256" starttime="20170629 21:49:45.254"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.257" starttime="20170629 21:49:45.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:45.330" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:45.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.330" starttime="20170629 21:49:45.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:45.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:45.332" starttime="20170629 21:49:45.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:45.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:45.333" starttime="20170629 21:49:45.333"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.333" starttime="20170629 21:49:45.332"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.333" starttime="20170629 21:49:45.331"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:45.333" starttime="20170629 21:49:45.330"></status>
</kw>
<msg timestamp="20170629 21:49:45.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.333" starttime="20170629 21:49:45.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:45.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:45.334" starttime="20170629 21:49:45.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:45.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:45.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:45.335" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:45.335" starttime="20170629 21:49:45.334"></status>
</kw>
<msg timestamp="20170629 21:49:45.335" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:45.335" starttime="20170629 21:49:45.063"></status>
</kw>
<msg timestamp="20170629 21:49:45.335" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:45.336" starttime="20170629 21:49:45.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:45.336" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:45.336" starttime="20170629 21:49:45.336"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:45.336" starttime="20170629 21:49:45.062"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:55.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:55.342" starttime="20170629 21:49:55.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:55.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:55.343" starttime="20170629 21:49:55.342"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:55.344" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:55.344" starttime="20170629 21:49:55.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:55.345" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:55.345" starttime="20170629 21:49:55.344"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:55.526" starttime="20170629 21:49:55.346"></status>
</kw>
<msg timestamp="20170629 21:49:55.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:55.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.526" starttime="20170629 21:49:55.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.527" starttime="20170629 21:49:55.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.527" starttime="20170629 21:49:55.527"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.527" starttime="20170629 21:49:55.340"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.528" starttime="20170629 21:49:55.339"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.528" starttime="20170629 21:49:55.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:55.528" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:55.528" starttime="20170629 21:49:55.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:55.530" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:55.530" starttime="20170629 21:49:55.530"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:55.531" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:55.531" starttime="20170629 21:49:55.531"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.531" starttime="20170629 21:49:55.530"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.532" starttime="20170629 21:49:55.529"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.532" starttime="20170629 21:49:55.528"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:55.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:55.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.597" starttime="20170629 21:49:55.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:55.599" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:55.599" starttime="20170629 21:49:55.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:55.600" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:55.600" starttime="20170629 21:49:55.600"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.600" starttime="20170629 21:49:55.599"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.600" starttime="20170629 21:49:55.598"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.600" starttime="20170629 21:49:55.597"></status>
</kw>
<msg timestamp="20170629 21:49:55.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.601" starttime="20170629 21:49:55.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.601" starttime="20170629 21:49:55.601"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:55.602" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:55.602" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:55.602" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:55.602" starttime="20170629 21:49:55.602"></status>
</kw>
<msg timestamp="20170629 21:49:55.602" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:55.602" starttime="20170629 21:49:55.338"></status>
</kw>
<msg timestamp="20170629 21:49:55.603" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:55.603" starttime="20170629 21:49:55.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.603" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:55.603" starttime="20170629 21:49:55.603"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:55.604" starttime="20170629 21:49:55.337"></status>
</kw>
<msg timestamp="20170629 21:49:55.604" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status status="FAIL" endtime="20170629 21:49:55.604" starttime="20170629 21:46:51.033"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:55.604" starttime="20170629 21:46:50.434"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:55.604" starttime="20170629 21:46:50.434"></status>
</kw>
<status status="FAIL" endtime="20170629 21:49:55.604" starttime="20170629 21:45:42.685"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:49:55.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:49:55.610" starttime="20170629 21:49:55.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:49:55.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:49:55.610" starttime="20170629 21:49:55.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:49:55.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:49:55.611" starttime="20170629 21:49:55.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:49:55.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:49:55.611" starttime="20170629 21:49:55.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:49:55.799" starttime="20170629 21:49:55.612"></status>
</kw>
<msg timestamp="20170629 21:49:55.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:49:55.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.799" starttime="20170629 21:49:55.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.800" starttime="20170629 21:49:55.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.801" starttime="20170629 21:49:55.800"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.801" starttime="20170629 21:49:55.608"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.801" starttime="20170629 21:49:55.608"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.801" starttime="20170629 21:49:55.607"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:49:55.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170629 21:49:55.802" starttime="20170629 21:49:55.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:55.804" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:55.804" starttime="20170629 21:49:55.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:55.805" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170629 21:49:55.805" starttime="20170629 21:49:55.804"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.805" starttime="20170629 21:49:55.804"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.805" starttime="20170629 21:49:55.802"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.805" starttime="20170629 21:49:55.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:49:55.871" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170629 21:49:55.871" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.871" starttime="20170629 21:49:55.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170629 21:49:55.873" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:55.873" starttime="20170629 21:49:55.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170629 21:49:55.874" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170629 21:49:55.874" starttime="20170629 21:49:55.873"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.874" starttime="20170629 21:49:55.873"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.874" starttime="20170629 21:49:55.872"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:55.874" starttime="20170629 21:49:55.871"></status>
</kw>
<msg timestamp="20170629 21:49:55.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.874" starttime="20170629 21:49:55.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:49:55.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:49:55.875" starttime="20170629 21:49:55.875"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:49:55.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:49:55.876" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:49:55.876" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status status="PASS" endtime="20170629 21:49:55.876" starttime="20170629 21:49:55.875"></status>
</kw>
<msg timestamp="20170629 21:49:55.876" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170629 21:49:55.876" starttime="20170629 21:49:55.606"></status>
</kw>
<msg timestamp="20170629 21:49:55.876" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170629 21:49:55.876" starttime="20170629 21:49:55.605"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170629 21:49:55.877" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170629 21:49:55.878" starttime="20170629 21:49:55.877"></status>
</kw>
<msg timestamp="20170629 21:49:55.878" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:49:55.878" starttime="20170629 21:49:55.877"></status>
</kw>
<msg timestamp="20170629 21:49:55.878" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:49:55.878" starttime="20170629 21:49:55.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170629 21:49:55.898" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170629 21:49:55.898" starttime="20170629 21:49:55.898"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:49:55.903" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:49:58.906" level="INFO">${RC} = 0</msg>
<msg timestamp="20170629 21:49:58.907" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.617 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170629 21:49:58.907" starttime="20170629 21:49:55.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.909" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.617 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.631 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.596 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.596/0.813/1.409/0.344 ms</msg>
<status status="PASS" endtime="20170629 21:49:58.910" starttime="20170629 21:49:58.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:49:58.913" starttime="20170629 21:49:58.910"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.913" starttime="20170629 21:49:55.898"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:49:58.926" level="INFO">${cur_time} = 2017-06-29 21:49:58:926097</msg>
<status status="PASS" endtime="20170629 21:49:58.926" starttime="20170629 21:49:58.926"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:49:58.927" level="INFO">${cur_time} = 20170629214958926097</msg>
<status status="PASS" endtime="20170629 21:49:58.927" starttime="20170629 21:49:58.927"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.927" starttime="20170629 21:49:58.925"></status>
</kw>
<msg timestamp="20170629 21:49:58.927" level="INFO">${FFDC_TIME} = 20170629214958926097</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170629 21:49:58.937" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170629 21:49:58.937" starttime="20170629 21:49:58.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170629 21:49:58.937" level="INFO">${suite_name} = 20170629214958926097_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170629 21:49:58.937" starttime="20170629 21:49:58.937"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170629 21:49:58.938" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20170629 21:49:58.938" starttime="20170629 21:49:58.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170629 21:49:58.939" level="INFO">${test_name} = 20170629214958926097_PowerOnTest</msg>
<status status="PASS" endtime="20170629 21:49:58.939" starttime="20170629 21:49:58.938"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.939" starttime="20170629 21:49:58.936"></status>
</kw>
<msg timestamp="20170629 21:49:58.939" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/</msg>
<msg timestamp="20170629 21:49:58.939" level="INFO">${FFDC_PREFIX} = 20170629214958926097_</msg>
<msg timestamp="20170629 21:49:58.958" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170629 21:49:58.959" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.959" starttime="20170629 21:49:58.959"></status>
</kw>
<msg timestamp="20170629 21:49:58.964" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.983" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.983" starttime="20170629 21:49:58.982"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.983" starttime="20170629 21:49:58.982"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.984" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.984" starttime="20170629 21:49:58.984"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.985" starttime="20170629 21:49:58.983"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.986" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.986" starttime="20170629 21:49:58.985"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.986" starttime="20170629 21:49:58.985"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.987" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.987" starttime="20170629 21:49:58.987"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.987" starttime="20170629 21:49:58.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.988" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.988" starttime="20170629 21:49:58.988"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.988" starttime="20170629 21:49:58.987"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.990" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.990" starttime="20170629 21:49:58.989"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.990" starttime="20170629 21:49:58.989"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.991" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.991" starttime="20170629 21:49:58.991"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.991" starttime="20170629 21:49:58.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.993" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.993" starttime="20170629 21:49:58.992"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.993" starttime="20170629 21:49:58.992"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.994" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.994" starttime="20170629 21:49:58.993"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.994" starttime="20170629 21:49:58.993"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.996" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.996" starttime="20170629 21:49:58.995"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.996" starttime="20170629 21:49:58.995"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.997" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.997" starttime="20170629 21:49:58.996"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.997" starttime="20170629 21:49:58.996"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:58.998" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:58.998" starttime="20170629 21:49:58.998"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:58.999" starttime="20170629 21:49:58.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:49:59.000" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:49:59.000" starttime="20170629 21:49:58.999"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.000" starttime="20170629 21:49:58.999"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:49:59.002" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:49:59.002" starttime="20170629 21:49:59.001"></status>
</kw>
<msg timestamp="20170629 21:49:59.002" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:49:59.002" starttime="20170629 21:49:59.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:49:59.003" starttime="20170629 21:49:59.003"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.003" starttime="20170629 21:49:59.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:49:59.005" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:49:59.005" starttime="20170629 21:49:59.005"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:49:59.005" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:49:59.005" starttime="20170629 21:49:59.005"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:49:59.006" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:49:59.006" starttime="20170629 21:49:59.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:49:59.007" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:49:59.007" starttime="20170629 21:49:59.006"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.007" starttime="20170629 21:49:59.004"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.007" starttime="20170629 21:49:59.004"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:49:59.008" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:49:59.008" starttime="20170629 21:49:59.008"></status>
</kw>
<msg timestamp="20170629 21:49:59.008" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:49:59.008" starttime="20170629 21:49:59.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:49:59.010" starttime="20170629 21:49:59.010"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:49:59.011" starttime="20170629 21:49:59.010"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.011" starttime="20170629 21:49:59.009"></status>
</kw>
<status status="PASS" endtime="20170629 21:49:59.011" starttime="20170629 21:49:59.009"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:49:59.011" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:50:00.768" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:50:00.768" starttime="20170629 21:49:59.011"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.768" starttime="20170629 21:49:59.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:00.769" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170629 21:50:00.846" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:00.847" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170629 21:50:00.847" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:00.847" starttime="20170629 21:50:00.769"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.847" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170629 21:50:00.847" starttime="20170629 21:50:00.847"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.848" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170629 21:50:00.848" starttime="20170629 21:50:00.848"></status>
</kw>
<msg timestamp="20170629 21:50:00.848" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170629 21:50:00.848" starttime="20170629 21:49:59.000"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.850" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.850" starttime="20170629 21:50:00.849"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.850" starttime="20170629 21:50:00.848"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.850" starttime="20170629 21:49:58.994"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.851" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.851" starttime="20170629 21:50:00.851"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.852" starttime="20170629 21:50:00.850"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170629 21:50:00.852" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status status="PASS" endtime="20170629 21:50:00.852" starttime="20170629 21:50:00.852"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.854" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.854" starttime="20170629 21:50:00.853"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.854" starttime="20170629 21:50:00.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.855" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.855" starttime="20170629 21:50:00.854"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.855" starttime="20170629 21:50:00.854"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.855" starttime="20170629 21:50:00.852"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.856" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.856" starttime="20170629 21:50:00.856"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.856" starttime="20170629 21:50:00.855"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.858" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.858" starttime="20170629 21:50:00.857"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.858" starttime="20170629 21:50:00.857"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.858" starttime="20170629 21:50:00.855"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.859" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.859" starttime="20170629 21:50:00.859"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.860" starttime="20170629 21:50:00.858"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.861" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.861" starttime="20170629 21:50:00.860"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.861" starttime="20170629 21:50:00.860"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.861" starttime="20170629 21:50:00.858"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.861" starttime="20170629 21:50:00.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.862" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:00.862" starttime="20170629 21:50:00.862"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.862" starttime="20170629 21:50:00.861"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.862" starttime="20170629 21:49:58.981"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170629 21:50:00.869" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170629 21:50:00.869" starttime="20170629 21:50:00.869"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170629 21:50:00.871" level="INFO">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Req...</msg>
<status status="PASS" endtime="20170629 21:50:00.871" starttime="20170629 21:50:00.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.872" starttime="20170629 21:50:00.872"></status>
</kw>
<msg timestamp="20170629 21:50:00.872" level="INFO">@{ffdc_function_list} = [ BMC Specific Files | OS FFDC | Core Files | FFDC Generic Report | Get Request FFDC | SEL Log ]</msg>
<status status="PASS" endtime="20170629 21:50:00.872" starttime="20170629 21:50:00.871"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.874" starttime="20170629 21:50:00.874"></status>
</kw>
<msg timestamp="20170629 21:50:00.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:00.874" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:00.874" starttime="20170629 21:50:00.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.875" starttime="20170629 21:50:00.874"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:50:00.902" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:50:00.902" starttime="20170629 21:50:00.902"></status>
</kw>
<msg timestamp="20170629 21:50:00.902" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:50:00.902" starttime="20170629 21:50:00.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.904" starttime="20170629 21:50:00.903"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.904" starttime="20170629 21:50:00.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:50:00.906" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:50:00.906" starttime="20170629 21:50:00.906"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:50:00.907" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:50:00.907" starttime="20170629 21:50:00.907"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:50:00.908" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:50:00.908" starttime="20170629 21:50:00.908"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.909" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:50:00.909" starttime="20170629 21:50:00.908"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.909" starttime="20170629 21:50:00.905"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.909" starttime="20170629 21:50:00.904"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:50:00.910" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:50:00.910" starttime="20170629 21:50:00.910"></status>
</kw>
<msg timestamp="20170629 21:50:00.910" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:50:00.910" starttime="20170629 21:50:00.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.912" starttime="20170629 21:50:00.912"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:00.912" starttime="20170629 21:50:00.912"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.913" starttime="20170629 21:50:00.911"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:00.913" starttime="20170629 21:50:00.910"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:50:00.913" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:50:02.573" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:50:02.573" starttime="20170629 21:50:00.913"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:02.574" starttime="20170629 21:50:00.900"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170629 21:50:02.574" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170629 21:50:02.574" starttime="20170629 21:50:02.574"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170629 21:50:02.576" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170629 21:50:02.576" starttime="20170629 21:50:02.576"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:02.577" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170629 21:50:02.577" starttime="20170629 21:50:02.576"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:02.578" starttime="20170629 21:50:02.578"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:02.581" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170629 21:50:02.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:02.691" level="INFO">${stdout} = [    2.060000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    2.060000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    2.060000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_b...</msg>
<msg timestamp="20170629 21:50:02.691" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:02.691" starttime="20170629 21:50:02.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:02.697" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_dmesg.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:02.698" starttime="20170629 21:50:02.697"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:02.698" starttime="20170629 21:50:02.696"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:02.698" starttime="20170629 21:50:02.691"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:02.698" starttime="20170629 21:50:02.577"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:02.698" starttime="20170629 21:50:02.576"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:02.699" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170629 21:50:02.699" starttime="20170629 21:50:02.698"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:02.700" starttime="20170629 21:50:02.700"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:02.700" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170629 21:50:03.172" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:03.173" level="INFO">${stdout} = Mem: 152916K used, 279420K free, 14588K shrd, 10864K buff, 50916K cached
CPU:  16% usr  16% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 0.63 1.39 0.93 2/146 1440
  PID  PPID USER  ...</msg>
<msg timestamp="20170629 21:50:03.173" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:03.173" starttime="20170629 21:50:02.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:03.180" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_proc_list.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:03.180" starttime="20170629 21:50:03.180"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.181" starttime="20170629 21:50:03.179"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.181" starttime="20170629 21:50:03.174"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.181" starttime="20170629 21:50:02.699"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.181" starttime="20170629 21:50:02.698"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:03.182" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170629 21:50:03.182" starttime="20170629 21:50:03.181"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:03.183" starttime="20170629 21:50:03.182"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:03.183" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170629 21:50:03.306" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:03.306" level="INFO">${stdout} = MemTotal:         432336 kB
MemFree:          279296 kB
MemAvailable:     323576 kB
Buffers:           10864 kB
Cached:            50916 kB
SwapCached:            0 kB
Active:           100764 kB
Inac...</msg>
<msg timestamp="20170629 21:50:03.306" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:03.307" starttime="20170629 21:50:03.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:03.313" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_meminfo.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:03.313" starttime="20170629 21:50:03.313"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.313" starttime="20170629 21:50:03.312"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.314" starttime="20170629 21:50:03.307"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.314" starttime="20170629 21:50:03.182"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.314" starttime="20170629 21:50:03.181"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:03.314" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170629 21:50:03.314" starttime="20170629 21:50:03.314"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:03.316" starttime="20170629 21:50:03.315"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:03.316" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170629 21:50:03.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:03.441" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170629 21:50:03.441" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:03.441" starttime="20170629 21:50:03.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:03.449" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_procinfo.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:03.449" starttime="20170629 21:50:03.448"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.450" starttime="20170629 21:50:03.448"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.450" starttime="20170629 21:50:03.442"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.450" starttime="20170629 21:50:03.315"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:03.450" starttime="20170629 21:50:03.314"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:03.451" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170629 21:50:03.451" starttime="20170629 21:50:03.450"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:03.452" starttime="20170629 21:50:03.452"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:03.452" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170629 21:50:05.294" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:05.295" level="INFO">${stdout} = -- Logs begin at Thu 2017-06-29 21:42:38 UTC, end at Thu 2017-06-29 21:50:13 UTC. --
Jun 29 21:42:38 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 29 21:42:38 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170629 21:50:05.295" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:05.295" starttime="20170629 21:50:03.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:05.302" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_journalctl.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:05.302"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:05.300"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:05.295"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:03.451"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:03.450"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:02.576"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:02.575"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:02.575"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:02.575"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.303" starttime="20170629 21:50:00.899"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.304" starttime="20170629 21:50:00.875"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.304" starttime="20170629 21:50:00.872"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.304" starttime="20170629 21:50:00.872"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.306" starttime="20170629 21:50:05.305"></status>
</kw>
<msg timestamp="20170629 21:50:05.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:05.306" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:05.306" starttime="20170629 21:50:05.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.306" starttime="20170629 21:50:05.306"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170629 21:50:05.332" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170629 21:50:05.332" starttime="20170629 21:50:05.332"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.332" starttime="20170629 21:50:05.331"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.332" starttime="20170629 21:50:05.307"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.333" starttime="20170629 21:50:05.304"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.333" starttime="20170629 21:50:05.304"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.334" starttime="20170629 21:50:05.334"></status>
</kw>
<msg timestamp="20170629 21:50:05.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:05.335" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:05.335" starttime="20170629 21:50:05.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.335" starttime="20170629 21:50:05.335"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:50:05.365" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:50:05.365" starttime="20170629 21:50:05.365"></status>
</kw>
<msg timestamp="20170629 21:50:05.366" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:50:05.366" starttime="20170629 21:50:05.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.367" starttime="20170629 21:50:05.366"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.367" starttime="20170629 21:50:05.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:50:05.369" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:50:05.369" starttime="20170629 21:50:05.368"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:50:05.369" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:50:05.369" starttime="20170629 21:50:05.369"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:50:05.370" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:50:05.370" starttime="20170629 21:50:05.370"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:50:05.371" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:50:05.371" starttime="20170629 21:50:05.370"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.371" starttime="20170629 21:50:05.368"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.371" starttime="20170629 21:50:05.367"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:50:05.372" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:50:05.372" starttime="20170629 21:50:05.372"></status>
</kw>
<msg timestamp="20170629 21:50:05.372" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:50:05.372" starttime="20170629 21:50:05.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.374" starttime="20170629 21:50:05.374"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:05.375" starttime="20170629 21:50:05.374"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.375" starttime="20170629 21:50:05.373"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:05.375" starttime="20170629 21:50:05.373"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:50:05.375" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:50:07.195" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:50:07.196" starttime="20170629 21:50:05.375"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.196" starttime="20170629 21:50:05.364"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170629 21:50:07.197" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170629 21:50:07.276" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170629 21:50:07.276" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170629 21:50:07.276" starttime="20170629 21:50:07.196"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170629 21:50:07.277" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170629 21:50:07.277" starttime="20170629 21:50:07.276"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:07.283" starttime="20170629 21:50:07.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:07.993" starttime="20170629 21:50:07.285"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.993" starttime="20170629 21:50:07.285"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.993" starttime="20170629 21:50:07.284"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.993" starttime="20170629 21:50:07.277"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status status="PASS" endtime="20170629 21:50:07.993" starttime="20170629 21:50:07.993"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.994" starttime="20170629 21:50:05.363"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.994" starttime="20170629 21:50:05.335"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.994" starttime="20170629 21:50:05.333"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:07.994" starttime="20170629 21:50:05.333"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:07.996" starttime="20170629 21:50:07.996"></status>
</kw>
<msg timestamp="20170629 21:50:07.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:07.996" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:07.996" starttime="20170629 21:50:07.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:07.997" starttime="20170629 21:50:07.996"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:50:08.024" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:50:08.024" starttime="20170629 21:50:08.024"></status>
</kw>
<msg timestamp="20170629 21:50:08.024" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:50:08.024" starttime="20170629 21:50:08.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:08.025" starttime="20170629 21:50:08.025"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:08.025" starttime="20170629 21:50:08.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:50:08.027" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:50:08.027" starttime="20170629 21:50:08.027"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:50:08.028" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:50:08.028" starttime="20170629 21:50:08.027"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:50:08.029" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:50:08.029" starttime="20170629 21:50:08.028"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:50:08.029" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:50:08.029" starttime="20170629 21:50:08.029"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:08.030" starttime="20170629 21:50:08.026"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:08.030" starttime="20170629 21:50:08.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:50:08.031" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:50:08.031" starttime="20170629 21:50:08.030"></status>
</kw>
<msg timestamp="20170629 21:50:08.031" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:50:08.031" starttime="20170629 21:50:08.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:08.033" starttime="20170629 21:50:08.032"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:08.033" starttime="20170629 21:50:08.033"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:08.033" starttime="20170629 21:50:08.032"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:08.033" starttime="20170629 21:50:08.031"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:50:08.034" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:50:09.811" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:50:09.811" starttime="20170629 21:50:08.034"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.811" starttime="20170629 21:50:08.022"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170629 21:50:09.813" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status status="PASS" endtime="20170629 21:50:09.813" starttime="20170629 21:50:09.812"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170629 21:50:09.814" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170629 21:50:09.814" starttime="20170629 21:50:09.814"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170629 21:50:09.819" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170629 21:50:09.819" starttime="20170629 21:50:09.815"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:09.823" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:09.823" starttime="20170629 21:50:09.822"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.823" starttime="20170629 21:50:09.821"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:09.824" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:09.824" starttime="20170629 21:50:09.824"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.825" starttime="20170629 21:50:09.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:09.826" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:09.826" starttime="20170629 21:50:09.825"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.826" starttime="20170629 21:50:09.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:09.827" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:09.827" starttime="20170629 21:50:09.827"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.827" starttime="20170629 21:50:09.826"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.827" starttime="20170629 21:50:09.821"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:09.827" starttime="20170629 21:50:09.820"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:09.828" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170629 21:50:11.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:11.281" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170629 21:50:11.281" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:11.281" starttime="20170629 21:50:09.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.288" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:11.287"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:11.286"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:11.282"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:09.819"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:09.819"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:09.819"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:09.813"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.288" starttime="20170629 21:50:09.813"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170629 21:50:11.289" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170629 21:50:11.289" starttime="20170629 21:50:11.289"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.290" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170629 21:50:11.290" starttime="20170629 21:50:11.290"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.293" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.293" starttime="20170629 21:50:11.293"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.294" starttime="20170629 21:50:11.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.295" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.295" starttime="20170629 21:50:11.294"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.295" starttime="20170629 21:50:11.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.296" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.296" starttime="20170629 21:50:11.296"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.297" starttime="20170629 21:50:11.295"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.298" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.298" starttime="20170629 21:50:11.297"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.298" starttime="20170629 21:50:11.297"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.298" starttime="20170629 21:50:11.292"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.298" starttime="20170629 21:50:11.291"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:11.299" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170629 21:50:11.496" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:11.497" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg timestamp="20170629 21:50:11.497" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:11.497" starttime="20170629 21:50:11.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.505" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.505" starttime="20170629 21:50:11.504"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.505" starttime="20170629 21:50:11.503"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.505" starttime="20170629 21:50:11.497"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.505" starttime="20170629 21:50:11.291"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.505" starttime="20170629 21:50:11.290"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.509" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.509" starttime="20170629 21:50:11.509"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.509" starttime="20170629 21:50:11.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.511" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.511" starttime="20170629 21:50:11.510"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.511" starttime="20170629 21:50:11.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.512" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.512" starttime="20170629 21:50:11.512"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.512" starttime="20170629 21:50:11.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.513" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.513" starttime="20170629 21:50:11.513"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.513" starttime="20170629 21:50:11.512"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.514" starttime="20170629 21:50:11.507"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.514" starttime="20170629 21:50:11.507"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:11.514" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170629 21:50:11.646" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:11.646" level="INFO">${stdout} =  21:50:23 up 8 min,  load average: 0.68, 1.38, 0.93</msg>
<msg timestamp="20170629 21:50:11.646" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:11.647" starttime="20170629 21:50:11.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.652" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.653" starttime="20170629 21:50:11.652"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.653" starttime="20170629 21:50:11.651"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.653" starttime="20170629 21:50:11.647"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.653" starttime="20170629 21:50:11.506"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.653" starttime="20170629 21:50:11.505"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.656" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.656" starttime="20170629 21:50:11.656"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.657" starttime="20170629 21:50:11.655"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.658" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.658" starttime="20170629 21:50:11.657"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.658" starttime="20170629 21:50:11.657"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.659" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.659" starttime="20170629 21:50:11.659"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.659" starttime="20170629 21:50:11.658"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.660" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.661" starttime="20170629 21:50:11.660"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.661" starttime="20170629 21:50:11.660"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.661" starttime="20170629 21:50:11.654"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.661" starttime="20170629 21:50:11.654"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:11.661" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170629 21:50:11.789" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:11.789" level="INFO">${stdout} = Linux witherspoon 4.10.17-9e95993e2d6edc68af5ca3f2345789e0f450d0db #1 Thu Jun 29 21:21:50 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170629 21:50:11.789" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:11.789" starttime="20170629 21:50:11.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.795" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.795" starttime="20170629 21:50:11.795"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.795" starttime="20170629 21:50:11.794"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.795" starttime="20170629 21:50:11.789"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.795" starttime="20170629 21:50:11.653"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.796" starttime="20170629 21:50:11.653"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.796" starttime="20170629 21:50:11.290"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.796" starttime="20170629 21:50:11.289"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.796" starttime="20170629 21:50:11.288"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170629 21:50:11.797" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status status="PASS" endtime="20170629 21:50:11.797" starttime="20170629 21:50:11.797"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.798" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170629 21:50:11.798" starttime="20170629 21:50:11.797"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.801" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.801" starttime="20170629 21:50:11.800"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.801" starttime="20170629 21:50:11.800"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.802" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.802" starttime="20170629 21:50:11.802"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.802" starttime="20170629 21:50:11.801"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.804" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.804" starttime="20170629 21:50:11.803"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.804" starttime="20170629 21:50:11.802"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.805" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.805" starttime="20170629 21:50:11.805"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.805" starttime="20170629 21:50:11.804"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.806" starttime="20170629 21:50:11.799"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.806" starttime="20170629 21:50:11.799"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:11.806" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170629 21:50:11.927" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170629 21:50:11.927" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-68"
VERSION_ID="v1.99.7-68-g9a12da1"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170629 21:50:11.927" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170629 21:50:11.927" starttime="20170629 21:50:11.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.933" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.933" starttime="20170629 21:50:11.933"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.934" starttime="20170629 21:50:11.932"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.934" starttime="20170629 21:50:11.928"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.934" starttime="20170629 21:50:11.798"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.934" starttime="20170629 21:50:11.798"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.937" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.937" starttime="20170629 21:50:11.936"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.937" starttime="20170629 21:50:11.936"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.938" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.938" starttime="20170629 21:50:11.938"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.938" starttime="20170629 21:50:11.937"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.939" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.939" starttime="20170629 21:50:11.939"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.940" starttime="20170629 21:50:11.938"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:11.941" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:11.941" starttime="20170629 21:50:11.940"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.941" starttime="20170629 21:50:11.940"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.941" starttime="20170629 21:50:11.935"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:11.941" starttime="20170629 21:50:11.935"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170629 21:50:11.942" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170629 21:50:12.072" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170629 21:50:12.073" level="INFO">${stdout} = </msg>
<msg timestamp="20170629 21:50:12.073" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170629 21:50:12.073" starttime="20170629 21:50:11.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:12.079" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:12.079"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:12.078"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:12.073"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:11.934"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:11.934"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.079" starttime="20170629 21:50:11.798"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:11.796"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:11.796"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:09.813"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:08.022"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:07.997"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:07.994"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.080" starttime="20170629 21:50:07.994"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:12.082" starttime="20170629 21:50:12.082"></status>
</kw>
<msg timestamp="20170629 21:50:12.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:12.082" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:12.082" starttime="20170629 21:50:12.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:12.083" starttime="20170629 21:50:12.083"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170629 21:50:12.112" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170629 21:50:12.112" starttime="20170629 21:50:12.112"></status>
</kw>
<msg timestamp="20170629 21:50:12.112" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170629 21:50:12.112" starttime="20170629 21:50:12.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:12.114" starttime="20170629 21:50:12.113"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.114" starttime="20170629 21:50:12.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170629 21:50:12.115" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170629 21:50:12.115" starttime="20170629 21:50:12.115"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170629 21:50:12.116" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170629 21:50:12.116" starttime="20170629 21:50:12.116"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170629 21:50:12.116" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170629 21:50:12.116" starttime="20170629 21:50:12.116"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170629 21:50:12.117" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170629 21:50:12.117" starttime="20170629 21:50:12.117"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.117" starttime="20170629 21:50:12.114"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.117" starttime="20170629 21:50:12.114"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170629 21:50:12.118" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170629 21:50:12.119" starttime="20170629 21:50:12.118"></status>
</kw>
<msg timestamp="20170629 21:50:12.119" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170629 21:50:12.119" starttime="20170629 21:50:12.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:12.120" starttime="20170629 21:50:12.120"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:12.121" starttime="20170629 21:50:12.121"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.121" starttime="20170629 21:50:12.120"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:12.121" starttime="20170629 21:50:12.119"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170629 21:50:12.122" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170629 21:50:13.820" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170629 21:50:13.820" starttime="20170629 21:50:12.121"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:13.821" starttime="20170629 21:50:12.111"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170629 21:50:13.821" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170629 21:50:13.821" starttime="20170629 21:50:13.821"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170629 21:50:13.823" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/...</msg>
<status status="PASS" endtime="20170629 21:50:13.823" starttime="20170629 21:50:13.823"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:13.824" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_elog.txt</msg>
<status status="PASS" endtime="20170629 21:50:13.824" starttime="20170629 21:50:13.824"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:13.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:13.827" starttime="20170629 21:50:13.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:13.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:13.828" starttime="20170629 21:50:13.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:13.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:13.829" starttime="20170629 21:50:13.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:13.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:13.830" starttime="20170629 21:50:13.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.021" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:14.021" starttime="20170629 21:50:13.831"></status>
</kw>
<msg timestamp="20170629 21:50:14.021" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:14.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.021" starttime="20170629 21:50:13.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.022" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.022" starttime="20170629 21:50:14.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.023" starttime="20170629 21:50:14.023"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.024" starttime="20170629 21:50:13.826"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.024" starttime="20170629 21:50:13.825"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.024" starttime="20170629 21:50:13.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:14.025" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170629 21:50:14.025" starttime="20170629 21:50:14.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.025" starttime="20170629 21:50:14.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:14.290" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:14.290" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.290" starttime="20170629 21:50:14.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.291" starttime="20170629 21:50:14.290"></status>
</kw>
<msg timestamp="20170629 21:50:14.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.291" starttime="20170629 21:50:13.824"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.293" starttime="20170629 21:50:14.292"></status>
</kw>
<msg timestamp="20170629 21:50:14.293" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170629 21:50:14.293" starttime="20170629 21:50:14.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.294" starttime="20170629 21:50:14.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170629 21:50:14.295" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 66 c2 6f e2 00 00 00 05 66 56 99 0e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 3f 90 00 00 3f 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 25 00 48 00 00 00 e0 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 42 43 38 41 32 36 32 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 02 4b 1c 00 00 00 00 55 44 00 38 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 29 b8 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 01 00 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00 00 00 00 00 f8 00 00 00 04 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1498772834101, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 00 00 00 05 89 89 77 81 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 40 90 00 00 40 55 48 00 18 01 00 26 00 70 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 16 00 48 00 00 00 e0 00 00 08 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 42 43 37 30 32 36 31 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 10 00 02 4b 1c 00 00 43 4f 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 55 00 02 4b 1c 00 00 43 4f 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 5a 54 00 00 00 00 40 40 65 18 00 00 00 00 40 40 71 d8 00 00 00 00 40 40 2a 34 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 03 18 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 03 10 00 00 00 00 00 00 03 10 00 00 00 10 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c 00 00 00 2d 12 7e a2 d3 00 00 01 b3 00 08 43 4f 6b 3c a2 45 00 00 00 bf 00 00 00 00 00 00 26 25 00 00 00 24 00 00 00 2d 14 73 56 56 00 00 01 b3 00 00 43 4f e9 d4 c7 4a 00 00 00 c3 00 00 00 1c 00 00 00 2d 14 88 b8 a8 00 00 01 b3 00 00 43 4f 9d 47 13 01 00 00 01 98 00 00 00 1c 00 00 00 2d 14 95 fa 84 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2d 14 96 0b f9 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 02 60 00 00 00 00 00 00 20 0f fd 80 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 2d 14 9c 32 60 00 00 01 b3 00 1c 43 4f 90 64 f8 06 00 00 01 de 00 00 00 00 00 00 00 00 00 00 00 00 00 13 00 00 00 00 00 59 00 00 02 60 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 14 9c 42 6f 00 00 01 b3 00 0c 43 4f ec 5f d8 42 00 00 02 5e 00 00 00 00 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 2c 00 00 00 2d 14 9c 51 c1 00 00 01 b3 00 08 43 4f 29 60 e8 87 00 00 02 66 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2c 2e ec 03 99 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 19 f2 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 00 00 00 00 00 00 00 00 20 0f fd c0 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 2c 2e ec 2a b9 00 00 01 b3 00 08 43 4f be a1 a4 6d 00 00 01 eb 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 39 c2 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 08 00 00 00 00 00 00 26 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 6e 00 00 00 00 00 00 00 5c"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1498772836391, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:14.295" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170629 21:50:14.295" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00...</msg>
<status status="PASS" endtime="20170629 21:50:14.295" starttime="20170629 21:50:14.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.297" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_elog.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:14.297" starttime="20170629 21:50:14.296"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.297" starttime="20170629 21:50:14.296"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.297" starttime="20170629 21:50:13.823"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:14.298" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170629 21:50:14.298" starttime="20170629 21:50:14.298"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:14.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:14.301" starttime="20170629 21:50:14.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:14.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:14.302" starttime="20170629 21:50:14.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:14.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:14.302" starttime="20170629 21:50:14.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:14.303" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:14.303" starttime="20170629 21:50:14.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.514" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:14.515" starttime="20170629 21:50:14.304"></status>
</kw>
<msg timestamp="20170629 21:50:14.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:14.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.515" starttime="20170629 21:50:14.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.516" starttime="20170629 21:50:14.515"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.517" starttime="20170629 21:50:14.516"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.517" starttime="20170629 21:50:14.300"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.517" starttime="20170629 21:50:14.299"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.517" starttime="20170629 21:50:14.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:14.518" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170629 21:50:14.518" starttime="20170629 21:50:14.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.519" starttime="20170629 21:50:14.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:14.739" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:14.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.739" starttime="20170629 21:50:14.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.740" starttime="20170629 21:50:14.739"></status>
</kw>
<msg timestamp="20170629 21:50:14.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.740" starttime="20170629 21:50:14.298"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.741" starttime="20170629 21:50:14.741"></status>
</kw>
<msg timestamp="20170629 21:50:14.741" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170629 21:50:14.741" starttime="20170629 21:50:14.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.742" starttime="20170629 21:50:14.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170629 21:50:14.743" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:14.743" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170629 21:50:14.743" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170629 21:50:14.743" starttime="20170629 21:50:14.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.744" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_sensor_list.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:14.744" starttime="20170629 21:50:14.744"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.745" starttime="20170629 21:50:14.743"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.745" starttime="20170629 21:50:14.297"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:14.745" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_led.txt</msg>
<status status="PASS" endtime="20170629 21:50:14.745" starttime="20170629 21:50:14.745"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:14.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:14.748" starttime="20170629 21:50:14.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:14.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:14.749" starttime="20170629 21:50:14.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:14.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:14.750" starttime="20170629 21:50:14.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:14.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:14.750" starttime="20170629 21:50:14.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:14.931" starttime="20170629 21:50:14.751"></status>
</kw>
<msg timestamp="20170629 21:50:14.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:14.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.932" starttime="20170629 21:50:14.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.932" starttime="20170629 21:50:14.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.933" starttime="20170629 21:50:14.933"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.934" starttime="20170629 21:50:14.747"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.934" starttime="20170629 21:50:14.747"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.934" starttime="20170629 21:50:14.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:14.935" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170629 21:50:14.935" starttime="20170629 21:50:14.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.936" starttime="20170629 21:50:14.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:14.980" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:14.981" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.981" starttime="20170629 21:50:14.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:14.981" starttime="20170629 21:50:14.981"></status>
</kw>
<msg timestamp="20170629 21:50:14.981" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:14.981" starttime="20170629 21:50:14.746"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:14.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170629 21:50:14.983" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170629 21:50:14.983" starttime="20170629 21:50:14.982"></status>
</kw>
<msg timestamp="20170629 21:50:14.983" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:50:14.983" starttime="20170629 21:50:14.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170629 21:50:14.984" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170629 21:50:14.984" starttime="20170629 21:50:14.984"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.984" starttime="20170629 21:50:14.983"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:14.984" starttime="20170629 21:50:14.745"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:14.985" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170629 21:50:14.985" starttime="20170629 21:50:14.984"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:14.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:14.988" starttime="20170629 21:50:14.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:14.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:14.989" starttime="20170629 21:50:14.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:14.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:14.989" starttime="20170629 21:50:14.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:14.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:14.990" starttime="20170629 21:50:14.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:15.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:15.197" starttime="20170629 21:50:14.991"></status>
</kw>
<msg timestamp="20170629 21:50:15.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:15.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:15.197" starttime="20170629 21:50:14.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:15.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:15.198" starttime="20170629 21:50:15.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:15.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:15.199" starttime="20170629 21:50:15.199"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:15.199" starttime="20170629 21:50:14.987"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:15.199" starttime="20170629 21:50:14.986"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:15.200" starttime="20170629 21:50:14.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:15.200" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170629 21:50:15.200" starttime="20170629 21:50:15.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:15.201" starttime="20170629 21:50:15.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:17.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:17.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.111" starttime="20170629 21:50:15.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.112" starttime="20170629 21:50:17.112"></status>
</kw>
<msg timestamp="20170629 21:50:17.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.112" starttime="20170629 21:50:14.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.114" starttime="20170629 21:50:17.113"></status>
</kw>
<msg timestamp="20170629 21:50:17.114" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170629 21:50:17.114" starttime="20170629 21:50:17.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.114" starttime="20170629 21:50:17.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170629 21:50:17.117" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:17.117" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170629 21:50:17.118" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170629 21:50:17.118" starttime="20170629 21:50:17.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.120" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_inventory.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:17.120" starttime="20170629 21:50:17.119"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.120" starttime="20170629 21:50:17.118"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.120" starttime="20170629 21:50:14.984"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:17.121" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170629 21:50:17.121" starttime="20170629 21:50:17.120"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:17.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:17.124" starttime="20170629 21:50:17.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:17.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:17.125" starttime="20170629 21:50:17.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:17.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:17.125" starttime="20170629 21:50:17.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:17.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:17.126" starttime="20170629 21:50:17.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.349" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:17.349" starttime="20170629 21:50:17.127"></status>
</kw>
<msg timestamp="20170629 21:50:17.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:17.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.349" starttime="20170629 21:50:17.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.350" starttime="20170629 21:50:17.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.351" starttime="20170629 21:50:17.350"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.351" starttime="20170629 21:50:17.123"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.351" starttime="20170629 21:50:17.122"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.351" starttime="20170629 21:50:17.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:17.351" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170629 21:50:17.352" starttime="20170629 21:50:17.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.352" starttime="20170629 21:50:17.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:17.396" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:17.396" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.396" starttime="20170629 21:50:17.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.397" starttime="20170629 21:50:17.396"></status>
</kw>
<msg timestamp="20170629 21:50:17.397" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.397" starttime="20170629 21:50:17.121"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170629 21:50:17.398" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170629 21:50:17.398" starttime="20170629 21:50:17.398"></status>
</kw>
<msg timestamp="20170629 21:50:17.398" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:50:17.398" starttime="20170629 21:50:17.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170629 21:50:17.399" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170629 21:50:17.399" starttime="20170629 21:50:17.399"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.399" starttime="20170629 21:50:17.399"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.399" starttime="20170629 21:50:17.120"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:13.823"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:13.822"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:13.822"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:13.821"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:12.110"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:12.083"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:12.080"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.400" starttime="20170629 21:50:12.080"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.402" starttime="20170629 21:50:17.402"></status>
</kw>
<msg timestamp="20170629 21:50:17.402" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:17.402" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170629 21:50:17.402" starttime="20170629 21:50:17.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.403" starttime="20170629 21:50:17.402"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:17.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:17.435" starttime="20170629 21:50:17.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:17.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:17.436" starttime="20170629 21:50:17.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:17.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:17.436" starttime="20170629 21:50:17.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:17.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:17.437" starttime="20170629 21:50:17.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.618" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:17.618" starttime="20170629 21:50:17.438"></status>
</kw>
<msg timestamp="20170629 21:50:17.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:17.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.618" starttime="20170629 21:50:17.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.619" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.619" starttime="20170629 21:50:17.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.620" starttime="20170629 21:50:17.619"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.620" starttime="20170629 21:50:17.433"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.620" starttime="20170629 21:50:17.433"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:17.620" starttime="20170629 21:50:17.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:17.621" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170629 21:50:17.621" starttime="20170629 21:50:17.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.621" starttime="20170629 21:50:17.621"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:17.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170629 21:50:17.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.796" starttime="20170629 21:50:17.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.797" starttime="20170629 21:50:17.797"></status>
</kw>
<msg timestamp="20170629 21:50:17.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.797" starttime="20170629 21:50:17.431"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:17.798" starttime="20170629 21:50:17.798"></status>
</kw>
<msg timestamp="20170629 21:50:17.798" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170629 21:50:17.798" starttime="20170629 21:50:17.797"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:17.799" starttime="20170629 21:50:17.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:50:17.800" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 66 c2 6f e2 00 00 00 05 66 56 99 0e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 3f 90 00 00 3f 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 25 00 48 00 00 00 e0 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 42 43 38 41 32 36 32 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 02 4b 1c 00 00 00 00 55 44 00 38 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 29 b8 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 01 00 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00 00 00 00 00 f8 00 00 00 04 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1498772834101, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 00 00 00 05 89 89 77 81 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 40 90 00 00 40 55 48 00 18 01 00 26 00 70 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 16 00 48 00 00 00 e0 00 00 08 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 42 43 37 30 32 36 31 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 10 00 02 4b 1c 00 00 43 4f 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 55 00 02 4b 1c 00 00 43 4f 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 5a 54 00 00 00 00 40 40 65 18 00 00 00 00 40 40 71 d8 00 00 00 00 40 40 2a 34 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 03 18 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 03 10 00 00 00 00 00 00 03 10 00 00 00 10 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c 00 00 00 2d 12 7e a2 d3 00 00 01 b3 00 08 43 4f 6b 3c a2 45 00 00 00 bf 00 00 00 00 00 00 26 25 00 00 00 24 00 00 00 2d 14 73 56 56 00 00 01 b3 00 00 43 4f e9 d4 c7 4a 00 00 00 c3 00 00 00 1c 00 00 00 2d 14 88 b8 a8 00 00 01 b3 00 00 43 4f 9d 47 13 01 00 00 01 98 00 00 00 1c 00 00 00 2d 14 95 fa 84 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2d 14 96 0b f9 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 02 60 00 00 00 00 00 00 20 0f fd 80 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 2d 14 9c 32 60 00 00 01 b3 00 1c 43 4f 90 64 f8 06 00 00 01 de 00 00 00 00 00 00 00 00 00 00 00 00 00 13 00 00 00 00 00 59 00 00 02 60 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 14 9c 42 6f 00 00 01 b3 00 0c 43 4f ec 5f d8 42 00 00 02 5e 00 00 00 00 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 2c 00 00 00 2d 14 9c 51 c1 00 00 01 b3 00 08 43 4f 29 60 e8 87 00 00 02 66 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2c 2e ec 03 99 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 19 f2 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 00 00 00 00 00 00 00 00 20 0f fd c0 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 2c 2e ec 2a b9 00 00 01 b3 00 08 43 4f be a1 a4 6d 00 00 01 eb 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 39 c2 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 08 00 00 00 00 00 00 26 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 6e 00 00 00 00 00 00 00 5c"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1498772836391, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:17.800" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:50:17.800" level="INFO">${content} = {u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'AdditionalData': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 0...</msg>
<status status="PASS" endtime="20170629 21:50:17.800" starttime="20170629 21:50:17.799"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170629 21:50:17.801" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170629 21:50:17.801" starttime="20170629 21:50:17.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170629 21:50:17.801" level="INFO">${logpath} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel</msg>
<status status="PASS" endtime="20170629 21:50:17.801" starttime="20170629 21:50:17.801"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170629 21:50:17.802" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:17.802" starttime="20170629 21:50:17.802"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:17.806" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:17.807" starttime="20170629 21:50:17.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:17.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:17.808" starttime="20170629 21:50:17.807"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:17.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:17.808" starttime="20170629 21:50:17.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:17.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:17.809" starttime="20170629 21:50:17.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.056" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:18.056" starttime="20170629 21:50:17.810"></status>
</kw>
<msg timestamp="20170629 21:50:18.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:18.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.056" starttime="20170629 21:50:17.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.057" starttime="20170629 21:50:18.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.057" starttime="20170629 21:50:18.057"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.058" starttime="20170629 21:50:17.805"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.058" starttime="20170629 21:50:17.804"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.058" starttime="20170629 21:50:17.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:18.058" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170629 21:50:18.058" starttime="20170629 21:50:18.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.059" starttime="20170629 21:50:18.059"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:18.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170629 21:50:18.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.145" starttime="20170629 21:50:18.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.146" starttime="20170629 21:50:18.146"></status>
</kw>
<msg timestamp="20170629 21:50:18.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.146" starttime="20170629 21:50:17.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.147" starttime="20170629 21:50:18.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:50:18.148" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 66 c2 6f e2 00 00 00 05 66 56 99 0e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 3f 90 00 00 3f 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 25 00 48 00 00 00 e0 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 42 43 38 41 32 36 32 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 02 4b 1c 00 00 00 00 55 44 00 38 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 29 b8 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 01 00 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00 00 00 00 00 f8 00 00 00 04 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:18.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:50:18.148" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 66 c2 6f e2 00 00 00 05 66 56 99 0e 42 00 00 07 00 00 00 00 00 00 00 00 00 ...</msg>
<status status="PASS" endtime="20170629 21:50:18.148" starttime="20170629 21:50:18.147"></status>
</kw>
<msg timestamp="20170629 21:50:18.148" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 66 c2 6f e2 00 00 00 05 66 56 99 0e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 3f 90 00 00 3f ...</msg>
<status status="PASS" endtime="20170629 21:50:18.148" starttime="20170629 21:50:17.802"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170629 21:50:18.149" level="INFO">Length is 1</msg>
<msg timestamp="20170629 21:50:18.149" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20170629 21:50:18.149" starttime="20170629 21:50:18.148"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.149" starttime="20170629 21:50:18.149"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.151" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.151" starttime="20170629 21:50:18.150"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.151" starttime="20170629 21:50:18.149"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.152" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.152" starttime="20170629 21:50:18.151"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.152" starttime="20170629 21:50:18.151"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.152" starttime="20170629 21:50:17.802"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170629 21:50:18.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170629 21:50:18.156" starttime="20170629 21:50:18.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170629 21:50:18.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170629 21:50:18.157" starttime="20170629 21:50:18.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170629 21:50:18.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170629 21:50:18.157" starttime="20170629 21:50:18.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170629 21:50:18.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170629 21:50:18.158" starttime="20170629 21:50:18.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170629 21:50:18.372" starttime="20170629 21:50:18.159"></status>
</kw>
<msg timestamp="20170629 21:50:18.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20170629 21:50:18.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.373" starttime="20170629 21:50:18.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.373" starttime="20170629 21:50:18.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.374" starttime="20170629 21:50:18.374"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.375" starttime="20170629 21:50:18.155"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.375" starttime="20170629 21:50:18.154"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.375" starttime="20170629 21:50:18.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170629 21:50:18.376" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170629 21:50:18.376" starttime="20170629 21:50:18.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.376" starttime="20170629 21:50:18.376"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170629 21:50:18.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170629 21:50:18.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.465" starttime="20170629 21:50:18.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.466" starttime="20170629 21:50:18.465"></status>
</kw>
<msg timestamp="20170629 21:50:18.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.466" starttime="20170629 21:50:18.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170629 21:50:18.467" starttime="20170629 21:50:18.466"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170629 21:50:18.467" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 00 00 00 05 89 89 77 81 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 40 90 00 00 40 55 48 00 18 01 00 26 00 70 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 26 16 00 48 00 00 00 e0 00 00 08 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 42 43 37 30 32 36 31 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 10 00 02 4b 1c 00 00 43 4f 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 05 00 00 00 55 00 02 4b 1c 00 00 43 4f 55 44 00 50 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 40 a7 94 00 00 00 00 40 40 5a 54 00 00 00 00 40 40 65 18 00 00 00 00 40 40 71 d8 00 00 00 00 40 40 2a 34 00 00 00 00 40 1a 0c 7c 00 00 00 00 00 00 25 80 55 44 00 64 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 73 69 74 65 5f 6c 6f 63 61 6c 2d 68 6f 73 74 62 6f 6f 74 2d 68 62 30 35 30 37 61 5f 31 35 31 39 2e 38 34 30 2d 34 31 38 39 2d 67 64 33 62 31 30 32 62 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 00 55 44 03 18 01 15 31 00 01 28 00 42 48 54 4d 47 54 00 00 00 00 00 00 00 00 00 00 00 00 00 03 10 00 00 00 00 00 00 03 10 00 00 00 10 00 00 00 00 00 00 00 2d 12 7d e4 92 00 00 01 b3 00 10 43 4f 31 4a 5d aa 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 01 00 02 21 f0 00 00 00 2c 00 00 00 2d 12 7d fa b8 00 00 01 b3 00 0c 43 4f ef 98 cb d8 00 00 00 40 00 00 00 6e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 2c 00 00 00 2d 12 7e 16 18 00 00 01 b3 00 00 43 4f 6b 3e f6 a1 00 00 00 ae 00 00 00 1c 00 00 00 2d 12 7e 26 0c 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26 25 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 5c 00 00 00 2d 12 7e a2 d3 00 00 01 b3 00 08 43 4f 6b 3c a2 45 00 00 00 bf 00 00 00 00 00 00 26 25 00 00 00 24 00 00 00 2d 14 73 56 56 00 00 01 b3 00 00 43 4f e9 d4 c7 4a 00 00 00 c3 00 00 00 1c 00 00 00 2d 14 88 b8 a8 00 00 01 b3 00 00 43 4f 9d 47 13 01 00 00 01 98 00 00 00 1c 00 00 00 2d 14 95 fa 84 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2d 14 96 0b f9 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 02 60 00 00 00 00 00 00 20 0f fd 80 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 2d 14 9c 32 60 00 00 01 b3 00 1c 43 4f 90 64 f8 06 00 00 01 de 00 00 00 00 00 00 00 00 00 00 00 00 00 13 00 00 00 00 00 59 00 00 02 60 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 14 9c 42 6f 00 00 01 b3 00 0c 43 4f ec 5f d8 42 00 00 02 5e 00 00 00 00 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 2c 00 00 00 2d 14 9c 51 c1 00 00 01 b3 00 08 43 4f 29 60 e8 87 00 00 02 66 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 2c 2e ec 03 99 00 00 01 b3 00 08 43 4f 8b 6f 6b 02 00 00 01 b2 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 19 f2 00 00 01 b3 00 18 43 4f af 6f 2e f6 00 00 01 b9 00 00 00 00 00 00 00 00 00 00 20 0f fd c0 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 2c 2e ec 2a b9 00 00 01 b3 00 08 43 4f be a1 a4 6d 00 00 01 eb 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 2c 2e ec 39 c2 00 00 01 b3 00 3c 43 4f 7c e5 74 0f 00 00 00 38 00 00 00 00 00 00 00 08 00 00 00 00 00 00 26 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 6e 00 00 00 00 00 00 00 5c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170629 21:50:18.467" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170629 21:50:18.468" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 00 00 00 05 89 89 77 81 42 00 00 08 00 00 00 00 00 00 00 00 00 ...</msg>
<status status="PASS" endtime="20170629 21:50:18.468" starttime="20170629 21:50:18.467"></status>
</kw>
<msg timestamp="20170629 21:50:18.468" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 26 00 00 00 00 05 56 cc 52 dd 00 00 00 05 89 89 77 81 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 40 90 00 00 40 ...</msg>
<status status="PASS" endtime="20170629 21:50:18.468" starttime="20170629 21:50:18.152"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170629 21:50:18.468" level="INFO">Length is 1</msg>
<msg timestamp="20170629 21:50:18.469" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20170629 21:50:18.469" starttime="20170629 21:50:18.468"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.469" starttime="20170629 21:50:18.469"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.470" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.471" starttime="20170629 21:50:18.470"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.471" starttime="20170629 21:50:18.469"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.472" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel"&gt;/tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/20170629214958926097_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.472" starttime="20170629 21:50:18.471"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.472" starttime="20170629 21:50:18.471"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.472" starttime="20170629 21:50:18.152"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.472" starttime="20170629 21:50:17.802"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170629 21:50:18.478" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:50:18.495" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170629 21:50:18.496" starttime="20170629 21:50:18.473"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170629 21:50:18.515" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170629 21:50:18.515" starttime="20170629 21:50:18.513"></status>
</kw>
<msg timestamp="20170629 21:50:18.515" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170629 21:50:18.515" starttime="20170629 21:50:18.509"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170629 21:50:18.517" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170629 21:50:18.517" starttime="20170629 21:50:18.516"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.518" starttime="20170629 21:50:17.431"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.519" starttime="20170629 21:50:17.403"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.519" starttime="20170629 21:50:17.400"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.520" starttime="20170629 21:50:17.400"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.521" starttime="20170629 21:50:00.872"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.522" starttime="20170629 21:50:00.870"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.522" starttime="20170629 21:50:00.870"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.523" starttime="20170629 21:50:00.869"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170629 21:50:18.677" starttime="20170629 21:50:18.524"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.677" starttime="20170629 21:50:00.868"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.678" starttime="20170629 21:49:55.879"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.679" starttime="20170629 21:49:55.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.679" starttime="20170629 21:50:18.679"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170629 21:50:18.689" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170629 21:50:18.689" starttime="20170629 21:50:18.680"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170629 21:50:18.690" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/31264/obmc-robot/logs/20170629214958926097_TestsTestBasicPoweron/20170629214958926097_PowerOnTest/</msg>
<status status="PASS" endtime="20170629 21:50:18.690" starttime="20170629 21:50:18.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.691" starttime="20170629 21:50:18.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.691" starttime="20170629 21:50:18.691"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.692" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs"&gt;/tmp/fspcibld/31264/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170629 21:50:18.692" starttime="20170629 21:50:18.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.693" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170629 21:50:18.693" starttime="20170629 21:50:18.693"></status>
</kw>
<msg timestamp="20170629 21:50:18.694" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170629 21:50:18.694" starttime="20170629 21:50:18.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.694" starttime="20170629 21:50:18.694"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.696" starttime="20170629 21:50:18.695"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:50:18.697" level="INFO">${cur_time} = 2017-06-29 21:50:18:696514</msg>
<status status="PASS" endtime="20170629 21:50:18.697" starttime="20170629 21:50:18.696"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170629 21:50:18.697" level="INFO">${cur_time} = 20170629215018696514</msg>
<status status="PASS" endtime="20170629 21:50:18.697" starttime="20170629 21:50:18.697"></status>
</kw>
<msg timestamp="20170629 21:50:18.698" level="INFO">${cur_time} = 20170629215018696514</msg>
<status status="PASS" endtime="20170629 21:50:18.698" starttime="20170629 21:50:18.696"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.698" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31264/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.698" starttime="20170629 21:50:18.698"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.699" starttime="20170629 21:50:18.680"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.699" starttime="20170629 21:49:55.605"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170629 21:50:18.701" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:50:18.701" starttime="20170629 21:50:18.700"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170629 21:50:18.702" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:50:18.702" starttime="20170629 21:50:18.701"></status>
</kw>
<msg timestamp="20170629 21:50:18.703" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170629 21:50:18.703" starttime="20170629 21:50:18.700"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:50:18.703" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170629 21:50:18.704" starttime="20170629 21:50:18.703"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.704" starttime="20170629 21:50:18.704"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:50:18.717" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:50:18.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:50:18.737" level="INFO">${output} = /tmp/fspcibld/31264/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170629 21:50:18.738" starttime="20170629 21:50:18.704"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.749" starttime="20170629 21:50:18.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.755" starttime="20170629 21:50:18.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:50:18.757" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:50:18.757" starttime="20170629 21:50:18.755"></status>
</kw>
<msg timestamp="20170629 21:50:18.758" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170629 21:50:18.758" starttime="20170629 21:50:18.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:50:18.759" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170629 21:50:18.759" starttime="20170629 21:50:18.758"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.759" starttime="20170629 21:50:18.759"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170629 21:50:18.766" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170629 21:50:18.779" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:50:18.779" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170629 21:50:18.780" starttime="20170629 21:50:18.760"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.782" starttime="20170629 21:50:18.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170629 21:50:18.783" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170629 21:50:18.783" starttime="20170629 21:50:18.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.786" starttime="20170629 21:50:18.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:50:18.787" level="INFO">${rc} = None</msg>
<msg timestamp="20170629 21:50:18.787" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170629 21:50:18.787" starttime="20170629 21:50:18.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.787" starttime="20170629 21:50:18.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.791" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/31264/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/31264/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170629 21:50:18.791" starttime="20170629 21:50:18.789"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.791" starttime="20170629 21:50:18.788"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.791" starttime="20170629 21:50:18.788"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170629 21:50:18.792" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170629 21:50:18.792" starttime="20170629 21:50:18.792"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170629 21:50:18.793" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170629 21:50:18.793" starttime="20170629 21:50:18.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170629 21:50:18.849" starttime="20170629 21:50:18.794"></status>
</kw>
<msg timestamp="20170629 21:50:18.851" level="INFO">${rc} = 0</msg>
<msg timestamp="20170629 21:50:18.897" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20170629 21:50:18.897" starttime="20170629 21:50:18.793"></status>
</kw>
<msg timestamp="20170629 21:50:18.938" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20170629 21:50:18.938" starttime="20170629 21:50:18.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170629 21:50:18.987" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-site_local-hostboot-hb0507a_1519.840-4189-gd3b102b/hbicore.bin ==--

  3.85995|secure|Booting in non-secure mode.
  3.86035|secure|SecureROM invalid - skipping functionality
  6.27522|ISTEP  6. 5 - host_init_fsi
  6.35519|ISTEP  6. 6 - host_set_ipl_parms
  6.83315|ISTEP  6. 7 - host_discover_targets
 10.72622|HWAS|PRESENT&gt; DIMM[03]=C3C3000000000000
 10.72624|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.77655|ISTEP  6. 8 - host_update_master_tpm
 10.88747|SECURE|Security Access Bit&gt; 0x0000000000000000
 10.88748|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 10.88833|ISTEP  6. 9 - host_gard
 10.94215|ISTEP  6.10 - host_revert_sbe_mcs_setup
 10.97305|ISTEP  6.11 - host_start_occ_xstop_handler
 10.97451|ISTEP  6.12 - host_voltage_config
 11.01577|ISTEP  7. 2 - mss_volt
 11.44709|ISTEP  7. 3 - mss_freq
 11.53693|ISTEP  7. 4 - mss_eff_config
 13.25019|ISTEP  7. 5 - mss_attr_update
 13.25781|ISTEP  8. 1 - host_slave_sbe_config
 13.29298|ISTEP  8. 2 - host_setup_sbe
 13.29737|ISTEP  8. 3 - host_cbs_start
 13.30683|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 21.72595|ISTEP  8. 5 - host_attnlisten_proc
 21.72913|ISTEP  8. 6 - host_p9_fbc_eff_config
 21.73162|ISTEP  8. 7 - host_p9_eff_config_links
 21.74120|ISTEP  8. 8 - proc_attr_update
 21.74287|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 21.79077|ISTEP  8.10 - proc_xbus_scominit
 24.75064|ISTEP  8.11 - proc_xbus_enable_ridi
 24.75646|ISTEP  9. 1 - fabric_erepair
 24.92321|ISTEP  9. 2 - fabric_io_dccal
 25.74849|ISTEP  9. 3 - fabric_pre_trainadv
 25.75279|ISTEP  9. 4 - fabric_io_run_training
 25.95503|ISTEP  9. 5 - fabric_post_trainadv
 25.96030|ISTEP  9. 6 - proc_smp_link_layer
 25.96515|ISTEP  9. 7 - proc_fab_iovalid
 25.98793|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 25.99756|ISTEP 10. 1 - proc_build_smp
 26.12829|ISTEP 10. 2 - host_slave_sbe_update
 26.36009|ISTEP 10. 3 - host_set_voltages
 26.37103|ISTEP 10. 4 - proc_cen_ref_clk_enable
 26.37656|ISTEP 10. 5 - proc_enable_osclite
 26.37761|ISTEP 10. 6 - proc_chiplet_scominit
 26.40212|ISTEP 10. 7 - proc_abus_scominit
 26.40405|ISTEP 10. 8 - proc_obus_scominit
 26.48309|ISTEP 10. 9 - proc_npu_scominit
 26.50360|ISTEP 10.10 - proc_pcie_scominit
 26.54832|ISTEP 10.11 - proc_scomoverride_chiplets
 26.55045|ISTEP 10.12 - proc_chiplet_enable_ridi
 26.55575|ISTEP 10.13 - host_rng_bist
 26.56005|ISTEP 10.14 - host_update_redundant_tpm
 26.61905|ISTEP 11. 1 - host_prd_hwreconfig
 26.62495|ISTEP 12. 1 - mss_getecid
 26.63018|ISTEP 13. 1 - host_disable_memvolt
 26.64537|ISTEP 13. 2 - mem_pll_reset
 26.66118|ISTEP 13. 3 - mem_pll_initf
 26.68074|ISTEP 13. 4 - mem_pll_setup
 26.70853|ISTEP 13. 6 - mem_startclocks
 26.72605|ISTEP 13. 7 - host_enable_memvolt
 26.72780|ISTEP 13. 8 - mss_scominit
 27.04399|ISTEP 13. 9 - mss_ddr_phy_reset
 27.09884|ISTEP 13.10 - mss_draminit
 27.24509|ISTEP 13.11 - mss_draminit_training
 27.55566|ISTEP 13.12 - mss_draminit_trainadv
 27.55848|ISTEP 13.13 - mss_draminit_mc
 27.57591|ISTEP 14. 1 - mss_memdiag
 33.33935|ISTEP 14. 2 - mss_thermal_init
 33.35417|ISTEP 14. 3 - proc_pcie_config
 33.37117|ISTEP 14. 4 - mss_power_cleanup
 33.37560|ISTEP 14. 5 - proc_setup_bars
 33.41160|ISTEP 14. 6 - proc_htm_setup
 33.42048|ISTEP 14. 7 - proc_exit_cache_contained
 33.43840|ISTEP 15. 1 - host_build_stop_image
 33.87075|ISTEP 15. 2 - proc_set_pba_homer_bar
 33.87571|ISTEP 15. 3 - host_establish_ex_chiplet
 33.88584|ISTEP 15. 4 - host_start_stop_engine
 33.99173|ISTEP 16. 1 - host_activate_master
 35.10301|ISTEP 16. 2 - host_activate_slave_cores
 35.23897|ISTEP 16. 3 - host_secure_rng
 35.21590|ISTEP 16. 4 - mss_scrub
 35.26368|ISTEP 16. 5 - host_ipl_complete
 35.57792|ISTEP 16. 6 - host_load_io_ppe
 35.58098|ISTEP 18.11 - proc_tod_setup
 35.64224|ISTEP 18.12 - proc_tod_init
 35.67189|ISTEP 20. 1 - host_load_payload
 36.09882|ISTEP 20. 2 - host_load_hdat
 40.01029|ISTEP 21. 1 - host_runtime_setup
 45.31029|htmgt|OCCs are not active (rc=0x2625). Attempting OCC Reset
 45.34219|================================================
 44.78494|Error reported by hwpf (0x0900) PLID 0x9000003E
 45.37499|  HW Procedure generated error. See User Data.
 45.37500|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 45.37500|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 45.37501|  UserData1  RC value from HWP : 0x0000000000aa8432
 45.37502|  UserData2  &lt;unused&gt; : 0x0000000000000000
 45.35580|------------------------------------------------
 45.36968|  HwpReturnCode              : RC_STOP_GPE_INIT_TIMEOUT
 45.36971|  HWP Error description      : Stop GPE init timed out while waiting for SGPE Active in OCCFLG register.
 45.36972|------------------------------------------------
 45.37124|  Register FFDC              : SGPE_FFDC_REGISTERS
 45.37294|  Chip Position              : 0
 45.37295|  SCOM Register              : PU_OCB_OCI_OCCFLG_SCOM
 45.37296|    00000000 00000000 
 45.37297|  SCOM Register              : PU_GPE3_GPEXIXSR_SCOM
 45.37298|    00002000 00000000 
 45.37299|  SCOM Register              : PU_GPE3_GPEXIIAR_SCOM
 45.37300|    FFF33134 00000000 
 45.37301|  SCOM Register              : PU_GPE3_GPEXIIR_SCOM
 45.37302|    06C8001C 00000000 
 45.37302|  SCOM Register              : PU_GPE3_GPETSEL_SCOM
 45.37303|    00000000 00000000 
 45.37304|  SCOM Register              : PU_GPE3_GPEIVPR_SCOM
 45.37305|    FFF2C000 00000000 
 45.37306|  SCOM Register              : PU_GPE3_GPESTR_SCOM
 45.37307|    000FFC00 00000000 
 45.37307|  SCOM Register              : PU_GPE3_GPEMACR_SCOM
 45.37308|    1B600000 00000000 
 45.37309|  SCOM Register              : PU_GPE3_MIB_XISGB
 45.37310|    00000000 00000000 
 45.37311|  SCOM Register              : PU_GPE3_MIB_XIICAC
 45.37312|    FFF33140 10000000 
 45.37313|  SCOM Register              : PU_GPE3_MIB_XIDCAC_SCOM
 45.37314|    FFF363C0 0F000000 
 45.37315|------------------------------------------------
 45.37315|  Callout type             : Procedure Callout
 45.37316|  Procedure                : EPUB_PRC_HB_CODE
 45.37317|  Priority                 : SRCI_PRIORITY_LOW
 45.37318|------------------------------------------------
 45.37320|  Hostboot Build ID: hostboot-site_local-hostboot-hb0507a_1519.840-4189-gd3b102b/hbicore.bin
 45.37321|================================================
 45.48450|htmgt|OCCs are not active. The system will remain in safe mode (RC: 0x2616  for OCC0)
 45.29649|================================================
 45.29650|Error reported by htmgt (0x2600) PLID 0x9000003F
 45.29651|  OCCs were not loaded/started successfully
 45.29652|  ModuleId   0x00 HTMGT_MOD_LOAD_START_STATUS
 45.29653|  ReasonCode 0x2625 HTMGT_RC_OCC_START_FAIL
 45.29654|  UserData1  Failing OCC HUID : 0x0000000000050000
 45.29654|  UserData2   : 0x0000000000000000
 45.29655|------------------------------------------------
 45.29656|  Callout type             : Procedure Callout
 45.29657|  Procedure                : EPUB_PRC_HB_CODE
 45.29658|  Priority                 : SRCI_PRIORITY_LOW
 45.29659|------------------------------------------------
 45.29661|  Hostboot Build ID: hostboot-site_local-hostboot-hb0507a_1519.840-4189-gd3b102b/hbicore.bin
 45.29662|================================================
 46.46667|================================================
 46.46668|Error reported by htmgt (0x2600) PLID 0x90000040
 46.46841|  Homer pointer is nullptr, unable to communicate with the OCCs. Leaving system in safe mode.
 46.46841|  ModuleId   0x08 HTMGT_MOD_BUILD_OCCS
 46.46842|  ReasonCode 0x2616 HTMGT_RC_OCC_CRIT_FAILURE
 46.46843|  UserData1  OCC Instance : 0x0000000000000001
 46.46844|  UserData2  homer virtual address : 0x0000000000000000
 46.46845|------------------------------------------------
 46.46845|  Callout type             : Procedure Callout
 46.46846|  Procedure                : EPUB_PRC_LVL_SUPP
 46.46847|  Priority                 : SRCI_PRIORITY_MED
 46.46848|------------------------------------------------
 46.46849|  Callout type             : Procedure Callout
 46.46849|  Procedure                : EPUB_PRC_HB_CODE
 46.46850|  Priority                 : SRCI_PRIORITY_MED
 46.46851|------------------------------------------------
 46.46853|  Hostboot Build ID: hostboot-site_local-hostboot-hb0507a_1519.840-4189-gd3b102b/hbicore.bin
 46.46854|================================================
 47.02881|ISTEP 21. 2 - host_verify_hdat
 46.37122|ISTEP 21. 3 - host_start_payload
 54.10948|IPMI: shutdown requested
[   65.173225785,5] OPAL skiboot-5.6.0-158-ga1e0a047b2a0 starting...
[   65.173231653,7] initial console log level: memory 7, driver 5
[   65.173234494,6] CPU: P9 generation processor (max 4 threads/core)
[   65.173237190,7] CPU: Boot CPU PIR is 0x0034 PVR is 0x004e0100
[   65.173239926,7] CPU: Initial max PIR set to 0x7fff
[   65.174380479,7] OPAL table: 0x300de240 .. 0x300de730, branch table: 0x30002000
[   65.174385226,7] Assigning physical memory map table for nimbus
[   65.174389506,7] Parsing HDAT...
[   65.174391547,5] SPIRA-S found.
[   65.174396831,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   65.174401636,6] SP Family is ibm,ast2500,openbmc
[   65.174410643,7] LPC: IOPATH chip id = 0
[   65.174412554,7] LPC: FW BAR       = f0000000
[   65.174414635,7] LPC: MEM BAR      = e0000000
[   65.174416710,7] LPC: IO BAR       = d0010000
[   65.174418781,7] LPC: Internal BAR = c0012000
[   65.174435810,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   65.174439664,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   65.175061026,5] UART: Using UART at 0x60300d00103f8
[   65.175924371,3] I2C: HDAT device array has no version! Assuming v1
[   65.176322345,3] I2C: HDAT device array has no version! Assuming v1
[   65.176783271,5] P9 DD1.02 detected
[   65.176833191,5] CHIP: Chip ID 0000 type: P9N DD1.0
[   65.176880664,5] P9 DD1.02 detected
[   65.176905306,5] CHIP: Chip ID 0008 type: P9N DD1.0
[   65.177135019,5] SLW: Enabling: stop0_lite
[   65.177257026,5] PLAT: Using virtual UART
[   65.177395304,7] LPC: LPC: Routing irq 9, policy: 0 (r=1)
[   65.177397978,7] LPC: LPC: SerIRQ 9 using route 0 targetted at OPAL
[   65.177569266,5] PLAT: Detected Witherspoon platform
[   65.202554119,5] CPU: All 32 processors called in...
[    1.082346656,5] FLASH: Found system flash:  id:0
[    1.082428112,5] BT: Interface initialized, IO 0x00e4
[    1.082467584,7] LPC: LPC: Routing irq 10, policy: 0 (r=1)
[    1.082469968,7] LPC: LPC: SerIRQ 10 using route 1 targetted at OPAL
[    2.031432864,5] NVRAM: Size is 576 KB
[    2.344306064,5] STB: secure and trusted boot not supported
[    2.344375952,5] OPAL: Using OPAL UART console
[    2.344423520,7] LPC: LPC: Routing irq 4, policy: 0 (r=1)
[    2.344425840,7] LPC: LPC: SerIRQ 4 using route 2 targetted at OPAL
[   13.001872096,5] PCI: Probing slots...
[   13.058382640,3] PCI: built-in device not found:  (loc: 100)
[   13.058446832,3] PCI: built-in device not found: GPU0 down (loc: 250)
[   13.058497376,3] PCI: built-in device not found: GPU0 (loc: 400)
[   13.058528592,3] PCI: built-in device not found: GPU1 down (loc: 258)
[   13.058561776,3] PCI: built-in device not found: GPU1 (loc: 500)
[   13.058593888,3] PCI: built-in device not found: GPU2 down (loc: 260)
[   13.058627072,3] PCI: built-in device not found: GPU2 (loc: 600)
[   13.058668496,3] PCI: built-in device not found:  (loc: 100)
[   13.058715520,3] PCI: built-in device not found: GPU3 down (loc: 220)
[   13.058746288,3] PCI: built-in device not found: GPU3 (loc: 300)
[   13.058779152,3] PCI: built-in device not found: GPU4 down (loc: 228)
[   13.058811952,3] PCI: built-in device not found: GPU4 (loc: 400)
[   13.058845456,3] PCI: built-in device not found: GPU5 down (loc: 268)
[   13.058877168,3] PCI: built-in device not found: GPU5 (loc: 500)
[   13.058918160,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.058970592,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.059014576,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   13.059061104,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   13.059141328,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   13.059203136,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.059248768,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[   13.059297984,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[   13.059372064,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   13.059433648,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   13.059505440,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[   13.059571552,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[   13.059637840,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[   13.059697712,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.059762192,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.059818160,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.059873376,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.059936272,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   13.059988432,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.060041232,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.060133888,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   13.060201216,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   13.060265952,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   13.060327632,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   13.060402480,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   13.060465152,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   13.060527152,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   13.060587232,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   13.060650064,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   13.060711760,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   13.060773680,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   13.060840992,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   13.060911264,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.060958208,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.061003536,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.061050896,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.126614880,5] INIT: Waiting for kernel...
[   13.126657312,5] INIT: 64-bit LE kernel discovered
[   13.126759840,3] OCC: Chip: 0 PState table is not valid
[   13.126793936,3] OCC: Initialization on all chips did not complete(timed out)
[   13.152812896,5] INIT: Starting kernel at 0x20010000, fdt at 0x3091ac68 263566 bytes)
[   14.454937376,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000200fff7f0000
[    0.000000] Mapped range 0x0 - 0x1000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x201000000000 with 0x40000000
[    0.000000] Process table c000200ffe800000 and radix root for kernel: c0000000013e0000
[    0.000000] Linux version 4.11.6-openpower1 (hostboot@gfw292.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02.2-00007-g23118ce) ) #2 SMP Thu Jun 29 10:45:06 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x2000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0xfffffffff]
[    0.000000] numa:   NODE_DATA [mem 0xfffff6700-0xfffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x200fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x200fff754700-0x200fff75dfff]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x200fff726700-0x200fff72ffff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x200fff71ce00-0x200fff7266ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x200fff713500-0x200fff71cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x200fff709c00-0x200fff7134ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x200fff700300-0x200fff709bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x200fff6f6a00-0x200fff7002ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[[   15.088488960,4] IPMI: Dropped eSEL: BMC code is buggy/missing
    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201400000..0x000603020151ffff -&gt; 0x0006030201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201400000..0x000623020151ffff -&gt; 0x0006230201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000200fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000000ffc4c0000 s66328 r0 d64744 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 2095360
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 133925888K/134217728K available (6208K kernel code, 832K rwdata, 2020K rodata, 11264K init, 1656K bss, 291840K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000299] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000665] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001127] Console: colour dummy device 80x25
[    0.003453] console [tty0] enabled
[    0.003622] console [hvc0] enabled
[    0.003622] console [hvc0] enabled
[    0.003805] bootconsole [udbg0] disabled
[    0.003805] bootconsole [udbg0] disabled
[    0.004794] pid_max: default: 32768 minimum: 301
[    0.007816] Security Framework initialized
[    0.010978] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.108436] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.145652] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.145848] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.151467] EEH: PowerNV platform initialized
[    0.151613] POWER9 performance monitor hardware support registered
[    0.152586] smp: Bringing up secondary CPUs ...
[    0.170772] smp: Brought up 8 nodes, 32 CPUs
[    0.170928] numa: Node 0 CPUs: 0-23
[    0.171015] numa: Node 8 CPUs: 24-31
[    0.171110] numa: Node 250 CPUs:
[    0.171195] numa: Node 251 CPUs:
[    0.171256] numa: Node 252 CPUs:
[    0.171318] numa: Node 253 CPUs:
[    0.171385] numa: Node 254 CPUs:
[    0.171448] numa: Node 255 CPUs:
[    0.181465] devtmpfs: initialized
[    0.196597] evm: security.capability
[    0.197386] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.197632] futex hash table entries: 8192 (order: 4, 1048576 bytes)
[    0.199132] NET: Registered protocol family 16
[    0.200074] cpuidle: using governor menu
[    0.219307] PCI: Probing PCI hardware
[    0.219450] PCI host bridge to bus 0000:00
[    0.219541] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.219740] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
[    0.219918] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.220476] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.220753] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.220979] PCI host bridge to bus 0001:00
[    0.221052] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.221273] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
[    0.221450] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.221924] pci 0001:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.222179] pci 0001:00:00.0: PCI bridge to [bus 01-ff]
[    0.222397] PCI host bridge to bus 0002:00
[    0.222484] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.222691] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
[    0.222863] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.223952] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.224736] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.225000] PCI host bridge to bus 0003:00
[    0.225073] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.225276] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
[    0.225452] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.225943] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.226210] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.226427] PCI host bridge to bus 0004:00
[    0.226504] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.226717] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
[    0.226889] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.230073] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.232700] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.236161] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.236455] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.236715] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.236990] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.237293] PCI host bridge to bus 0005:00
[    0.237375] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.237581] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.237753] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.239549] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.239903] PCI host bridge to bus 0030:00
[    0.239975] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.240179] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
[    0.240302] random: fast init done
[    0.240431] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.240914] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.241209] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.241447] PCI host bridge to bus 0033:00
[    0.241529] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.241732] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
[    0.241901] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.242408] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.242701] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.242926] PCI host bridge to bus 0034:00
[    0.243015] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.243223] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
[    0.243394] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.243924] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.244195] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.244427] PCI host bridge to bus 0035:00
[    0.244499] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.244679] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
[    0.244850] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.245368] pci 0035:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.245655] pci 0035:00:00.0: PCI bridge to [bus 01-ff]
[    0.245877] PCI host bridge to bus 0006:00
[    0.245963] pci_bus 0006:00: root bus resource [mem 0x6030201400000-0x603020151ffff]
[    0.246116] pci_bus 0006:00: root bus resource [bus 00-ff]
[   15.330347232,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.248106] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   15.330522752,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.248410] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   15.330675808,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.248709] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    0.248941] PCI host bridge to bus 0007:00
[    0.248998] pci_bus 0007:00: root bus resource [mem 0x6230201400000-0x623020151ffff]
[    0.249164] pci_bus 0007:00: root bus resource [bus 00-ff]
[   15.331938352,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.251222] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   15.332113392,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.251547] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   15.332279664,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.251838] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    0.252048] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.252255] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.252455] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.253041] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.253218] pci 0001:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.253422] pci 0001:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.253618] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.254185] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.254372] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.254508] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.254678] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.254802] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.254923] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.255088] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.255245] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.255356] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.255490] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.256068] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.256657] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.268575] IOMMU table initialized, virtual merging enabled
[    0.268689] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.269008] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.269126] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.269236] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.269409] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.269966] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.270076] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.270247] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.270483] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.270685] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.270856] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.271423] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.271725] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.271899] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.272061] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.272231] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.272390] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.272552] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.272717] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    0.272875] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    0.273041] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    0.273202] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.273320] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.273450] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.273576] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.273709] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.273881] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.274038] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.274161] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.274277] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.274399] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.274529] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.274690] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.274840] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.274964] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.275091] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.275212] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.275341] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.275455] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.275582] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.275705] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.275831] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.275920] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.276066] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.276646] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.277200] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.289132] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.289281] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.289403] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.289509] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.289671] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.289854] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.289980] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.290106] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.290240] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.290819] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.290925] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.291041] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.291235] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.291828] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.303756] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.303909] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.304030] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.304132] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.304301] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.304490] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.304762] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
[    0.304938] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.305136] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.305337] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.305538] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.305735] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.305928] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.306132] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.306717] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.307282] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.319179] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.319329] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.319451] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.319566] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.319811] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.320014] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.320209] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.320778] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.320947] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.321154] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.321328] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.321919] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.322078] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.322261] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.322454] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.323034] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.323193] pci 0035:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.323398] pci 0035:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.323591] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.324146] pci 0035:00:00.0: PCI bridge to [bus 01]
[    0.324289] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201400000-0x603020141ffff 64bit]
[    0.324506] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201420000-0x603020143ffff 64bit]
[    0.324705] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201440000-0x603020145ffff 64bit]
[    0.324915] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201460000-0x603020147ffff 64bit]
[    0.325125] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201480000-0x603020149ffff 64bit]
[    0.325341] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302014a0000-0x60302014bffff 64bit]
[    0.325553] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302014c0000-0x60302014cffff 64bit]
[    0.325763] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302014d0000-0x60302014dffff 64bit]
[    0.325959] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302014e0000-0x60302014effff 64bit]
[    0.326172] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302014f0000-0x60302014fffff 64bit]
[    0.326382] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201500000-0x603020150ffff 64bit]
[    0.326594] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201510000-0x603020151ffff 64bit]
[    0.326817] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201400000-0x623020141ffff 64bit]
[    0.327037] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201420000-0x623020143ffff 64bit]
[    0.327255] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201440000-0x623020145ffff 64bit]
[    0.327480] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201460000-0x623020147ffff 64bit]
[    0.327705] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201480000-0x623020149ffff 64bit]
[    0.327916] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302014a0000-0x62302014bffff 64bit]
[    0.328113] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302014c0000-0x62302014cffff 64bit]
[    0.328327] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302014d0000-0x62302014dffff 64bit]
[    0.328538] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302014e0000-0x62302014effff 64bit]
[    0.328766] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302014f0000-0x62302014fffff 64bit]
[    0.328950] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201500000-0x623020150ffff 64bit]
[    0.329160] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201510000-0x623020151ffff 64bit]
[    0.329375] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.329507] pci 0006:00:00.1: Associating to existing PE d
[    0.329618] pci 0006:00:01.0: Associating to existing PE d
[    0.329729] pci 0006:00:01.1: Associating to existing PE d
[    0.329825] pci 0006:00:02.0: Associating to existing PE d
[    0.329944] pci 0006:00:02.1: Associating to existing PE d
[    0.330056] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.330179] pci 0007:00:00.1: Associating to existing PE d
[    0.330290] pci 0007:00:01.0: Associating to existing PE d
[    0.330404] pci 0007:00:01.1: Associating to existing PE d
[    0.330519] pci 0007:00:02.0: Associating to existing PE d
[    0.330634] pci 0007:00:02.1: Associating to existing PE d
[    0.336925] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.349462] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.349661] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.349780] vgaarb: loaded
[    0.350341] SCSI subsystem initialized
[    0.350604] usbcore: registered new interface driver usbfs
[    0.350707] usbcore: registered new interface driver hub
[    0.351561] usbcore: registered new device driver usb
[    0.351735] pps_core: LinuxPPS API ver. 1 registered
[    0.351834] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.352020] PTP clock support registered
[    0.352853] clocksource: Switched to clocksource timebase
[    0.359221] NET: Registered protocol family 2
[    0.359718] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.363349] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.363900] TCP: Hash tables configured (established 524288 bind 65536)
[    0.364169] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.365526] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.367391] NET: Registered protocol family 1
[    6.610785] Initialise system trusted keyrings
[    6.610996] workingset: timestamp_bits=54 max_order=21 bucket_order=0
[    6.619530] Key type asymmetric registered
[    6.619602] Asymmetric key parser 'x509' registered
[    6.619733] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    6.619892] io scheduler noop registered
[    6.620710] io scheduler cfq registered (default)
[    6.620789] io scheduler mq-deadline registered
[    6.622592] ipmi message handler version 39.2
[    6.622679] ipmi device interface
[    6.622859] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    6.645124] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    6.671391] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    6.671509] hvc0: No interrupts property, using OPAL event
[    6.672188] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    6.673152] [drm] radeon kernel modesetting enabled.
[    6.682308] brd: module loaded
[    6.692329] loop: module loaded
[    6.692773] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    6.702997] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    6.703131] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    6.704384] scsi host0: ahci
[    6.704708] scsi host1: ahci
[    6.705078] scsi host2: ahci
[    6.705403] scsi host3: ahci
[    6.705578] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    6.705731] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    6.705890] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    6.706047] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    6.706392] libphy: Fixed MDIO Bus: probed
[    6.706514] tg3.c:v3.137 (May 11, 2014)
[    6.706610] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    6.738457] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    6.739159] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    6.739367] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    6.739560] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    6.739720] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    6.739969] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    6.769877] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    6.770511] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    6.770714] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    6.770914] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    6.771070] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    6.771476] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    6.771575] ehci-pci: EHCI PCI platform driver
[    6.771743] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    6.771866] ohci-pci: OHCI PCI platform driver
[    6.772094] usbcore: registered new interface driver usb-storage
[    6.832918] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    6.833026] i2c /dev entries driver
[    6.833564] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.834051] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.834547] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.835015] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.835519] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.987923] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.988415] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.988921] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.989418] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.034139] ata3: SATA link down (SStatus 0 SControl 300)
[    7.053179] ata4: SATA link down (SStatus 0 SControl 300)
[    7.163369] powernv-cpufreq: ibm,pstate-min node not found
[    7.163468] powernv-cpufreq: Platform driver disabled. System does not support PState control
[    7.164034] usbcore: registered new interface driver usbhid
[    7.164139] usbhid: USB HID core driver
[    7.164608] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    7.165052] NET: Registered protocol family 17
[    7.165171] Key type dns_resolver registered
[    7.165597] registered taskstats version 1
[    7.165696] Loading compiled-in X.509 certificates
[    7.176644] Loaded X.509 cert 'Build time autogenerated kernel key: 1fb433d78d9c4f675024be6f2c3668604705877e'
[    7.191467] Key type encrypted registered
[    7.191551] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    7.191754] evm: HMAC attrs: 0x1
[    7.222842] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.232842] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.234412] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.234553] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.235296] ata1.00: configured for UDMA/133
[    7.235900] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.252972] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.253087] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.253158] rtc-opal opal-rtc: setting system clock to 2017-06-29 21:47:44 UTC (1498772864)
[    7.254027] ata2.00: configured for UDMA/133
[    7.254568] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.256791] Freeing unused kernel memory: 11264K
[    7.256872] This architecture does not have kernel memory protection.
[    7.297071] udevd[1627]: starting version 3.2.1
[    7.304231] udevd[1628]: starting eudev-3.2.1
[    7.384432] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    7.384724] [drm] platform has no IO space, trying MMIO
[    7.384829] [drm] VGA not enabled on entry, requesting chip POST
[    7.384973] [drm] Using P2A bridge for configuration
[    7.385077] [drm] AST 2500 detected
[    7.385154] [drm] Analog VGA only
[    7.385269] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    7.385553] [TTM] Zone  kernel: Available graphics memory: 66968576 kiB
[    7.385650] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    7.385794] [TTM] Initializing pool allocator
[    7.391415] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    7.392790] scsi 0:0:0:0: Attached scsi generic sg0 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.4.3-p9f74a13)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot Info: Waiting for device discovery[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 897da8b2-1502-4d88-b7c1-89f213007a57][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-gd40f5c5[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-gd40f5c5 (recovery mode)[14;54H[0;7m [10B[53D[mBooting in 9 sec: Ubuntu[24;13H8[24;26H[24;13H7[24;26H[24;13H6[24;26H[24;13H5[24;26H[24;13H4[24;26H[24;13H3[24;26H[24;13H2[24;26H[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/vmlinux-4.10.0-gd4[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/initrd.img-4.10.0-gd40f5[?7lc[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
[H[J[24;1H[?1l&gt;Sent SIGKILL to all processes
[   21.955251] kexec_core: Starting new kernel
[   37.199702688,5] OPAL: Switch to big-endian OS
[   37.284545664,5] OPAL: Switch to little-endian OS
opal: OPAL detected !
Page sizes from device-tree:
Page size shift = 12 AP=0x0
Page size shift = 16 AP=0x5
Page size shift = 21 AP=0x1
Page size shift = 30 AP=0x2
Initializing Radix MMU
Partition table c000200fff7f0000
Mapping range 0x0 - 0x1000000000 with 0x40000000
Mapping range 0x200000000000 - 0x201000000000 with 0x40000000
Process table c000200ffe800000 and radix root for kernel: c000000001060000
Linux version 4.10.0-gd40f5c5 (rgrimm@bml86) (gcc version 5.4.0 20160609 (Ubuntu/IBM 5.4.0-6ubuntu1~16.04.4) ) #1 SMP Wed Mar 15 01:52:47 CDT 2017
Found initrd at 0xc000000002730000:0xc00000000354b4ff
OPAL: Found memory mapped LPC bus on chip 0
Using PowerNV machine description
bootconsole [udbg0] enabled
CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
-----------------------------------------------------
ppc64_pft_size    = 0x0
phys_mem_size     = 0x2000000000
dcache_bsize      = 0x80
icache_bsize      = 0x80
cpu_features      = 0x477c7afd18500249
  possible        = 0x7fffffff18500649
  always          = 0x0000000018100040
cpu_user_features = 0xdc0065c2 0xaec00000
mmu_features      = 0x3c004041
firmware_features = 0x0000000010000000
-----------------------------------------------------
cma: Reserved 6560 MiB at 0x0000200e63000000
numa: Initmem setup node 0 [mem 0x00000000-0xfffffffff]
numa:   NODE_DATA [mem 0xfffff6300-0xfffffffff]
numa: Initmem setup node 8 [mem 0x200000000000-0x200fffffffff]
numa:   NODE_DATA [mem 0x200fff753300-0x200fff75cfff]
numa: Initmem setup node 250
numa:   NODE_DATA [mem 0x200fff726300-0x200fff72ffff]
numa:     NODE_DATA(250) on node 8
numa: Initmem setup node 251
numa:   NODE_DATA [mem 0x200fff71c600-0x200fff7262ff]
numa:     NODE_DATA(251) on node 8
numa: Initmem setup node 252
numa:   NODE_DATA [mem 0x200fff712900-0x200fff71c5ff]
numa:     NODE_DATA(252) on node 8
numa: Initmem setup node 253
numa:   NODE_DATA [mem 0x200fff708c00-0x200fff7128ff]
numa:     NODE_DATA(253) on node 8
numa: Initmem setup node 254
numa:   NODE_DATA [mem 0x200fff6fef00-0x200fff708bff]
numa:     NODE_DATA(254) on node 8
numa: Initmem setup node 255
numa:   NODE_DATA [mem 0x200fff6f5200-0x200fff6feeff]
numa:     NODE_DATA(255) on node 8
Initializing IODA2 PHB (/pciex@600c3c0000000)
PCI host bridge /pciex@600c3c0000000 (primary) ranges:
 MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x4000000000 [segment=0x40000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
Initializing IODA2 PHB (/pciex@600c3c0100000)
PCI host bridge /pciex@600c3c0100000  ranges:
 MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
Initializing IODA2 PHB (/pciex@600c3c0200000)
PCI host bridge /pciex@600c3c0200000  ranges:
 MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
Initializing IODA2 PHB (/pciex@600c3c0300000)
PCI host bridge /pciex@600c3c0300000  ranges:
 MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x4000000000 [segment=0x40000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
Initializing IODA2 PHB (/pciex@600c3c0400000)
PCI host bridge /pciex@600c3c0400000  ranges:
 MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
Initializing IODA2 PHB (/pciex@600c3c0500000)
PCI host bridge /pciex@600c3c0500000  ranges:
 MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
Initializing IODA2 PHB (/pciex@620c3c0000000)
PCI host bridge /pciex@620c3c0000000  ranges:
 MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x4000000000 [segment=0x40000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
Initializing IODA2 PHB (/pciex@620c3c0300000)
PCI host bridge /pciex@620c3c0300000  ranges:
 MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x4000000000 [segment=0x40000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
Initializing IODA2 PHB (/pciex@620c3c0400000)
PCI host bridge /pciex@620c3c0400000  ranges:
 MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
Initializing IODA2 PHB (/pciex@620c3c0500000)
PCI host bridge /pciex@620c3c0500000  ranges:
 MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x4000000000 [segment=0x80000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
OPAL nvram setup, 589824 bytes
Zone ranges:
  DMA      [mem 0x0000000000000000-0x0000200fffffffff]
  DMA32    empty
  Normal   empty
Movable zone start for each node
Early memory node ranges
  node   0: [mem 0x0000000000000000-0x0000000fffffffff]
  node   8: [mem 0x0000200000000000-0x0000200fffffffff]
Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
Could not find start_pfn for node 250
Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
Could not find start_pfn for node 251
Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
Could not find start_pfn for node 252
Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
Could not find start_pfn for node 253
Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
Could not find start_pfn for node 254
Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
Could not find start_pfn for node 255
Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
percpu: Embedded 3 pages/cpu @c000000ffb9c0000 s125848 r0 d70760 u196608
Built 8 zonelists in Node order, mobility grouping on.  Total pages: 2095104
Policy zone: DMA
Kernel command line: root=/dev/mapper/w54L--vg-root ro
log_buf_len individual max cpu contribution: 8192 bytes
log_buf_len total cpu_extra contributions: 253952 bytes
log_buf_len min size: 262144 bytes
log_buf_len: 524288 bytes
early log buf free: 250116(95%)
PID hash table entries: 4096 (order: -1, 32768 bytes)
Memory: 127179968K/134217728K available (11136K kernel code, 1280K rwdata, 3608K rodata, 704K init, 1292K bss, 320320K reserved, 6717440K cma-reserved)
SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=256
Hierarchical RCU implementation.
	Build-time adjustment of leaf fanout to 64.
	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
NR_IRQS:512 nr_irqs:512 16
XICS: Using OPAL ICP fallbacks
ICS OPAL backend registered
time_init: 56 bit decrementer (max: 7fffffffffffff)
clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
clocksource: timebase mult[1f40000] shift[24] registered
Console: colour dummy device 80x25
console [hvc0] enabled
console [hvc0] enabled
bootconsole [udbg0] disabled
bootconsole [udbg0] disabled
mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
pid_max: default: 32768 minimum: 301
Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
EEH: PowerNV platform initialized
POWER9 performance monitor hardware support registered
smp: Bringing up secondary CPUs ...
smp: Brought up 8 nodes, 32 CPUs
numa: Node 0 CPUs: 0-23
numa: Node 8 CPUs: 24-31
numa: Node 250 CPUs:
numa: Node 251 CPUs:
numa: Node 252 CPUs:
numa: Node 253 CPUs:
numa: Node 254 CPUs:
numa: Node 255 CPUs:
devtmpfs: initialized
kworker/u65:0 (204) used greatest stack depth: 12288 bytes left
clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
futex hash table entries: 8192 (order: 4, 1048576 bytes)
NET: Registered protocol family 16
cpuidle: using governor menu
pstore: using zlib compression
pstore: Registered nvram as persistent store backend
PCI: Probing PCI hardware
PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
pci_bus 0000:00: root bus resource [bus 00-ff]
pci 0000:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0001:00
pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
pci_bus 0001:00: root bus resource [bus 00-ff]
pci 0001:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0002:00
pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
pci_bus 0002:00: root bus resource [bus 00-ff]
pci 0002:00:00.0: PCI bridge to [bus 01-02]
pci 0002:01:00.0: PCI bridge to [bus 02]
PCI host bridge to bus 0003:00
pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
pci_bus 0003:00: root bus resource [bus 00-ff]
pci 0003:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0004:00
pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
pci_bus 0004:00: root bus resource [bus 00-ff]
pci 0004:00:00.0: PCI bridge to [bus 01-06]
pci 0004:01:00.0: PCI bridge to [bus 02-06]
pci 0004:02:02.0: PCI bridge to [bus 03]
pci 0004:02:0a.0: PCI bridge to [bus 04]
pci 0004:02:0b.0: PCI bridge to [bus 05]
pci 0004:02:0c.0: PCI bridge to [bus 06]
PCI host bridge to bus 0005:00
pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
pci_bus 0005:00: root bus resource [bus 00-ff]
pci 0005:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0030:00
pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
pci_bus 0030:00: root bus resource [bus 00-ff]
pci 0030:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0033:00
pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
pci_bus 0033:00: root bus resource [bus 00-ff]
pci 0033:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0034:00
pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
pci_bus 0034:00: root bus resource [bus 00-ff]
pci 0034:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0035:00
pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
pci_bus 0035:00: root bus resource [bus 00-ff]
pci 0035:00:00.0: PCI bridge to [bus 01]
pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0000:00:00.0: PCI bridge to [bus 01]
pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0001:00:00.0: PCI bridge to [bus 01]
pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
IOMMU table initialized, virtual merging enabled
pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
pci 0002:01:00.0: PCI bridge to [bus 02]
pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
pci 0002:00:00.0: PCI bridge to [bus 01-02]
pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0003:00:00.0: PCI bridge to [bus 01]
pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
pci 0004:02:02.0: PCI bridge to [bus 03]
pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
pci 0004:02:0a.0: PCI bridge to [bus 04]
pci 0004:02:0b.0: PCI bridge to [bus 05]
pci 0004:02:0c.0: PCI bridge to [bus 06]
pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
pci 0004:01:00.0: PCI bridge to [bus 02-06]
pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
pci 0004:00:00.0: PCI bridge to [bus 01-06]
pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
random: fast init done
pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
pci 0005:00:00.0: PCI bridge to [bus 01]
pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0030:00:00.0: PCI bridge to [bus 01]
pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0033:00:00.0: PCI bridge to [bus 01]
pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0034:00:00.0: PCI bridge to [bus 01]
pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0035:00:00.0: PCI bridge to [bus 01]
EEH: PCI Enhanced I/O Error Handling Enabled
powernv:idle: Default stop: psscr = 0x0000000000000330,mask=0x00000000003003ff
powernv:idle: Deepest stop: psscr = 0x0000000000000330,mask=0x00000000003003ff
powernv:idle: RL value of first deep stop = 0xf
powernv: idle: Saving PACA pointers of all CPUs in their thread sibling PACA
HugeTLB registered 2 MB page size, pre-allocated 0 pages
HugeTLB registered 1 GB page size, pre-allocated 0 pages
pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
pci 0002:02:00.0: vgaarb: bridge control possible
vgaarb: loaded
SCSI subsystem initialized
usbcore: registered new interface driver usbfs
usbcore: registered new interface driver hub
usbcore: registered new device driver usb
pps_core: LinuxPPS API ver. 1 registered
pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
PTP clock support registered
clocksource: Switched to clocksource timebase
NET: Registered protocol family 2
TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
TCP: Hash tables configured (established 524288 bind 65536)
UDP hash table entries: 65536 (order: 5, 2097152 bytes)
UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
NET: Registered protocol family 1
RPC: Registered named UNIX socket transport module.
RPC: Registered udp transport module.
RPC: Registered tcp transport module.
RPC: Registered tcp NFSv4.1 backchannel transport module.
Trying to unpack rootfs image as initramfs...
Freeing initrd memory: 14400K
audit: initializing netlink subsys (disabled)
audit: type=2000 audit(1498772880.940:1): initialized
workingset: timestamp_bits=38 max_order=21 bucket_order=0
NFS: Registering the id_resolver key type
Key type id_resolver registered
Key type id_legacy registered
Block layer SCSI generic (bsg) driver version 0.4 loaded (major 251)
io scheduler noop registered
io scheduler deadline registered
io scheduler cfq registered (default)
Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
Console: switching to colour frame buffer device 128x48
fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
ipmi message handler version 39.2
ipmi device interface
ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
hvc0: No interrupts property, using OPAL event
Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[drm] Initialized
[drm] platform has no IO space, trying MMIO
[drm] AST 2500 detected
[drm] Analog VGA only
[drm] dram -1094967296 7 16 01000000
[TTM] Zone  kernel: Available graphics memory: 66955904 kiB
[TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[TTM] Initializing pool allocator
fb: switching to astdrmfb from OFfb vga
Console: switching to colour dummy device 80x25
Console: switching to colour frame buffer device 128x48
ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
brd: module loaded
loop: module loaded
Uniform Multi-Platform E-IDE driver
ide-gd driver 1.18
ide-cd driver 5.00
ipr: IBM Power RAID SCSI Device Driver version: 2.6.3 (October 17, 2015)
ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
scsi host0: ahci
scsi host1: ahci
scsi host2: ahci
scsi host3: ahci
ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
libphy: Fixed MDIO Bus: probed
bnx2x: QLogic 5771x/578xx 10/20-Gigabit Ethernet Driver bnx2x 1.712.30-0 (2014/02/10)
tg3.c:v3.137 (May 11, 2014)
tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
eth0: bogus network driver initialization
No IRQ retreived
e100: Intel(R) PRO/100 Network Driver, 3.5.24-k2-NAPI
e100: Copyright(c) 1999-2006 Intel Corporation
e1000: Intel(R) PRO/1000 Network Driver - version 7.3.21-k8-NAPI
e1000: Copyright (c) 1999-2006 Intel Corporation.
e1000e: Intel(R) PRO/1000 Network Driver - 3.2.6-k
e1000e: Copyright(c) 1999 - 2015 Intel Corporation.
i40e: Intel(R) Ethernet Connection XL710 Network Driver - version 1.6.25-k
i40e: Copyright (c) 2013 - 2014 Intel Corporation.
ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
ehci-pci: EHCI PCI platform driver
ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
ohci-pci: OHCI PCI platform driver
usbcore: registered new interface driver usb-storage
mousedev: PS/2 mouse device common for all mice
rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
device-mapper: uevent: version 1.0.3
device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
powernv-cpufreq: ibm,pstate-min node not found
powernv-cpufreq: Platform driver disabled. System does not support PState control
usbcore: registered new interface driver usbhid
usbhid: USB HID core driver
oprofile: using timer interrupt.
ipip: IPv4 and MPLS over IPv4 tunneling driver
NET: Registered protocol family 10
Segment Routing with IPv6
sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
NET: Registered protocol family 17
Key type dns_resolver registered
registered taskstats version 1
console [netcon0] enabled
netconsole: network logging started
rtc-opal opal-rtc: setting system clock to 2017-06-29 21:48:01 UTC (1498772881)
ata4: SATA link down (SStatus 0 SControl 300)
ata3: SATA link down (SStatus 0 SControl 300)
ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
ata1.00: configured for UDMA/133
ata2.00: configured for UDMA/133
scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
sd 0:0:0:0: Attached scsi generic sg0 type 0
sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
sd 0:0:0:0: [sda] 4096-byte physical blocks
sd 0:0:0:0: [sda] Write Protect is off
sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
Alternate GPT is invalid, using primary GPT.
 sda: sda1 sda2 sda3
sd 0:0:0:0: [sda] Attached SCSI removable disk
sd 1:0:0:0: Attached scsi generic sg1 type 0
sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
sd 1:0:0:0: [sdb] 4096-byte physical blocks
sd 1:0:0:0: [sdb] Write Protect is off
sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
sd 1:0:0:0: [sdb] Attached SCSI removable disk
Freeing unused kernel memory: 704K
This architecture does not have kernel memory protection.
Loading, please wait...
exe (1718) used greatest stack depth: 12208 bytes left
starting version 232
ata_id (1741) used greatest stack depth: 11056 bytes left
tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
random: crng init done
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ...   WARNING: Failed to connect to lvmetad. Falling back to device scanning.
  WARNING: Failed to connect to lvmetad. Falling back to device scanning.
  Volume group "w45L-vg" not found
  Cannot process volume group w45L-vg
done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/mapper/w54L--vg-root] fsck.ext4 -a -C0 /dev/mapper/w54L--vg-root 
/dev/mapper/w54L--vg-root: clean, 80170/52428800 files, 4038020/209715200 blocks
done.
EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
ip_tables: (C) 2000-2006 Netfilter Core Team
systemd[1]: Configuration file /etc/systemd/system.conf.d/htxsystemdcustom.conf is marked executable. Please remove executable permission bits. Proceeding anyway.
systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu Zesty Zapus (development branch)[0m!

systemd[1]: Set hostname to &lt;w54L&gt;.
netplan (1833) used greatest stack depth: 11024 bytes left
systemd-fstab-g (1836) used greatest stack depth: 10496 bytes left
systemd[1]: Listening on Device-mapper event daemon FIFOs.
[[0;32m  OK  [0m] Listening on Device-mapper event daemon FIFOs.
systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
systemd[1]: Listening on LVM2 poll daemon socket.
[[0;32m  OK  [0m] Listening on LVM2 poll daemon socket.
systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
systemd[1]: Listening on Syslog Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Created slice system-systemd\x2dfsck.slice.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on Journal Socket.
[[0;32m  OK  [0m] Started Read required files in advance.
         Starting Uncomplicated firewall...
         Starting Set the console keyboard layout...
         Starting Nameserver information manager...
         Starting Load Kernel Modules...
[[0;32m  OK  [0m] Listening on LVM2 metadata daemon socket.
         Mounting Debug File System...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
         Mounting POSIX Message Queue File System...
         Starting Monitoring of LVM2 mirrors\xe2\x80\xa6ng dmeventd or progress polling...
[[0;32m  OK  [0m] Reached target Slices.
         Starting Journal Service...
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started LVM2 metadata daemon.
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Flush Journal to Persistent Storage...
         Starting Load/Save Random Seed...
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Found device NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Found device ST1000NX0313_00LY266_00LY265IBM 2.
[[0;32m  OK  [0m] Found device /dev/mapper/w54L--vg-swap_1.
         Activating swap /dev/mapper/w54L--vg-swap_1...
[[0;32m  OK  [0m] Activated swap /dev/mapper/w54L--vg-swap_1.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started Monitoring of LVM2 mirrors,\xe2\x80\xa6sing dmeventd or progress polling.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
         Starting File System Check on /dev/\xe2\x80\xa68b2-1502-4d88-b7c1-89f213007a57...
[[0;32m  OK  [0m] Started File System Check Daemon to report status.
[[0;32m  OK  [0m] Started File System Check on /dev/d\xe2\x80\xa6da8b2-1502-4d88-b7c1-89f213007a57.
         Mounting /boot...
[[0;32m  OK  [0m] Mounted /boot.
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Set console font and keymap...
         Starting Create Volatile Files and Directories...
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
         Starting Tell Plymouth To Write Out Runtime Data...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Network Time Synchronization...
         Starting Update UTMP about System Boot/Shutdown...
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting LSB: Start htx daemon...
         Starting LSB: Example initscript...
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
         Starting LSB: Start opensm subnet manager....
         Starting LSB: daemon to balance interrupts for SMP systems...
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
         Starting Login Service...
         Starting Accounts Service...
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started LSB: Example initscript.
[[0;32m  OK  [0m] Started LSB: Start opensm subnet manager..
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
         Starting Permit User Sessions...
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Terminate Plymouth Boot Screen...
         Starting Hold until boot process finishes up...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Started LSB: Start htx daemon.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu Zesty Zapus (development branch) w54L hvc0

w54L login: </msg>
<status status="PASS" endtime="20170629 21:50:18.990" starttime="20170629 21:50:18.940"></status>
</kw>
<status status="PASS" endtime="20170629 21:50:18.990" starttime="20170629 21:49:55.604"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" endtime="20170629 21:50:18.990" critical="yes" starttime="20170629 21:45:42.399">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20170629 21:50:18.991" starttime="20170629 21:45:42.369"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20170629 21:50:18.994" starttime="20170629 21:45:35.591"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
