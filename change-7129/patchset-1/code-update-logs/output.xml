<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171009 15:58:37.352" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:38.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:38.576" starttime="20171009 15:58:38.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:38.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:38.577" starttime="20171009 15:58:38.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:38.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:38.577" starttime="20171009 15:58:38.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:38.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:38.578" starttime="20171009 15:58:38.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:38.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:38.804" starttime="20171009 15:58:38.579"></status>
</kw>
<msg timestamp="20171009 15:58:38.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:38.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:38.804" starttime="20171009 15:58:38.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:38.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:38.805" starttime="20171009 15:58:38.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:38.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:38.806" starttime="20171009 15:58:38.806"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:38.806" starttime="20171009 15:58:38.574"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:38.806" starttime="20171009 15:58:38.573"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:38.806" starttime="20171009 15:58:38.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:38.807" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171009 15:58:38.807" starttime="20171009 15:58:38.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:38.808" starttime="20171009 15:58:38.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:58:38.888" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171009 15:58:38.888" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:38.888" starttime="20171009 15:58:38.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:38.889" starttime="20171009 15:58:38.889"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:58:38.890" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:58:38.890" starttime="20171009 15:58:38.889"></status>
</kw>
<msg timestamp="20171009 15:58:38.890" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:38.890" starttime="20171009 15:58:38.571"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171009 15:58:38.891" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171009 15:58:38.891" starttime="20171009 15:58:38.890"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:38.891" starttime="20171009 15:58:38.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171009 15:58:38.892" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171009 15:58:38.892" starttime="20171009 15:58:38.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171009 15:58:38.893" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171009 15:58:38.893" starttime="20171009 15:58:38.893"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171009 15:58:38.895" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171009 15:58:38.895" starttime="20171009 15:58:38.895"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:38.907" starttime="20171009 15:58:38.906"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171009 15:58:38.908" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171009 15:58:38.909" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171009 15:58:38.909" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171009 15:58:39.050" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 15:58:39.051" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 15:58:39.845" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171009 15:58:39.845" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171009 15:58:39.923" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171009 15:58:39.940" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171009 15:58:39.940" level="INFO">${stderr} = </msg>
<msg timestamp="20171009 15:58:39.940" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171009 15:58:39.940" starttime="20171009 15:58:39.018"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171009 15:58:39.941" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171009 15:58:39.941" starttime="20171009 15:58:39.941"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171009 15:58:39.942" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171009 15:58:39.942" starttime="20171009 15:58:39.941"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:39.942" starttime="20171009 15:58:39.016"></status>
</kw>
<msg timestamp="20171009 15:58:39.942" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171009 15:58:40.331" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171009 15:58:40.343" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:40.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:40.391" starttime="20171009 15:58:40.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:40.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:40.392" starttime="20171009 15:58:40.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:40.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:40.393" starttime="20171009 15:58:40.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:40.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:40.393" starttime="20171009 15:58:40.393"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:40.587" starttime="20171009 15:58:40.394"></status>
</kw>
<msg timestamp="20171009 15:58:40.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:40.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.588" starttime="20171009 15:58:40.394"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.589" starttime="20171009 15:58:40.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.589" starttime="20171009 15:58:40.589"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.590" starttime="20171009 15:58:40.389"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.590" starttime="20171009 15:58:40.388"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.590" starttime="20171009 15:58:40.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:40.590" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171009 15:58:40.591" starttime="20171009 15:58:40.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:40.593" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:40.593" starttime="20171009 15:58:40.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:40.594" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:40.594" starttime="20171009 15:58:40.594"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.594" starttime="20171009 15:58:40.593"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.594" starttime="20171009 15:58:40.591"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.594" starttime="20171009 15:58:40.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:58:40.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171009 15:58:40.688" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.688" starttime="20171009 15:58:40.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:40.690" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:40.690" starttime="20171009 15:58:40.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:40.691" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:40.691" starttime="20171009 15:58:40.691"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.691" starttime="20171009 15:58:40.690"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.691" starttime="20171009 15:58:40.689"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.691" starttime="20171009 15:58:40.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:58:40.692" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:58:40.692" starttime="20171009 15:58:40.692"></status>
</kw>
<msg timestamp="20171009 15:58:40.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.692" starttime="20171009 15:58:40.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.693" starttime="20171009 15:58:40.693"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:58:40.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:58:40.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:58:40.694" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171009 15:58:40.694" starttime="20171009 15:58:40.693"></status>
</kw>
<msg timestamp="20171009 15:58:40.694" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:58:40.694" starttime="20171009 15:58:40.385"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.694" starttime="20171009 15:58:40.385"></status>
</kw>
<msg timestamp="20171009 15:58:40.720" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171009 15:58:40.720" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171009 15:58:40.720" starttime="20171009 15:58:40.373"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:40.722" starttime="20171009 15:58:40.722"></status>
</kw>
<msg timestamp="20171009 15:58:40.722" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:58:40.722" starttime="20171009 15:58:40.721"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171009 15:58:40.748" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171009 15:58:40.748" starttime="20171009 15:58:40.747"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:40.750" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171009 15:58:40.750" starttime="20171009 15:58:40.750"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:40.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:40.753" starttime="20171009 15:58:40.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:40.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:40.754" starttime="20171009 15:58:40.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:40.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:40.755" starttime="20171009 15:58:40.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:40.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:40.756" starttime="20171009 15:58:40.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:40.969" starttime="20171009 15:58:40.759"></status>
</kw>
<msg timestamp="20171009 15:58:40.969" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:40.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.969" starttime="20171009 15:58:40.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.970" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.970" starttime="20171009 15:58:40.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:40.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:40.970" starttime="20171009 15:58:40.970"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.971" starttime="20171009 15:58:40.752"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.971" starttime="20171009 15:58:40.752"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.971" starttime="20171009 15:58:40.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:40.971" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171009 15:58:40.971" starttime="20171009 15:58:40.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:40.972" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:40.972" starttime="20171009 15:58:40.972"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:40.973" starttime="20171009 15:58:40.972"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:40.974" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171009 15:58:40.974" starttime="20171009 15:58:40.974"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:40.975" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171009 15:58:40.975" starttime="20171009 15:58:40.975"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.976" starttime="20171009 15:58:40.975"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:40.976" starttime="20171009 15:58:40.973"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:58:41.103" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171009 15:58:41.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.103" starttime="20171009 15:58:40.976"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:41.104" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:41.104" starttime="20171009 15:58:41.104"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:41.105" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:41.105" starttime="20171009 15:58:41.105"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.105" starttime="20171009 15:58:41.104"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.106" starttime="20171009 15:58:41.103"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:58:41.106" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:58:41.106" starttime="20171009 15:58:41.106"></status>
</kw>
<msg timestamp="20171009 15:58:41.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.107" starttime="20171009 15:58:40.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.107" starttime="20171009 15:58:41.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171009 15:58:41.108" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:58:41.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:58:41.108" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171009 15:58:41.108" starttime="20171009 15:58:41.108"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.108" starttime="20171009 15:58:40.749"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.108" starttime="20171009 15:58:40.746"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.108" starttime="20171009 15:58:40.722"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171009 15:58:41.110" starttime="20171009 15:58:41.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171009 15:58:41.110" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171009 15:58:41.110" starttime="20171009 15:58:41.110"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:41.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:41.115" starttime="20171009 15:58:41.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:41.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:41.116" starttime="20171009 15:58:41.115"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:41.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:41.116" starttime="20171009 15:58:41.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:41.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:41.117" starttime="20171009 15:58:41.117"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.345" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:41.345" starttime="20171009 15:58:41.118"></status>
</kw>
<msg timestamp="20171009 15:58:41.345" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:41.345" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.345" starttime="20171009 15:58:41.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.346" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.346" starttime="20171009 15:58:41.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.347" starttime="20171009 15:58:41.346"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.347" starttime="20171009 15:58:41.114"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.347" starttime="20171009 15:58:41.113"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.347" starttime="20171009 15:58:41.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:41.348" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171009 15:58:41.348" starttime="20171009 15:58:41.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:41.350" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:41.350" starttime="20171009 15:58:41.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:41.351" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:41.351" starttime="20171009 15:58:41.351"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.351" starttime="20171009 15:58:41.350"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.352" starttime="20171009 15:58:41.348"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.352" starttime="20171009 15:58:41.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:58:41.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171009 15:58:41.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.416" starttime="20171009 15:58:41.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:41.418" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:41.418" starttime="20171009 15:58:41.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:41.418" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:41.419" starttime="20171009 15:58:41.418"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.419" starttime="20171009 15:58:41.418"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.419" starttime="20171009 15:58:41.416"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.419" starttime="20171009 15:58:41.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:58:41.420" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:58:41.420" starttime="20171009 15:58:41.420"></status>
</kw>
<msg timestamp="20171009 15:58:41.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.420" starttime="20171009 15:58:41.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.421" starttime="20171009 15:58:41.420"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:58:41.421" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:58:41.421" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:58:41.421" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171009 15:58:41.421" starttime="20171009 15:58:41.421"></status>
</kw>
<msg timestamp="20171009 15:58:41.422" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:58:41.422" starttime="20171009 15:58:41.111"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.422" starttime="20171009 15:58:41.111"></status>
</kw>
<msg timestamp="20171009 15:58:41.422" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:58:41.422" starttime="20171009 15:58:41.110"></status>
</kw>
<msg timestamp="20171009 15:58:41.422" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:58:41.422" starttime="20171009 15:58:41.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.423" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.423" starttime="20171009 15:58:41.423"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.423" starttime="20171009 15:58:40.368"></status>
</kw>
<msg timestamp="20171009 15:58:41.473" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 15:58:41.506" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 15:58:41.511" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171009 15:58:41.512" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:41.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:41.560" starttime="20171009 15:58:41.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:41.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:41.561" starttime="20171009 15:58:41.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:41.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:41.562" starttime="20171009 15:58:41.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:41.562" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:41.562" starttime="20171009 15:58:41.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:41.788" starttime="20171009 15:58:41.563"></status>
</kw>
<msg timestamp="20171009 15:58:41.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:41.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.788" starttime="20171009 15:58:41.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.789" starttime="20171009 15:58:41.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:41.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:41.790" starttime="20171009 15:58:41.789"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.790" starttime="20171009 15:58:41.556"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.790" starttime="20171009 15:58:41.555"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.790" starttime="20171009 15:58:41.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:41.791" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171009 15:58:41.791" starttime="20171009 15:58:41.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:41.793" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:41.793" starttime="20171009 15:58:41.792"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:41.794" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:58:41.794" starttime="20171009 15:58:41.794"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.794" starttime="20171009 15:58:41.793"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.794" starttime="20171009 15:58:41.792"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:41.795" starttime="20171009 15:58:41.791"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:58:42.015" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171009 15:58:42.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:42.015" starttime="20171009 15:58:41.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:58:42.017" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171009 15:58:42.017" starttime="20171009 15:58:42.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:58:42.018" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:58:42.019" starttime="20171009 15:58:42.018"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.019" starttime="20171009 15:58:42.017"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.019" starttime="20171009 15:58:42.016"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.019" starttime="20171009 15:58:42.016"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:58:42.020" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:58:42.020" starttime="20171009 15:58:42.019"></status>
</kw>
<msg timestamp="20171009 15:58:42.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:42.020" starttime="20171009 15:58:41.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:42.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:42.021" starttime="20171009 15:58:42.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:58:42.022" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:58:42.022" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:58:42.022" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171009 15:58:42.022" starttime="20171009 15:58:42.021"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.022" starttime="20171009 15:58:41.551"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.100" starttime="20171009 15:58:38.907"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171009 15:58:42.106" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 15:58:42.122" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171009 15:58:42.122" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171009 15:58:42.123" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171009 15:58:42.123" starttime="20171009 15:58:42.101"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.123" starttime="20171009 15:58:38.905"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.123" starttime="20171009 15:58:38.896"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.123" starttime="20171009 15:58:38.894"></status>
</kw>
<msg timestamp="20171009 15:58:42.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:42.123" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171009 15:58:42.124" starttime="20171009 15:58:38.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171009 15:58:42.125" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171009 15:58:42.125" starttime="20171009 15:58:42.125"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.125" starttime="20171009 15:58:42.124"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.125" starttime="20171009 15:58:38.891"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.125" starttime="20171009 15:58:38.891"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:42.125" starttime="20171009 15:58:38.570"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171009 15:58:42.127" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171009 15:58:42.127" starttime="20171009 15:58:42.127"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171009 15:58:42.147" level="INFO">${image_version} = v1.99.10-102-g7180280</msg>
<status status="PASS" endtime="20171009 15:58:42.147" starttime="20171009 15:58:42.127"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171009 15:58:42.147" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171009 15:58:55.727" level="INFO">${image_data} = image-u-boot0000644000175200017530000113170013161245706013167 0...</msg>
<status status="PASS" endtime="20171009 15:58:55.728" starttime="20171009 15:58:42.147"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:58:55.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:58:55.733" starttime="20171009 15:58:55.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:55.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:58:55.734" starttime="20171009 15:58:55.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:58:55.735" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:58:55.735" starttime="20171009 15:58:55.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:58:55.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:58:55.735" starttime="20171009 15:58:55.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:58:55.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:58:55.937" starttime="20171009 15:58:55.736"></status>
</kw>
<msg timestamp="20171009 15:58:55.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:58:55.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:58:55.938" starttime="20171009 15:58:55.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:58:55.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:55.938" starttime="20171009 15:58:55.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:58:55.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:58:55.939" starttime="20171009 15:58:55.939"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:55.939" starttime="20171009 15:58:55.731"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:55.939" starttime="20171009 15:58:55.730"></status>
</kw>
<status status="PASS" endtime="20171009 15:58:55.939" starttime="20171009 15:58:55.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:58:55.940" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171009 15:58:55.940" starttime="20171009 15:58:55.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:58:55.941" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171009 15:58:55.941" starttime="20171009 15:58:55.940"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:55.941" starttime="20171009 15:58:55.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:58:55.942" starttime="20171009 15:58:55.942"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:02.020" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171009 15:59:02.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:02.020" starttime="20171009 15:58:55.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:02.021" starttime="20171009 15:59:02.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:02.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:02.022" starttime="20171009 15:59:02.021"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:02.022" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:02.022" starttime="20171009 15:59:02.022"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:02.022" starttime="20171009 15:58:55.728"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171009 15:59:02.030" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171009 15:59:02.030" starttime="20171009 15:59:02.030"></status>
</kw>
<msg timestamp="20171009 15:59:02.030" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171009 15:59:02.030" starttime="20171009 15:59:02.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:02.032" starttime="20171009 15:59:02.031"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:02.032" starttime="20171009 15:59:02.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:02.033" starttime="20171009 15:59:02.032"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171009 15:59:02.034" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171009 15:59:02.034" starttime="20171009 15:59:02.033"></status>
</kw>
<msg timestamp="20171009 15:59:02.034" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171009 15:59:02.034" starttime="20171009 15:59:02.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:02.036" starttime="20171009 15:59:02.035"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:02.036" starttime="20171009 15:59:02.035"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:02.036" starttime="20171009 15:59:02.034"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171009 15:59:02.037" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 15:59:04.017" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171009 15:59:04.017" starttime="20171009 15:59:02.037"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:04.017" starttime="20171009 15:59:02.027"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171009 15:59:04.027" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171009 15:59:04.074" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171009 15:59:04.074" level="INFO">${stdout} = /tmp/images/f872c741/</msg>
<msg timestamp="20171009 15:59:04.074" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171009 15:59:04.074" starttime="20171009 15:59:04.027"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171009 15:59:04.075" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171009 15:59:04.075" starttime="20171009 15:59:04.075"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:04.075" starttime="20171009 15:59:04.026"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171009 15:59:04.081" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171009 15:59:04.081" starttime="20171009 15:59:04.081"></status>
</kw>
<msg timestamp="20171009 15:59:04.082" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171009 15:59:04.082" starttime="20171009 15:59:04.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:04.083" starttime="20171009 15:59:04.083"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:04.083" starttime="20171009 15:59:04.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:04.084" starttime="20171009 15:59:04.083"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171009 15:59:04.085" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171009 15:59:04.085" starttime="20171009 15:59:04.084"></status>
</kw>
<msg timestamp="20171009 15:59:04.085" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171009 15:59:04.085" starttime="20171009 15:59:04.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:04.087" starttime="20171009 15:59:04.087"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:04.087" starttime="20171009 15:59:04.086"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:04.087" starttime="20171009 15:59:04.085"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171009 15:59:04.088" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 15:59:05.764" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171009 15:59:05.764" starttime="20171009 15:59:04.087"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:05.764" starttime="20171009 15:59:04.080"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/f872c741/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171009 15:59:05.775" level="INFO">Executing command 'cat /tmp/images/f872c741/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171009 15:59:05.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171009 15:59:05.843" level="INFO">${stdout} = version=v1.99.10-102-g7180280</msg>
<msg timestamp="20171009 15:59:05.843" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171009 15:59:05.843" starttime="20171009 15:59:05.775"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171009 15:59:05.844" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171009 15:59:05.844" starttime="20171009 15:59:05.844"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:05.844" starttime="20171009 15:59:05.773"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171009 15:59:05.851" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171009 15:59:05.851" starttime="20171009 15:59:05.850"></status>
</kw>
<msg timestamp="20171009 15:59:05.851" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171009 15:59:05.851" starttime="20171009 15:59:05.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:05.852" starttime="20171009 15:59:05.852"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:05.852" starttime="20171009 15:59:05.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:05.853" starttime="20171009 15:59:05.852"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171009 15:59:05.854" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171009 15:59:05.854" starttime="20171009 15:59:05.854"></status>
</kw>
<msg timestamp="20171009 15:59:05.854" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171009 15:59:05.854" starttime="20171009 15:59:05.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:05.856" starttime="20171009 15:59:05.856"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:05.856" starttime="20171009 15:59:05.855"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:05.856" starttime="20171009 15:59:05.854"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171009 15:59:05.857" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 15:59:07.534" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171009 15:59:07.534" starttime="20171009 15:59:05.856"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:07.534" starttime="20171009 15:59:05.849"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171009 15:59:07.541" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171009 15:59:07.541" starttime="20171009 15:59:07.540"></status>
</kw>
<msg timestamp="20171009 15:59:07.541" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171009 15:59:07.541" starttime="20171009 15:59:07.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:07.542" starttime="20171009 15:59:07.542"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:07.542" starttime="20171009 15:59:07.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:07.543" starttime="20171009 15:59:07.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171009 15:59:07.544" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171009 15:59:07.544" starttime="20171009 15:59:07.544"></status>
</kw>
<msg timestamp="20171009 15:59:07.544" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171009 15:59:07.544" starttime="20171009 15:59:07.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:07.546" starttime="20171009 15:59:07.546"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:07.546" starttime="20171009 15:59:07.546"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:07.546" starttime="20171009 15:59:07.545"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171009 15:59:07.547" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 15:59:09.224" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171009 15:59:09.224" starttime="20171009 15:59:07.547"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.224" starttime="20171009 15:59:07.539"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/f872c741/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171009 15:59:09.234" level="INFO">Executing command 'cat /tmp/images/f872c741/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171009 15:59:09.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171009 15:59:09.311" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171009 15:59:09.311" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171009 15:59:09.311" starttime="20171009 15:59:09.233"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.311" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171009 15:59:09.312" starttime="20171009 15:59:09.311"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.312" starttime="20171009 15:59:09.233"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f872c741</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:09.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:09.325" starttime="20171009 15:59:09.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:09.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:09.326" starttime="20171009 15:59:09.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:09.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:09.326" starttime="20171009 15:59:09.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:09.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:09.327" starttime="20171009 15:59:09.327"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.567" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:09.567" starttime="20171009 15:59:09.328"></status>
</kw>
<msg timestamp="20171009 15:59:09.567" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:09.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.567" starttime="20171009 15:59:09.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.568" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.568" starttime="20171009 15:59:09.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.569" starttime="20171009 15:59:09.568"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.569" starttime="20171009 15:59:09.323"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.569" starttime="20171009 15:59:09.323"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.569" starttime="20171009 15:59:09.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:09.570" level="INFO">${base_uri} = /xyz/openbmc_project/software/f872c741/attr/Activation</msg>
<status status="PASS" endtime="20171009 15:59:09.570" starttime="20171009 15:59:09.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:09.572" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:09.572" starttime="20171009 15:59:09.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:09.573" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:09.573" starttime="20171009 15:59:09.573"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.573" starttime="20171009 15:59:09.572"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.573" starttime="20171009 15:59:09.570"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.573" starttime="20171009 15:59:09.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:09.704" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f872c741/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171009 15:59:09.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.704" starttime="20171009 15:59:09.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:09.706" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Active", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:09.706" starttime="20171009 15:59:09.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:09.707" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Active", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:09.707" starttime="20171009 15:59:09.707"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.707" starttime="20171009 15:59:09.706"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.708" starttime="20171009 15:59:09.705"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.708" starttime="20171009 15:59:09.704"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:09.708" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:09.708" starttime="20171009 15:59:09.708"></status>
</kw>
<msg timestamp="20171009 15:59:09.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.709" starttime="20171009 15:59:09.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.709" starttime="20171009 15:59:09.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:59:09.710" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Active", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:09.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:09.710" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Active'}</msg>
<status status="PASS" endtime="20171009 15:59:09.710" starttime="20171009 15:59:09.710"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.710" starttime="20171009 15:59:09.320"></status>
</kw>
<msg timestamp="20171009 15:59:09.711" level="INFO">${ret} = True</msg>
<msg timestamp="20171009 15:59:09.711" level="INFO">${version_id} = f872c741</msg>
<status status="PASS" endtime="20171009 15:59:09.711" starttime="20171009 15:59:02.023"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:09.711" starttime="20171009 15:59:09.711"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:09.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:09.715" starttime="20171009 15:59:09.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:09.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:09.716" starttime="20171009 15:59:09.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:09.716" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:09.716" starttime="20171009 15:59:09.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:09.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:09.717" starttime="20171009 15:59:09.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:09.918" starttime="20171009 15:59:09.718"></status>
</kw>
<msg timestamp="20171009 15:59:09.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:09.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.918" starttime="20171009 15:59:09.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.919" starttime="20171009 15:59:09.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:09.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:09.920" starttime="20171009 15:59:09.920"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.920" starttime="20171009 15:59:09.714"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.920" starttime="20171009 15:59:09.713"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.920" starttime="20171009 15:59:09.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:09.921" level="INFO">${base_uri} = /xyz/openbmc_project/software/f872c741</msg>
<status status="PASS" endtime="20171009 15:59:09.921" starttime="20171009 15:59:09.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:09.924" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:09.924" starttime="20171009 15:59:09.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:09.925" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:09.925" starttime="20171009 15:59:09.925"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.926" starttime="20171009 15:59:09.925"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.926" starttime="20171009 15:59:09.922"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:09.926" starttime="20171009 15:59:09.922"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:10.051" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f872c741, headers=None json=None</msg>
<msg timestamp="20171009 15:59:10.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.051" starttime="20171009 15:59:09.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:10.053" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f872c741", 
    "Priority": 1, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171009 15:59:10.054" starttime="20171009 15:59:10.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:10.055" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f872c741", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-102-g7180280", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:10.055" starttime="20171009 15:59:10.055"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.055" starttime="20171009 15:59:10.054"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.055" starttime="20171009 15:59:10.052"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.055" starttime="20171009 15:59:10.051"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:10.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:10.056" starttime="20171009 15:59:10.056"></status>
</kw>
<msg timestamp="20171009 15:59:10.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.057" starttime="20171009 15:59:09.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:10.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.057" starttime="20171009 15:59:10.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:59:10.058" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f872c741", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-102-g7180280", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:10.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:10.058" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171009 15:59:10.058" starttime="20171009 15:59:10.058"></status>
</kw>
<msg timestamp="20171009 15:59:10.058" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171009 15:59:10.058" starttime="20171009 15:59:09.711"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171009 15:59:10.059" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="PASS" endtime="20171009 15:59:10.059" starttime="20171009 15:59:10.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<kw name="Switch To Active Image And Pass" library="code_update_utils">
<doc>Make the given active image the image running on the BMC</doc>
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<kw name="Set Host Software Property" library="code_update_utils">
<doc>Set the host software properties of a given object.</doc>
<arguments>
<arg>${software_object}</arg>
<arg>Priority</arg>
<arg>${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171009 15:59:10.061" level="INFO">${args} = {u'data': 0}</msg>
<status status="PASS" endtime="20171009 15:59:10.061" starttime="20171009 15:59:10.061"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${host_object}</arg>
<arg>${sw_attribute}</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:10.063" level="INFO">${base_uri} = /xyz/openbmc_project/software/f872c741</msg>
<status status="PASS" endtime="20171009 15:59:10.063" starttime="20171009 15:59:10.062"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:10.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:10.066" starttime="20171009 15:59:10.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:10.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:10.067" starttime="20171009 15:59:10.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:10.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:10.068" starttime="20171009 15:59:10.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:10.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:10.068" starttime="20171009 15:59:10.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:10.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:10.284" starttime="20171009 15:59:10.069"></status>
</kw>
<msg timestamp="20171009 15:59:10.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:10.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.284" starttime="20171009 15:59:10.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:10.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.285" starttime="20171009 15:59:10.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:10.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:10.286" starttime="20171009 15:59:10.286"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.286" starttime="20171009 15:59:10.065"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.286" starttime="20171009 15:59:10.064"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.286" starttime="20171009 15:59:10.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:10.287" level="INFO">${base_uri} = /xyz/openbmc_project/software/f872c741/attr/Priority</msg>
<status status="PASS" endtime="20171009 15:59:10.287" starttime="20171009 15:59:10.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:10.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:10.288" starttime="20171009 15:59:10.287"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:10.288" starttime="20171009 15:59:10.288"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:10.290" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741/attr/Priority, method:Put, args:{u'data': {u'data': 0}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171009 15:59:10.290" starttime="20171009 15:59:10.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:10.291" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f872c741/attr/Priority, method:Put, args:{u'data': {u'data': 0}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171009 15:59:10.291" starttime="20171009 15:59:10.291"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.291" starttime="20171009 15:59:10.290"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:10.291" starttime="20171009 15:59:10.288"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:11.762" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f872c741/attr/Priority, data={"data": 0},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171009 15:59:11.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:11.763" starttime="20171009 15:59:10.292"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:11.764" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:11.764" starttime="20171009 15:59:11.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:11.765" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:11.765" starttime="20171009 15:59:11.765"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:11.765" starttime="20171009 15:59:11.764"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:11.765" starttime="20171009 15:59:11.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:11.766" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:11.766" starttime="20171009 15:59:11.766"></status>
</kw>
<msg timestamp="20171009 15:59:11.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:11.766" starttime="20171009 15:59:10.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:11.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:11.767" starttime="20171009 15:59:11.767"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171009 15:59:11.768" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:11.768" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:11.768" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171009 15:59:11.768" starttime="20171009 15:59:11.767"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:11.768" starttime="20171009 15:59:10.062"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:11.768" starttime="20171009 15:59:10.060"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171009 15:59:11.770" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171009 15:59:11.770" starttime="20171009 15:59:11.769"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:11.778" starttime="20171009 15:59:11.778"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171009 15:59:11.780" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171009 15:59:11.780" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171009 15:59:11.781" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171009 15:59:12.238" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171009 15:59:12.247" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171009 15:59:12.266" starttime="20171009 15:59:12.266"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:12.267" starttime="20171009 15:59:12.267"></status>
</kw>
<msg timestamp="20171009 15:59:12.268" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:59:12.268" starttime="20171009 15:59:12.267"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171009 15:59:12.290" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171009 15:59:12.290" starttime="20171009 15:59:12.289"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:12.291" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171009 15:59:12.291" starttime="20171009 15:59:12.291"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:12.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:12.296" starttime="20171009 15:59:12.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:12.297" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:12.297" starttime="20171009 15:59:12.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:12.297" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:12.297" starttime="20171009 15:59:12.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:12.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:12.298" starttime="20171009 15:59:12.298"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:12.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:12.635" starttime="20171009 15:59:12.299"></status>
</kw>
<msg timestamp="20171009 15:59:12.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:12.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.635" starttime="20171009 15:59:12.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:12.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.636" starttime="20171009 15:59:12.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:12.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.637" starttime="20171009 15:59:12.636"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.637" starttime="20171009 15:59:12.294"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.637" starttime="20171009 15:59:12.293"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.637" starttime="20171009 15:59:12.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:12.637" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171009 15:59:12.638" starttime="20171009 15:59:12.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:12.638" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:12.638" starttime="20171009 15:59:12.638"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:12.639" starttime="20171009 15:59:12.638"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:12.640" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171009 15:59:12.640" starttime="20171009 15:59:12.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:12.641" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171009 15:59:12.642" starttime="20171009 15:59:12.641"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.642" starttime="20171009 15:59:12.641"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.642" starttime="20171009 15:59:12.639"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:12.785" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171009 15:59:12.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.785" starttime="20171009 15:59:12.642"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:12.787" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:12.787" starttime="20171009 15:59:12.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:12.788" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:12.788" starttime="20171009 15:59:12.788"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.788" starttime="20171009 15:59:12.787"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.788" starttime="20171009 15:59:12.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:12.789" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:12.789" starttime="20171009 15:59:12.789"></status>
</kw>
<msg timestamp="20171009 15:59:12.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.790" starttime="20171009 15:59:12.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:12.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:12.791" starttime="20171009 15:59:12.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171009 15:59:12.792" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:12.792" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:12.792" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171009 15:59:12.792" starttime="20171009 15:59:12.791"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.792" starttime="20171009 15:59:12.290"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.792" starttime="20171009 15:59:12.287"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:12.792" starttime="20171009 15:59:12.269"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171009 15:59:12.794" starttime="20171009 15:59:12.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171009 15:59:12.795" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171009 15:59:12.795" starttime="20171009 15:59:12.795"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:12.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:12.802" starttime="20171009 15:59:12.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:12.803" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:12.803" starttime="20171009 15:59:12.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:12.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:12.804" starttime="20171009 15:59:12.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:12.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:12.805" starttime="20171009 15:59:12.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:13.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:13.474" starttime="20171009 15:59:12.805"></status>
</kw>
<msg timestamp="20171009 15:59:13.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:13.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.474" starttime="20171009 15:59:12.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:13.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.475" starttime="20171009 15:59:13.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:13.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.476" starttime="20171009 15:59:13.475"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.476" starttime="20171009 15:59:12.800"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.476" starttime="20171009 15:59:12.799"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.476" starttime="20171009 15:59:12.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:13.477" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171009 15:59:13.477" starttime="20171009 15:59:13.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:13.479" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:13.479" starttime="20171009 15:59:13.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:13.480" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:13.480" starttime="20171009 15:59:13.480"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.480" starttime="20171009 15:59:13.479"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.480" starttime="20171009 15:59:13.478"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.480" starttime="20171009 15:59:13.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:13.827" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171009 15:59:13.827" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.827" starttime="20171009 15:59:13.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:13.829" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:13.829" starttime="20171009 15:59:13.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:13.830" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:13.830" starttime="20171009 15:59:13.830"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.830" starttime="20171009 15:59:13.829"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.831" starttime="20171009 15:59:13.828"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.831" starttime="20171009 15:59:13.827"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:13.831" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:13.832" starttime="20171009 15:59:13.831"></status>
</kw>
<msg timestamp="20171009 15:59:13.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.832" starttime="20171009 15:59:12.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:13.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.833" starttime="20171009 15:59:13.832"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:59:13.833" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:13.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:13.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171009 15:59:13.833" starttime="20171009 15:59:13.833"></status>
</kw>
<msg timestamp="20171009 15:59:13.834" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:59:13.834" starttime="20171009 15:59:12.797"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.834" starttime="20171009 15:59:12.796"></status>
</kw>
<msg timestamp="20171009 15:59:13.834" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:59:13.834" starttime="20171009 15:59:12.796"></status>
</kw>
<msg timestamp="20171009 15:59:13.834" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171009 15:59:13.834" starttime="20171009 15:59:12.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171009 15:59:13.835" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:13.835" starttime="20171009 15:59:13.835"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:13.835" starttime="20171009 15:59:12.265"></status>
</kw>
<msg timestamp="20171009 15:59:13.841" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 15:59:13.846" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 15:59:13.846" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171009 15:59:13.847" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 15:59:13.892" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 15:59:13.893" starttime="20171009 15:59:13.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 15:59:13.893" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 15:59:13.893" starttime="20171009 15:59:13.893"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 15:59:13.894" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 15:59:13.894" starttime="20171009 15:59:13.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 15:59:13.895" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 15:59:13.895" starttime="20171009 15:59:13.895"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 15:59:14.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 15:59:14.089" starttime="20171009 15:59:13.896"></status>
</kw>
<msg timestamp="20171009 15:59:14.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 15:59:14.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.089" starttime="20171009 15:59:13.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 15:59:14.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.090" starttime="20171009 15:59:14.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:14.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.090" starttime="20171009 15:59:14.090"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.091" starttime="20171009 15:59:13.891"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.091" starttime="20171009 15:59:13.890"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.091" starttime="20171009 15:59:13.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 15:59:14.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171009 15:59:14.092" starttime="20171009 15:59:14.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:14.094" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:14.094" starttime="20171009 15:59:14.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:14.095" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171009 15:59:14.095" starttime="20171009 15:59:14.095"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.095" starttime="20171009 15:59:14.094"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.095" starttime="20171009 15:59:14.092"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.095" starttime="20171009 15:59:14.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 15:59:14.509" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171009 15:59:14.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.510" starttime="20171009 15:59:14.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 15:59:14.512" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171009 15:59:14.512" starttime="20171009 15:59:14.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 15:59:14.512" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 15:59:14.513" starttime="20171009 15:59:14.512"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.513" starttime="20171009 15:59:14.512"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.513" starttime="20171009 15:59:14.510"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.513" starttime="20171009 15:59:14.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 15:59:14.513" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 15:59:14.514" starttime="20171009 15:59:14.513"></status>
</kw>
<msg timestamp="20171009 15:59:14.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.514" starttime="20171009 15:59:13.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 15:59:14.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 15:59:14.515" starttime="20171009 15:59:14.514"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 15:59:14.515" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 15:59:14.515" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 15:59:14.515" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171009 15:59:14.516" starttime="20171009 15:59:14.515"></status>
</kw>
<status status="PASS" endtime="20171009 15:59:14.516" starttime="20171009 15:59:13.885"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171009 15:59:14.574" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:14.601" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 15:59:14.602" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171009 15:59:14.609" starttime="20171009 15:59:14.576"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:18.655" level="FAIL">
#(UTC) 2017/10/09 15:59:18.652509 -    4.025941 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171009 15:59:18.656" starttime="20171009 15:59:14.641"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:22.675" level="FAIL">
#(UTC) 2017/10/09 15:59:22.672247 -    4.019738 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171009 15:59:22.676" starttime="20171009 15:59:18.659"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:26.695" level="FAIL">
#(UTC) 2017/10/09 15:59:26.692339 -    4.020092 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171009 15:59:26.696" starttime="20171009 15:59:22.679"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:30.710" level="FAIL">
#(UTC) 2017/10/09 15:59:30.707772 -    4.015433 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171009 15:59:30.711" starttime="20171009 15:59:26.699"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:34.728" level="FAIL">
#(UTC) 2017/10/09 15:59:34.725274 -    4.017502 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171009 15:59:34.729" starttime="20171009 15:59:30.713"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:39.745" level="FAIL">
#(UTC) 2017/10/09 15:59:39.742853 -    5.017579 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20171009 15:59:39.746" starttime="20171009 15:59:34.732"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171009 15:59:44.763" starttime="20171009 15:59:39.749"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:49.825" level="FAIL">
#(UTC) 2017/10/09 15:59:49.822215 -    5.027908 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 15:59:49.826" starttime="20171009 15:59:44.810"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:54.844" level="FAIL">
#(UTC) 2017/10/09 15:59:54.840675 -    5.018460 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 15:59:54.845" starttime="20171009 15:59:49.829"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 15:59:59.862" level="FAIL">
#(UTC) 2017/10/09 15:59:59.859247 -    5.018572 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 15:59:59.863" starttime="20171009 15:59:54.847"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:04.905" level="FAIL">
#(UTC) 2017/10/09 16:00:04.891961 -    5.032714 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:04.912" starttime="20171009 15:59:59.866"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:09.974" level="FAIL">
#(UTC) 2017/10/09 16:00:09.959387 -    5.067426 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:09.980" starttime="20171009 16:00:04.926"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:15.009" level="FAIL">
#(UTC) 2017/10/09 16:00:15.006590 -    5.047203 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:15.011" starttime="20171009 16:00:09.994"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:20.028" level="FAIL">
#(UTC) 2017/10/09 16:00:20.025649 -    5.019059 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:20.030" starttime="20171009 16:00:15.013"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:25.046" level="FAIL">
#(UTC) 2017/10/09 16:00:25.043318 -    5.017669 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:25.048" starttime="20171009 16:00:20.032"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:30.066" level="FAIL">
#(UTC) 2017/10/09 16:00:30.063154 -    5.019836 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:30.067" starttime="20171009 16:00:25.050"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:35.086" level="FAIL">
#(UTC) 2017/10/09 16:00:35.082537 -    5.019383 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171009 16:00:35.087" starttime="20171009 16:00:30.069"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:40.102" level="FAIL">
#(UTC) 2017/10/09 16:00:40.099675 -    5.017138 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20171009 16:00:40.103" starttime="20171009 16:00:35.090"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:45.120" level="FAIL">
#(UTC) 2017/10/09 16:00:45.117043 -    5.017368 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20171009 16:00:45.121" starttime="20171009 16:00:40.106"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:00:49.139" starttime="20171009 16:00:45.124"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171009 16:00:49.172" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:00:49.173" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20171009 16:00:49.174" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:00:49.174" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 16:00:53.781" level="FAIL">SSHException: Invalid packet blocking</msg>
<status status="FAIL" endtime="20171009 16:00:53.782" starttime="20171009 16:00:49.159"></status>
</kw>
<msg timestamp="20171009 16:00:53.838" level="FAIL">ValueError: could not convert string to float: </msg>
<status status="FAIL" endtime="20171009 16:00:53.838" starttime="20171009 15:59:14.556"></status>
</kw>
<msg timestamp="20171009 16:00:53.861" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 16:00:53.866" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20171009 16:00:53.879" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.86.161.171009.155914.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171009 16:00:53.919" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171009 16:00:53.919" starttime="20171009 16:00:53.919"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171009 16:00:53.924" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171009 16:00:56.933" level="INFO">${RC} = 0</msg>
<msg timestamp="20171009 16:00:56.934" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.732 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.49 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20171009 16:00:56.935" starttime="20171009 16:00:53.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171009 16:00:56.956" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.732 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.49 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.603 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.41 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.603/1.061/1.498/0.397 ms</msg>
<status status="PASS" endtime="20171009 16:00:56.956" starttime="20171009 16:00:56.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:00:56.956" starttime="20171009 16:00:56.956"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:56.957" starttime="20171009 16:00:53.912"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:00:57.002" level="INFO">${cur_time} = 2017-10-09 16:00:57:001320</msg>
<status status="PASS" endtime="20171009 16:00:57.002" starttime="20171009 16:00:57.001"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:00:57.003" level="INFO">${cur_time} = 20171009160057001320</msg>
<status status="PASS" endtime="20171009 16:00:57.003" starttime="20171009 16:00:57.002"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.003" starttime="20171009 16:00:56.998"></status>
</kw>
<msg timestamp="20171009 16:00:57.011" level="INFO">${FFDC_TIME} = 20171009160057001320</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171009 16:00:57.013" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:00:57.013" starttime="20171009 16:00:57.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171009 16:00:57.014" level="INFO">${suite_name} = 20171009160057001320_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:00:57.014" starttime="20171009 16:00:57.013"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171009 16:00:57.014" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:00:57.014" starttime="20171009 16:00:57.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171009 16:00:57.015" level="INFO">${test_name} = 20171009160057001320_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:00:57.015" starttime="20171009 16:00:57.014"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.015" starttime="20171009 16:00:57.012"></status>
</kw>
<msg timestamp="20171009 16:00:57.015" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171009 16:00:57.016" level="INFO">${FFDC_PREFIX} = 9.3.86.161.171009.155914.</msg>
<msg timestamp="20171009 16:00:57.049" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171009 16:00:57.051" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.051" starttime="20171009 16:00:57.050"></status>
</kw>
<msg timestamp="20171009 16:00:57.059" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.082" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.082" starttime="20171009 16:00:57.080"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.083" starttime="20171009 16:00:57.079"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.084" starttime="20171009 16:00:57.083"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.084" starttime="20171009 16:00:57.083"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.085" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.085" starttime="20171009 16:00:57.085"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.085" starttime="20171009 16:00:57.084"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.087" starttime="20171009 16:00:57.086"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.087" starttime="20171009 16:00:57.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.089" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.090" starttime="20171009 16:00:57.088"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.090" starttime="20171009 16:00:57.087"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.091" starttime="20171009 16:00:57.091"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.091" starttime="20171009 16:00:57.090"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.092" starttime="20171009 16:00:57.092"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.092" starttime="20171009 16:00:57.091"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.094" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.094" starttime="20171009 16:00:57.093"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.094" starttime="20171009 16:00:57.093"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.095" starttime="20171009 16:00:57.095"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.095" starttime="20171009 16:00:57.094"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.097" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.097" starttime="20171009 16:00:57.097"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.097" starttime="20171009 16:00:57.096"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.098" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.098" starttime="20171009 16:00:57.098"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.098" starttime="20171009 16:00:57.097"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.099" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.100" starttime="20171009 16:00:57.099"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.100" starttime="20171009 16:00:57.099"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:00:57.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt"&gt;/home/fspcibld/logs/20171009160057001320_BmcCodeUpdate/20171009160057001320_RESTBMCCodeUpdate/9.3.86.161.171009.155914.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:00:57.101" starttime="20171009 16:00:57.101"></status>
</kw>
<status status="PASS" endtime="20171009 16:00:57.101" starttime="20171009 16:00:57.100"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171009 16:00:57.133" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:00:57.134" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:00:57.134" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171009 16:00:57.136" level="INFO">index=3
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:00:57.136" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 16:00:58.542" level="FAIL">SSHException: Invalid packet blocking</msg>
<status status="FAIL" endtime="20171009 16:00:58.542" starttime="20171009 16:00:57.102"></status>
</kw>
<status status="FAIL" endtime="20171009 16:00:58.542" starttime="20171009 16:00:57.101"></status>
</kw>
<status status="FAIL" endtime="20171009 16:00:58.542" starttime="20171009 16:00:57.095"></status>
</kw>
<status status="FAIL" endtime="20171009 16:00:58.542" starttime="20171009 16:00:57.078"></status>
</kw>
<msg timestamp="20171009 16:00:58.543" level="FAIL">SSHException: Invalid packet blocking</msg>
<status status="FAIL" endtime="20171009 16:00:58.543" starttime="20171009 16:00:53.889"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:00:58.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:00:58.592" starttime="20171009 16:00:58.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:00:58.593" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:00:58.593" starttime="20171009 16:00:58.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:00:58.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:00:58.594" starttime="20171009 16:00:58.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:00:58.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:00:58.595" starttime="20171009 16:00:58.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:01:08.613" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171009 16:01:08.613" starttime="20171009 16:00:58.596"></status>
</kw>
<msg timestamp="20171009 16:01:08.613" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171009 16:01:08.614" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171009 16:01:08.614" starttime="20171009 16:00:58.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:01:08.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171009 16:01:08.615" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171009 16:01:08.615" starttime="20171009 16:01:08.614"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:08.615" starttime="20171009 16:00:58.589"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:01:28.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:01:28.619" starttime="20171009 16:01:28.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:01:28.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:01:28.619" starttime="20171009 16:01:28.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:01:28.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:01:28.620" starttime="20171009 16:01:28.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:01:28.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:01:28.621" starttime="20171009 16:01:28.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:01:38.637" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171009 16:01:38.637" starttime="20171009 16:01:28.622"></status>
</kw>
<msg timestamp="20171009 16:01:38.637" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171009 16:01:38.637" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171009 16:01:38.637" starttime="20171009 16:01:28.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:01:38.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171009 16:01:38.638" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171009 16:01:38.638" starttime="20171009 16:01:38.638"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.638" starttime="20171009 16:01:28.615"></status>
</kw>
<msg timestamp="20171009 16:01:38.639" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171009 16:01:38.639" starttime="20171009 16:00:58.588"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.639" starttime="20171009 16:00:58.587"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.639" starttime="20171009 16:00:58.586"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.639" starttime="20171009 16:00:58.584"></status>
</kw>
<msg timestamp="20171009 16:01:38.641" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171009 16:01:38.641" starttime="20171009 16:00:53.874"></status>
</kw>
<msg timestamp="20171009 16:01:38.650" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171009 16:01:38.663" starttime="20171009 16:01:38.662"></status>
</kw>
<msg timestamp="20171009 16:01:38.682" level="FAIL">#(UTC) 2017/10/09 16:01:38.681883 -    0.018814 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20171009 16:01:38.682" starttime="20171009 15:59:11.779"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171009 16:01:38.689" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171009 16:01:38.703" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171009 16:01:38.704" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171009 16:01:38.706" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171009 16:01:38.706" starttime="20171009 16:01:38.683"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.706" starttime="20171009 15:59:11.777"></status>
</kw>
<msg timestamp="20171009 16:01:38.707" level="FAIL">#(UTC) 2017/10/09 16:01:38.681883 -    0.018814 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20171009 16:01:38.707" starttime="20171009 15:59:11.770"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.707" starttime="20171009 15:59:11.768"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.707" starttime="20171009 15:59:10.060"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.707" starttime="20171009 15:59:10.059"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:38.708" starttime="20171009 15:58:42.126"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171009 16:01:38.723" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171009 16:01:38.724" starttime="20171009 16:01:38.723"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171009 16:01:38.728" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171009 16:01:41.735" level="INFO">${RC} = 0</msg>
<msg timestamp="20171009 16:01:41.736" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.721 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.676 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171009 16:01:41.737" starttime="20171009 16:01:38.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.759" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.721 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.676 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.604 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.582 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.582/0.645/0.721/0.063 ms</msg>
<status status="PASS" endtime="20171009 16:01:41.759" starttime="20171009 16:01:41.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:01:41.761" starttime="20171009 16:01:41.760"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.762" starttime="20171009 16:01:38.722"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:01:41.803" level="INFO">${cur_time} = 2017-10-09 16:01:41:802261</msg>
<status status="PASS" endtime="20171009 16:01:41.803" starttime="20171009 16:01:41.802"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:01:41.803" level="INFO">${cur_time} = 20171009160141802261</msg>
<status status="PASS" endtime="20171009 16:01:41.803" starttime="20171009 16:01:41.803"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.804" starttime="20171009 16:01:41.801"></status>
</kw>
<msg timestamp="20171009 16:01:41.804" level="INFO">${FFDC_TIME} = 20171009160141802261</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171009 16:01:41.806" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:01:41.806" starttime="20171009 16:01:41.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171009 16:01:41.807" level="INFO">${suite_name} = 20171009160141802261_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:01:41.807" starttime="20171009 16:01:41.806"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171009 16:01:41.807" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:01:41.807" starttime="20171009 16:01:41.807"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171009 16:01:41.810" level="INFO">${test_name} = 20171009160141802261_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171009 16:01:41.810" starttime="20171009 16:01:41.808"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.810" starttime="20171009 16:01:41.805"></status>
</kw>
<msg timestamp="20171009 16:01:41.810" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171009 16:01:41.811" level="INFO">${FFDC_PREFIX} = 20171009160141802261_</msg>
<msg timestamp="20171009 16:01:41.829" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171009 16:01:41.830" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.830" starttime="20171009 16:01:41.829"></status>
</kw>
<msg timestamp="20171009 16:01:41.830" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.846" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.847" starttime="20171009 16:01:41.845"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.847" starttime="20171009 16:01:41.844"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.848" starttime="20171009 16:01:41.847"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.849" starttime="20171009 16:01:41.847"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.851" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.851" starttime="20171009 16:01:41.850"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.851" starttime="20171009 16:01:41.849"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.852" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.852" starttime="20171009 16:01:41.852"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.852" starttime="20171009 16:01:41.851"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.853" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.853" starttime="20171009 16:01:41.853"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.854" starttime="20171009 16:01:41.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.855" starttime="20171009 16:01:41.855"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.855" starttime="20171009 16:01:41.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.856" starttime="20171009 16:01:41.856"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.857" starttime="20171009 16:01:41.855"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.858" starttime="20171009 16:01:41.857"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.858" starttime="20171009 16:01:41.857"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.859" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.859" starttime="20171009 16:01:41.859"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.859" starttime="20171009 16:01:41.858"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.861" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.861" starttime="20171009 16:01:41.861"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.862" starttime="20171009 16:01:41.860"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.863" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.863" starttime="20171009 16:01:41.862"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.863" starttime="20171009 16:01:41.862"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.865" starttime="20171009 16:01:41.864"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.865" starttime="20171009 16:01:41.863"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:41.866" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:41.866" starttime="20171009 16:01:41.866"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:41.866" starttime="20171009 16:01:41.865"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171009 16:01:41.891" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:01:41.891" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:01:41.892" level="INFO">index=3
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:01:41.893" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171009 16:01:41.894" level="INFO">index=4
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171009 16:01:41.894" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171009 16:01:42.202" level="INFO">${bmc_model} = None</msg>
<msg timestamp="20171009 16:01:42.202" level="INFO">${stderr} = None</msg>
<msg timestamp="20171009 16:01:42.202" level="INFO">${rc} = None</msg>
<msg timestamp="20171009 16:01:42.202" level="FAIL">SSHException: Invalid packet blocking</msg>
<status status="FAIL" endtime="20171009 16:01:42.202" starttime="20171009 16:01:41.867"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.203" level="FAIL">Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20171009 16:01:42.203" starttime="20171009 16:01:42.202"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.204" level="FAIL">Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20171009 16:01:42.204" starttime="20171009 16:01:42.203"></status>
</kw>
<msg timestamp="20171009 16:01:42.204" level="INFO">${model_name} = None</msg>
<status status="FAIL" endtime="20171009 16:01:42.204" starttime="20171009 16:01:41.867"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.206" starttime="20171009 16:01:42.205"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.206" starttime="20171009 16:01:42.204"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:42.206" starttime="20171009 16:01:41.860"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.207" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.207" starttime="20171009 16:01:42.207"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.207" starttime="20171009 16:01:42.206"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171009 16:01:42.208" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171009 16:01:42.208" starttime="20171009 16:01:42.208"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.210" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.210" starttime="20171009 16:01:42.209"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.210" starttime="20171009 16:01:42.209"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.211" starttime="20171009 16:01:42.211"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.211" starttime="20171009 16:01:42.210"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.211" starttime="20171009 16:01:42.209"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.213" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.213" starttime="20171009 16:01:42.212"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.213" starttime="20171009 16:01:42.212"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.214" starttime="20171009 16:01:42.214"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.214" starttime="20171009 16:01:42.213"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.214" starttime="20171009 16:01:42.211"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.215" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.216" starttime="20171009 16:01:42.215"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.216" starttime="20171009 16:01:42.214"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.217" starttime="20171009 16:01:42.217"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.217" starttime="20171009 16:01:42.216"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.217" starttime="20171009 16:01:42.214"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.217" starttime="20171009 16:01:42.208"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt"&gt;/home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/20171009160141802261_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.218" starttime="20171009 16:01:42.218"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.218" starttime="20171009 16:01:42.217"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:42.219" starttime="20171009 16:01:41.844"></status>
</kw>
<msg timestamp="20171009 16:01:42.219" level="FAIL">Several failures occurred:

1) SSHException: Invalid packet blocking

2) Could not get length of 'None'.

3) Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20171009 16:01:42.219" starttime="20171009 16:01:38.710"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:42.219" starttime="20171009 16:01:38.709"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171009 16:01:42.220" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171009 16:01:42.220" starttime="20171009 16:01:42.220"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171009 16:01:42.221" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171009160141802261_BmcCodeUpdate/20171009160141802261_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171009 16:01:42.221" starttime="20171009 16:01:42.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171009 16:01:42.222" starttime="20171009 16:01:42.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171009 16:01:42.222" starttime="20171009 16:01:42.222"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.223" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171009 16:01:42.223" starttime="20171009 16:01:42.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.224" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171009 16:01:42.224" starttime="20171009 16:01:42.224"></status>
</kw>
<msg timestamp="20171009 16:01:42.224" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171009 16:01:42.224" starttime="20171009 16:01:42.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.226" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.226" starttime="20171009 16:01:42.225"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.226" starttime="20171009 16:01:42.225"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171009 16:01:42.226" starttime="20171009 16:01:42.226"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:01:42.228" level="INFO">${cur_time} = 2017-10-09 16:01:42:227283</msg>
<status status="PASS" endtime="20171009 16:01:42.228" starttime="20171009 16:01:42.227"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171009 16:01:42.228" level="INFO">${cur_time} = 20171009160142227283</msg>
<status status="PASS" endtime="20171009 16:01:42.229" starttime="20171009 16:01:42.228"></status>
</kw>
<msg timestamp="20171009 16:01:42.229" level="INFO">${cur_time} = 20171009160142227283</msg>
<status status="PASS" endtime="20171009 16:01:42.229" starttime="20171009 16:01:42.227"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171009 16:01:42.230" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171009 16:01:42.230" starttime="20171009 16:01:42.229"></status>
</kw>
<status status="PASS" endtime="20171009 16:01:42.230" starttime="20171009 16:01:42.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:01:42.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:01:42.235" starttime="20171009 16:01:42.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:01:42.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:01:42.235" starttime="20171009 16:01:42.235"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:01:42.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:01:42.236" starttime="20171009 16:01:42.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:01:42.237" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:01:42.237" starttime="20171009 16:01:42.237"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:01:52.254" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171009 16:01:52.254" starttime="20171009 16:01:42.238"></status>
</kw>
<msg timestamp="20171009 16:01:52.254" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171009 16:01:52.255" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171009 16:01:52.255" starttime="20171009 16:01:42.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:01:52.256" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171009 16:01:52.256" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171009 16:01:52.256" starttime="20171009 16:01:52.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:01:52.257" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171009 16:01:52.257" starttime="20171009 16:01:52.256"></status>
</kw>
<status status="FAIL" endtime="20171009 16:01:52.257" starttime="20171009 16:01:42.233"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:02:12.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:02:12.260" starttime="20171009 16:02:12.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:02:12.261" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:02:12.261" starttime="20171009 16:02:12.261"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:02:12.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:02:12.262" starttime="20171009 16:02:12.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:02:12.262" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:02:12.262" starttime="20171009 16:02:12.262"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:02:12.803" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 16:02:12.804" starttime="20171009 16:02:12.263"></status>
</kw>
<msg timestamp="20171009 16:02:12.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 16:02:12.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:12.804" starttime="20171009 16:02:12.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:02:12.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:12.805" starttime="20171009 16:02:12.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:12.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:12.805" starttime="20171009 16:02:12.805"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:12.806" starttime="20171009 16:02:12.258"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:12.806" starttime="20171009 16:01:42.233"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:12.806" starttime="20171009 16:01:42.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 16:02:12.807" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171009 16:02:12.807" starttime="20171009 16:02:12.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:12.807" starttime="20171009 16:02:12.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 16:02:13.957" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171009 16:02:13.957" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:13.957" starttime="20171009 16:02:12.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:13.958" starttime="20171009 16:02:13.957"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 16:02:13.958" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 16:02:13.958" starttime="20171009 16:02:13.958"></status>
</kw>
<msg timestamp="20171009 16:02:13.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:13.959" starttime="20171009 16:01:42.231"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:13.959" starttime="20171009 16:02:13.959"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:02:13.963" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:02:13.964" starttime="20171009 16:02:13.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:02:13.964" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:02:13.964" starttime="20171009 16:02:13.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:02:13.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:02:13.965" starttime="20171009 16:02:13.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:02:13.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:02:13.966" starttime="20171009 16:02:13.965"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:02:14.533" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 16:02:14.533" starttime="20171009 16:02:13.968"></status>
</kw>
<msg timestamp="20171009 16:02:14.533" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 16:02:14.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:14.533" starttime="20171009 16:02:13.966"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:02:14.534" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:14.534" starttime="20171009 16:02:14.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:14.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:14.535" starttime="20171009 16:02:14.535"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:14.535" starttime="20171009 16:02:13.962"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:14.535" starttime="20171009 16:02:13.962"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:14.535" starttime="20171009 16:02:13.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 16:02:14.536" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171009 16:02:14.536" starttime="20171009 16:02:14.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:14.537" starttime="20171009 16:02:14.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 16:02:15.286" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171009 16:02:15.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:15.286" starttime="20171009 16:02:14.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:15.287" starttime="20171009 16:02:15.287"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 16:02:15.287" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 16:02:15.287" starttime="20171009 16:02:15.287"></status>
</kw>
<msg timestamp="20171009 16:02:15.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:15.288" starttime="20171009 16:02:13.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:15.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:15.288" starttime="20171009 16:02:15.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171009 16:02:15.289" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171009 16:02:15.289" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171009 16:02:15.289" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20171009 16:02:15.289" starttime="20171009 16:02:15.289"></status>
</kw>
<msg timestamp="20171009 16:02:15.290" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171009 16:02:15.290" starttime="20171009 16:02:13.960"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:15.290" starttime="20171009 16:02:15.290"></status>
</kw>
<msg timestamp="20171009 16:02:15.290" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171009 16:02:15.290" starttime="20171009 16:02:13.959"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:15.292" starttime="20171009 16:02:15.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:02:15.293" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171009 16:02:15.293" starttime="20171009 16:02:15.292"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:02:15.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:02:15.296" starttime="20171009 16:02:15.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:02:15.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:02:15.296" starttime="20171009 16:02:15.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:02:15.297" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:02:15.297" starttime="20171009 16:02:15.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:02:15.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:02:15.298" starttime="20171009 16:02:15.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:02:16.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 16:02:16.240" starttime="20171009 16:02:15.299"></status>
</kw>
<msg timestamp="20171009 16:02:16.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 16:02:16.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:16.240" starttime="20171009 16:02:15.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:02:16.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:16.241" starttime="20171009 16:02:16.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:16.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:16.242" starttime="20171009 16:02:16.241"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:16.242" starttime="20171009 16:02:15.294"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:16.242" starttime="20171009 16:02:15.294"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:16.242" starttime="20171009 16:02:15.293"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 16:02:16.243" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20171009 16:02:16.243" starttime="20171009 16:02:16.242"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 16:02:16.244" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171009 16:02:16.245" starttime="20171009 16:02:16.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 16:02:16.245" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171009 16:02:16.246" starttime="20171009 16:02:16.245"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:16.246" starttime="20171009 16:02:16.245"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:16.246" starttime="20171009 16:02:16.243"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 16:02:18.751" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171009 16:02:18.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:18.751" starttime="20171009 16:02:16.246"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171009 16:02:18.753" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 16:02:18.753" starttime="20171009 16:02:18.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171009 16:02:18.754" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171009 16:02:18.754" starttime="20171009 16:02:18.754"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.754" starttime="20171009 16:02:18.753"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.754" starttime="20171009 16:02:18.751"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 16:02:18.755" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 16:02:18.755" starttime="20171009 16:02:18.754"></status>
</kw>
<msg timestamp="20171009 16:02:18.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:18.755" starttime="20171009 16:02:15.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:18.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:18.756" starttime="20171009 16:02:18.755"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.756" starttime="20171009 16:02:15.291"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.756" starttime="20171009 16:02:15.291"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.756" starttime="20171009 16:02:15.290"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:18.756" starttime="20171009 16:01:42.231"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171009 16:02:18.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171009 16:02:18.760" starttime="20171009 16:02:18.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171009 16:02:18.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171009 16:02:18.760" starttime="20171009 16:02:18.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171009 16:02:18.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171009 16:02:18.761" starttime="20171009 16:02:18.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171009 16:02:18.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171009 16:02:18.762" starttime="20171009 16:02:18.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171009 16:02:19.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171009 16:02:19.113" starttime="20171009 16:02:18.763"></status>
</kw>
<msg timestamp="20171009 16:02:19.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20171009 16:02:19.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:19.113" starttime="20171009 16:02:18.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171009 16:02:19.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:19.114" starttime="20171009 16:02:19.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171009 16:02:19.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171009 16:02:19.115" starttime="20171009 16:02:19.114"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:19.115" starttime="20171009 16:02:18.758"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:19.115" starttime="20171009 16:02:18.758"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:19.115" starttime="20171009 16:02:18.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171009 16:02:19.115" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171009 16:02:19.115" starttime="20171009 16:02:19.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:19.116" starttime="20171009 16:02:19.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171009 16:02:24.041" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171009 16:02:24.041" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:24.041" starttime="20171009 16:02:19.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:24.042" starttime="20171009 16:02:24.042"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171009 16:02:24.043" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171009 16:02:24.043" starttime="20171009 16:02:24.042"></status>
</kw>
<msg timestamp="20171009 16:02:24.043" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171009 16:02:24.043" starttime="20171009 16:02:18.756"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171009 16:02:24.043" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171009 16:02:24.044" starttime="20171009 16:02:24.043"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:24.044" starttime="20171009 16:02:18.756"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:24.044" starttime="20171009 16:01:42.231"></status>
</kw>
<status status="PASS" endtime="20171009 16:02:24.044" starttime="20171009 16:01:42.230"></status>
</kw>
<status status="FAIL" endtime="20171009 16:02:24.044" starttime="20171009 16:01:38.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20171009 16:02:24.045" starttime="20171009 16:02:24.044"></status>
</kw>
<status status="FAIL" endtime="20171009 16:02:24.045" starttime="20171009 16:01:38.708">Several failures occurred:

1) SSHException: Invalid packet blocking

2) Could not get length of 'None'.

3) Could not get length of 'None'.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171009 16:02:24.045" critical="yes" starttime="20171009 15:58:38.569">#(UTC) 2017/10/09 16:01:38.681883 -    0.018814 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0


Also teardown failed:
Several failures occurred:

1) SSHException: Invalid packet blocking

2) Could not get length of 'None'.

3) Could not get length of 'None'.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171009 16:02:24.047" starttime="20171009 15:58:37.357"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
