<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170605 18:53:36.406" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170605 18:53:37.639" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170605 18:53:37.639" starttime="20170605 18:53:37.638"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170605 18:53:37.639" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170605 18:53:37.639" starttime="20170605 18:53:37.639"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:37.640" starttime="20170605 18:53:37.637"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170605 18:53:37.647" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:37.751" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:37.751" starttime="20170605 18:53:37.750"></status>
</kw>
<msg timestamp="20170605 18:53:37.751" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:37.751" starttime="20170605 18:53:37.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:37.752" starttime="20170605 18:53:37.752"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:37.752" starttime="20170605 18:53:37.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:37.753" starttime="20170605 18:53:37.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:37.754" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:37.754" starttime="20170605 18:53:37.754"></status>
</kw>
<msg timestamp="20170605 18:53:37.754" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:37.754" starttime="20170605 18:53:37.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:37.756" starttime="20170605 18:53:37.756"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:37.757" starttime="20170605 18:53:37.755"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:37.757" starttime="20170605 18:53:37.755"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:37.757" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:39.706" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:39.707" starttime="20170605 18:53:37.757"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:39.707" starttime="20170605 18:53:37.748"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:39.708" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170605 18:53:39.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:39.785" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170605 18:53:39.785" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:39.785" starttime="20170605 18:53:39.707"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170605 18:53:39.785" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170605 18:53:39.785" starttime="20170605 18:53:39.785"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170605 18:53:39.786" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170605 18:53:39.786" starttime="20170605 18:53:39.786"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:39.786" starttime="20170605 18:53:37.743"></status>
</kw>
<msg timestamp="20170605 18:53:39.787" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170605 18:53:40.149" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170605 18:53:40.169" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170605 18:53:40.169" starttime="20170605 18:53:40.167"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:40.171" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170605 18:53:40.171" starttime="20170605 18:53:40.171"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:40.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:40.175" starttime="20170605 18:53:40.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:40.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:40.176" starttime="20170605 18:53:40.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:40.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:40.176" starttime="20170605 18:53:40.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:40.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:40.177" starttime="20170605 18:53:40.176"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.387" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:40.387" starttime="20170605 18:53:40.178"></status>
</kw>
<msg timestamp="20170605 18:53:40.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:40.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.387" starttime="20170605 18:53:40.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.388" starttime="20170605 18:53:40.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.389" starttime="20170605 18:53:40.389"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.389" starttime="20170605 18:53:40.173"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.390" starttime="20170605 18:53:40.173"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.390" starttime="20170605 18:53:40.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:40.391" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170605 18:53:40.391" starttime="20170605 18:53:40.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:40.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:40.391" starttime="20170605 18:53:40.391"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:40.392" starttime="20170605 18:53:40.392"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170605 18:53:40.394" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170605 18:53:40.394" starttime="20170605 18:53:40.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170605 18:53:40.403" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170605 18:53:40.403" starttime="20170605 18:53:40.403"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.403" starttime="20170605 18:53:40.394"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.404" starttime="20170605 18:53:40.392"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:40.695" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170605 18:53:40.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.695" starttime="20170605 18:53:40.404"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170605 18:53:40.697" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170605 18:53:40.697" starttime="20170605 18:53:40.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170605 18:53:40.698" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170605 18:53:40.698" starttime="20170605 18:53:40.697"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.698" starttime="20170605 18:53:40.697"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.698" starttime="20170605 18:53:40.696"></status>
</kw>
<msg timestamp="20170605 18:53:40.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.698" starttime="20170605 18:53:40.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.699" starttime="20170605 18:53:40.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170605 18:53:40.700" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:40.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:40.700" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170605 18:53:40.700" starttime="20170605 18:53:40.699"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.700" starttime="20170605 18:53:40.169"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:40.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:40.704" starttime="20170605 18:53:40.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:40.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:40.704" starttime="20170605 18:53:40.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:40.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:40.705" starttime="20170605 18:53:40.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:40.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:40.706" starttime="20170605 18:53:40.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:40.893" starttime="20170605 18:53:40.706"></status>
</kw>
<msg timestamp="20170605 18:53:40.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:40.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.893" starttime="20170605 18:53:40.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.894" starttime="20170605 18:53:40.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.895" starttime="20170605 18:53:40.894"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.895" starttime="20170605 18:53:40.702"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.895" starttime="20170605 18:53:40.702"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.895" starttime="20170605 18:53:40.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:40.896" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170605 18:53:40.896" starttime="20170605 18:53:40.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:40.897" starttime="20170605 18:53:40.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:40.983" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170605 18:53:40.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.983" starttime="20170605 18:53:40.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:40.983" starttime="20170605 18:53:40.983"></status>
</kw>
<msg timestamp="20170605 18:53:40.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.984" starttime="20170605 18:53:40.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.984" starttime="20170605 18:53:40.984"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:40.985" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:40.985" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:40.985" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170605 18:53:40.985" starttime="20170605 18:53:40.985"></status>
</kw>
<msg timestamp="20170605 18:53:40.985" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170605 18:53:40.985" starttime="20170605 18:53:40.700"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170605 18:53:40.986" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:40.986" starttime="20170605 18:53:40.986"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:40.986" starttime="20170605 18:53:40.165"></status>
</kw>
<msg timestamp="20170605 18:53:41.032" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170605 18:53:41.049" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170605 18:53:41.054" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170605 18:53:41.054" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:41.057" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:41.057" starttime="20170605 18:53:41.057"></status>
</kw>
<msg timestamp="20170605 18:53:41.057" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:41.057" starttime="20170605 18:53:41.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:41.058" starttime="20170605 18:53:41.058"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:41.058" starttime="20170605 18:53:41.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:41.060" starttime="20170605 18:53:41.059"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:41.061" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:41.061" starttime="20170605 18:53:41.060"></status>
</kw>
<msg timestamp="20170605 18:53:41.061" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:41.061" starttime="20170605 18:53:41.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:41.063" starttime="20170605 18:53:41.062"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:41.063" starttime="20170605 18:53:41.062"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:41.063" starttime="20170605 18:53:41.061"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:41.063" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:42.765" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:42.765" starttime="20170605 18:53:41.063"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:42.766" starttime="20170605 18:53:41.056"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:42.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:42.809" starttime="20170605 18:53:42.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:42.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:42.810" starttime="20170605 18:53:42.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:42.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:42.811" starttime="20170605 18:53:42.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:42.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:42.812" starttime="20170605 18:53:42.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:43.065" starttime="20170605 18:53:42.812"></status>
</kw>
<msg timestamp="20170605 18:53:43.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:43.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.065" starttime="20170605 18:53:42.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.066" starttime="20170605 18:53:43.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.067" starttime="20170605 18:53:43.066"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.067" starttime="20170605 18:53:42.807"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.067" starttime="20170605 18:53:42.806"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.067" starttime="20170605 18:53:42.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:43.068" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170605 18:53:43.068" starttime="20170605 18:53:43.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.069" starttime="20170605 18:53:43.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:43.133" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170605 18:53:43.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.134" starttime="20170605 18:53:43.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.134" starttime="20170605 18:53:43.134"></status>
</kw>
<msg timestamp="20170605 18:53:43.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.135" starttime="20170605 18:53:42.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.135" starttime="20170605 18:53:43.135"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:43.136" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:43.136" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:43.136" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170605 18:53:43.136" starttime="20170605 18:53:43.136"></status>
</kw>
<msg timestamp="20170605 18:53:43.136" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170605 18:53:43.136" starttime="20170605 18:53:42.803"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.137" starttime="20170605 18:53:42.800"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:43.141" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:43.141" starttime="20170605 18:53:43.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:43.142" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:43.142" starttime="20170605 18:53:43.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:43.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:43.143" starttime="20170605 18:53:43.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:43.143" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:43.143" starttime="20170605 18:53:43.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.322" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:43.322" starttime="20170605 18:53:43.144"></status>
</kw>
<msg timestamp="20170605 18:53:43.322" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:43.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.322" starttime="20170605 18:53:43.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.323" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.323" starttime="20170605 18:53:43.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.324" starttime="20170605 18:53:43.323"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.324" starttime="20170605 18:53:43.140"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.324" starttime="20170605 18:53:43.140"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.324" starttime="20170605 18:53:43.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:43.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170605 18:53:43.325" starttime="20170605 18:53:43.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.326" starttime="20170605 18:53:43.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:43.400" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170605 18:53:43.400" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.400" starttime="20170605 18:53:43.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.401" starttime="20170605 18:53:43.401"></status>
</kw>
<msg timestamp="20170605 18:53:43.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.402" starttime="20170605 18:53:43.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.402" starttime="20170605 18:53:43.402"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:43.403" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:43.403" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:43.403" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170605 18:53:43.403" starttime="20170605 18:53:43.402"></status>
</kw>
<msg timestamp="20170605 18:53:43.403" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170605 18:53:43.403" starttime="20170605 18:53:43.138"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.404" starttime="20170605 18:53:43.137"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:43.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:43.408" starttime="20170605 18:53:43.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:43.409" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:43.409" starttime="20170605 18:53:43.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:43.409" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:43.409" starttime="20170605 18:53:43.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:43.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:43.410" starttime="20170605 18:53:43.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:43.593" starttime="20170605 18:53:43.411"></status>
</kw>
<msg timestamp="20170605 18:53:43.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:43.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.593" starttime="20170605 18:53:43.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.594" starttime="20170605 18:53:43.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.595" starttime="20170605 18:53:43.595"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.595" starttime="20170605 18:53:43.407"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.595" starttime="20170605 18:53:43.406"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.595" starttime="20170605 18:53:43.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:43.596" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170605 18:53:43.596" starttime="20170605 18:53:43.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.597" starttime="20170605 18:53:43.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:43.665" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170605 18:53:43.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.665" starttime="20170605 18:53:43.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.666" starttime="20170605 18:53:43.666"></status>
</kw>
<msg timestamp="20170605 18:53:43.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.666" starttime="20170605 18:53:43.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.667" starttime="20170605 18:53:43.667"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:43.668" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:43.668" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:43.668" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170605 18:53:43.668" starttime="20170605 18:53:43.667"></status>
</kw>
<msg timestamp="20170605 18:53:43.668" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170605 18:53:43.668" starttime="20170605 18:53:43.404"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.668" starttime="20170605 18:53:43.404"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:43.672" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:43.673" starttime="20170605 18:53:43.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:43.673" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:43.673" starttime="20170605 18:53:43.673"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:43.674" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:43.674" starttime="20170605 18:53:43.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:43.675" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:43.675" starttime="20170605 18:53:43.674"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:43.854" starttime="20170605 18:53:43.675"></status>
</kw>
<msg timestamp="20170605 18:53:43.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:43.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.855" starttime="20170605 18:53:43.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.855" starttime="20170605 18:53:43.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.856" starttime="20170605 18:53:43.856"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.856" starttime="20170605 18:53:43.672"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.856" starttime="20170605 18:53:43.671"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.856" starttime="20170605 18:53:43.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:43.857" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170605 18:53:43.857" starttime="20170605 18:53:43.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.858" starttime="20170605 18:53:43.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:43.932" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170605 18:53:43.932" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.932" starttime="20170605 18:53:43.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:43.933" starttime="20170605 18:53:43.933"></status>
</kw>
<msg timestamp="20170605 18:53:43.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.933" starttime="20170605 18:53:43.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:43.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:43.934" starttime="20170605 18:53:43.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:43.935" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:43.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:43.935" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170605 18:53:43.935" starttime="20170605 18:53:43.934"></status>
</kw>
<msg timestamp="20170605 18:53:43.935" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170605 18:53:43.935" starttime="20170605 18:53:43.669"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.935" starttime="20170605 18:53:43.669"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:43.994" starttime="20170605 18:53:37.647"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170605 18:53:44.000" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170605 18:53:44.001" starttime="20170605 18:53:43.995"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.001" starttime="20170605 18:53:37.646"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.002" starttime="20170605 18:53:37.640"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170605 18:53:44.012" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170605 18:53:44.012" starttime="20170605 18:53:44.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170605 18:53:44.012" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170605 18:53:44.012" starttime="20170605 18:53:44.012"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:44.013" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170605 18:53:44.014" starttime="20170605 18:53:44.013"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:44.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:44.017" starttime="20170605 18:53:44.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:44.017" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:44.017" starttime="20170605 18:53:44.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:44.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:44.018" starttime="20170605 18:53:44.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:44.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:44.019" starttime="20170605 18:53:44.018"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.313" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:44.313" starttime="20170605 18:53:44.019"></status>
</kw>
<msg timestamp="20170605 18:53:44.313" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:44.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.313" starttime="20170605 18:53:44.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.314" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.314" starttime="20170605 18:53:44.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.315" starttime="20170605 18:53:44.314"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.315" starttime="20170605 18:53:44.015"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.315" starttime="20170605 18:53:44.015"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.315" starttime="20170605 18:53:44.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:44.316" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170605 18:53:44.316" starttime="20170605 18:53:44.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:44.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:44.316" starttime="20170605 18:53:44.316"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:44.317" starttime="20170605 18:53:44.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:44.317" starttime="20170605 18:53:44.317"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:44.384" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170605 18:53:44.384" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.384" starttime="20170605 18:53:44.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:44.385" starttime="20170605 18:53:44.385"></status>
</kw>
<msg timestamp="20170605 18:53:44.385" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.385" starttime="20170605 18:53:44.014"></status>
</kw>
<msg timestamp="20170605 18:53:44.385" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.385" starttime="20170605 18:53:44.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170605 18:53:44.386" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:53:44.386" starttime="20170605 18:53:44.386"></status>
</kw>
<status status="FAIL" endtime="20170605 18:53:44.386" starttime="20170605 18:53:44.011"></status>
</kw>
<msg timestamp="20170605 18:53:44.387" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:53:44.387" starttime="20170605 18:53:44.002"></status>
</kw>
<status status="FAIL" endtime="20170605 18:53:44.387" starttime="20170605 18:53:37.640"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170605 18:53:44.388" starttime="20170605 18:53:44.388"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:44.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:44.403" starttime="20170605 18:53:44.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:44.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:44.404" starttime="20170605 18:53:44.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:44.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:44.405" starttime="20170605 18:53:44.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:44.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:44.405" starttime="20170605 18:53:44.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:44.629" starttime="20170605 18:53:44.406"></status>
</kw>
<msg timestamp="20170605 18:53:44.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:44.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.630" starttime="20170605 18:53:44.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.631" starttime="20170605 18:53:44.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.631" starttime="20170605 18:53:44.631"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.631" starttime="20170605 18:53:44.400"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.631" starttime="20170605 18:53:44.400"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:44.632" starttime="20170605 18:53:44.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:44.632" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170605 18:53:44.632" starttime="20170605 18:53:44.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:44.633" starttime="20170605 18:53:44.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:44.720" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170605 18:53:44.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.720" starttime="20170605 18:53:44.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:44.721" starttime="20170605 18:53:44.721"></status>
</kw>
<msg timestamp="20170605 18:53:44.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.721" starttime="20170605 18:53:44.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:44.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:44.722" starttime="20170605 18:53:44.721"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:53:44.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:44.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:53:44.723" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170605 18:53:44.723" starttime="20170605 18:53:44.722"></status>
</kw>
<msg timestamp="20170605 18:53:44.723" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170605 18:53:44.723" starttime="20170605 18:53:44.398"></status>
</kw>
<msg timestamp="20170605 18:53:44.723" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170605 18:53:44.723" starttime="20170605 18:53:44.398"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170605 18:53:44.724" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170605 18:53:44.725" starttime="20170605 18:53:44.724"></status>
</kw>
<msg timestamp="20170605 18:53:44.725" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:53:44.725" starttime="20170605 18:53:44.724"></status>
</kw>
<msg timestamp="20170605 18:53:44.725" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:53:44.725" starttime="20170605 18:53:44.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170605 18:53:44.740" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170605 18:53:44.740" starttime="20170605 18:53:44.739"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170605 18:53:44.745" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170605 18:53:47.755" level="INFO">${RC} = 0</msg>
<msg timestamp="20170605 18:53:47.755" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=23.5 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.621 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170605 18:53:47.755" starttime="20170605 18:53:44.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.765" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=23.5 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.621 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.703 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=2.08 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.621/6.744/23.575/9.734 ms</msg>
<status status="PASS" endtime="20170605 18:53:47.765" starttime="20170605 18:53:47.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:47.766" starttime="20170605 18:53:47.766"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.766" starttime="20170605 18:53:44.739"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:53:47.789" level="INFO">${cur_time} = 2017-06-05 18:53:47:789131</msg>
<status status="PASS" endtime="20170605 18:53:47.789" starttime="20170605 18:53:47.788"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:53:47.790" level="INFO">${cur_time} = 20170605185347789131</msg>
<status status="PASS" endtime="20170605 18:53:47.790" starttime="20170605 18:53:47.790"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.790" starttime="20170605 18:53:47.788"></status>
</kw>
<msg timestamp="20170605 18:53:47.796" level="INFO">${FFDC_TIME} = 20170605185347789131</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170605 18:53:47.797" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170605 18:53:47.797" starttime="20170605 18:53:47.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170605 18:53:47.797" level="INFO">${suite_name} = 20170605185347789131_TestBiosUpdate</msg>
<status status="PASS" endtime="20170605 18:53:47.797" starttime="20170605 18:53:47.797"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170605 18:53:47.798" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170605 18:53:47.798" starttime="20170605 18:53:47.798"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170605 18:53:47.799" level="INFO">${test_name} = 20170605185347789131_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170605 18:53:47.799" starttime="20170605 18:53:47.798"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.799" starttime="20170605 18:53:47.796"></status>
</kw>
<msg timestamp="20170605 18:53:47.799" level="INFO">${FFDC_DIR_PATH} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/</msg>
<msg timestamp="20170605 18:53:47.800" level="INFO">${FFDC_PREFIX} = 20170605185347789131_</msg>
<msg timestamp="20170605 18:53:47.824" level="INFO">${LOG_PREFIX} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170605 18:53:47.825" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.825" starttime="20170605 18:53:47.824"></status>
</kw>
<msg timestamp="20170605 18:53:47.830" level="INFO">${FFDC_FILE_PATH} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.847" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.847" starttime="20170605 18:53:47.846"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.847" starttime="20170605 18:53:47.845"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.848" starttime="20170605 18:53:47.848"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.848" starttime="20170605 18:53:47.847"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.849" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.849" starttime="20170605 18:53:47.849"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.849" starttime="20170605 18:53:47.848"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.851" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.852" starttime="20170605 18:53:47.851"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.852" starttime="20170605 18:53:47.850"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.855" starttime="20170605 18:53:47.855"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.856" starttime="20170605 18:53:47.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.857" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.857" starttime="20170605 18:53:47.856"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.857" starttime="20170605 18:53:47.856"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.859" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.859" starttime="20170605 18:53:47.858"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.859" starttime="20170605 18:53:47.857"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.860" starttime="20170605 18:53:47.860"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.860" starttime="20170605 18:53:47.859"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.861" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.862" starttime="20170605 18:53:47.861"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.862" starttime="20170605 18:53:47.861"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.863" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.863" starttime="20170605 18:53:47.863"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.863" starttime="20170605 18:53:47.862"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.865" starttime="20170605 18:53:47.864"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.865" starttime="20170605 18:53:47.864"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.866" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.866" starttime="20170605 18:53:47.865"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.866" starttime="20170605 18:53:47.865"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.867" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:47.867" starttime="20170605 18:53:47.867"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.867" starttime="20170605 18:53:47.866"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:47.870" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:47.870" starttime="20170605 18:53:47.869"></status>
</kw>
<msg timestamp="20170605 18:53:47.870" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:47.870" starttime="20170605 18:53:47.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:47.871" starttime="20170605 18:53:47.871"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.871" starttime="20170605 18:53:47.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:47.872" starttime="20170605 18:53:47.871"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:47.873" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:47.873" starttime="20170605 18:53:47.872"></status>
</kw>
<msg timestamp="20170605 18:53:47.873" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:47.873" starttime="20170605 18:53:47.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:47.875" starttime="20170605 18:53:47.874"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.875" starttime="20170605 18:53:47.874"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:47.875" starttime="20170605 18:53:47.873"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:47.875" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:49.527" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:49.527" starttime="20170605 18:53:47.875"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.527" starttime="20170605 18:53:47.868"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:49.528" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170605 18:53:49.606" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:49.606" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170605 18:53:49.606" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:49.606" starttime="20170605 18:53:49.528"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.607" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170605 18:53:49.607" starttime="20170605 18:53:49.607"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.607" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170605 18:53:49.607" starttime="20170605 18:53:49.607"></status>
</kw>
<msg timestamp="20170605 18:53:49.608" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170605 18:53:49.608" starttime="20170605 18:53:47.867"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.609" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.609" starttime="20170605 18:53:49.609"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.609" starttime="20170605 18:53:49.608"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.610" starttime="20170605 18:53:47.862"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.611" starttime="20170605 18:53:49.610"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.611" starttime="20170605 18:53:49.610"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170605 18:53:49.611" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170605 18:53:49.611" starttime="20170605 18:53:49.611"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.613" starttime="20170605 18:53:49.613"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.613" starttime="20170605 18:53:49.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.615" starttime="20170605 18:53:49.614"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.615" starttime="20170605 18:53:49.613"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.615" starttime="20170605 18:53:49.612"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.616" starttime="20170605 18:53:49.616"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.616" starttime="20170605 18:53:49.615"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.617" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.618" starttime="20170605 18:53:49.617"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.618" starttime="20170605 18:53:49.617"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.618" starttime="20170605 18:53:49.615"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.619" starttime="20170605 18:53:49.619"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.619" starttime="20170605 18:53:49.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.621" starttime="20170605 18:53:49.620"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.621" starttime="20170605 18:53:49.619"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.621" starttime="20170605 18:53:49.618"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.621" starttime="20170605 18:53:49.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:49.622" starttime="20170605 18:53:49.622"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.622" starttime="20170605 18:53:49.621"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.622" starttime="20170605 18:53:47.845"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170605 18:53:49.630" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170605 18:53:49.630" starttime="20170605 18:53:49.630"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170605 18:53:49.631" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170605 18:53:49.632" starttime="20170605 18:53:49.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.633" starttime="20170605 18:53:49.632"></status>
</kw>
<msg timestamp="20170605 18:53:49.633" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170605 18:53:49.633" starttime="20170605 18:53:49.632"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.635" starttime="20170605 18:53:49.635"></status>
</kw>
<msg timestamp="20170605 18:53:49.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:49.635" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:53:49.635" starttime="20170605 18:53:49.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.636" starttime="20170605 18:53:49.635"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:49.659" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:49.659" starttime="20170605 18:53:49.659"></status>
</kw>
<msg timestamp="20170605 18:53:49.659" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:49.659" starttime="20170605 18:53:49.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.661" starttime="20170605 18:53:49.660"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.661" starttime="20170605 18:53:49.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.661" starttime="20170605 18:53:49.661"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:49.663" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:49.664" starttime="20170605 18:53:49.662"></status>
</kw>
<msg timestamp="20170605 18:53:49.664" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:49.664" starttime="20170605 18:53:49.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:49.666" starttime="20170605 18:53:49.665"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.666" starttime="20170605 18:53:49.665"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:49.666" starttime="20170605 18:53:49.664"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:49.666" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:51.451" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:51.451" starttime="20170605 18:53:49.666"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.452" starttime="20170605 18:53:49.658"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170605 18:53:51.452" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170605 18:53:51.452" starttime="20170605 18:53:51.452"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170605 18:53:51.454" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170605 18:53:51.454" starttime="20170605 18:53:51.453"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170605 18:53:51.459" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170605 18:53:51.459" starttime="20170605 18:53:51.454"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:51.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:51.463" starttime="20170605 18:53:51.462"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.463" starttime="20170605 18:53:51.462"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:51.464" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:51.464" starttime="20170605 18:53:51.464"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.464" starttime="20170605 18:53:51.463"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:51.466" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:51.466" starttime="20170605 18:53:51.465"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.466" starttime="20170605 18:53:51.465"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:51.467" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:51.467" starttime="20170605 18:53:51.467"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.467" starttime="20170605 18:53:51.466"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.467" starttime="20170605 18:53:51.461"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:51.467" starttime="20170605 18:53:51.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:51.468" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170605 18:53:52.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:52.810" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170605 18:53:52.811" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:52.811" starttime="20170605 18:53:51.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.820" starttime="20170605 18:53:52.819"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.820" starttime="20170605 18:53:52.819"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.820" starttime="20170605 18:53:52.811"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.820" starttime="20170605 18:53:51.460"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.821" starttime="20170605 18:53:51.460"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.821" starttime="20170605 18:53:51.460"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.821" starttime="20170605 18:53:51.453"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.821" starttime="20170605 18:53:51.453"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170605 18:53:52.822" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170605 18:53:52.822" starttime="20170605 18:53:52.821"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.823" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170605 18:53:52.823" starttime="20170605 18:53:52.822"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.826" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.826" starttime="20170605 18:53:52.826"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.826" starttime="20170605 18:53:52.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.828" starttime="20170605 18:53:52.827"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.828" starttime="20170605 18:53:52.826"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.829" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.829" starttime="20170605 18:53:52.829"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.829" starttime="20170605 18:53:52.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.830" starttime="20170605 18:53:52.830"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.831" starttime="20170605 18:53:52.829"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.831" starttime="20170605 18:53:52.824"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.831" starttime="20170605 18:53:52.824"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:52.831" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170605 18:53:52.948" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170605 18:53:52.948" level="INFO">${stdout} = </msg>
<msg timestamp="20170605 18:53:52.948" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170605 18:53:52.948" starttime="20170605 18:53:52.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.958" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.958" starttime="20170605 18:53:52.957"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.958" starttime="20170605 18:53:52.956"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.958" starttime="20170605 18:53:52.949"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.958" starttime="20170605 18:53:52.823"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.958" starttime="20170605 18:53:52.823"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.961" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.961" starttime="20170605 18:53:52.961"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.961" starttime="20170605 18:53:52.960"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.962" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.963" starttime="20170605 18:53:52.962"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.963" starttime="20170605 18:53:52.961"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.964" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.964" starttime="20170605 18:53:52.963"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.964" starttime="20170605 18:53:52.963"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:52.965" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:52.965" starttime="20170605 18:53:52.965"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.966" starttime="20170605 18:53:52.964"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.966" starttime="20170605 18:53:52.960"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:52.966" starttime="20170605 18:53:52.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:52.966" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170605 18:53:53.044" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:53.044" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.6-64"
VERSION_ID="v1.99.6-64-g268dc0d"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170605 18:53:53.044" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:53.044" starttime="20170605 18:53:52.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:53.051"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:53.050"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:53.045"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:52.958"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:52.958"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.051" starttime="20170605 18:53:52.823"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.052" starttime="20170605 18:53:52.821"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.052" starttime="20170605 18:53:52.821"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170605 18:53:53.053" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170605 18:53:53.053" starttime="20170605 18:53:53.052"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.053" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170605 18:53:53.054" starttime="20170605 18:53:53.053"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.057" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.057" starttime="20170605 18:53:53.056"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.057" starttime="20170605 18:53:53.056"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.058" starttime="20170605 18:53:53.058"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.059" starttime="20170605 18:53:53.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.060" starttime="20170605 18:53:53.059"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.060" starttime="20170605 18:53:53.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.061" starttime="20170605 18:53:53.061"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.061" starttime="20170605 18:53:53.060"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.061" starttime="20170605 18:53:53.055"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.062" starttime="20170605 18:53:53.055"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:53.062" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170605 18:53:53.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:53.119" level="INFO">${stdout} =  18:54:01 up 2 min,  load average: 2.39, 1.57, 0.62</msg>
<msg timestamp="20170605 18:53:53.119" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:53.119" starttime="20170605 18:53:53.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.128" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.128" starttime="20170605 18:53:53.127"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.128" starttime="20170605 18:53:53.126"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.128" starttime="20170605 18:53:53.119"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.128" starttime="20170605 18:53:53.054"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.128" starttime="20170605 18:53:53.054"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.133" starttime="20170605 18:53:53.132"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.133" starttime="20170605 18:53:53.131"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.134" starttime="20170605 18:53:53.134"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.134" starttime="20170605 18:53:53.133"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.135" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.135" starttime="20170605 18:53:53.135"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.135" starttime="20170605 18:53:53.134"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.137" starttime="20170605 18:53:53.136"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.137" starttime="20170605 18:53:53.136"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.137" starttime="20170605 18:53:53.130"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.137" starttime="20170605 18:53:53.130"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:53.137" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170605 18:53:53.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:53.208" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170605 18:53:53.208" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:53.208" starttime="20170605 18:53:53.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.215" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.215" starttime="20170605 18:53:53.215"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.215" starttime="20170605 18:53:53.214"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.215" starttime="20170605 18:53:53.209"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.215" starttime="20170605 18:53:53.128"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.215" starttime="20170605 18:53:53.128"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.218" starttime="20170605 18:53:53.218"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.218" starttime="20170605 18:53:53.217"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.220" starttime="20170605 18:53:53.219"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.220" starttime="20170605 18:53:53.219"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.221" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.221" starttime="20170605 18:53:53.221"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.221" starttime="20170605 18:53:53.220"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.222" starttime="20170605 18:53:53.222"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.222" starttime="20170605 18:53:53.221"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.223" starttime="20170605 18:53:53.217"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.223" starttime="20170605 18:53:53.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:53:53.223" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170605 18:53:53.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:53:53.320" level="INFO">${stdout} = Linux witherspoon 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 #1 Mon Jun 5 18:37:59 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170605 18:53:53.320" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:53:53.320" starttime="20170605 18:53:53.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.328"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.326"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.321"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.216"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.215"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.328" starttime="20170605 18:53:53.054"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:53.052"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:53.052"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:51.452"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:49.657"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:49.636"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:49.633"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.329" starttime="20170605 18:53:49.633"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:53.331" starttime="20170605 18:53:53.331"></status>
</kw>
<msg timestamp="20170605 18:53:53.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:53.331" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:53:53.331" starttime="20170605 18:53:53.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:53.332" starttime="20170605 18:53:53.331"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:53.355" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:53.355" starttime="20170605 18:53:53.355"></status>
</kw>
<msg timestamp="20170605 18:53:53.355" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:53.355" starttime="20170605 18:53:53.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:53.356" starttime="20170605 18:53:53.356"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.357" starttime="20170605 18:53:53.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:53.357" starttime="20170605 18:53:53.357"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:53.359" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:53.359" starttime="20170605 18:53:53.359"></status>
</kw>
<msg timestamp="20170605 18:53:53.360" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:53.360" starttime="20170605 18:53:53.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:53.362" starttime="20170605 18:53:53.362"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.362" starttime="20170605 18:53:53.361"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:53.362" starttime="20170605 18:53:53.360"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:53.363" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:55.111" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:55.111" starttime="20170605 18:53:53.363"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.112" starttime="20170605 18:53:53.354"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170605 18:53:55.113" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170605 18:53:55.113" starttime="20170605 18:53:55.112"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170605 18:53:55.114" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170605 18:53:55.114" starttime="20170605 18:53:55.114"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:53:55.115" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_elog.txt</msg>
<status status="PASS" endtime="20170605 18:53:55.115" starttime="20170605 18:53:55.115"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:55.118" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:55.119" starttime="20170605 18:53:55.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:55.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:55.119" starttime="20170605 18:53:55.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:55.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:55.120" starttime="20170605 18:53:55.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:55.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:55.121" starttime="20170605 18:53:55.120"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.315" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:55.315" starttime="20170605 18:53:55.121"></status>
</kw>
<msg timestamp="20170605 18:53:55.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:55.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.315" starttime="20170605 18:53:55.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.316" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.316" starttime="20170605 18:53:55.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.317" starttime="20170605 18:53:55.316"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.317" starttime="20170605 18:53:55.117"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.317" starttime="20170605 18:53:55.117"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.317" starttime="20170605 18:53:55.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:55.318" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170605 18:53:55.318" starttime="20170605 18:53:55.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:55.318" starttime="20170605 18:53:55.318"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:55.373" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:53:55.373" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.373" starttime="20170605 18:53:55.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:55.374" starttime="20170605 18:53:55.373"></status>
</kw>
<msg timestamp="20170605 18:53:55.374" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.374" starttime="20170605 18:53:55.115"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170605 18:53:55.375" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:53:55.375" starttime="20170605 18:53:55.375"></status>
</kw>
<msg timestamp="20170605 18:53:55.375" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:53:55.375" starttime="20170605 18:53:55.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170605 18:53:55.376" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170605 18:53:55.376" starttime="20170605 18:53:55.376"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.377" starttime="20170605 18:53:55.376"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.377" starttime="20170605 18:53:55.115"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:53:55.377" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170605 18:53:55.377" starttime="20170605 18:53:55.377"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:55.380" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:55.381" starttime="20170605 18:53:55.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:55.381" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:55.381" starttime="20170605 18:53:55.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:55.382" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:55.382" starttime="20170605 18:53:55.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:55.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:55.383" starttime="20170605 18:53:55.382"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.584" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:55.584" starttime="20170605 18:53:55.383"></status>
</kw>
<msg timestamp="20170605 18:53:55.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:55.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.584" starttime="20170605 18:53:55.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.585" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.585" starttime="20170605 18:53:55.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.586" starttime="20170605 18:53:55.585"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.586" starttime="20170605 18:53:55.379"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.586" starttime="20170605 18:53:55.379"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.586" starttime="20170605 18:53:55.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:55.587" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170605 18:53:55.587" starttime="20170605 18:53:55.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:55.587" starttime="20170605 18:53:55.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:55.892" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:53:55.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.892" starttime="20170605 18:53:55.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:55.893" starttime="20170605 18:53:55.893"></status>
</kw>
<msg timestamp="20170605 18:53:55.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.893" starttime="20170605 18:53:55.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:55.895" starttime="20170605 18:53:55.894"></status>
</kw>
<msg timestamp="20170605 18:53:55.895" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170605 18:53:55.895" starttime="20170605 18:53:55.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:55.895" starttime="20170605 18:53:55.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170605 18:53:55.896" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:55.896" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170605 18:53:55.896" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170605 18:53:55.896" starttime="20170605 18:53:55.896"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:55.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_sensor_list.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:55.898" starttime="20170605 18:53:55.897"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.898" starttime="20170605 18:53:55.897"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:55.898" starttime="20170605 18:53:55.377"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:53:55.899" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170605 18:53:55.899" starttime="20170605 18:53:55.899"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:55.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:55.903" starttime="20170605 18:53:55.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:55.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:55.904" starttime="20170605 18:53:55.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:55.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:55.905" starttime="20170605 18:53:55.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:55.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:55.906" starttime="20170605 18:53:55.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:56.093" starttime="20170605 18:53:55.907"></status>
</kw>
<msg timestamp="20170605 18:53:56.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:56.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.093" starttime="20170605 18:53:55.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.094" starttime="20170605 18:53:56.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.095" starttime="20170605 18:53:56.094"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.095" starttime="20170605 18:53:55.902"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.095" starttime="20170605 18:53:55.901"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.095" starttime="20170605 18:53:55.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:56.096" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170605 18:53:56.096" starttime="20170605 18:53:56.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.096" starttime="20170605 18:53:56.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:56.199" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:53:56.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.200" starttime="20170605 18:53:56.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.200" starttime="20170605 18:53:56.200"></status>
</kw>
<msg timestamp="20170605 18:53:56.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.201" starttime="20170605 18:53:55.899"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.202" starttime="20170605 18:53:56.201"></status>
</kw>
<msg timestamp="20170605 18:53:56.202" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170605 18:53:56.202" starttime="20170605 18:53:56.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.202" starttime="20170605 18:53:56.202"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170605 18:53:56.203" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:53:56.203" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170605 18:53:56.203" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        }
    },
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170605 18:53:56.203" starttime="20170605 18:53:56.203"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_inventory.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:53:56.205" starttime="20170605 18:53:56.204"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.205" starttime="20170605 18:53:56.203"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.205" starttime="20170605 18:53:55.898"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:53:56.206" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_led.txt</msg>
<status status="PASS" endtime="20170605 18:53:56.206" starttime="20170605 18:53:56.205"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:56.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:56.209" starttime="20170605 18:53:56.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:56.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:56.209" starttime="20170605 18:53:56.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:56.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:56.211" starttime="20170605 18:53:56.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:56.211" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:56.212" starttime="20170605 18:53:56.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:56.417" starttime="20170605 18:53:56.213"></status>
</kw>
<msg timestamp="20170605 18:53:56.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:56.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.417" starttime="20170605 18:53:56.212"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.418" starttime="20170605 18:53:56.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.419" starttime="20170605 18:53:56.418"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.419" starttime="20170605 18:53:56.207"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.419" starttime="20170605 18:53:56.207"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.419" starttime="20170605 18:53:56.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:56.420" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170605 18:53:56.420" starttime="20170605 18:53:56.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.420" starttime="20170605 18:53:56.420"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:56.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:53:56.463" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.463" starttime="20170605 18:53:56.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.464" starttime="20170605 18:53:56.463"></status>
</kw>
<msg timestamp="20170605 18:53:56.464" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.464" starttime="20170605 18:53:56.206"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170605 18:53:56.465" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:53:56.465" starttime="20170605 18:53:56.465"></status>
</kw>
<msg timestamp="20170605 18:53:56.465" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:53:56.466" starttime="20170605 18:53:56.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170605 18:53:56.466" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170605 18:53:56.467" starttime="20170605 18:53:56.466"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.467" starttime="20170605 18:53:56.466"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.467" starttime="20170605 18:53:56.205"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:53:56.468" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170605 18:53:56.468" starttime="20170605 18:53:56.467"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:53:56.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:53:56.472" starttime="20170605 18:53:56.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:53:56.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:53:56.473" starttime="20170605 18:53:56.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:53:56.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:53:56.474" starttime="20170605 18:53:56.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:53:56.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:53:56.475" starttime="20170605 18:53:56.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:53:56.652" starttime="20170605 18:53:56.476"></status>
</kw>
<msg timestamp="20170605 18:53:56.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:56.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.652" starttime="20170605 18:53:56.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.653" starttime="20170605 18:53:56.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.654" starttime="20170605 18:53:56.653"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.654" starttime="20170605 18:53:56.470"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.654" starttime="20170605 18:53:56.469"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.654" starttime="20170605 18:53:56.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:53:56.655" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170605 18:53:56.655" starttime="20170605 18:53:56.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.655" starttime="20170605 18:53:56.655"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:53:56.705" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:53:56.705" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.705" starttime="20170605 18:53:56.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.705" starttime="20170605 18:53:56.705"></status>
</kw>
<msg timestamp="20170605 18:53:56.706" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:53:56.706" starttime="20170605 18:53:56.468"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170605 18:53:56.707" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:53:56.707" starttime="20170605 18:53:56.706"></status>
</kw>
<msg timestamp="20170605 18:53:56.707" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:53:56.707" starttime="20170605 18:53:56.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170605 18:53:56.708" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170605 18:53:56.708" starttime="20170605 18:53:56.708"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.708" starttime="20170605 18:53:56.707"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.708" starttime="20170605 18:53:56.467"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.708" starttime="20170605 18:53:55.114"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:55.113"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:55.113"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:55.113"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:53.353"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:53.332"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:53.329"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.709" starttime="20170605 18:53:53.329"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.711" starttime="20170605 18:53:56.711"></status>
</kw>
<msg timestamp="20170605 18:53:56.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:56.711" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:53:56.711" starttime="20170605 18:53:56.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.712" starttime="20170605 18:53:56.712"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:56.736" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:56.736" starttime="20170605 18:53:56.735"></status>
</kw>
<msg timestamp="20170605 18:53:56.736" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:56.736" starttime="20170605 18:53:56.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.738" starttime="20170605 18:53:56.737"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.738" starttime="20170605 18:53:56.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.740" starttime="20170605 18:53:56.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:56.741" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:56.742" starttime="20170605 18:53:56.741"></status>
</kw>
<msg timestamp="20170605 18:53:56.742" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:56.742" starttime="20170605 18:53:56.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:56.745" starttime="20170605 18:53:56.744"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.745" starttime="20170605 18:53:56.743"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:56.745" starttime="20170605 18:53:56.742"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:56.746" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:53:58.544" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:53:58.546" starttime="20170605 18:53:56.745"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:58.546" starttime="20170605 18:53:56.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170605 18:53:58.547" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170605 18:53:58.595" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170605 18:53:58.595" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170605 18:53:58.595" starttime="20170605 18:53:58.546"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170605 18:53:58.596" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170605 18:53:58.596" starttime="20170605 18:53:58.596"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:58.607" starttime="20170605 18:53:58.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.308" starttime="20170605 18:53:58.608"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.308" starttime="20170605 18:53:58.607"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.308" starttime="20170605 18:53:58.597"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170605 18:53:59.308" starttime="20170605 18:53:59.308"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.309" starttime="20170605 18:53:56.733"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.309" starttime="20170605 18:53:56.712"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.309" starttime="20170605 18:53:56.709"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.309" starttime="20170605 18:53:56.709"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.312" starttime="20170605 18:53:59.311"></status>
</kw>
<msg timestamp="20170605 18:53:59.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:53:59.312" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:53:59.312" starttime="20170605 18:53:59.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.313" starttime="20170605 18:53:59.312"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170605 18:53:59.337" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170605 18:53:59.337" starttime="20170605 18:53:59.337"></status>
</kw>
<msg timestamp="20170605 18:53:59.337" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170605 18:53:59.337" starttime="20170605 18:53:59.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.339" starttime="20170605 18:53:59.338"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.339" starttime="20170605 18:53:59.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.339" starttime="20170605 18:53:59.339"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170605 18:53:59.340" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170605 18:53:59.340" starttime="20170605 18:53:59.340"></status>
</kw>
<msg timestamp="20170605 18:53:59.341" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170605 18:53:59.341" starttime="20170605 18:53:59.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:53:59.344" starttime="20170605 18:53:59.343"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.344" starttime="20170605 18:53:59.342"></status>
</kw>
<status status="PASS" endtime="20170605 18:53:59.344" starttime="20170605 18:53:59.341"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170605 18:53:59.345" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170605 18:54:00.994" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170605 18:54:00.995" starttime="20170605 18:53:59.345"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:00.995" starttime="20170605 18:53:59.334"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170605 18:54:00.996" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170605 18:54:00.996" starttime="20170605 18:54:00.996"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170605 18:54:00.998" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170605 18:54:00.998" starttime="20170605 18:54:00.997"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:54:00.999" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170605 18:54:00.999" starttime="20170605 18:54:00.998"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:01.001" starttime="20170605 18:54:01.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:54:01.001" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170605 18:54:01.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:54:01.312" level="INFO">${stdout} = Mem: 146576K used, 286300K free, 14356K shrd, 10444K buff, 49152K cached
CPU:   6% usr   6% sys   0% nic  87% idle   0% io   0% irq   0% sirq
Load average: 2.18 1.56 0.63 1/136 1081
  PID  PPID USER  ...</msg>
<msg timestamp="20170605 18:54:01.312" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:54:01.312" starttime="20170605 18:54:01.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:54:01.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_proc_list.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:01.319" starttime="20170605 18:54:01.319"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.319" starttime="20170605 18:54:01.318"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.319" starttime="20170605 18:54:01.312"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.320" starttime="20170605 18:54:00.999"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.320" starttime="20170605 18:54:00.998"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:54:01.321" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170605 18:54:01.321" starttime="20170605 18:54:01.320"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:01.323" starttime="20170605 18:54:01.322"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:54:01.323" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170605 18:54:01.480" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:54:01.480" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 (jenkins@openbmc-builder2) (gcc version 6.2.0 (GCC) ) #1 Mon Jun 5 18:37:59 UTC 2017
CPU: ARMv6-compatib...</msg>
<msg timestamp="20170605 18:54:01.480" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:54:01.480" starttime="20170605 18:54:01.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:54:01.488" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_dmesg.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:01.488" starttime="20170605 18:54:01.488"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.489" starttime="20170605 18:54:01.487"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.489" starttime="20170605 18:54:01.481"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.489" starttime="20170605 18:54:01.321"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.489" starttime="20170605 18:54:01.320"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:54:01.490" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170605 18:54:01.490" starttime="20170605 18:54:01.489"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:01.491" starttime="20170605 18:54:01.491"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:54:01.492" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170605 18:54:01.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:54:01.579" level="INFO">${stdout} = MemTotal:         432876 kB
MemFree:          286020 kB
MemAvailable:     327236 kB
Buffers:           10444 kB
Cached:            49156 kB
SwapCached:            0 kB
Active:            97204 kB
Inac...</msg>
<msg timestamp="20170605 18:54:01.579" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:54:01.579" starttime="20170605 18:54:01.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:54:01.586" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_meminfo.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:01.586" starttime="20170605 18:54:01.585"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.586" starttime="20170605 18:54:01.585"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.586" starttime="20170605 18:54:01.579"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.586" starttime="20170605 18:54:01.490"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.586" starttime="20170605 18:54:01.489"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:54:01.588" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170605 18:54:01.588" starttime="20170605 18:54:01.587"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:01.589" starttime="20170605 18:54:01.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:54:01.590" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170605 18:54:01.666" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:54:01.666" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170605 18:54:01.666" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:54:01.666" starttime="20170605 18:54:01.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:54:01.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_procinfo.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:01.673" starttime="20170605 18:54:01.672"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.673" starttime="20170605 18:54:01.672"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.673" starttime="20170605 18:54:01.666"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.673" starttime="20170605 18:54:01.588"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:01.673" starttime="20170605 18:54:01.587"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170605 18:54:01.674" level="INFO">${logpath} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170605 18:54:01.674" starttime="20170605 18:54:01.674"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:01.675" starttime="20170605 18:54:01.675"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170605 18:54:01.676" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170605 18:54:02.965" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170605 18:54:02.966" level="INFO">${stdout} = -- Logs begin at Mon 2017-06-05 18:51:37 UTC, end at Mon 2017-06-05 18:54:08 UTC. --
Jun 05 18:51:37 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 05 18:51:37 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170605 18:54:02.966" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170605 18:54:02.966" starttime="20170605 18:54:01.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170605 18:54:02.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_journalctl.txt"&gt;/home/fspcibld/20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/20170605185347789131_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:02.973"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:02.972"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:02.967"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:01.674"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:01.673"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.974" starttime="20170605 18:54:00.998"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:54:00.997"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:54:00.997"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:54:00.996"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:53:59.333"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:53:59.313"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:53:59.309"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:02.975" starttime="20170605 18:53:59.309"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:02.977" starttime="20170605 18:54:02.977"></status>
</kw>
<msg timestamp="20170605 18:54:02.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:54:02.977" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:54:02.977" starttime="20170605 18:54:02.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:02.978" starttime="20170605 18:54:02.977"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:54:03.003" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:54:03.004" starttime="20170605 18:54:03.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:54:03.004" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:54:03.004" starttime="20170605 18:54:03.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:54:03.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:54:03.005" starttime="20170605 18:54:03.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:54:03.006" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:54:03.006" starttime="20170605 18:54:03.005"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:54:03.183" starttime="20170605 18:54:03.006"></status>
</kw>
<msg timestamp="20170605 18:54:03.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:54:03.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:03.183" starttime="20170605 18:54:03.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:54:03.184" starttime="20170605 18:54:03.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:54:03.185" starttime="20170605 18:54:03.184"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.185" starttime="20170605 18:54:03.001"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.185" starttime="20170605 18:54:03.000"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.185" starttime="20170605 18:54:02.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:54:03.186" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170605 18:54:03.186" starttime="20170605 18:54:03.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.186" starttime="20170605 18:54:03.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:54:03.229" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170605 18:54:03.229" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:03.230" starttime="20170605 18:54:03.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.230" starttime="20170605 18:54:03.230"></status>
</kw>
<msg timestamp="20170605 18:54:03.231" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:03.231" starttime="20170605 18:54:02.999"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170605 18:54:03.232" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170605 18:54:03.232" starttime="20170605 18:54:03.231"></status>
</kw>
<msg timestamp="20170605 18:54:03.232" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:54:03.232" starttime="20170605 18:54:03.231"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170605 18:54:03.233" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170605 18:54:03.233" starttime="20170605 18:54:03.232"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.233" starttime="20170605 18:54:02.998"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.233" starttime="20170605 18:54:02.978"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.233" starttime="20170605 18:54:02.975"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.233" starttime="20170605 18:54:02.975"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.235" starttime="20170605 18:54:03.235"></status>
</kw>
<msg timestamp="20170605 18:54:03.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:54:03.235" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170605 18:54:03.235" starttime="20170605 18:54:03.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.236" starttime="20170605 18:54:03.235"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170605 18:54:03.258" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170605 18:54:03.258" starttime="20170605 18:54:03.257"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.259" starttime="20170605 18:54:03.256"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:54:03.236"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:54:03.233"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:54:03.233"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:53:49.633"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:53:49.631"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:53:49.630"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.260" starttime="20170605 18:53:49.630"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170605 18:54:03.449" starttime="20170605 18:54:03.261"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.449" starttime="20170605 18:53:49.629"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.449" starttime="20170605 18:53:44.726"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.450" starttime="20170605 18:53:44.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.450" starttime="20170605 18:54:03.450"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170605 18:54:03.451" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170605 18:54:03.451" starttime="20170605 18:54:03.451"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170605 18:54:03.452" level="INFO">${FFDC_DIR_PATH} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170605 18:54:03.452" starttime="20170605 18:54:03.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.453" starttime="20170605 18:54:03.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.453" starttime="20170605 18:54:03.453"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.454" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170605 18:54:03.454" starttime="20170605 18:54:03.454"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.455" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170605 18:54:03.455" starttime="20170605 18:54:03.455"></status>
</kw>
<msg timestamp="20170605 18:54:03.455" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170605 18:54:03.455" starttime="20170605 18:54:03.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.456" starttime="20170605 18:54:03.455"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.456" starttime="20170605 18:54:03.456"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:54:03.457" level="INFO">${cur_time} = 2017-06-05 18:54:03:457296</msg>
<status status="PASS" endtime="20170605 18:54:03.457" starttime="20170605 18:54:03.457"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:54:03.458" level="INFO">${cur_time} = 20170605185403457296</msg>
<status status="PASS" endtime="20170605 18:54:03.458" starttime="20170605 18:54:03.458"></status>
</kw>
<msg timestamp="20170605 18:54:03.458" level="INFO">${cur_time} = 20170605185403457296</msg>
<status status="PASS" endtime="20170605 18:54:03.458" starttime="20170605 18:54:03.457"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170605 18:54:03.459" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:03.459" starttime="20170605 18:54:03.459"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.459" starttime="20170605 18:54:03.451"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.459" starttime="20170605 18:53:44.397"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.460" starttime="20170605 18:53:44.388"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:03.460" starttime="20170605 18:53:44.387"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170605 18:54:03.460" critical="yes" starttime="20170605 18:53:37.636">404 != 200</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:03.463" starttime="20170605 18:54:03.462"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170605 18:54:03.464" starttime="20170605 18:54:03.463"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170605 18:54:03.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170605 18:54:03.478" starttime="20170605 18:54:03.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170605 18:54:03.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170605 18:54:03.479" starttime="20170605 18:54:03.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170605 18:54:03.480" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170605 18:54:03.480" starttime="20170605 18:54:03.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170605 18:54:03.480" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170605 18:54:03.480" starttime="20170605 18:54:03.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170605 18:54:04.108" starttime="20170605 18:54:03.481"></status>
</kw>
<msg timestamp="20170605 18:54:04.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170605 18:54:04.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.109" starttime="20170605 18:54:03.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.109" starttime="20170605 18:54:04.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.110" starttime="20170605 18:54:04.110"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.110" starttime="20170605 18:54:03.477"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.110" starttime="20170605 18:54:03.476"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.111" starttime="20170605 18:54:03.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170605 18:54:04.111" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170605 18:54:04.111" starttime="20170605 18:54:04.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.112" starttime="20170605 18:54:04.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170605 18:54:04.176" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170605 18:54:04.176" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.176" starttime="20170605 18:54:04.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.177" starttime="20170605 18:54:04.176"></status>
</kw>
<msg timestamp="20170605 18:54:04.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.177" starttime="20170605 18:54:03.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170605 18:54:04.178" starttime="20170605 18:54:04.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170605 18:54:04.178" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170605 18:54:04.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170605 18:54:04.178" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170605 18:54:04.178" starttime="20170605 18:54:04.178"></status>
</kw>
<msg timestamp="20170605 18:54:04.179" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170605 18:54:04.179" starttime="20170605 18:54:03.474"></status>
</kw>
<msg timestamp="20170605 18:54:04.179" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170605 18:54:04.179" starttime="20170605 18:54:03.474"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170605 18:54:04.180" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170605 18:54:04.180" starttime="20170605 18:54:04.180"></status>
</kw>
<msg timestamp="20170605 18:54:04.180" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:54:04.180" starttime="20170605 18:54:04.179"></status>
</kw>
<msg timestamp="20170605 18:54:04.181" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170605 18:54:04.181" starttime="20170605 18:54:03.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.181" starttime="20170605 18:54:04.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.182" starttime="20170605 18:54:04.182"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170605 18:54:04.183" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170605 18:54:04.183" starttime="20170605 18:54:04.183"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170605 18:54:04.183" level="INFO">${FFDC_DIR_PATH} = 20170605185347789131_TestBiosUpdate/20170605185347789131_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170605 18:54:04.183" starttime="20170605 18:54:04.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.184" starttime="20170605 18:54:04.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.185" starttime="20170605 18:54:04.184"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.185" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170605 18:54:04.185" starttime="20170605 18:54:04.185"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.186" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170605 18:54:04.186" starttime="20170605 18:54:04.186"></status>
</kw>
<msg timestamp="20170605 18:54:04.186" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170605 18:54:04.186" starttime="20170605 18:54:04.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.187" starttime="20170605 18:54:04.187"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170605 18:54:04.188" starttime="20170605 18:54:04.187"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:54:04.189" level="INFO">${cur_time} = 2017-06-05 18:54:04:188802</msg>
<status status="PASS" endtime="20170605 18:54:04.189" starttime="20170605 18:54:04.189"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170605 18:54:04.190" level="INFO">${cur_time} = 20170605185404188802</msg>
<status status="PASS" endtime="20170605 18:54:04.190" starttime="20170605 18:54:04.189"></status>
</kw>
<msg timestamp="20170605 18:54:04.190" level="INFO">${cur_time} = 20170605185404188802</msg>
<status status="PASS" endtime="20170605 18:54:04.190" starttime="20170605 18:54:04.188"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170605 18:54:04.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170605 18:54:04.191" starttime="20170605 18:54:04.191"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.191" starttime="20170605 18:54:04.182"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.191" starttime="20170605 18:54:03.473"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.191" starttime="20170605 18:54:03.464"></status>
</kw>
<status status="PASS" endtime="20170605 18:54:04.192" starttime="20170605 18:54:03.463"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170605 18:54:04.192" critical="yes" starttime="20170605 18:54:03.462"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170605 18:54:04.193" starttime="20170605 18:53:36.408"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
