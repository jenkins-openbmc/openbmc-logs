<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170731 16:34:51.374" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170731 16:34:52.269" level="INFO">Length is 42</msg>
<status status="PASS" endtime="20170731 16:34:52.269" starttime="20170731 16:34:52.267"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170731 16:34:52.270" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor"&gt;/home/fspcibld/witherspoon_910_golden.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170731 16:34:52.270" starttime="20170731 16:34:52.269"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:52.270" starttime="20170731 16:34:52.266"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170731 16:34:52.278" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 16:34:52.360" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:34:52.360" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170731 16:34:53.147" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170731 16:34:53.147" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170731 16:34:53.242" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 16:34:53.251" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170731 16:34:53.251" level="INFO">${stderr} = </msg>
<msg timestamp="20170731 16:34:53.251" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170731 16:34:53.251" starttime="20170731 16:34:52.344"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.253" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170731 16:34:53.253" starttime="20170731 16:34:53.251"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.254" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170731 16:34:53.254" starttime="20170731 16:34:53.254"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.254" starttime="20170731 16:34:52.342"></status>
</kw>
<msg timestamp="20170731 16:34:53.254" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170731 16:34:53.486" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170731 16:34:53.518" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170731 16:34:53.518" starttime="20170731 16:34:53.515"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:53.520" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170731 16:34:53.520" starttime="20170731 16:34:53.520"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:53.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:53.526" starttime="20170731 16:34:53.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:53.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:53.527" starttime="20170731 16:34:53.526"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:53.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:53.527" starttime="20170731 16:34:53.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:53.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:53.528" starttime="20170731 16:34:53.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.744" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:53.744" starttime="20170731 16:34:53.529"></status>
</kw>
<msg timestamp="20170731 16:34:53.744" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:53.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.744" starttime="20170731 16:34:53.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.745" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.745" starttime="20170731 16:34:53.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.746" starttime="20170731 16:34:53.745"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.746" starttime="20170731 16:34:53.523"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.746" starttime="20170731 16:34:53.522"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.746" starttime="20170731 16:34:53.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:53.747" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170731 16:34:53.747" starttime="20170731 16:34:53.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:53.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:53.747" starttime="20170731 16:34:53.747"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:53.748" starttime="20170731 16:34:53.747"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:34:53.749" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170731 16:34:53.749" starttime="20170731 16:34:53.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:34:53.750" level="INFO">URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170731 16:34:53.750" starttime="20170731 16:34:53.750"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.751" starttime="20170731 16:34:53.750"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.751" starttime="20170731 16:34:53.748"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:53.944" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 16:34:53.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.944" starttime="20170731 16:34:53.751"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:34:53.945" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:34:53.945" starttime="20170731 16:34:53.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:34:53.946" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:34:53.946" starttime="20170731 16:34:53.946"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.947" starttime="20170731 16:34:53.946"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.947" starttime="20170731 16:34:53.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:53.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:53.947" starttime="20170731 16:34:53.947"></status>
</kw>
<msg timestamp="20170731 16:34:53.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.947" starttime="20170731 16:34:53.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:53.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:53.948" starttime="20170731 16:34:53.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 16:34:53.949" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:53.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:53.949" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170731 16:34:53.949" starttime="20170731 16:34:53.948"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:53.949" starttime="20170731 16:34:53.519"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:53.960" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:53.961" starttime="20170731 16:34:53.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:53.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:53.961" starttime="20170731 16:34:53.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:53.962" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:53.962" starttime="20170731 16:34:53.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:53.963" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:53.963" starttime="20170731 16:34:53.962"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:54.146" starttime="20170731 16:34:53.963"></status>
</kw>
<msg timestamp="20170731 16:34:54.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:54.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.146" starttime="20170731 16:34:53.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.147" starttime="20170731 16:34:54.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.147" starttime="20170731 16:34:54.147"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.148" starttime="20170731 16:34:53.960"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.148" starttime="20170731 16:34:53.959"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.148" starttime="20170731 16:34:53.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:54.148" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170731 16:34:54.148" starttime="20170731 16:34:54.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.149" starttime="20170731 16:34:54.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:54.233" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170731 16:34:54.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.234" starttime="20170731 16:34:54.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.234" starttime="20170731 16:34:54.234"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:54.235" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:54.235" starttime="20170731 16:34:54.235"></status>
</kw>
<msg timestamp="20170731 16:34:54.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.235" starttime="20170731 16:34:53.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.236" starttime="20170731 16:34:54.235"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:34:54.236" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:54.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:54.237" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170731 16:34:54.237" starttime="20170731 16:34:54.236"></status>
</kw>
<msg timestamp="20170731 16:34:54.237" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170731 16:34:54.237" starttime="20170731 16:34:53.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.237" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.238" starttime="20170731 16:34:54.237"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.238" starttime="20170731 16:34:53.510"></status>
</kw>
<msg timestamp="20170731 16:34:54.284" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:34:54.302" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:34:54.306" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170731 16:34:54.307" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:54.341" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:54.345" starttime="20170731 16:34:54.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:54.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:54.345" starttime="20170731 16:34:54.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:54.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:54.346" starttime="20170731 16:34:54.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:54.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:54.347" starttime="20170731 16:34:54.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:54.537" starttime="20170731 16:34:54.348"></status>
</kw>
<msg timestamp="20170731 16:34:54.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:54.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.537" starttime="20170731 16:34:54.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.538" starttime="20170731 16:34:54.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.539" starttime="20170731 16:34:54.539"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.539" starttime="20170731 16:34:54.339"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.539" starttime="20170731 16:34:54.339"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.539" starttime="20170731 16:34:54.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:54.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:34:54.540" starttime="20170731 16:34:54.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.541" starttime="20170731 16:34:54.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:54.624" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:34:54.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.624" starttime="20170731 16:34:54.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.625" starttime="20170731 16:34:54.625"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:54.626" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:54.626" starttime="20170731 16:34:54.626"></status>
</kw>
<msg timestamp="20170731 16:34:54.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.626" starttime="20170731 16:34:54.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.627" starttime="20170731 16:34:54.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:34:54.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:54.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:54.627" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:34:54.627" starttime="20170731 16:34:54.627"></status>
</kw>
<msg timestamp="20170731 16:34:54.628" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:34:54.628" starttime="20170731 16:34:54.336"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.628" starttime="20170731 16:34:54.334"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:54.632" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:54.633" starttime="20170731 16:34:54.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:54.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:54.633" starttime="20170731 16:34:54.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:54.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:54.634" starttime="20170731 16:34:54.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:54.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:54.635" starttime="20170731 16:34:54.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.824" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:54.824" starttime="20170731 16:34:54.635"></status>
</kw>
<msg timestamp="20170731 16:34:54.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:54.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.825" starttime="20170731 16:34:54.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.825" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.825" starttime="20170731 16:34:54.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.826" starttime="20170731 16:34:54.826"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.826" starttime="20170731 16:34:54.631"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.826" starttime="20170731 16:34:54.631"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.827" starttime="20170731 16:34:54.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:54.827" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:34:54.827" starttime="20170731 16:34:54.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.828" starttime="20170731 16:34:54.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:54.891" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:34:54.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.892" starttime="20170731 16:34:54.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:54.892" starttime="20170731 16:34:54.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:54.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:54.893" starttime="20170731 16:34:54.893"></status>
</kw>
<msg timestamp="20170731 16:34:54.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.893" starttime="20170731 16:34:54.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:54.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:54.894" starttime="20170731 16:34:54.893"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:34:54.894" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:54.894" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:54.894" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:34:54.895" starttime="20170731 16:34:54.894"></status>
</kw>
<msg timestamp="20170731 16:34:54.895" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:34:54.895" starttime="20170731 16:34:54.629"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:54.895" starttime="20170731 16:34:54.629"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:54.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:54.900" starttime="20170731 16:34:54.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:54.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:54.900" starttime="20170731 16:34:54.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:54.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:54.901" starttime="20170731 16:34:54.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:54.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:54.902" starttime="20170731 16:34:54.901"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:55.078" starttime="20170731 16:34:54.902"></status>
</kw>
<msg timestamp="20170731 16:34:55.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:55.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.079" starttime="20170731 16:34:54.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.079" starttime="20170731 16:34:55.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.080" starttime="20170731 16:34:55.080"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.080" starttime="20170731 16:34:54.898"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.080" starttime="20170731 16:34:54.898"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.081" starttime="20170731 16:34:54.897"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:55.081" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:34:55.081" starttime="20170731 16:34:55.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.082" starttime="20170731 16:34:55.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:55.150" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:34:55.150" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.150" starttime="20170731 16:34:55.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.151" starttime="20170731 16:34:55.151"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:55.152" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:55.152" starttime="20170731 16:34:55.151"></status>
</kw>
<msg timestamp="20170731 16:34:55.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.152" starttime="20170731 16:34:54.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.153" starttime="20170731 16:34:55.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:34:55.153" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:55.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:55.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:34:55.153" starttime="20170731 16:34:55.153"></status>
</kw>
<msg timestamp="20170731 16:34:55.154" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:34:55.154" starttime="20170731 16:34:54.896"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.154" starttime="20170731 16:34:54.895"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:55.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:55.158" starttime="20170731 16:34:55.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:55.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:55.159" starttime="20170731 16:34:55.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:55.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:55.160" starttime="20170731 16:34:55.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:55.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:55.160" starttime="20170731 16:34:55.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.373" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:55.373" starttime="20170731 16:34:55.161"></status>
</kw>
<msg timestamp="20170731 16:34:55.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:55.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.373" starttime="20170731 16:34:55.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.374" starttime="20170731 16:34:55.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.374" starttime="20170731 16:34:55.374"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.375" starttime="20170731 16:34:55.157"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.375" starttime="20170731 16:34:55.156"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.375" starttime="20170731 16:34:55.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:55.375" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:34:55.375" starttime="20170731 16:34:55.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.376" starttime="20170731 16:34:55.376"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:55.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:34:55.439" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.439" starttime="20170731 16:34:55.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.440" starttime="20170731 16:34:55.440"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:55.440" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:55.441" starttime="20170731 16:34:55.440"></status>
</kw>
<msg timestamp="20170731 16:34:55.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.441" starttime="20170731 16:34:55.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.442" starttime="20170731 16:34:55.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:34:55.442" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:34:55.442" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:34:55.442" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:34:55.442" starttime="20170731 16:34:55.442"></status>
</kw>
<msg timestamp="20170731 16:34:55.443" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:34:55.443" starttime="20170731 16:34:55.155"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.443" starttime="20170731 16:34:55.154"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.472" starttime="20170731 16:34:52.278"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170731 16:34:55.476" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170731 16:34:55.478" starttime="20170731 16:34:55.472"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.478" starttime="20170731 16:34:52.277"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.478" starttime="20170731 16:34:52.271"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:34:55.488" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:34:55.488" starttime="20170731 16:34:55.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:34:55.489" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:34:55.489" starttime="20170731 16:34:55.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:34:55.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:34:55.490" starttime="20170731 16:34:55.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:34:55.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:34:55.490" starttime="20170731 16:34:55.490"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:34:55.699" starttime="20170731 16:34:55.491"></status>
</kw>
<msg timestamp="20170731 16:34:55.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:34:55.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.699" starttime="20170731 16:34:55.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.700" starttime="20170731 16:34:55.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.701" starttime="20170731 16:34:55.700"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.701" starttime="20170731 16:34:55.487"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.701" starttime="20170731 16:34:55.487"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.701" starttime="20170731 16:34:55.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:34:55.702" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170731 16:34:55.702" starttime="20170731 16:34:55.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.702" starttime="20170731 16:34:55.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:34:55.763" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170731 16:34:55.763" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.763" starttime="20170731 16:34:55.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.764" starttime="20170731 16:34:55.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:34:55.764" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:34:55.765" starttime="20170731 16:34:55.764"></status>
</kw>
<msg timestamp="20170731 16:34:55.765" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:34:55.765" starttime="20170731 16:34:55.485"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170731 16:34:55.765" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:34:55.766" starttime="20170731 16:34:55.765"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.766" starttime="20170731 16:34:55.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.766" starttime="20170731 16:34:55.478"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:55.766" starttime="20170731 16:34:52.270"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.780" starttime="20170731 16:34:55.774"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:55.781" starttime="20170731 16:34:55.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:34:56.421" starttime="20170731 16:34:55.782"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:56.421" starttime="20170731 16:34:55.782"></status>
</kw>
<status status="PASS" endtime="20170731 16:34:56.421" starttime="20170731 16:34:55.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170731 16:34:56.422" level="INFO">Copying /home/fspcibld/witherspoon_910_golden.pnor to /tmp</msg>
<status status="PASS" endtime="20170731 16:34:56.422" starttime="20170731 16:34:56.421"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:25.291" starttime="20170731 16:34:56.422"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:25.291" starttime="20170731 16:34:55.773"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:25.291" starttime="20170731 16:34:55.767"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170731 16:35:25.293" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170731 16:35:25.293" level="INFO">${pnor_basename} = witherspoon_910_golden.pnor</msg>
<status status="PASS" endtime="20170731 16:35:25.293" starttime="20170731 16:35:25.292"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon_910_golden.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170731 16:35:25.301" level="INFO">@{arglist} = [ /tmp/witherspoon_910_golden.pnor ]</msg>
<status status="PASS" endtime="20170731 16:35:25.301" starttime="20170731 16:35:25.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170731 16:35:25.302" level="INFO">${args} = {u'data': [u'/tmp/witherspoon_910_golden.pnor']}</msg>
<status status="PASS" endtime="20170731 16:35:25.302" starttime="20170731 16:35:25.302"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:25.304" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170731 16:35:25.304" starttime="20170731 16:35:25.304"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:25.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:25.309" starttime="20170731 16:35:25.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:25.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:25.310" starttime="20170731 16:35:25.309"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:25.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:25.311" starttime="20170731 16:35:25.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:25.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:25.312" starttime="20170731 16:35:25.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:25.529" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:25.529" starttime="20170731 16:35:25.313"></status>
</kw>
<msg timestamp="20170731 16:35:25.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:25.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.529" starttime="20170731 16:35:25.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:25.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.530" starttime="20170731 16:35:25.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:25.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.531" starttime="20170731 16:35:25.530"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:25.531" starttime="20170731 16:35:25.307"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:25.531" starttime="20170731 16:35:25.307"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:25.531" starttime="20170731 16:35:25.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:25.532" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170731 16:35:25.532" starttime="20170731 16:35:25.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:25.532" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:25.532" starttime="20170731 16:35:25.532"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:25.533" starttime="20170731 16:35:25.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:25.533" starttime="20170731 16:35:25.533"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:25.844" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon_910_golden.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170731 16:35:25.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.844" starttime="20170731 16:35:25.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:25.845" starttime="20170731 16:35:25.845"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:25.846" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:25.846" starttime="20170731 16:35:25.845"></status>
</kw>
<msg timestamp="20170731 16:35:25.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.846" starttime="20170731 16:35:25.305"></status>
</kw>
<msg timestamp="20170731 16:35:25.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.846" starttime="20170731 16:35:25.303"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:25.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:25.847" starttime="20170731 16:35:25.846"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:25.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:25.852" starttime="20170731 16:35:25.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:25.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:25.852" starttime="20170731 16:35:25.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:25.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:25.853" starttime="20170731 16:35:25.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:25.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:25.854" starttime="20170731 16:35:25.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:26.233" starttime="20170731 16:35:25.854"></status>
</kw>
<msg timestamp="20170731 16:35:26.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:26.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.233" starttime="20170731 16:35:25.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.234" starttime="20170731 16:35:26.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.235" starttime="20170731 16:35:26.234"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.235" starttime="20170731 16:35:25.850"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.235" starttime="20170731 16:35:25.850"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.235" starttime="20170731 16:35:25.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:26.236" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:35:26.236" starttime="20170731 16:35:26.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:26.236" starttime="20170731 16:35:26.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:26.446" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:35:26.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.446" starttime="20170731 16:35:26.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:26.447" starttime="20170731 16:35:26.447"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:26.447" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:26.447" starttime="20170731 16:35:26.447"></status>
</kw>
<msg timestamp="20170731 16:35:26.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.448" starttime="20170731 16:35:25.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.448" starttime="20170731 16:35:26.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:35:26.449" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:35:26.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:35:26.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:35:26.449" starttime="20170731 16:35:26.449"></status>
</kw>
<msg timestamp="20170731 16:35:26.449" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:35:26.450" starttime="20170731 16:35:25.848"></status>
</kw>
<msg timestamp="20170731 16:35:26.450" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:35:26.450" starttime="20170731 16:35:25.848"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flashing</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:26.450" starttime="20170731 16:35:26.450"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.451" starttime="20170731 16:35:25.848"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.451" starttime="20170731 16:35:25.847"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.451" starttime="20170731 16:35:25.300"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.451" starttime="20170731 16:35:25.293"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds \ 7 min \ 10 sec \ Is PNOR Flash Done</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>7 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flash Done</arg>
</arguments>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:26.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:26.463" starttime="20170731 16:35:26.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:26.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:26.463" starttime="20170731 16:35:26.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:26.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:26.464" starttime="20170731 16:35:26.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:26.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:26.465" starttime="20170731 16:35:26.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:26.888" starttime="20170731 16:35:26.465"></status>
</kw>
<msg timestamp="20170731 16:35:26.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:26.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.888" starttime="20170731 16:35:26.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.889" starttime="20170731 16:35:26.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:26.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:26.889" starttime="20170731 16:35:26.889"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.890" starttime="20170731 16:35:26.461"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.890" starttime="20170731 16:35:26.461"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:26.890" starttime="20170731 16:35:26.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:26.890" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:35:26.890" starttime="20170731 16:35:26.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:26.891" starttime="20170731 16:35:26.891"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:27.108" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:35:27.108" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:27.108" starttime="20170731 16:35:26.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:27.109" starttime="20170731 16:35:27.109"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:27.109" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:27.109" starttime="20170731 16:35:27.109"></status>
</kw>
<msg timestamp="20170731 16:35:27.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:27.110" starttime="20170731 16:35:26.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:27.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:27.110" starttime="20170731 16:35:27.110"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:35:27.111" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:35:27.111" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:35:27.111" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:35:27.111" starttime="20170731 16:35:27.111"></status>
</kw>
<msg timestamp="20170731 16:35:27.111" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:35:27.112" starttime="20170731 16:35:26.459"></status>
</kw>
<msg timestamp="20170731 16:35:27.112" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:35:27.112" starttime="20170731 16:35:26.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:35:27.113" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:35:27.113" starttime="20170731 16:35:27.112"></status>
</kw>
<status status="FAIL" endtime="20170731 16:35:27.113" starttime="20170731 16:35:26.458"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:37.118" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:37.118" starttime="20170731 16:35:37.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:37.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:37.119" starttime="20170731 16:35:37.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:37.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:37.120" starttime="20170731 16:35:37.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:37.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:37.120" starttime="20170731 16:35:37.120"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:37.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:37.712" starttime="20170731 16:35:37.121"></status>
</kw>
<msg timestamp="20170731 16:35:37.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:37.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.712" starttime="20170731 16:35:37.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:37.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.713" starttime="20170731 16:35:37.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:37.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.714" starttime="20170731 16:35:37.714"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:37.714" starttime="20170731 16:35:37.117"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:37.714" starttime="20170731 16:35:37.116"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:37.714" starttime="20170731 16:35:37.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:37.715" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:35:37.715" starttime="20170731 16:35:37.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:37.716" starttime="20170731 16:35:37.715"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:37.797" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:35:37.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.797" starttime="20170731 16:35:37.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:37.798" starttime="20170731 16:35:37.798"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:37.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:37.799" starttime="20170731 16:35:37.798"></status>
</kw>
<msg timestamp="20170731 16:35:37.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.799" starttime="20170731 16:35:37.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:37.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:37.799" starttime="20170731 16:35:37.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:35:37.800" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:35:37.800" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:35:37.800" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:35:37.800" starttime="20170731 16:35:37.800"></status>
</kw>
<msg timestamp="20170731 16:35:37.801" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:35:37.801" starttime="20170731 16:35:37.115"></status>
</kw>
<msg timestamp="20170731 16:35:37.801" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:35:37.801" starttime="20170731 16:35:37.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:35:37.802" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:35:37.802" starttime="20170731 16:35:37.801"></status>
</kw>
<status status="FAIL" endtime="20170731 16:35:37.802" starttime="20170731 16:35:37.114"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:47.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:47.807" starttime="20170731 16:35:47.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:47.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:47.808" starttime="20170731 16:35:47.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:47.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:47.809" starttime="20170731 16:35:47.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:47.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:47.809" starttime="20170731 16:35:47.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:47.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:47.996" starttime="20170731 16:35:47.810"></status>
</kw>
<msg timestamp="20170731 16:35:47.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:47.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:47.997" starttime="20170731 16:35:47.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:47.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:47.997" starttime="20170731 16:35:47.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:47.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:47.998" starttime="20170731 16:35:47.998"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:47.998" starttime="20170731 16:35:47.806"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:47.998" starttime="20170731 16:35:47.805"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:47.998" starttime="20170731 16:35:47.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:47.999" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:35:47.999" starttime="20170731 16:35:47.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:48.000" starttime="20170731 16:35:47.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:48.674" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:35:48.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:48.674" starttime="20170731 16:35:48.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:48.675" starttime="20170731 16:35:48.674"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:48.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:48.675" starttime="20170731 16:35:48.675"></status>
</kw>
<msg timestamp="20170731 16:35:48.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:48.675" starttime="20170731 16:35:47.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:48.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:48.676" starttime="20170731 16:35:48.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:35:48.677" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:35:48.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:35:48.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:35:48.677" starttime="20170731 16:35:48.676"></status>
</kw>
<msg timestamp="20170731 16:35:48.677" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:35:48.677" starttime="20170731 16:35:47.803"></status>
</kw>
<msg timestamp="20170731 16:35:48.677" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:35:48.678" starttime="20170731 16:35:47.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:35:48.678" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:35:48.678" starttime="20170731 16:35:48.678"></status>
</kw>
<status status="FAIL" endtime="20170731 16:35:48.678" starttime="20170731 16:35:47.802"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:35:58.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:35:58.684" starttime="20170731 16:35:58.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:35:58.685" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:35:58.685" starttime="20170731 16:35:58.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:35:58.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:35:58.685" starttime="20170731 16:35:58.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:35:58.686" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:35:58.686" starttime="20170731 16:35:58.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:35:58.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:35:58.863" starttime="20170731 16:35:58.687"></status>
</kw>
<msg timestamp="20170731 16:35:58.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:35:58.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.863" starttime="20170731 16:35:58.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:35:58.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.864" starttime="20170731 16:35:58.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:58.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.865" starttime="20170731 16:35:58.865"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:58.865" starttime="20170731 16:35:58.682"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:58.865" starttime="20170731 16:35:58.682"></status>
</kw>
<status status="PASS" endtime="20170731 16:35:58.865" starttime="20170731 16:35:58.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:35:58.866" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:35:58.866" starttime="20170731 16:35:58.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:58.867" starttime="20170731 16:35:58.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:35:58.950" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:35:58.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.950" starttime="20170731 16:35:58.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:35:58.951" starttime="20170731 16:35:58.951"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:35:58.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:35:58.951" starttime="20170731 16:35:58.951"></status>
</kw>
<msg timestamp="20170731 16:35:58.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.952" starttime="20170731 16:35:58.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:35:58.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:35:58.952" starttime="20170731 16:35:58.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:35:58.953" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:35:58.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:35:58.953" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:35:58.953" starttime="20170731 16:35:58.953"></status>
</kw>
<msg timestamp="20170731 16:35:58.954" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:35:58.954" starttime="20170731 16:35:58.680"></status>
</kw>
<msg timestamp="20170731 16:35:58.954" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:35:58.954" starttime="20170731 16:35:58.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:35:58.955" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:35:58.955" starttime="20170731 16:35:58.954"></status>
</kw>
<status status="FAIL" endtime="20170731 16:35:58.955" starttime="20170731 16:35:58.679"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:36:08.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:36:08.960" starttime="20170731 16:36:08.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:36:08.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:36:08.961" starttime="20170731 16:36:08.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:36:08.962" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:36:08.962" starttime="20170731 16:36:08.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:36:08.962" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:36:08.962" starttime="20170731 16:36:08.962"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:36:09.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:36:09.851" starttime="20170731 16:36:08.963"></status>
</kw>
<msg timestamp="20170731 16:36:09.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:36:09.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.851" starttime="20170731 16:36:08.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:36:09.852" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.852" starttime="20170731 16:36:09.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:09.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.853" starttime="20170731 16:36:09.852"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:09.853" starttime="20170731 16:36:08.958"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:09.853" starttime="20170731 16:36:08.958"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:09.853" starttime="20170731 16:36:08.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:36:09.854" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:36:09.854" starttime="20170731 16:36:09.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:09.854" starttime="20170731 16:36:09.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:36:09.946" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:36:09.946" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.946" starttime="20170731 16:36:09.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:09.947" starttime="20170731 16:36:09.947"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:36:09.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:36:09.948" starttime="20170731 16:36:09.947"></status>
</kw>
<msg timestamp="20170731 16:36:09.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.948" starttime="20170731 16:36:08.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:09.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:09.949" starttime="20170731 16:36:09.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:36:09.949" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:36:09.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:36:09.949" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:36:09.949" starttime="20170731 16:36:09.949"></status>
</kw>
<msg timestamp="20170731 16:36:09.950" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:36:09.950" starttime="20170731 16:36:08.956"></status>
</kw>
<msg timestamp="20170731 16:36:09.950" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:36:09.950" starttime="20170731 16:36:08.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:36:09.951" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:36:09.951" starttime="20170731 16:36:09.950"></status>
</kw>
<status status="FAIL" endtime="20170731 16:36:09.951" starttime="20170731 16:36:08.955"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:36:19.956" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:36:19.956" starttime="20170731 16:36:19.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:36:19.957" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:36:19.957" starttime="20170731 16:36:19.957"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:36:19.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:36:19.958" starttime="20170731 16:36:19.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:36:19.958" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:36:19.958" starttime="20170731 16:36:19.958"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:36:20.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:36:20.135" starttime="20170731 16:36:19.959"></status>
</kw>
<msg timestamp="20170731 16:36:20.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:36:20.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.135" starttime="20170731 16:36:19.959"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:36:20.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.136" starttime="20170731 16:36:20.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:20.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.137" starttime="20170731 16:36:20.136"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:20.137" starttime="20170731 16:36:19.955"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:20.137" starttime="20170731 16:36:19.954"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:20.137" starttime="20170731 16:36:19.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:36:20.138" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:36:20.138" starttime="20170731 16:36:20.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:20.138" starttime="20170731 16:36:20.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:36:20.221" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:36:20.222" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.222" starttime="20170731 16:36:20.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:20.222" starttime="20170731 16:36:20.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:36:20.223" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:36:20.223" starttime="20170731 16:36:20.223"></status>
</kw>
<msg timestamp="20170731 16:36:20.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.223" starttime="20170731 16:36:19.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:20.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:20.224" starttime="20170731 16:36:20.223"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:36:20.225" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:36:20.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:36:20.225" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:36:20.225" starttime="20170731 16:36:20.224"></status>
</kw>
<msg timestamp="20170731 16:36:20.225" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:36:20.225" starttime="20170731 16:36:19.952"></status>
</kw>
<msg timestamp="20170731 16:36:20.225" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:36:20.226" starttime="20170731 16:36:19.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:36:20.226" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:36:20.226" starttime="20170731 16:36:20.226"></status>
</kw>
<status status="FAIL" endtime="20170731 16:36:20.226" starttime="20170731 16:36:19.951"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:36:30.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:36:30.233" starttime="20170731 16:36:30.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:36:30.233" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:36:30.233" starttime="20170731 16:36:30.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:36:30.234" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:36:30.234" starttime="20170731 16:36:30.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:36:30.235" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:36:30.235" starttime="20170731 16:36:30.234"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:36:30.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:36:30.411" starttime="20170731 16:36:30.235"></status>
</kw>
<msg timestamp="20170731 16:36:30.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:36:30.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.412" starttime="20170731 16:36:30.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:36:30.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.412" starttime="20170731 16:36:30.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:30.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.413" starttime="20170731 16:36:30.413"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:30.413" starttime="20170731 16:36:30.230"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:30.413" starttime="20170731 16:36:30.230"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:30.413" starttime="20170731 16:36:30.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:36:30.414" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:36:30.414" starttime="20170731 16:36:30.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:30.415" starttime="20170731 16:36:30.414"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:36:30.497" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:36:30.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.498" starttime="20170731 16:36:30.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:30.498" starttime="20170731 16:36:30.498"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:36:30.499" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:36:30.499" starttime="20170731 16:36:30.499"></status>
</kw>
<msg timestamp="20170731 16:36:30.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.499" starttime="20170731 16:36:30.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:30.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:30.500" starttime="20170731 16:36:30.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:36:30.500" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:36:30.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:36:30.500" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:36:30.501" starttime="20170731 16:36:30.500"></status>
</kw>
<msg timestamp="20170731 16:36:30.501" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:36:30.501" starttime="20170731 16:36:30.228"></status>
</kw>
<msg timestamp="20170731 16:36:30.501" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:36:30.501" starttime="20170731 16:36:30.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:36:30.502" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:36:30.502" starttime="20170731 16:36:30.501"></status>
</kw>
<status status="FAIL" endtime="20170731 16:36:30.502" starttime="20170731 16:36:30.227"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:36:40.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:36:40.508" starttime="20170731 16:36:40.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:36:40.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:36:40.508" starttime="20170731 16:36:40.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:36:40.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:36:40.509" starttime="20170731 16:36:40.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:36:40.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:36:40.510" starttime="20170731 16:36:40.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:36:40.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:36:40.695" starttime="20170731 16:36:40.510"></status>
</kw>
<msg timestamp="20170731 16:36:40.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:36:40.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.695" starttime="20170731 16:36:40.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:36:40.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.696" starttime="20170731 16:36:40.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:40.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.697" starttime="20170731 16:36:40.696"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:40.697" starttime="20170731 16:36:40.506"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:40.697" starttime="20170731 16:36:40.506"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:40.697" starttime="20170731 16:36:40.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:36:40.698" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:36:40.698" starttime="20170731 16:36:40.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:40.698" starttime="20170731 16:36:40.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:36:40.783" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:36:40.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.784" starttime="20170731 16:36:40.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:40.784" starttime="20170731 16:36:40.784"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:36:40.785" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:36:40.785" starttime="20170731 16:36:40.785"></status>
</kw>
<msg timestamp="20170731 16:36:40.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.785" starttime="20170731 16:36:40.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:40.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:40.786" starttime="20170731 16:36:40.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:36:40.786" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:36:40.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:36:40.787" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:36:40.787" starttime="20170731 16:36:40.786"></status>
</kw>
<msg timestamp="20170731 16:36:40.787" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:36:40.787" starttime="20170731 16:36:40.504"></status>
</kw>
<msg timestamp="20170731 16:36:40.787" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:36:40.787" starttime="20170731 16:36:40.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:36:40.788" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:36:40.788" starttime="20170731 16:36:40.787"></status>
</kw>
<status status="FAIL" endtime="20170731 16:36:40.788" starttime="20170731 16:36:40.503"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:36:50.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:36:50.794" starttime="20170731 16:36:50.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:36:50.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:36:50.794" starttime="20170731 16:36:50.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:36:50.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:36:50.795" starttime="20170731 16:36:50.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:36:50.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:36:50.796" starttime="20170731 16:36:50.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:36:51.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:36:51.182" starttime="20170731 16:36:50.796"></status>
</kw>
<msg timestamp="20170731 16:36:51.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:36:51.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.183" starttime="20170731 16:36:50.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:36:51.183" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.183" starttime="20170731 16:36:51.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:51.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.184" starttime="20170731 16:36:51.184"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:51.184" starttime="20170731 16:36:50.792"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:51.184" starttime="20170731 16:36:50.791"></status>
</kw>
<status status="PASS" endtime="20170731 16:36:51.185" starttime="20170731 16:36:50.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:36:51.185" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:36:51.185" starttime="20170731 16:36:51.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:51.186" starttime="20170731 16:36:51.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:36:51.513" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:36:51.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.513" starttime="20170731 16:36:51.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:36:51.514" starttime="20170731 16:36:51.513"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:36:51.514" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:36:51.515" starttime="20170731 16:36:51.514"></status>
</kw>
<msg timestamp="20170731 16:36:51.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.515" starttime="20170731 16:36:50.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:36:51.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:36:51.516" starttime="20170731 16:36:51.515"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:36:51.517" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:36:51.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:36:51.517" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:36:51.517" starttime="20170731 16:36:51.516"></status>
</kw>
<msg timestamp="20170731 16:36:51.517" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:36:51.518" starttime="20170731 16:36:50.790"></status>
</kw>
<msg timestamp="20170731 16:36:51.518" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:36:51.518" starttime="20170731 16:36:50.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:36:51.519" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:36:51.519" starttime="20170731 16:36:51.518"></status>
</kw>
<status status="FAIL" endtime="20170731 16:36:51.519" starttime="20170731 16:36:50.789"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:01.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:01.525" starttime="20170731 16:37:01.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:01.525" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:01.525" starttime="20170731 16:37:01.525"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:01.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:01.526" starttime="20170731 16:37:01.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:01.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:01.527" starttime="20170731 16:37:01.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:02.084" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:02.084" starttime="20170731 16:37:01.527"></status>
</kw>
<msg timestamp="20170731 16:37:02.084" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:02.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.084" starttime="20170731 16:37:01.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:02.085" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.085" starttime="20170731 16:37:02.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:02.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.086" starttime="20170731 16:37:02.085"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:02.086" starttime="20170731 16:37:01.523"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:02.086" starttime="20170731 16:37:01.523"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:02.086" starttime="20170731 16:37:01.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:02.087" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:02.087" starttime="20170731 16:37:02.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:02.087" starttime="20170731 16:37:02.087"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:02.168" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:02.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.168" starttime="20170731 16:37:02.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:02.169" starttime="20170731 16:37:02.168"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:02.169" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:02.169" starttime="20170731 16:37:02.169"></status>
</kw>
<msg timestamp="20170731 16:37:02.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.170" starttime="20170731 16:37:01.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:02.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:02.170" starttime="20170731 16:37:02.170"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:02.171" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:02.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:02.171" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:37:02.171" starttime="20170731 16:37:02.171"></status>
</kw>
<msg timestamp="20170731 16:37:02.171" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:37:02.171" starttime="20170731 16:37:01.521"></status>
</kw>
<msg timestamp="20170731 16:37:02.172" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:37:02.172" starttime="20170731 16:37:01.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:02.172" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:02.172" starttime="20170731 16:37:02.172"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:02.173" starttime="20170731 16:37:01.520"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:12.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:12.182" starttime="20170731 16:37:12.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:12.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:12.183" starttime="20170731 16:37:12.183"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:12.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:12.184" starttime="20170731 16:37:12.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:12.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:12.184" starttime="20170731 16:37:12.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:12.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:12.390" starttime="20170731 16:37:12.185"></status>
</kw>
<msg timestamp="20170731 16:37:12.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:12.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.390" starttime="20170731 16:37:12.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:12.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.391" starttime="20170731 16:37:12.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:12.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.392" starttime="20170731 16:37:12.391"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:12.392" starttime="20170731 16:37:12.177"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:12.392" starttime="20170731 16:37:12.176"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:12.392" starttime="20170731 16:37:12.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:12.392" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:12.392" starttime="20170731 16:37:12.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:12.393" starttime="20170731 16:37:12.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:12.983" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:12.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.983" starttime="20170731 16:37:12.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:12.984" starttime="20170731 16:37:12.983"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:12.984" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:12.984" starttime="20170731 16:37:12.984"></status>
</kw>
<msg timestamp="20170731 16:37:12.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.984" starttime="20170731 16:37:12.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:12.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:12.985" starttime="20170731 16:37:12.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:12.986" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:12.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:12.986" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:37:12.986" starttime="20170731 16:37:12.985"></status>
</kw>
<msg timestamp="20170731 16:37:12.986" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:37:12.986" starttime="20170731 16:37:12.174"></status>
</kw>
<msg timestamp="20170731 16:37:12.986" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:37:12.987" starttime="20170731 16:37:12.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:12.987" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:12.987" starttime="20170731 16:37:12.987"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:12.987" starttime="20170731 16:37:12.173"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:22.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:22.993" starttime="20170731 16:37:22.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:22.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:22.994" starttime="20170731 16:37:22.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:22.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:22.994" starttime="20170731 16:37:22.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:22.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:22.995" starttime="20170731 16:37:22.995"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:23.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:23.173" starttime="20170731 16:37:22.996"></status>
</kw>
<msg timestamp="20170731 16:37:23.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:23.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.173" starttime="20170731 16:37:22.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:23.174" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.174" starttime="20170731 16:37:23.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:23.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.174" starttime="20170731 16:37:23.174"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:23.175" starttime="20170731 16:37:22.991"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:23.175" starttime="20170731 16:37:22.991"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:23.175" starttime="20170731 16:37:22.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:23.175" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:23.175" starttime="20170731 16:37:23.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:23.176" starttime="20170731 16:37:23.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:23.260" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:23.260" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.261" starttime="20170731 16:37:23.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:23.261" starttime="20170731 16:37:23.261"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:23.262" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:23.262" starttime="20170731 16:37:23.262"></status>
</kw>
<msg timestamp="20170731 16:37:23.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.262" starttime="20170731 16:37:22.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:23.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:23.263" starttime="20170731 16:37:23.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:23.263" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:23.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:23.263" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170731 16:37:23.263" starttime="20170731 16:37:23.263"></status>
</kw>
<msg timestamp="20170731 16:37:23.264" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170731 16:37:23.264" starttime="20170731 16:37:22.989"></status>
</kw>
<msg timestamp="20170731 16:37:23.264" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170731 16:37:23.264" starttime="20170731 16:37:22.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:23.265" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:23.265" starttime="20170731 16:37:23.264"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:23.265" starttime="20170731 16:37:22.988"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:33.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:33.270" starttime="20170731 16:37:33.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:33.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:33.271" starttime="20170731 16:37:33.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:33.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:33.272" starttime="20170731 16:37:33.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:33.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:33.273" starttime="20170731 16:37:33.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:33.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:33.449" starttime="20170731 16:37:33.274"></status>
</kw>
<msg timestamp="20170731 16:37:33.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:33.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.449" starttime="20170731 16:37:33.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:33.450" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.450" starttime="20170731 16:37:33.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:33.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.451" starttime="20170731 16:37:33.450"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:33.451" starttime="20170731 16:37:33.269"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:33.451" starttime="20170731 16:37:33.268"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:33.451" starttime="20170731 16:37:33.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:33.452" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:33.452" starttime="20170731 16:37:33.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:33.452" starttime="20170731 16:37:33.452"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:33.535" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:33.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.535" starttime="20170731 16:37:33.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:33.535" starttime="20170731 16:37:33.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:33.536" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:33.536" starttime="20170731 16:37:33.536"></status>
</kw>
<msg timestamp="20170731 16:37:33.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.536" starttime="20170731 16:37:33.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:33.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:33.537" starttime="20170731 16:37:33.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:33.538" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 13%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:33.538" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:33.538" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 13%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170731 16:37:33.538" starttime="20170731 16:37:33.537"></status>
</kw>
<msg timestamp="20170731 16:37:33.538" level="INFO">${data} = {u'status': u'Flashing: 13%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170731 16:37:33.538" starttime="20170731 16:37:33.267"></status>
</kw>
<msg timestamp="20170731 16:37:33.538" level="INFO">${status} = Flashing: 13%</msg>
<status status="PASS" endtime="20170731 16:37:33.539" starttime="20170731 16:37:33.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:33.539" level="FAIL">Flashing: 13% != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:33.539" starttime="20170731 16:37:33.539"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:33.539" starttime="20170731 16:37:33.265"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:43.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:43.545" starttime="20170731 16:37:43.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:43.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:43.545" starttime="20170731 16:37:43.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:43.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:43.546" starttime="20170731 16:37:43.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:43.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:43.547" starttime="20170731 16:37:43.546"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:43.722" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:43.722" starttime="20170731 16:37:43.548"></status>
</kw>
<msg timestamp="20170731 16:37:43.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:43.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:43.722" starttime="20170731 16:37:43.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:43.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:43.723" starttime="20170731 16:37:43.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:43.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:43.723" starttime="20170731 16:37:43.723"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:43.724" starttime="20170731 16:37:43.543"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:43.724" starttime="20170731 16:37:43.543"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:43.724" starttime="20170731 16:37:43.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:43.724" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:43.724" starttime="20170731 16:37:43.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:43.725" starttime="20170731 16:37:43.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:44.596" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:44.596" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:44.596" starttime="20170731 16:37:43.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:44.597" starttime="20170731 16:37:44.597"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:44.598" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:44.598" starttime="20170731 16:37:44.598"></status>
</kw>
<msg timestamp="20170731 16:37:44.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:44.598" starttime="20170731 16:37:43.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:44.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:44.599" starttime="20170731 16:37:44.598"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:44.599" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 28%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:44.599" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:44.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 28%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170731 16:37:44.600" starttime="20170731 16:37:44.599"></status>
</kw>
<msg timestamp="20170731 16:37:44.600" level="INFO">${data} = {u'status': u'Flashing: 28%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170731 16:37:44.600" starttime="20170731 16:37:43.541"></status>
</kw>
<msg timestamp="20170731 16:37:44.600" level="INFO">${status} = Flashing: 28%</msg>
<status status="PASS" endtime="20170731 16:37:44.600" starttime="20170731 16:37:43.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:44.601" level="FAIL">Flashing: 28% != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:44.601" starttime="20170731 16:37:44.600"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:44.601" starttime="20170731 16:37:43.540"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:37:54.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:37:54.609" starttime="20170731 16:37:54.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:37:54.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:37:54.610" starttime="20170731 16:37:54.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:37:54.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:37:54.611" starttime="20170731 16:37:54.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:37:54.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:37:54.612" starttime="20170731 16:37:54.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:37:55.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:37:55.660" starttime="20170731 16:37:54.613"></status>
</kw>
<msg timestamp="20170731 16:37:55.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:37:55.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.661" starttime="20170731 16:37:54.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:37:55.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.661" starttime="20170731 16:37:55.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:55.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.662" starttime="20170731 16:37:55.662"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:55.662" starttime="20170731 16:37:54.606"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:55.662" starttime="20170731 16:37:54.606"></status>
</kw>
<status status="PASS" endtime="20170731 16:37:55.662" starttime="20170731 16:37:54.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:37:55.663" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:37:55.663" starttime="20170731 16:37:55.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:55.664" starttime="20170731 16:37:55.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:37:55.744" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:37:55.744" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.745" starttime="20170731 16:37:55.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:37:55.745" starttime="20170731 16:37:55.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:37:55.746" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:37:55.746" starttime="20170731 16:37:55.745"></status>
</kw>
<msg timestamp="20170731 16:37:55.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.746" starttime="20170731 16:37:54.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:37:55.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:37:55.747" starttime="20170731 16:37:55.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:37:55.747" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 44%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:37:55.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:37:55.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 44%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170731 16:37:55.747" starttime="20170731 16:37:55.747"></status>
</kw>
<msg timestamp="20170731 16:37:55.748" level="INFO">${data} = {u'status': u'Flashing: 44%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170731 16:37:55.748" starttime="20170731 16:37:54.603"></status>
</kw>
<msg timestamp="20170731 16:37:55.748" level="INFO">${status} = Flashing: 44%</msg>
<status status="PASS" endtime="20170731 16:37:55.748" starttime="20170731 16:37:54.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:37:55.749" level="FAIL">Flashing: 44% != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:37:55.749" starttime="20170731 16:37:55.748"></status>
</kw>
<status status="FAIL" endtime="20170731 16:37:55.749" starttime="20170731 16:37:54.602"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:05.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:05.755" starttime="20170731 16:38:05.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:05.755" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:05.755" starttime="20170731 16:38:05.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:05.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:05.756" starttime="20170731 16:38:05.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:05.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:05.757" starttime="20170731 16:38:05.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:06.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:06.863" starttime="20170731 16:38:05.757"></status>
</kw>
<msg timestamp="20170731 16:38:06.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:06.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.863" starttime="20170731 16:38:05.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:06.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.864" starttime="20170731 16:38:06.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:06.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.865" starttime="20170731 16:38:06.864"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:06.865" starttime="20170731 16:38:05.753"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:06.865" starttime="20170731 16:38:05.753"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:06.865" starttime="20170731 16:38:05.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:06.866" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:38:06.866" starttime="20170731 16:38:06.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:06.867" starttime="20170731 16:38:06.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:06.948" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:38:06.949" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.949" starttime="20170731 16:38:06.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:06.949" starttime="20170731 16:38:06.949"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:06.950" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:06.950" starttime="20170731 16:38:06.950"></status>
</kw>
<msg timestamp="20170731 16:38:06.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.950" starttime="20170731 16:38:05.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:06.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:06.951" starttime="20170731 16:38:06.950"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:06.952" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 59%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:06.952" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:06.952" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 59%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170731 16:38:06.952" starttime="20170731 16:38:06.951"></status>
</kw>
<msg timestamp="20170731 16:38:06.952" level="INFO">${data} = {u'status': u'Flashing: 59%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170731 16:38:06.952" starttime="20170731 16:38:05.751"></status>
</kw>
<msg timestamp="20170731 16:38:06.952" level="INFO">${status} = Flashing: 59%</msg>
<status status="PASS" endtime="20170731 16:38:06.952" starttime="20170731 16:38:05.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:38:06.953" level="FAIL">Flashing: 59% != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:38:06.953" starttime="20170731 16:38:06.953"></status>
</kw>
<status status="FAIL" endtime="20170731 16:38:06.953" starttime="20170731 16:38:05.749"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:16.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:16.959" starttime="20170731 16:38:16.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:16.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:16.960" starttime="20170731 16:38:16.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:16.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:16.960" starttime="20170731 16:38:16.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:16.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:16.961" starttime="20170731 16:38:16.960"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:17.140" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:17.140" starttime="20170731 16:38:16.962"></status>
</kw>
<msg timestamp="20170731 16:38:17.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:17.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.141" starttime="20170731 16:38:16.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:17.141" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.142" starttime="20170731 16:38:17.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:17.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.142" starttime="20170731 16:38:17.142"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:17.142" starttime="20170731 16:38:16.957"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:17.143" starttime="20170731 16:38:16.957"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:17.143" starttime="20170731 16:38:16.956"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:17.144" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:38:17.144" starttime="20170731 16:38:17.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:17.145" starttime="20170731 16:38:17.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:17.227" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:38:17.227" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.228" starttime="20170731 16:38:17.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:17.228" starttime="20170731 16:38:17.228"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:17.229" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:17.229" starttime="20170731 16:38:17.228"></status>
</kw>
<msg timestamp="20170731 16:38:17.229" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.229" starttime="20170731 16:38:16.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:17.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:17.230" starttime="20170731 16:38:17.229"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:17.230" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 19%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:17.230" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:17.230" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 19%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170731 16:38:17.230" starttime="20170731 16:38:17.230"></status>
</kw>
<msg timestamp="20170731 16:38:17.231" level="INFO">${data} = {u'status': u'Flashing: 19%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170731 16:38:17.231" starttime="20170731 16:38:16.955"></status>
</kw>
<msg timestamp="20170731 16:38:17.231" level="INFO">${status} = Flashing: 19%</msg>
<status status="PASS" endtime="20170731 16:38:17.231" starttime="20170731 16:38:16.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170731 16:38:17.232" level="FAIL">Flashing: 19% != Flash Done</msg>
<status status="FAIL" endtime="20170731 16:38:17.232" starttime="20170731 16:38:17.231"></status>
</kw>
<status status="FAIL" endtime="20170731 16:38:17.232" starttime="20170731 16:38:16.954"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:27.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:27.238" starttime="20170731 16:38:27.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:27.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:27.238" starttime="20170731 16:38:27.238"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:27.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:27.239" starttime="20170731 16:38:27.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:27.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:27.240" starttime="20170731 16:38:27.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:27.415" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:27.415" starttime="20170731 16:38:27.240"></status>
</kw>
<msg timestamp="20170731 16:38:27.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:27.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.415" starttime="20170731 16:38:27.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:27.416" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.416" starttime="20170731 16:38:27.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:27.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.417" starttime="20170731 16:38:27.416"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.417" starttime="20170731 16:38:27.236"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.417" starttime="20170731 16:38:27.235"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.417" starttime="20170731 16:38:27.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:27.418" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170731 16:38:27.418" starttime="20170731 16:38:27.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.418" starttime="20170731 16:38:27.418"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:27.500" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170731 16:38:27.500" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.500" starttime="20170731 16:38:27.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.501" starttime="20170731 16:38:27.500"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:27.501" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:27.501" starttime="20170731 16:38:27.501"></status>
</kw>
<msg timestamp="20170731 16:38:27.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.502" starttime="20170731 16:38:27.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:27.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:27.502" starttime="20170731 16:38:27.502"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:27.503" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flash Done"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:27.503" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:27.503" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path':...</msg>
<status status="PASS" endtime="20170731 16:38:27.503" starttime="20170731 16:38:27.503"></status>
</kw>
<msg timestamp="20170731 16:38:27.503" level="INFO">${data} = {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flash...</msg>
<status status="PASS" endtime="20170731 16:38:27.503" starttime="20170731 16:38:27.234"></status>
</kw>
<msg timestamp="20170731 16:38:27.504" level="INFO">${status} = Flash Done</msg>
<status status="PASS" endtime="20170731 16:38:27.504" starttime="20170731 16:38:27.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.504" starttime="20170731 16:38:27.504"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.504" starttime="20170731 16:38:27.232"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.504" starttime="20170731 16:35:26.458"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.505" starttime="20170731 16:35:26.451"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.505" starttime="20170731 16:34:55.766"></status>
</kw>
<kw name="Verify PNOR Update" library="utils">
<doc>Verify that the PNOR is not corrupted.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170731 16:38:27.507" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170731 16:38:27.507" starttime="20170731 16:38:27.506"></status>
</kw>
<msg timestamp="20170731 16:38:27.507" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170731 16:38:27.507" starttime="20170731 16:38:27.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.508" starttime="20170731 16:38:27.508"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.508" starttime="20170731 16:38:27.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.509" starttime="20170731 16:38:27.509"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170731 16:38:27.510" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170731 16:38:27.510" starttime="20170731 16:38:27.510"></status>
</kw>
<msg timestamp="20170731 16:38:27.510" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170731 16:38:27.510" starttime="20170731 16:38:27.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:27.513" starttime="20170731 16:38:27.512"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.513" starttime="20170731 16:38:27.511"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:27.513" starttime="20170731 16:38:27.511"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170731 16:38:27.514" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170731 16:38:29.235" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170731 16:38:29.235" starttime="20170731 16:38:27.513"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.235" starttime="20170731 16:38:27.505"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${pflash_cmd}</arg>
</arguments>
<assign>
<var>${pnor_info}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:38:29.236" level="INFO">Executing command '/usr/sbin/pflash -r /dev/stdout -P VERSION'.</msg>
<msg timestamp="20170731 16:38:29.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 16:38:29.338" level="INFO">${stdout} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<msg timestamp="20170731 16:38:29.338" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:38:29.338" starttime="20170731 16:38:29.236"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.338" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170731 16:38:29.338" starttime="20170731 16:38:29.338"></status>
</kw>
<msg timestamp="20170731 16:38:29.339" level="INFO">${pnor_info} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<status status="PASS" endtime="20170731 16:38:29.339" starttime="20170731 16:38:29.235"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${pnor_info}</arg>
<arg>Flash header not found</arg>
<arg>Error</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.339" starttime="20170731 16:38:29.339"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.339" starttime="20170731 16:38:27.505"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170731 16:38:29.340" starttime="20170731 16:38:29.340"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:29.353" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:29.354" starttime="20170731 16:38:29.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:29.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:29.354" starttime="20170731 16:38:29.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:29.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:29.355" starttime="20170731 16:38:29.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:29.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:29.356" starttime="20170731 16:38:29.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:29.536" starttime="20170731 16:38:29.356"></status>
</kw>
<msg timestamp="20170731 16:38:29.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:29.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.536" starttime="20170731 16:38:29.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.537" starttime="20170731 16:38:29.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.538" starttime="20170731 16:38:29.537"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.538" starttime="20170731 16:38:29.352"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.538" starttime="20170731 16:38:29.352"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.538" starttime="20170731 16:38:29.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:29.539" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:38:29.539" starttime="20170731 16:38:29.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.539" starttime="20170731 16:38:29.539"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:29.602" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:29.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.603" starttime="20170731 16:38:29.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.603" starttime="20170731 16:38:29.603"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:29.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:29.604" starttime="20170731 16:38:29.604"></status>
</kw>
<msg timestamp="20170731 16:38:29.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.604" starttime="20170731 16:38:29.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:29.605" starttime="20170731 16:38:29.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:29.605" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:29.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:29.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:29.606" starttime="20170731 16:38:29.605"></status>
</kw>
<msg timestamp="20170731 16:38:29.606" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:38:29.606" starttime="20170731 16:38:29.350"></status>
</kw>
<msg timestamp="20170731 16:38:29.606" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170731 16:38:29.606" starttime="20170731 16:38:29.349"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170731 16:38:29.607" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170731 16:38:29.607" starttime="20170731 16:38:29.607"></status>
</kw>
<msg timestamp="20170731 16:38:29.608" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:38:29.608" starttime="20170731 16:38:29.606"></status>
</kw>
<msg timestamp="20170731 16:38:29.608" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:38:29.608" starttime="20170731 16:38:29.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.609" starttime="20170731 16:38:29.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.609" starttime="20170731 16:38:29.609"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170731 16:38:29.610" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170731 16:38:29.610" starttime="20170731 16:38:29.610"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170731 16:38:29.611" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170731 16:38:29.611" starttime="20170731 16:38:29.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.611" starttime="20170731 16:38:29.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.612" starttime="20170731 16:38:29.612"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.613" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170731 16:38:29.613" starttime="20170731 16:38:29.612"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.614" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170731 16:38:29.614" starttime="20170731 16:38:29.613"></status>
</kw>
<msg timestamp="20170731 16:38:29.614" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170731 16:38:29.614" starttime="20170731 16:38:29.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.614" starttime="20170731 16:38:29.614"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.615" starttime="20170731 16:38:29.615"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:38:29.617" level="INFO">${cur_time} = 2017-07-31 16:38:29:616798</msg>
<status status="PASS" endtime="20170731 16:38:29.617" starttime="20170731 16:38:29.616"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:38:29.618" level="INFO">${cur_time} = 20170731163829616798</msg>
<status status="PASS" endtime="20170731 16:38:29.618" starttime="20170731 16:38:29.617"></status>
</kw>
<msg timestamp="20170731 16:38:29.619" level="INFO">${cur_time} = 20170731163829616798</msg>
<status status="PASS" endtime="20170731 16:38:29.619" starttime="20170731 16:38:29.615"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:38:29.620" starttime="20170731 16:38:29.619"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.620" starttime="20170731 16:38:29.609"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.620" starttime="20170731 16:38:29.349"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.620" starttime="20170731 16:38:29.341"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.620" starttime="20170731 16:38:29.340"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170731 16:38:29.620" critical="yes" starttime="20170731 16:34:52.263"></status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<kw name="Validate Power On">
<doc>Power the host on, and validate that the sytem booted.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Start SOL Console Logging</arg>
</arguments>
<kw name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 16:38:29.632" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.632" starttime="20170731 16:38:29.632"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 16:38:29.633" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.633" starttime="20170731 16:38:29.633"></status>
</kw>
<msg timestamp="20170731 16:38:29.634" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.634" starttime="20170731 16:38:29.631"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 16:38:29.636" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.636" starttime="20170731 16:38:29.636"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 16:38:29.639" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.639" starttime="20170731 16:38:29.637"></status>
</kw>
<msg timestamp="20170731 16:38:29.639" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:38:29.639" starttime="20170731 16:38:29.635"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.641" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170731 16:38:29.641" starttime="20170731 16:38:29.640"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.641" starttime="20170731 16:38:29.641"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:38:29.647" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:38:29.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:38:29.651" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170731 16:38:29.651" starttime="20170731 16:38:29.642"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.655" starttime="20170731 16:38:29.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.656" starttime="20170731 16:38:29.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.657" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:38:29.657" starttime="20170731 16:38:29.656"></status>
</kw>
<msg timestamp="20170731 16:38:29.657" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:38:29.657" starttime="20170731 16:38:29.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.658" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170731 16:38:29.658" starttime="20170731 16:38:29.657"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.658" starttime="20170731 16:38:29.658"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170731 16:38:29.662" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:38:29.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:38:29.675" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170731 16:38:29.676" starttime="20170731 16:38:29.659"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.684" starttime="20170731 16:38:29.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.685" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170731 16:38:29.685" starttime="20170731 16:38:29.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.686" starttime="20170731 16:38:29.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:38:29.686" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 16:38:29.686" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170731 16:38:29.686" starttime="20170731 16:38:29.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.687" starttime="20170731 16:38:29.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.689" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status status="FAIL" endtime="20170731 16:38:29.689" starttime="20170731 16:38:29.688"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.689" starttime="20170731 16:38:29.688"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.689" starttime="20170731 16:38:29.687"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:38:29.690" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170731 16:38:29.690" starttime="20170731 16:38:29.690"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170731 16:38:29.690" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170731 16:38:29.691" starttime="20170731 16:38:29.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.749" starttime="20170731 16:38:29.691"></status>
</kw>
<msg timestamp="20170731 16:38:29.750" level="INFO">${rc} = 1</msg>
<msg timestamp="20170731 16:38:29.750" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170731 16:38:29.750" starttime="20170731 16:38:29.691"></status>
</kw>
<msg timestamp="20170731 16:38:29.751" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170731 16:38:29.751" starttime="20170731 16:38:29.634"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.753" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:38:29.753" starttime="20170731 16:38:29.752"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.754" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170731 16:38:29.754" starttime="20170731 16:38:29.754"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.755" starttime="20170731 16:38:29.754"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:38:29.758" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:38:29.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:38:29.763" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170731 16:38:29.763" starttime="20170731 16:38:29.755"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.771" starttime="20170731 16:38:29.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.774" starttime="20170731 16:38:29.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.775" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:38:29.775" starttime="20170731 16:38:29.774"></status>
</kw>
<msg timestamp="20170731 16:38:29.776" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:38:29.776" starttime="20170731 16:38:29.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:38:29.777" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170731 16:38:29.777" starttime="20170731 16:38:29.777"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.778" starttime="20170731 16:38:29.778"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:38:29.782" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170731 16:38:29.785" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:38:29.785" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170731 16:38:29.785" starttime="20170731 16:38:29.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:29.788" starttime="20170731 16:38:29.787"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.788" starttime="20170731 16:38:29.630"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:29.789" starttime="20170731 16:38:29.622"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power On</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power On</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170731 16:38:29.796" level="INFO">${boot_stack} = REST Power On</msg>
<msg timestamp="20170731 16:38:30.039" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170731 16:38:30.055" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170731 16:38:30.055" starttime="20170731 16:38:30.055"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:30.056" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170731 16:38:30.056" starttime="20170731 16:38:30.056"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:30.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:30.061" starttime="20170731 16:38:30.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:30.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:30.062" starttime="20170731 16:38:30.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:30.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:30.062" starttime="20170731 16:38:30.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:30.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:30.063" starttime="20170731 16:38:30.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:30.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:30.461" starttime="20170731 16:38:30.064"></status>
</kw>
<msg timestamp="20170731 16:38:30.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:30.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.461" starttime="20170731 16:38:30.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:30.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.462" starttime="20170731 16:38:30.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:30.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.463" starttime="20170731 16:38:30.462"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.463" starttime="20170731 16:38:30.059"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.463" starttime="20170731 16:38:30.058"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.463" starttime="20170731 16:38:30.057"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:30.463" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170731 16:38:30.463" starttime="20170731 16:38:30.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:30.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:30.464" starttime="20170731 16:38:30.464"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:30.465" starttime="20170731 16:38:30.464"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:38:30.466" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170731 16:38:30.466" starttime="20170731 16:38:30.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:38:30.467" level="INFO">URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170731 16:38:30.467" starttime="20170731 16:38:30.467"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.467" starttime="20170731 16:38:30.466"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.468" starttime="20170731 16:38:30.465"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:30.819" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 16:38:30.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.819" starttime="20170731 16:38:30.468"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:38:30.821" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:38:30.821" starttime="20170731 16:38:30.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:38:30.822" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:38:30.822" starttime="20170731 16:38:30.821"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.822" starttime="20170731 16:38:30.821"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.822" starttime="20170731 16:38:30.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:30.823" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:30.823" starttime="20170731 16:38:30.822"></status>
</kw>
<msg timestamp="20170731 16:38:30.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.823" starttime="20170731 16:38:30.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:30.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:30.824" starttime="20170731 16:38:30.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 16:38:30.824" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:30.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:30.824" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170731 16:38:30.824" starttime="20170731 16:38:30.824"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:30.825" starttime="20170731 16:38:30.055"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:30.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:30.830" starttime="20170731 16:38:30.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:30.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:30.831" starttime="20170731 16:38:30.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:30.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:30.831" starttime="20170731 16:38:30.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:30.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:30.832" starttime="20170731 16:38:30.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:31.028" starttime="20170731 16:38:30.833"></status>
</kw>
<msg timestamp="20170731 16:38:31.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:31.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.028" starttime="20170731 16:38:30.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.029" starttime="20170731 16:38:31.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.029" starttime="20170731 16:38:31.029"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.030" starttime="20170731 16:38:30.829"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.030" starttime="20170731 16:38:30.828"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.030" starttime="20170731 16:38:30.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:31.030" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170731 16:38:31.030" starttime="20170731 16:38:31.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.031" starttime="20170731 16:38:31.031"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:31.116" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170731 16:38:31.116" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.116" starttime="20170731 16:38:31.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.117" starttime="20170731 16:38:31.116"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:31.117" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:31.118" starttime="20170731 16:38:31.117"></status>
</kw>
<msg timestamp="20170731 16:38:31.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.118" starttime="20170731 16:38:30.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.118" starttime="20170731 16:38:31.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:31.119" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:31.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:31.119" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170731 16:38:31.119" starttime="20170731 16:38:31.119"></status>
</kw>
<msg timestamp="20170731 16:38:31.119" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170731 16:38:31.120" starttime="20170731 16:38:30.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.120" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.120" starttime="20170731 16:38:31.120"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.120" starttime="20170731 16:38:30.053"></status>
</kw>
<msg timestamp="20170731 16:38:31.136" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:38:31.141" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:38:31.141" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170731 16:38:31.141" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:31.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:31.190" starttime="20170731 16:38:31.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:31.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:31.191" starttime="20170731 16:38:31.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:31.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:31.191" starttime="20170731 16:38:31.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:31.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:31.192" starttime="20170731 16:38:31.192"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:31.410" starttime="20170731 16:38:31.193"></status>
</kw>
<msg timestamp="20170731 16:38:31.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:31.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.410" starttime="20170731 16:38:31.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.411" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.411" starttime="20170731 16:38:31.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.412" starttime="20170731 16:38:31.411"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.412" starttime="20170731 16:38:31.188"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.412" starttime="20170731 16:38:31.187"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.412" starttime="20170731 16:38:31.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:31.413" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:38:31.413" starttime="20170731 16:38:31.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.414" starttime="20170731 16:38:31.413"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:31.478" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:31.478" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.478" starttime="20170731 16:38:31.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.479" starttime="20170731 16:38:31.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:31.479" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:31.479" starttime="20170731 16:38:31.479"></status>
</kw>
<msg timestamp="20170731 16:38:31.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.479" starttime="20170731 16:38:31.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.480" starttime="20170731 16:38:31.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:31.481" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:31.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:31.481" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:31.481" starttime="20170731 16:38:31.480"></status>
</kw>
<msg timestamp="20170731 16:38:31.481" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:38:31.481" starttime="20170731 16:38:31.178"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.481" starttime="20170731 16:38:31.170"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:31.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:31.487" starttime="20170731 16:38:31.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:31.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:31.487" starttime="20170731 16:38:31.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:31.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:31.489" starttime="20170731 16:38:31.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:31.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:31.490" starttime="20170731 16:38:31.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:31.670" starttime="20170731 16:38:31.491"></status>
</kw>
<msg timestamp="20170731 16:38:31.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:31.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.670" starttime="20170731 16:38:31.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.671" starttime="20170731 16:38:31.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.671" starttime="20170731 16:38:31.671"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.672" starttime="20170731 16:38:31.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.672" starttime="20170731 16:38:31.484"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.672" starttime="20170731 16:38:31.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:31.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:38:31.672" starttime="20170731 16:38:31.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.673" starttime="20170731 16:38:31.673"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:31.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:31.738" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.738" starttime="20170731 16:38:31.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.738" starttime="20170731 16:38:31.738"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:31.739" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:31.739" starttime="20170731 16:38:31.739"></status>
</kw>
<msg timestamp="20170731 16:38:31.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.739" starttime="20170731 16:38:31.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.740" starttime="20170731 16:38:31.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:31.740" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:31.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:31.741" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:38:31.741" starttime="20170731 16:38:31.740"></status>
</kw>
<msg timestamp="20170731 16:38:31.741" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:38:31.741" starttime="20170731 16:38:31.482"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.741" starttime="20170731 16:38:31.482"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:31.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:31.746" starttime="20170731 16:38:31.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:31.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:31.746" starttime="20170731 16:38:31.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:31.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:31.747" starttime="20170731 16:38:31.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:31.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:31.748" starttime="20170731 16:38:31.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:31.927" starttime="20170731 16:38:31.748"></status>
</kw>
<msg timestamp="20170731 16:38:31.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:31.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.928" starttime="20170731 16:38:31.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.928" starttime="20170731 16:38:31.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:31.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:31.929" starttime="20170731 16:38:31.929"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.929" starttime="20170731 16:38:31.744"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.929" starttime="20170731 16:38:31.744"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:31.929" starttime="20170731 16:38:31.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:31.930" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:38:31.930" starttime="20170731 16:38:31.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:31.931" starttime="20170731 16:38:31.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:32.007" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:38:32.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.007" starttime="20170731 16:38:31.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:32.008" starttime="20170731 16:38:32.007"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:32.008" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:32.008" starttime="20170731 16:38:32.008"></status>
</kw>
<msg timestamp="20170731 16:38:32.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.009" starttime="20170731 16:38:31.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.009" starttime="20170731 16:38:32.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:32.010" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:32.010" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:32.010" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:38:32.010" starttime="20170731 16:38:32.010"></status>
</kw>
<msg timestamp="20170731 16:38:32.010" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:38:32.010" starttime="20170731 16:38:31.742"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.011" starttime="20170731 16:38:31.741"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:32.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:32.015" starttime="20170731 16:38:32.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:32.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:32.015" starttime="20170731 16:38:32.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:32.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:32.016" starttime="20170731 16:38:32.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:32.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:32.017" starttime="20170731 16:38:32.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.193" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:32.193" starttime="20170731 16:38:32.017"></status>
</kw>
<msg timestamp="20170731 16:38:32.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:32.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.193" starttime="20170731 16:38:32.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.194" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.194" starttime="20170731 16:38:32.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.195" starttime="20170731 16:38:32.195"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.196" starttime="20170731 16:38:32.013"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.196" starttime="20170731 16:38:32.013"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.196" starttime="20170731 16:38:32.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:32.197" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:38:32.197" starttime="20170731 16:38:32.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:32.198" starttime="20170731 16:38:32.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:32.261" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:32.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.261" starttime="20170731 16:38:32.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:32.262" starttime="20170731 16:38:32.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:32.262" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:32.263" starttime="20170731 16:38:32.262"></status>
</kw>
<msg timestamp="20170731 16:38:32.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.263" starttime="20170731 16:38:32.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.263" starttime="20170731 16:38:32.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:32.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:32.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:32.264" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:32.264" starttime="20170731 16:38:32.264"></status>
</kw>
<msg timestamp="20170731 16:38:32.265" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:38:32.265" starttime="20170731 16:38:32.011"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.265" starttime="20170731 16:38:32.011"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>REST Power On</arg>
</arguments>
<msg timestamp="20170731 16:38:32.271" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:38:32.287" level="INFO">${QUIET} = 1</msg>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<arguments>
<arg>wait=${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170731 16:38:32.290" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170731 16:38:32.290" starttime="20170731 16:38:32.290"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:32.292" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170731 16:38:32.292" starttime="20170731 16:38:32.291"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:32.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:32.295" starttime="20170731 16:38:32.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:32.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:32.296" starttime="20170731 16:38:32.295"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:32.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:32.296" starttime="20170731 16:38:32.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:32.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:32.297" starttime="20170731 16:38:32.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:32.513" starttime="20170731 16:38:32.298"></status>
</kw>
<msg timestamp="20170731 16:38:32.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:32.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.513" starttime="20170731 16:38:32.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.514" starttime="20170731 16:38:32.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.514" starttime="20170731 16:38:32.514"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.514" starttime="20170731 16:38:32.293"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.514" starttime="20170731 16:38:32.293"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.515" starttime="20170731 16:38:32.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:32.515" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170731 16:38:32.515" starttime="20170731 16:38:32.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:32.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:32.516" starttime="20170731 16:38:32.515"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:32.516" starttime="20170731 16:38:32.516"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:38:32.518" level="INFO">${msg} = URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type':...</msg>
<status status="PASS" endtime="20170731 16:38:32.518" starttime="20170731 16:38:32.518"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:38:32.519" level="INFO">URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170731 16:38:32.519" starttime="20170731 16:38:32.519"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.519" starttime="20170731 16:38:32.518"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.520" starttime="20170731 16:38:32.517"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:32.767" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 16:38:32.767" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.767" starttime="20170731 16:38:32.520"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 16:38:32.769" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:38:32.769" starttime="20170731 16:38:32.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 16:38:32.770" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170731 16:38:32.770" starttime="20170731 16:38:32.770"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.770" starttime="20170731 16:38:32.769"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.770" starttime="20170731 16:38:32.768"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:32.771" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:32.771" starttime="20170731 16:38:32.771"></status>
</kw>
<msg timestamp="20170731 16:38:32.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.771" starttime="20170731 16:38:32.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:32.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:32.772" starttime="20170731 16:38:32.771"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 16:38:32.772" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:32.772" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:32.772" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170731 16:38:32.772" starttime="20170731 16:38:32.772"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.773" starttime="20170731 16:38:32.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170731 16:38:32.774" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:38:32.774" starttime="20170731 16:38:32.773"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.774" starttime="20170731 16:38:32.773"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:32.774" starttime="20170731 16:38:32.289"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:32.789" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:32.790" starttime="20170731 16:38:32.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:32.790" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:32.790" starttime="20170731 16:38:32.790"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:32.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:32.791" starttime="20170731 16:38:32.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:32.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:32.792" starttime="20170731 16:38:32.791"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:34.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:34.836" starttime="20170731 16:38:32.792"></status>
</kw>
<msg timestamp="20170731 16:38:34.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:34.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:34.836" starttime="20170731 16:38:32.792"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:34.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:34.837" starttime="20170731 16:38:34.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:34.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:34.838" starttime="20170731 16:38:34.837"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:34.838" starttime="20170731 16:38:32.788"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:34.838" starttime="20170731 16:38:32.788"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:34.838" starttime="20170731 16:38:32.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:34.839" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:38:34.839" starttime="20170731 16:38:34.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:34.839" starttime="20170731 16:38:34.839"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:41.039" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:41.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.039" starttime="20170731 16:38:34.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:41.040" starttime="20170731 16:38:41.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:41.040" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:41.040" starttime="20170731 16:38:41.040"></status>
</kw>
<msg timestamp="20170731 16:38:41.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.040" starttime="20170731 16:38:32.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:41.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.041" starttime="20170731 16:38:41.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:41.042" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:41.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:41.042" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:41.042" starttime="20170731 16:38:41.041"></status>
</kw>
<msg timestamp="20170731 16:38:41.042" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:38:41.042" starttime="20170731 16:38:32.786"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:41.043" starttime="20170731 16:38:32.786"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:41.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:41.047" starttime="20170731 16:38:41.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:41.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:41.047" starttime="20170731 16:38:41.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:41.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:41.048" starttime="20170731 16:38:41.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:41.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:41.049" starttime="20170731 16:38:41.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:41.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:41.556" starttime="20170731 16:38:41.050"></status>
</kw>
<msg timestamp="20170731 16:38:41.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:41.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.556" starttime="20170731 16:38:41.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:41.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.557" starttime="20170731 16:38:41.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:41.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:41.558" starttime="20170731 16:38:41.557"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:41.558" starttime="20170731 16:38:41.046"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:41.558" starttime="20170731 16:38:41.045"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:41.558" starttime="20170731 16:38:41.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:41.559" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:38:41.559" starttime="20170731 16:38:41.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:41.559" starttime="20170731 16:38:41.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:42.351" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:42.352" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:42.352" starttime="20170731 16:38:41.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:42.353" starttime="20170731 16:38:42.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:42.353" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:42.353" starttime="20170731 16:38:42.353"></status>
</kw>
<msg timestamp="20170731 16:38:42.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:42.353" starttime="20170731 16:38:41.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:42.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:42.354" starttime="20170731 16:38:42.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:42.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:42.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:42.355" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:38:42.355" starttime="20170731 16:38:42.354"></status>
</kw>
<msg timestamp="20170731 16:38:42.355" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:38:42.355" starttime="20170731 16:38:41.043"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:42.355" starttime="20170731 16:38:41.043"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:42.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:42.360" starttime="20170731 16:38:42.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:42.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:42.360" starttime="20170731 16:38:42.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:42.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:42.361" starttime="20170731 16:38:42.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:42.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:42.362" starttime="20170731 16:38:42.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:43.311" starttime="20170731 16:38:42.362"></status>
</kw>
<msg timestamp="20170731 16:38:43.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:43.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.311" starttime="20170731 16:38:42.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.312" starttime="20170731 16:38:43.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.312" starttime="20170731 16:38:43.312"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.313" starttime="20170731 16:38:42.358"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.313" starttime="20170731 16:38:42.358"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.313" starttime="20170731 16:38:42.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:43.313" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:38:43.313" starttime="20170731 16:38:43.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:43.314" starttime="20170731 16:38:43.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:43.520" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:38:43.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.521" starttime="20170731 16:38:43.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:43.521" starttime="20170731 16:38:43.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:43.522" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:43.522" starttime="20170731 16:38:43.522"></status>
</kw>
<msg timestamp="20170731 16:38:43.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.522" starttime="20170731 16:38:42.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.523" starttime="20170731 16:38:43.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:43.523" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:43.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:43.524" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:38:43.524" starttime="20170731 16:38:43.523"></status>
</kw>
<msg timestamp="20170731 16:38:43.524" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:38:43.524" starttime="20170731 16:38:42.356"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.524" starttime="20170731 16:38:42.356"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:43.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:43.528" starttime="20170731 16:38:43.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:43.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:43.529" starttime="20170731 16:38:43.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:43.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:43.530" starttime="20170731 16:38:43.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:43.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:43.530" starttime="20170731 16:38:43.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:43.989" starttime="20170731 16:38:43.531"></status>
</kw>
<msg timestamp="20170731 16:38:43.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:43.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.989" starttime="20170731 16:38:43.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.990" starttime="20170731 16:38:43.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:43.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:43.991" starttime="20170731 16:38:43.990"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.991" starttime="20170731 16:38:43.527"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.991" starttime="20170731 16:38:43.527"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:43.991" starttime="20170731 16:38:43.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:43.991" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:38:43.991" starttime="20170731 16:38:43.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:43.992" starttime="20170731 16:38:43.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:44.056" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:44.056" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:44.056" starttime="20170731 16:38:43.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:44.057" starttime="20170731 16:38:44.056"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:44.057" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:44.057" starttime="20170731 16:38:44.057"></status>
</kw>
<msg timestamp="20170731 16:38:44.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:44.057" starttime="20170731 16:38:43.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:44.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:44.058" starttime="20170731 16:38:44.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:44.059" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:44.059" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:44.059" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:44.059" starttime="20170731 16:38:44.058"></status>
</kw>
<msg timestamp="20170731 16:38:44.059" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:38:44.059" starttime="20170731 16:38:43.525"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:44.059" starttime="20170731 16:38:43.524"></status>
</kw>
<msg timestamp="20170731 16:38:44.060" level="FAIL">
#(UTC) 2017/07/31 16:38:44.059887 -   11.793425 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:38:44.060" starttime="20170731 16:38:32.785"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:54.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:54.067" starttime="20170731 16:38:54.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:54.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:54.067" starttime="20170731 16:38:54.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:54.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:54.068" starttime="20170731 16:38:54.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:54.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:54.069" starttime="20170731 16:38:54.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:54.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:54.528" starttime="20170731 16:38:54.070"></status>
</kw>
<msg timestamp="20170731 16:38:54.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:54.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:54.528" starttime="20170731 16:38:54.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:54.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:54.529" starttime="20170731 16:38:54.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:54.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:54.530" starttime="20170731 16:38:54.529"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:54.530" starttime="20170731 16:38:54.066"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:54.530" starttime="20170731 16:38:54.065"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:54.530" starttime="20170731 16:38:54.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:54.531" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:38:54.531" starttime="20170731 16:38:54.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:54.532" starttime="20170731 16:38:54.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:55.633" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:55.633" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.633" starttime="20170731 16:38:54.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:55.634" starttime="20170731 16:38:55.634"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:55.635" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:55.635" starttime="20170731 16:38:55.634"></status>
</kw>
<msg timestamp="20170731 16:38:55.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.635" starttime="20170731 16:38:54.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:55.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.636" starttime="20170731 16:38:55.636"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:55.637" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:55.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:55.637" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:55.637" starttime="20170731 16:38:55.636"></status>
</kw>
<msg timestamp="20170731 16:38:55.637" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:38:55.637" starttime="20170731 16:38:54.063"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:55.637" starttime="20170731 16:38:54.063"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:55.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:55.642" starttime="20170731 16:38:55.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:55.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:55.642" starttime="20170731 16:38:55.642"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:55.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:55.643" starttime="20170731 16:38:55.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:55.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:55.644" starttime="20170731 16:38:55.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:55.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:55.991" starttime="20170731 16:38:55.644"></status>
</kw>
<msg timestamp="20170731 16:38:55.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:55.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.991" starttime="20170731 16:38:55.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:55.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.992" starttime="20170731 16:38:55.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:55.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:55.992" starttime="20170731 16:38:55.992"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:55.993" starttime="20170731 16:38:55.640"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:55.993" starttime="20170731 16:38:55.640"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:55.993" starttime="20170731 16:38:55.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:55.993" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:38:55.993" starttime="20170731 16:38:55.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:55.994" starttime="20170731 16:38:55.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:56.101" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:56.102" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.102" starttime="20170731 16:38:55.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:56.103" starttime="20170731 16:38:56.102"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:56.103" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:56.103" starttime="20170731 16:38:56.103"></status>
</kw>
<msg timestamp="20170731 16:38:56.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.103" starttime="20170731 16:38:55.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.104" starttime="20170731 16:38:56.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:56.105" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:56.105" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:56.105" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:38:56.105" starttime="20170731 16:38:56.104"></status>
</kw>
<msg timestamp="20170731 16:38:56.105" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:38:56.105" starttime="20170731 16:38:55.638"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.106" starttime="20170731 16:38:55.638"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:56.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:56.110" starttime="20170731 16:38:56.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:56.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:56.110" starttime="20170731 16:38:56.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:56.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:56.111" starttime="20170731 16:38:56.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:56.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:56.112" starttime="20170731 16:38:56.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:56.412" starttime="20170731 16:38:56.112"></status>
</kw>
<msg timestamp="20170731 16:38:56.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:56.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.413" starttime="20170731 16:38:56.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.413" starttime="20170731 16:38:56.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.414" starttime="20170731 16:38:56.414"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.414" starttime="20170731 16:38:56.109"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.414" starttime="20170731 16:38:56.108"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.414" starttime="20170731 16:38:56.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:56.415" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:38:56.415" starttime="20170731 16:38:56.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:56.416" starttime="20170731 16:38:56.415"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:56.494" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:38:56.494" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.494" starttime="20170731 16:38:56.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:56.495" starttime="20170731 16:38:56.495"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:56.495" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:56.495" starttime="20170731 16:38:56.495"></status>
</kw>
<msg timestamp="20170731 16:38:56.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.496" starttime="20170731 16:38:56.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.496" starttime="20170731 16:38:56.496"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:56.497" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:56.497" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:56.497" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:38:56.497" starttime="20170731 16:38:56.497"></status>
</kw>
<msg timestamp="20170731 16:38:56.497" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:38:56.497" starttime="20170731 16:38:56.106"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.498" starttime="20170731 16:38:56.106"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:38:56.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:38:56.502" starttime="20170731 16:38:56.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:38:56.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:38:56.502" starttime="20170731 16:38:56.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:38:56.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:38:56.503" starttime="20170731 16:38:56.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:38:56.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:38:56.504" starttime="20170731 16:38:56.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:38:56.687" starttime="20170731 16:38:56.504"></status>
</kw>
<msg timestamp="20170731 16:38:56.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:38:56.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.688" starttime="20170731 16:38:56.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.688" starttime="20170731 16:38:56.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.689" starttime="20170731 16:38:56.689"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.689" starttime="20170731 16:38:56.501"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.689" starttime="20170731 16:38:56.500"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.690" starttime="20170731 16:38:56.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:38:56.690" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:38:56.690" starttime="20170731 16:38:56.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:56.691" starttime="20170731 16:38:56.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:38:56.756" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:38:56.756" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.757" starttime="20170731 16:38:56.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:38:56.757" starttime="20170731 16:38:56.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:38:56.758" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:38:56.758" starttime="20170731 16:38:56.758"></status>
</kw>
<msg timestamp="20170731 16:38:56.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.758" starttime="20170731 16:38:56.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:38:56.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:38:56.759" starttime="20170731 16:38:56.758"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:38:56.759" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:38:56.759" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:38:56.760" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:38:56.760" starttime="20170731 16:38:56.759"></status>
</kw>
<msg timestamp="20170731 16:38:56.760" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:38:56.760" starttime="20170731 16:38:56.498"></status>
</kw>
<status status="PASS" endtime="20170731 16:38:56.760" starttime="20170731 16:38:56.498"></status>
</kw>
<msg timestamp="20170731 16:38:56.761" level="FAIL">
#(UTC) 2017/07/31 16:38:56.760438 -   12.700551 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:38:56.761" starttime="20170731 16:38:54.061"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:06.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:06.767" starttime="20170731 16:39:06.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:06.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:06.768" starttime="20170731 16:39:06.767"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:06.768" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:06.768" starttime="20170731 16:39:06.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:06.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:06.769" starttime="20170731 16:39:06.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:06.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:06.973" starttime="20170731 16:39:06.770"></status>
</kw>
<msg timestamp="20170731 16:39:06.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:06.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:06.973" starttime="20170731 16:39:06.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:06.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:06.974" starttime="20170731 16:39:06.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:06.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:06.975" starttime="20170731 16:39:06.974"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:06.975" starttime="20170731 16:39:06.766"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:06.975" starttime="20170731 16:39:06.765"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:06.975" starttime="20170731 16:39:06.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:06.975" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:39:06.976" starttime="20170731 16:39:06.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:06.976" starttime="20170731 16:39:06.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:07.040" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:07.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.040" starttime="20170731 16:39:06.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.041" starttime="20170731 16:39:07.040"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:07.041" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:07.041" starttime="20170731 16:39:07.041"></status>
</kw>
<msg timestamp="20170731 16:39:07.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.041" starttime="20170731 16:39:06.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.042" starttime="20170731 16:39:07.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:07.043" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:07.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:07.043" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:07.043" starttime="20170731 16:39:07.042"></status>
</kw>
<msg timestamp="20170731 16:39:07.043" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:39:07.043" starttime="20170731 16:39:06.764"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.044" starttime="20170731 16:39:06.763"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:07.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:07.048" starttime="20170731 16:39:07.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:07.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:07.048" starttime="20170731 16:39:07.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:07.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:07.049" starttime="20170731 16:39:07.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:07.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:07.050" starttime="20170731 16:39:07.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.228" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:07.228" starttime="20170731 16:39:07.051"></status>
</kw>
<msg timestamp="20170731 16:39:07.229" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:07.229" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.229" starttime="20170731 16:39:07.050"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.229" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.229" starttime="20170731 16:39:07.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.230" starttime="20170731 16:39:07.230"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.230" starttime="20170731 16:39:07.046"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.230" starttime="20170731 16:39:07.046"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.230" starttime="20170731 16:39:07.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:07.231" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:39:07.231" starttime="20170731 16:39:07.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.232" starttime="20170731 16:39:07.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:07.295" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:07.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.296" starttime="20170731 16:39:07.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.296" starttime="20170731 16:39:07.296"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:07.297" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:07.297" starttime="20170731 16:39:07.297"></status>
</kw>
<msg timestamp="20170731 16:39:07.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.297" starttime="20170731 16:39:07.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.298" starttime="20170731 16:39:07.297"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:07.299" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:07.299" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:07.299" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:39:07.299" starttime="20170731 16:39:07.298"></status>
</kw>
<msg timestamp="20170731 16:39:07.299" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:39:07.299" starttime="20170731 16:39:07.044"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.299" starttime="20170731 16:39:07.044"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:07.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:07.303" starttime="20170731 16:39:07.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:07.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:07.304" starttime="20170731 16:39:07.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:07.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:07.305" starttime="20170731 16:39:07.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:07.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:07.305" starttime="20170731 16:39:07.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.491" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:07.491" starttime="20170731 16:39:07.306"></status>
</kw>
<msg timestamp="20170731 16:39:07.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:07.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.491" starttime="20170731 16:39:07.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.492" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.492" starttime="20170731 16:39:07.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.493" starttime="20170731 16:39:07.492"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.493" starttime="20170731 16:39:07.302"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.493" starttime="20170731 16:39:07.302"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.493" starttime="20170731 16:39:07.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:07.493" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:39:07.493" starttime="20170731 16:39:07.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.494" starttime="20170731 16:39:07.494"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:07.562" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:39:07.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.563" starttime="20170731 16:39:07.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.563" starttime="20170731 16:39:07.563"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:07.564" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:07.564" starttime="20170731 16:39:07.564"></status>
</kw>
<msg timestamp="20170731 16:39:07.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.564" starttime="20170731 16:39:07.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.565" starttime="20170731 16:39:07.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:07.565" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:07.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:07.566" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:39:07.566" starttime="20170731 16:39:07.565"></status>
</kw>
<msg timestamp="20170731 16:39:07.566" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:39:07.566" starttime="20170731 16:39:07.300"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.566" starttime="20170731 16:39:07.300"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:07.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:07.571" starttime="20170731 16:39:07.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:07.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:07.571" starttime="20170731 16:39:07.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:07.572" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:07.572" starttime="20170731 16:39:07.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:07.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:07.573" starttime="20170731 16:39:07.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.781" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:07.781" starttime="20170731 16:39:07.573"></status>
</kw>
<msg timestamp="20170731 16:39:07.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:07.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.781" starttime="20170731 16:39:07.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.782" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.782" starttime="20170731 16:39:07.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.783" starttime="20170731 16:39:07.782"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.783" starttime="20170731 16:39:07.569"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.783" starttime="20170731 16:39:07.569"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.783" starttime="20170731 16:39:07.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:07.784" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:39:07.784" starttime="20170731 16:39:07.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.784" starttime="20170731 16:39:07.784"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:07.850" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:07.850" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.850" starttime="20170731 16:39:07.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:07.851" starttime="20170731 16:39:07.850"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:07.851" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:07.851" starttime="20170731 16:39:07.851"></status>
</kw>
<msg timestamp="20170731 16:39:07.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.852" starttime="20170731 16:39:07.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:07.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:07.852" starttime="20170731 16:39:07.852"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:07.853" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:07.853" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:07.853" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:07.854" starttime="20170731 16:39:07.853"></status>
</kw>
<msg timestamp="20170731 16:39:07.854" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:39:07.854" starttime="20170731 16:39:07.567"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:07.854" starttime="20170731 16:39:07.566"></status>
</kw>
<msg timestamp="20170731 16:39:07.855" level="FAIL">
#(UTC) 2017/07/31 16:39:07.854346 -   11.093908 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:39:07.855" starttime="20170731 16:39:06.762"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:17.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:17.861" starttime="20170731 16:39:17.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:17.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:17.862" starttime="20170731 16:39:17.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:17.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:17.862" starttime="20170731 16:39:17.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:17.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:17.863" starttime="20170731 16:39:17.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:18.061" starttime="20170731 16:39:17.864"></status>
</kw>
<msg timestamp="20170731 16:39:18.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:18.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.062" starttime="20170731 16:39:17.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.062" starttime="20170731 16:39:18.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.063" starttime="20170731 16:39:18.063"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.063" starttime="20170731 16:39:17.860"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.063" starttime="20170731 16:39:17.859"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.063" starttime="20170731 16:39:17.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:18.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:39:18.064" starttime="20170731 16:39:18.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.065" starttime="20170731 16:39:18.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:18.139" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:18.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.139" starttime="20170731 16:39:18.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.140" starttime="20170731 16:39:18.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:18.140" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:18.140" starttime="20170731 16:39:18.140"></status>
</kw>
<msg timestamp="20170731 16:39:18.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.141" starttime="20170731 16:39:17.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.141" starttime="20170731 16:39:18.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:18.142" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:18.142" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:18.142" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:18.142" starttime="20170731 16:39:18.142"></status>
</kw>
<msg timestamp="20170731 16:39:18.142" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:39:18.142" starttime="20170731 16:39:17.858"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.143" starttime="20170731 16:39:17.857"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:18.146" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:18.147" starttime="20170731 16:39:18.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:18.147" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:18.147" starttime="20170731 16:39:18.147"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:18.148" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:18.148" starttime="20170731 16:39:18.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:18.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:18.149" starttime="20170731 16:39:18.148"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:18.343" starttime="20170731 16:39:18.150"></status>
</kw>
<msg timestamp="20170731 16:39:18.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:18.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.343" starttime="20170731 16:39:18.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.344" starttime="20170731 16:39:18.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.344" starttime="20170731 16:39:18.344"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.345" starttime="20170731 16:39:18.146"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.345" starttime="20170731 16:39:18.145"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.345" starttime="20170731 16:39:18.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:18.345" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:39:18.345" starttime="20170731 16:39:18.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.346" starttime="20170731 16:39:18.346"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:18.409" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:18.409" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.409" starttime="20170731 16:39:18.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.410" starttime="20170731 16:39:18.410"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:18.410" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:18.410" starttime="20170731 16:39:18.410"></status>
</kw>
<msg timestamp="20170731 16:39:18.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.411" starttime="20170731 16:39:18.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.411" starttime="20170731 16:39:18.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:18.412" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:18.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:18.412" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:39:18.412" starttime="20170731 16:39:18.412"></status>
</kw>
<msg timestamp="20170731 16:39:18.412" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:39:18.412" starttime="20170731 16:39:18.143"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.413" starttime="20170731 16:39:18.143"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:18.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:18.418" starttime="20170731 16:39:18.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:18.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:18.419" starttime="20170731 16:39:18.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:18.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:18.420" starttime="20170731 16:39:18.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:18.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:18.421" starttime="20170731 16:39:18.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:18.635" starttime="20170731 16:39:18.422"></status>
</kw>
<msg timestamp="20170731 16:39:18.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:18.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.636" starttime="20170731 16:39:18.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.637" starttime="20170731 16:39:18.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.638" starttime="20170731 16:39:18.637"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.638" starttime="20170731 16:39:18.417"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.638" starttime="20170731 16:39:18.416"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.638" starttime="20170731 16:39:18.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:18.639" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:39:18.639" starttime="20170731 16:39:18.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.640" starttime="20170731 16:39:18.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:18.719" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:39:18.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.720" starttime="20170731 16:39:18.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.720" starttime="20170731 16:39:18.720"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:18.721" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:18.721" starttime="20170731 16:39:18.721"></status>
</kw>
<msg timestamp="20170731 16:39:18.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.721" starttime="20170731 16:39:18.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.722" starttime="20170731 16:39:18.721"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:18.722" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:18.722" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:18.722" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:39:18.723" starttime="20170731 16:39:18.722"></status>
</kw>
<msg timestamp="20170731 16:39:18.723" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:39:18.723" starttime="20170731 16:39:18.413"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.723" starttime="20170731 16:39:18.413"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:18.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:18.727" starttime="20170731 16:39:18.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:18.728" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:18.728" starttime="20170731 16:39:18.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:18.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:18.728" starttime="20170731 16:39:18.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:18.729" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:18.729" starttime="20170731 16:39:18.729"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:18.928" starttime="20170731 16:39:18.730"></status>
</kw>
<msg timestamp="20170731 16:39:18.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:18.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.928" starttime="20170731 16:39:18.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.929" starttime="20170731 16:39:18.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:18.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:18.930" starttime="20170731 16:39:18.929"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.930" starttime="20170731 16:39:18.726"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.930" starttime="20170731 16:39:18.725"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:18.930" starttime="20170731 16:39:18.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:18.930" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:39:18.930" starttime="20170731 16:39:18.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:18.931" starttime="20170731 16:39:18.931"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:19.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:19.032" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:19.032" starttime="20170731 16:39:18.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:19.033" starttime="20170731 16:39:19.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:19.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:19.033" starttime="20170731 16:39:19.033"></status>
</kw>
<msg timestamp="20170731 16:39:19.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:19.033" starttime="20170731 16:39:18.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:19.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:19.034" starttime="20170731 16:39:19.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:19.035" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:19.035" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:19.035" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:19.035" starttime="20170731 16:39:19.034"></status>
</kw>
<msg timestamp="20170731 16:39:19.035" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:39:19.035" starttime="20170731 16:39:18.724"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:19.035" starttime="20170731 16:39:18.723"></status>
</kw>
<msg timestamp="20170731 16:39:19.037" level="FAIL">
#(UTC) 2017/07/31 16:39:19.036166 -   11.181820 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:39:19.037" starttime="20170731 16:39:17.855"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:29.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:29.043" starttime="20170731 16:39:29.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:29.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:29.044" starttime="20170731 16:39:29.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:29.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:29.044" starttime="20170731 16:39:29.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:29.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:29.045" starttime="20170731 16:39:29.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:29.253" starttime="20170731 16:39:29.046"></status>
</kw>
<msg timestamp="20170731 16:39:29.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:29.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.254" starttime="20170731 16:39:29.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.255" starttime="20170731 16:39:29.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.255" starttime="20170731 16:39:29.255"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.255" starttime="20170731 16:39:29.042"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.256" starttime="20170731 16:39:29.041"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.256" starttime="20170731 16:39:29.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:29.256" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:39:29.256" starttime="20170731 16:39:29.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.257" starttime="20170731 16:39:29.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:29.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:29.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.320" starttime="20170731 16:39:29.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.320" starttime="20170731 16:39:29.320"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:29.321" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:29.321" starttime="20170731 16:39:29.321"></status>
</kw>
<msg timestamp="20170731 16:39:29.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.321" starttime="20170731 16:39:29.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.322" starttime="20170731 16:39:29.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:29.322" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:29.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:29.323" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:29.323" starttime="20170731 16:39:29.322"></status>
</kw>
<msg timestamp="20170731 16:39:29.323" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:39:29.323" starttime="20170731 16:39:29.039"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.323" starttime="20170731 16:39:29.039"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:29.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:29.327" starttime="20170731 16:39:29.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:29.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:29.328" starttime="20170731 16:39:29.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:29.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:29.329" starttime="20170731 16:39:29.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:29.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:29.329" starttime="20170731 16:39:29.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:29.536" starttime="20170731 16:39:29.330"></status>
</kw>
<msg timestamp="20170731 16:39:29.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:29.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.537" starttime="20170731 16:39:29.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.538" starttime="20170731 16:39:29.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.538" starttime="20170731 16:39:29.538"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.538" starttime="20170731 16:39:29.326"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.538" starttime="20170731 16:39:29.326"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.539" starttime="20170731 16:39:29.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:29.539" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:39:29.539" starttime="20170731 16:39:29.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.540" starttime="20170731 16:39:29.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:29.603" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:29.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.603" starttime="20170731 16:39:29.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.604" starttime="20170731 16:39:29.603"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:29.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:29.604" starttime="20170731 16:39:29.604"></status>
</kw>
<msg timestamp="20170731 16:39:29.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.604" starttime="20170731 16:39:29.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.605" starttime="20170731 16:39:29.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:29.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:29.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:29.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:39:29.606" starttime="20170731 16:39:29.605"></status>
</kw>
<msg timestamp="20170731 16:39:29.606" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:39:29.606" starttime="20170731 16:39:29.324"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.606" starttime="20170731 16:39:29.323"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:29.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:29.611" starttime="20170731 16:39:29.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:29.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:29.611" starttime="20170731 16:39:29.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:29.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:29.612" starttime="20170731 16:39:29.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:29.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:29.613" starttime="20170731 16:39:29.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:29.798" starttime="20170731 16:39:29.613"></status>
</kw>
<msg timestamp="20170731 16:39:29.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:29.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.799" starttime="20170731 16:39:29.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.799" starttime="20170731 16:39:29.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.800" starttime="20170731 16:39:29.800"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.800" starttime="20170731 16:39:29.609"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.800" starttime="20170731 16:39:29.609"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.801" starttime="20170731 16:39:29.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:29.801" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:39:29.801" starttime="20170731 16:39:29.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.802" starttime="20170731 16:39:29.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:29.867" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:39:29.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.867" starttime="20170731 16:39:29.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:29.868" starttime="20170731 16:39:29.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:29.868" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:29.868" starttime="20170731 16:39:29.868"></status>
</kw>
<msg timestamp="20170731 16:39:29.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.869" starttime="20170731 16:39:29.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:29.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:29.869" starttime="20170731 16:39:29.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:29.870" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:29.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:29.870" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:39:29.870" starttime="20170731 16:39:29.870"></status>
</kw>
<msg timestamp="20170731 16:39:29.871" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:39:29.871" starttime="20170731 16:39:29.607"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:29.871" starttime="20170731 16:39:29.607"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:29.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:29.875" starttime="20170731 16:39:29.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:29.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:29.876" starttime="20170731 16:39:29.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:29.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:29.876" starttime="20170731 16:39:29.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:29.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:29.877" starttime="20170731 16:39:29.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:30.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:30.054" starttime="20170731 16:39:29.878"></status>
</kw>
<msg timestamp="20170731 16:39:30.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:30.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.054" starttime="20170731 16:39:29.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:30.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.055" starttime="20170731 16:39:30.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:30.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.055" starttime="20170731 16:39:30.055"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:30.056" starttime="20170731 16:39:29.874"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:30.056" starttime="20170731 16:39:29.873"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:30.056" starttime="20170731 16:39:29.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:30.056" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:39:30.056" starttime="20170731 16:39:30.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:30.057" starttime="20170731 16:39:30.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:30.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:30.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.138" starttime="20170731 16:39:30.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:30.139" starttime="20170731 16:39:30.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:30.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:30.139" starttime="20170731 16:39:30.139"></status>
</kw>
<msg timestamp="20170731 16:39:30.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.140" starttime="20170731 16:39:29.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:30.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:30.140" starttime="20170731 16:39:30.140"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:30.141" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:30.141" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:30.141" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:30.141" starttime="20170731 16:39:30.141"></status>
</kw>
<msg timestamp="20170731 16:39:30.141" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:39:30.141" starttime="20170731 16:39:29.871"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:30.142" starttime="20170731 16:39:29.871"></status>
</kw>
<msg timestamp="20170731 16:39:30.142" level="FAIL">
#(UTC) 2017/07/31 16:39:30.141908 -   11.105742 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:39:30.142" starttime="20170731 16:39:29.037"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:40.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:40.149" starttime="20170731 16:39:40.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:40.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:40.150" starttime="20170731 16:39:40.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:40.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:40.150" starttime="20170731 16:39:40.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:40.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:40.151" starttime="20170731 16:39:40.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:40.410" starttime="20170731 16:39:40.152"></status>
</kw>
<msg timestamp="20170731 16:39:40.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:40.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.411" starttime="20170731 16:39:40.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.412" starttime="20170731 16:39:40.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.413" starttime="20170731 16:39:40.412"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.413" starttime="20170731 16:39:40.148"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.413" starttime="20170731 16:39:40.147"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.413" starttime="20170731 16:39:40.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:40.414" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:39:40.414" starttime="20170731 16:39:40.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:40.415" starttime="20170731 16:39:40.415"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:40.495" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:40.496" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.496" starttime="20170731 16:39:40.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:40.497" starttime="20170731 16:39:40.496"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:40.497" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:40.497" starttime="20170731 16:39:40.497"></status>
</kw>
<msg timestamp="20170731 16:39:40.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.497" starttime="20170731 16:39:40.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.498" starttime="20170731 16:39:40.498"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:40.499" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:40.499" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:40.499" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:40.499" starttime="20170731 16:39:40.498"></status>
</kw>
<msg timestamp="20170731 16:39:40.499" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:39:40.499" starttime="20170731 16:39:40.145"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.500" starttime="20170731 16:39:40.145"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:40.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:40.506" starttime="20170731 16:39:40.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:40.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:40.507" starttime="20170731 16:39:40.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:40.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:40.508" starttime="20170731 16:39:40.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:40.508" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:40.508" starttime="20170731 16:39:40.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.741" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:40.741" starttime="20170731 16:39:40.509"></status>
</kw>
<msg timestamp="20170731 16:39:40.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:40.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.741" starttime="20170731 16:39:40.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.742" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.742" starttime="20170731 16:39:40.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.743" starttime="20170731 16:39:40.743"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.744" starttime="20170731 16:39:40.504"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.744" starttime="20170731 16:39:40.503"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.744" starttime="20170731 16:39:40.502"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:40.745" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:39:40.745" starttime="20170731 16:39:40.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:40.746" starttime="20170731 16:39:40.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:40.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:40.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.819" starttime="20170731 16:39:40.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:40.820" starttime="20170731 16:39:40.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:40.820" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:40.820" starttime="20170731 16:39:40.820"></status>
</kw>
<msg timestamp="20170731 16:39:40.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.820" starttime="20170731 16:39:40.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:40.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:40.821" starttime="20170731 16:39:40.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:40.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:40.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:40.822" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:39:40.822" starttime="20170731 16:39:40.821"></status>
</kw>
<msg timestamp="20170731 16:39:40.822" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:39:40.822" starttime="20170731 16:39:40.501"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:40.822" starttime="20170731 16:39:40.500"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:40.826" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:40.826" starttime="20170731 16:39:40.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:40.827" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:40.827" starttime="20170731 16:39:40.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:40.828" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:40.828" starttime="20170731 16:39:40.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:40.828" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:40.828" starttime="20170731 16:39:40.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:41.018" starttime="20170731 16:39:40.829"></status>
</kw>
<msg timestamp="20170731 16:39:41.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:41.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.018" starttime="20170731 16:39:40.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.019" starttime="20170731 16:39:41.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.020" starttime="20170731 16:39:41.019"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.020" starttime="20170731 16:39:40.825"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.020" starttime="20170731 16:39:40.825"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.020" starttime="20170731 16:39:40.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:41.021" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:39:41.021" starttime="20170731 16:39:41.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:41.021" starttime="20170731 16:39:41.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:41.091" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:39:41.091" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.091" starttime="20170731 16:39:41.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:41.092" starttime="20170731 16:39:41.091"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:41.092" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:41.092" starttime="20170731 16:39:41.092"></status>
</kw>
<msg timestamp="20170731 16:39:41.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.092" starttime="20170731 16:39:40.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.093" starttime="20170731 16:39:41.093"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:41.094" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:41.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:41.094" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:39:41.094" starttime="20170731 16:39:41.093"></status>
</kw>
<msg timestamp="20170731 16:39:41.094" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:39:41.094" starttime="20170731 16:39:40.823"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.094" starttime="20170731 16:39:40.823"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:41.098" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:41.098" starttime="20170731 16:39:41.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:41.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:41.099" starttime="20170731 16:39:41.099"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:41.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:41.100" starttime="20170731 16:39:41.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:41.101" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:41.101" starttime="20170731 16:39:41.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:41.286" starttime="20170731 16:39:41.101"></status>
</kw>
<msg timestamp="20170731 16:39:41.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:41.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.286" starttime="20170731 16:39:41.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.287" starttime="20170731 16:39:41.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.287" starttime="20170731 16:39:41.287"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.288" starttime="20170731 16:39:41.097"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.288" starttime="20170731 16:39:41.097"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.288" starttime="20170731 16:39:41.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:41.288" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:39:41.288" starttime="20170731 16:39:41.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:41.289" starttime="20170731 16:39:41.289"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:41.351" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:41.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.351" starttime="20170731 16:39:41.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:41.352" starttime="20170731 16:39:41.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:41.353" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:41.353" starttime="20170731 16:39:41.352"></status>
</kw>
<msg timestamp="20170731 16:39:41.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.353" starttime="20170731 16:39:41.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:41.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:41.354" starttime="20170731 16:39:41.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:41.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:41.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:41.354" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:41.354" starttime="20170731 16:39:41.354"></status>
</kw>
<msg timestamp="20170731 16:39:41.355" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:39:41.355" starttime="20170731 16:39:41.095"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:41.355" starttime="20170731 16:39:41.095"></status>
</kw>
<msg timestamp="20170731 16:39:41.356" level="FAIL">
#(UTC) 2017/07/31 16:39:41.355223 -   11.213315 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:39:41.356" starttime="20170731 16:39:40.143"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:51.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:51.362" starttime="20170731 16:39:51.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:51.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:51.363" starttime="20170731 16:39:51.363"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:51.364" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:51.364" starttime="20170731 16:39:51.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:51.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:51.364" starttime="20170731 16:39:51.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.548" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:51.548" starttime="20170731 16:39:51.365"></status>
</kw>
<msg timestamp="20170731 16:39:51.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:51.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.549" starttime="20170731 16:39:51.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.549" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.549" starttime="20170731 16:39:51.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.550" starttime="20170731 16:39:51.550"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.550" starttime="20170731 16:39:51.361"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.550" starttime="20170731 16:39:51.361"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.550" starttime="20170731 16:39:51.360"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:51.551" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:39:51.551" starttime="20170731 16:39:51.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:51.552" starttime="20170731 16:39:51.551"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:51.616" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:51.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.616" starttime="20170731 16:39:51.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:51.617" starttime="20170731 16:39:51.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:51.617" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:51.617" starttime="20170731 16:39:51.617"></status>
</kw>
<msg timestamp="20170731 16:39:51.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.618" starttime="20170731 16:39:51.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.618" starttime="20170731 16:39:51.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:51.619" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:51.619" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:51.619" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:51.619" starttime="20170731 16:39:51.619"></status>
</kw>
<msg timestamp="20170731 16:39:51.620" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:39:51.620" starttime="20170731 16:39:51.359"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.620" starttime="20170731 16:39:51.358"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:51.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:51.625" starttime="20170731 16:39:51.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:51.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:51.626" starttime="20170731 16:39:51.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:51.627" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:51.627" starttime="20170731 16:39:51.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:51.628" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:51.628" starttime="20170731 16:39:51.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:51.821" starttime="20170731 16:39:51.630"></status>
</kw>
<msg timestamp="20170731 16:39:51.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:51.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.822" starttime="20170731 16:39:51.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.823" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.823" starttime="20170731 16:39:51.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.824" starttime="20170731 16:39:51.823"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.824" starttime="20170731 16:39:51.623"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.824" starttime="20170731 16:39:51.623"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.824" starttime="20170731 16:39:51.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:51.825" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:39:51.825" starttime="20170731 16:39:51.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:51.826" starttime="20170731 16:39:51.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:51.905" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:51.905" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.905" starttime="20170731 16:39:51.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:51.906" starttime="20170731 16:39:51.905"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:51.906" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:51.906" starttime="20170731 16:39:51.906"></status>
</kw>
<msg timestamp="20170731 16:39:51.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.906" starttime="20170731 16:39:51.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:51.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:51.907" starttime="20170731 16:39:51.907"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:51.908" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:51.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:51.908" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:39:51.908" starttime="20170731 16:39:51.907"></status>
</kw>
<msg timestamp="20170731 16:39:51.908" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:39:51.908" starttime="20170731 16:39:51.621"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:51.908" starttime="20170731 16:39:51.620"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:51.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:51.913" starttime="20170731 16:39:51.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:51.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:51.913" starttime="20170731 16:39:51.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:51.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:51.914" starttime="20170731 16:39:51.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:51.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:51.915" starttime="20170731 16:39:51.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:52.166" starttime="20170731 16:39:51.915"></status>
</kw>
<msg timestamp="20170731 16:39:52.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:52.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.166" starttime="20170731 16:39:51.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.167" starttime="20170731 16:39:52.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.168" starttime="20170731 16:39:52.167"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.168" starttime="20170731 16:39:51.911"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.168" starttime="20170731 16:39:51.911"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.168" starttime="20170731 16:39:51.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:52.168" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:39:52.168" starttime="20170731 16:39:52.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:52.169" starttime="20170731 16:39:52.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:52.235" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:39:52.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.235" starttime="20170731 16:39:52.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:52.236" starttime="20170731 16:39:52.235"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:52.236" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:52.236" starttime="20170731 16:39:52.236"></status>
</kw>
<msg timestamp="20170731 16:39:52.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.236" starttime="20170731 16:39:51.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.237" starttime="20170731 16:39:52.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:52.238" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:52.238" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:52.238" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:39:52.238" starttime="20170731 16:39:52.237"></status>
</kw>
<msg timestamp="20170731 16:39:52.238" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:39:52.238" starttime="20170731 16:39:51.909"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.238" starttime="20170731 16:39:51.909"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:39:52.242" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:39:52.242" starttime="20170731 16:39:52.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:39:52.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:39:52.243" starttime="20170731 16:39:52.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:39:52.244" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:39:52.244" starttime="20170731 16:39:52.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:39:52.244" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:39:52.244" starttime="20170731 16:39:52.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.423" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:39:52.423" starttime="20170731 16:39:52.245"></status>
</kw>
<msg timestamp="20170731 16:39:52.424" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:39:52.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.424" starttime="20170731 16:39:52.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.424" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.424" starttime="20170731 16:39:52.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.425" starttime="20170731 16:39:52.425"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.425" starttime="20170731 16:39:52.241"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.425" starttime="20170731 16:39:52.241"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.425" starttime="20170731 16:39:52.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:39:52.426" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:39:52.426" starttime="20170731 16:39:52.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:52.427" starttime="20170731 16:39:52.426"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:39:52.509" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:39:52.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.510" starttime="20170731 16:39:52.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:39:52.510" starttime="20170731 16:39:52.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:39:52.511" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:39:52.511" starttime="20170731 16:39:52.511"></status>
</kw>
<msg timestamp="20170731 16:39:52.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.511" starttime="20170731 16:39:52.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:39:52.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:39:52.512" starttime="20170731 16:39:52.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:39:52.512" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:39:52.512" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:39:52.512" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:39:52.512" starttime="20170731 16:39:52.512"></status>
</kw>
<msg timestamp="20170731 16:39:52.513" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:39:52.513" starttime="20170731 16:39:52.239"></status>
</kw>
<status status="PASS" endtime="20170731 16:39:52.513" starttime="20170731 16:39:52.238"></status>
</kw>
<msg timestamp="20170731 16:39:52.514" level="FAIL">
#(UTC) 2017/07/31 16:39:52.513273 -   11.158050 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:39:52.514" starttime="20170731 16:39:51.357"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:02.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:02.523" starttime="20170731 16:40:02.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:02.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:02.524" starttime="20170731 16:40:02.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:02.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:02.525" starttime="20170731 16:40:02.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:02.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:02.525" starttime="20170731 16:40:02.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.710" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:02.710" starttime="20170731 16:40:02.526"></status>
</kw>
<msg timestamp="20170731 16:40:02.710" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:02.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.711" starttime="20170731 16:40:02.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.711" starttime="20170731 16:40:02.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.712" starttime="20170731 16:40:02.712"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.712" starttime="20170731 16:40:02.522"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.712" starttime="20170731 16:40:02.521"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.713" starttime="20170731 16:40:02.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:02.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:02.713" starttime="20170731 16:40:02.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:02.714" starttime="20170731 16:40:02.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:02.779" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:02.779" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.779" starttime="20170731 16:40:02.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:02.780" starttime="20170731 16:40:02.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:02.780" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:02.780" starttime="20170731 16:40:02.780"></status>
</kw>
<msg timestamp="20170731 16:40:02.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.780" starttime="20170731 16:40:02.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.781" starttime="20170731 16:40:02.781"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:02.782" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:02.782" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:02.782" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:02.782" starttime="20170731 16:40:02.781"></status>
</kw>
<msg timestamp="20170731 16:40:02.782" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:02.782" starttime="20170731 16:40:02.518"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.782" starttime="20170731 16:40:02.517"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:02.787" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:02.787" starttime="20170731 16:40:02.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:02.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:02.788" starttime="20170731 16:40:02.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:02.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:02.788" starttime="20170731 16:40:02.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:02.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:02.789" starttime="20170731 16:40:02.788"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:02.972" starttime="20170731 16:40:02.790"></status>
</kw>
<msg timestamp="20170731 16:40:02.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:02.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.973" starttime="20170731 16:40:02.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.973" starttime="20170731 16:40:02.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:02.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:02.974" starttime="20170731 16:40:02.974"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.974" starttime="20170731 16:40:02.786"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.974" starttime="20170731 16:40:02.785"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:02.975" starttime="20170731 16:40:02.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:02.975" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:02.975" starttime="20170731 16:40:02.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:02.976" starttime="20170731 16:40:02.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:03.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:03.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.062" starttime="20170731 16:40:02.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:03.063" starttime="20170731 16:40:03.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:03.063" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:03.063" starttime="20170731 16:40:03.063"></status>
</kw>
<msg timestamp="20170731 16:40:03.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.063" starttime="20170731 16:40:02.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.064" starttime="20170731 16:40:03.064"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:03.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:03.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:03.065" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:03.065" starttime="20170731 16:40:03.064"></status>
</kw>
<msg timestamp="20170731 16:40:03.065" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:03.065" starttime="20170731 16:40:02.783"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.065" starttime="20170731 16:40:02.783"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:03.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:03.069" starttime="20170731 16:40:03.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:03.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:03.070" starttime="20170731 16:40:03.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:03.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:03.071" starttime="20170731 16:40:03.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:03.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:03.072" starttime="20170731 16:40:03.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:03.266" starttime="20170731 16:40:03.072"></status>
</kw>
<msg timestamp="20170731 16:40:03.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:03.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.267" starttime="20170731 16:40:03.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.267" starttime="20170731 16:40:03.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.268" starttime="20170731 16:40:03.268"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.268" starttime="20170731 16:40:03.068"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.268" starttime="20170731 16:40:03.068"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.268" starttime="20170731 16:40:03.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:03.269" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:03.269" starttime="20170731 16:40:03.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:03.270" starttime="20170731 16:40:03.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:03.344" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:03.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.345" starttime="20170731 16:40:03.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:03.345" starttime="20170731 16:40:03.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:03.346" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:03.346" starttime="20170731 16:40:03.346"></status>
</kw>
<msg timestamp="20170731 16:40:03.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.346" starttime="20170731 16:40:03.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.347" starttime="20170731 16:40:03.347"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:03.348" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:03.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:03.348" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:03.348" starttime="20170731 16:40:03.348"></status>
</kw>
<msg timestamp="20170731 16:40:03.349" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:03.349" starttime="20170731 16:40:03.066"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.349" starttime="20170731 16:40:03.066"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:03.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:03.355" starttime="20170731 16:40:03.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:03.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:03.356" starttime="20170731 16:40:03.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:03.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:03.356" starttime="20170731 16:40:03.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:03.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:03.357" starttime="20170731 16:40:03.357"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:03.560" starttime="20170731 16:40:03.358"></status>
</kw>
<msg timestamp="20170731 16:40:03.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:03.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.560" starttime="20170731 16:40:03.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.561" starttime="20170731 16:40:03.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.561" starttime="20170731 16:40:03.561"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.562" starttime="20170731 16:40:03.353"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.562" starttime="20170731 16:40:03.353"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.562" starttime="20170731 16:40:03.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:03.562" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:03.562" starttime="20170731 16:40:03.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:03.563" starttime="20170731 16:40:03.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:03.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:03.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.626" starttime="20170731 16:40:03.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:03.627" starttime="20170731 16:40:03.626"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:03.627" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:03.627" starttime="20170731 16:40:03.627"></status>
</kw>
<msg timestamp="20170731 16:40:03.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.627" starttime="20170731 16:40:03.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:03.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:03.628" starttime="20170731 16:40:03.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:03.629" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:03.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:03.629" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:03.629" starttime="20170731 16:40:03.628"></status>
</kw>
<msg timestamp="20170731 16:40:03.629" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:03.629" starttime="20170731 16:40:03.350"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:03.629" starttime="20170731 16:40:03.349"></status>
</kw>
<msg timestamp="20170731 16:40:03.630" level="FAIL">
#(UTC) 2017/07/31 16:40:03.629719 -   11.116446 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:03.630" starttime="20170731 16:40:02.514"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:13.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:13.637" starttime="20170731 16:40:13.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:13.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:13.637" starttime="20170731 16:40:13.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:13.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:13.638" starttime="20170731 16:40:13.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:13.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:13.638" starttime="20170731 16:40:13.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:13.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:13.819" starttime="20170731 16:40:13.639"></status>
</kw>
<msg timestamp="20170731 16:40:13.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:13.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.820" starttime="20170731 16:40:13.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:13.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.820" starttime="20170731 16:40:13.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:13.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.821" starttime="20170731 16:40:13.821"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:13.821" starttime="20170731 16:40:13.635"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:13.821" starttime="20170731 16:40:13.635"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:13.822" starttime="20170731 16:40:13.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:13.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:13.822" starttime="20170731 16:40:13.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:13.823" starttime="20170731 16:40:13.823"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:13.887" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:13.887" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.887" starttime="20170731 16:40:13.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:13.888" starttime="20170731 16:40:13.887"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:13.888" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:13.888" starttime="20170731 16:40:13.888"></status>
</kw>
<msg timestamp="20170731 16:40:13.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.889" starttime="20170731 16:40:13.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:13.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:13.889" starttime="20170731 16:40:13.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:13.890" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:13.890" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:13.890" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:13.890" starttime="20170731 16:40:13.890"></status>
</kw>
<msg timestamp="20170731 16:40:13.890" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:13.890" starttime="20170731 16:40:13.633"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:13.891" starttime="20170731 16:40:13.633"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:13.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:13.895" starttime="20170731 16:40:13.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:13.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:13.896" starttime="20170731 16:40:13.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:13.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:13.896" starttime="20170731 16:40:13.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:13.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:13.897" starttime="20170731 16:40:13.897"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:14.091" starttime="20170731 16:40:13.898"></status>
</kw>
<msg timestamp="20170731 16:40:14.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:14.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.091" starttime="20170731 16:40:13.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.092" starttime="20170731 16:40:14.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.093" starttime="20170731 16:40:14.092"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.093" starttime="20170731 16:40:13.894"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.093" starttime="20170731 16:40:13.893"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.093" starttime="20170731 16:40:13.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:14.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:14.094" starttime="20170731 16:40:14.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.094" starttime="20170731 16:40:14.094"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:14.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:14.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.158" starttime="20170731 16:40:14.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.159" starttime="20170731 16:40:14.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:14.159" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:14.159" starttime="20170731 16:40:14.159"></status>
</kw>
<msg timestamp="20170731 16:40:14.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.159" starttime="20170731 16:40:13.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.160" starttime="20170731 16:40:14.160"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:14.161" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:14.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:14.161" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:14.161" starttime="20170731 16:40:14.160"></status>
</kw>
<msg timestamp="20170731 16:40:14.161" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:14.161" starttime="20170731 16:40:13.892"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.161" starttime="20170731 16:40:13.891"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:14.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:14.165" starttime="20170731 16:40:14.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:14.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:14.166" starttime="20170731 16:40:14.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:14.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:14.167" starttime="20170731 16:40:14.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:14.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:14.167" starttime="20170731 16:40:14.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:14.369" starttime="20170731 16:40:14.168"></status>
</kw>
<msg timestamp="20170731 16:40:14.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:14.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.369" starttime="20170731 16:40:14.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.370" starttime="20170731 16:40:14.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.371" starttime="20170731 16:40:14.370"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.371" starttime="20170731 16:40:14.164"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.371" starttime="20170731 16:40:14.164"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.372" starttime="20170731 16:40:14.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:14.372" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:14.372" starttime="20170731 16:40:14.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.373" starttime="20170731 16:40:14.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:14.440" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:14.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.441" starttime="20170731 16:40:14.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.441" starttime="20170731 16:40:14.441"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:14.442" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:14.442" starttime="20170731 16:40:14.441"></status>
</kw>
<msg timestamp="20170731 16:40:14.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.442" starttime="20170731 16:40:14.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.443" starttime="20170731 16:40:14.442"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:14.443" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:14.443" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:14.443" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:14.443" starttime="20170731 16:40:14.443"></status>
</kw>
<msg timestamp="20170731 16:40:14.444" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:14.444" starttime="20170731 16:40:14.162"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.444" starttime="20170731 16:40:14.162"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:14.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:14.448" starttime="20170731 16:40:14.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:14.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:14.449" starttime="20170731 16:40:14.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:14.449" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:14.449" starttime="20170731 16:40:14.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:14.450" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:14.450" starttime="20170731 16:40:14.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:14.663" starttime="20170731 16:40:14.451"></status>
</kw>
<msg timestamp="20170731 16:40:14.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:14.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.663" starttime="20170731 16:40:14.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.664" starttime="20170731 16:40:14.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.665" starttime="20170731 16:40:14.664"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.665" starttime="20170731 16:40:14.447"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.665" starttime="20170731 16:40:14.446"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.665" starttime="20170731 16:40:14.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:14.666" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:14.666" starttime="20170731 16:40:14.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.666" starttime="20170731 16:40:14.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:14.733" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:14.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.733" starttime="20170731 16:40:14.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:14.734" starttime="20170731 16:40:14.734"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:14.734" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:14.735" starttime="20170731 16:40:14.734"></status>
</kw>
<msg timestamp="20170731 16:40:14.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.735" starttime="20170731 16:40:14.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:14.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:14.736" starttime="20170731 16:40:14.735"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:14.736" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:14.736" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:14.736" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:14.736" starttime="20170731 16:40:14.736"></status>
</kw>
<msg timestamp="20170731 16:40:14.737" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:14.737" starttime="20170731 16:40:14.445"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:14.737" starttime="20170731 16:40:14.444"></status>
</kw>
<msg timestamp="20170731 16:40:14.738" level="FAIL">
#(UTC) 2017/07/31 16:40:14.737113 -   11.107394 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:14.738" starttime="20170731 16:40:13.631"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:24.744" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:24.744" starttime="20170731 16:40:24.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:24.745" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:24.745" starttime="20170731 16:40:24.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:24.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:24.745" starttime="20170731 16:40:24.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:24.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:24.746" starttime="20170731 16:40:24.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:24.961" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:24.961" starttime="20170731 16:40:24.747"></status>
</kw>
<msg timestamp="20170731 16:40:24.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:24.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:24.961" starttime="20170731 16:40:24.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:24.962" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:24.962" starttime="20170731 16:40:24.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:24.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:24.963" starttime="20170731 16:40:24.962"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:24.963" starttime="20170731 16:40:24.743"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:24.963" starttime="20170731 16:40:24.743"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:24.963" starttime="20170731 16:40:24.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:24.964" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:24.964" starttime="20170731 16:40:24.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:24.965" starttime="20170731 16:40:24.964"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:25.045" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:25.045" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.045" starttime="20170731 16:40:24.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.046" starttime="20170731 16:40:25.046"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:25.047" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:25.047" starttime="20170731 16:40:25.047"></status>
</kw>
<msg timestamp="20170731 16:40:25.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.047" starttime="20170731 16:40:24.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.048" starttime="20170731 16:40:25.047"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:25.048" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:25.048" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:25.048" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:25.048" starttime="20170731 16:40:25.048"></status>
</kw>
<msg timestamp="20170731 16:40:25.049" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:25.049" starttime="20170731 16:40:24.741"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.049" starttime="20170731 16:40:24.740"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:25.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:25.054" starttime="20170731 16:40:25.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:25.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:25.054" starttime="20170731 16:40:25.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:25.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:25.055" starttime="20170731 16:40:25.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:25.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:25.056" starttime="20170731 16:40:25.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:25.244" starttime="20170731 16:40:25.056"></status>
</kw>
<msg timestamp="20170731 16:40:25.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:25.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.244" starttime="20170731 16:40:25.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.245" starttime="20170731 16:40:25.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.245" starttime="20170731 16:40:25.245"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.246" starttime="20170731 16:40:25.052"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.246" starttime="20170731 16:40:25.052"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.246" starttime="20170731 16:40:25.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:25.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:25.246" starttime="20170731 16:40:25.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.247" starttime="20170731 16:40:25.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:25.312" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:25.313" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.313" starttime="20170731 16:40:25.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.313" starttime="20170731 16:40:25.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:25.314" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:25.314" starttime="20170731 16:40:25.314"></status>
</kw>
<msg timestamp="20170731 16:40:25.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.314" starttime="20170731 16:40:25.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.315" starttime="20170731 16:40:25.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:25.315" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:25.315" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:25.315" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:25.316" starttime="20170731 16:40:25.315"></status>
</kw>
<msg timestamp="20170731 16:40:25.316" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:25.316" starttime="20170731 16:40:25.050"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.316" starttime="20170731 16:40:25.049"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:25.320" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:25.321" starttime="20170731 16:40:25.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:25.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:25.321" starttime="20170731 16:40:25.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:25.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:25.322" starttime="20170731 16:40:25.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:25.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:25.323" starttime="20170731 16:40:25.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:25.537" starttime="20170731 16:40:25.323"></status>
</kw>
<msg timestamp="20170731 16:40:25.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:25.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.537" starttime="20170731 16:40:25.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.538" starttime="20170731 16:40:25.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.539" starttime="20170731 16:40:25.538"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.539" starttime="20170731 16:40:25.319"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.539" starttime="20170731 16:40:25.319"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.539" starttime="20170731 16:40:25.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:25.539" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:25.540" starttime="20170731 16:40:25.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.540" starttime="20170731 16:40:25.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:25.622" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:25.623" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.623" starttime="20170731 16:40:25.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.623" starttime="20170731 16:40:25.623"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:25.624" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:25.624" starttime="20170731 16:40:25.624"></status>
</kw>
<msg timestamp="20170731 16:40:25.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.624" starttime="20170731 16:40:25.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.625" starttime="20170731 16:40:25.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:25.625" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:25.626" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:25.626" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:25.626" starttime="20170731 16:40:25.625"></status>
</kw>
<msg timestamp="20170731 16:40:25.626" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:25.626" starttime="20170731 16:40:25.317"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.626" starttime="20170731 16:40:25.316"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:25.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:25.630" starttime="20170731 16:40:25.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:25.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:25.631" starttime="20170731 16:40:25.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:25.632" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:25.632" starttime="20170731 16:40:25.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:25.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:25.632" starttime="20170731 16:40:25.632"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.827" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:25.827" starttime="20170731 16:40:25.634"></status>
</kw>
<msg timestamp="20170731 16:40:25.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:25.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.827" starttime="20170731 16:40:25.633"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.828" starttime="20170731 16:40:25.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.828" starttime="20170731 16:40:25.828"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.828" starttime="20170731 16:40:25.629"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.829" starttime="20170731 16:40:25.629"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.829" starttime="20170731 16:40:25.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:25.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:25.829" starttime="20170731 16:40:25.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.830" starttime="20170731 16:40:25.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:25.904" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:25.904" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.904" starttime="20170731 16:40:25.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:25.905" starttime="20170731 16:40:25.905"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:25.905" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:25.905" starttime="20170731 16:40:25.905"></status>
</kw>
<msg timestamp="20170731 16:40:25.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.906" starttime="20170731 16:40:25.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:25.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:25.906" starttime="20170731 16:40:25.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:25.907" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:25.907" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:25.907" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:25.907" starttime="20170731 16:40:25.907"></status>
</kw>
<msg timestamp="20170731 16:40:25.907" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:25.907" starttime="20170731 16:40:25.627"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:25.908" starttime="20170731 16:40:25.626"></status>
</kw>
<msg timestamp="20170731 16:40:25.908" level="FAIL">
#(UTC) 2017/07/31 16:40:25.908034 -   11.170921 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:25.909" starttime="20170731 16:40:24.738"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:35.914" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:35.915" starttime="20170731 16:40:35.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:35.915" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:35.915" starttime="20170731 16:40:35.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:35.916" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:35.916" starttime="20170731 16:40:35.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:35.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:35.917" starttime="20170731 16:40:35.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:36.093" starttime="20170731 16:40:35.917"></status>
</kw>
<msg timestamp="20170731 16:40:36.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:36.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.093" starttime="20170731 16:40:35.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.094" starttime="20170731 16:40:36.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.094" starttime="20170731 16:40:36.094"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.094" starttime="20170731 16:40:35.913"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.095" starttime="20170731 16:40:35.913"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.095" starttime="20170731 16:40:35.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:36.095" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:36.095" starttime="20170731 16:40:36.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.096" starttime="20170731 16:40:36.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:36.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:36.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.208" starttime="20170731 16:40:36.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.209" starttime="20170731 16:40:36.209"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:36.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:36.210" starttime="20170731 16:40:36.209"></status>
</kw>
<msg timestamp="20170731 16:40:36.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.210" starttime="20170731 16:40:35.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.210" starttime="20170731 16:40:36.210"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:36.211" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:36.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:36.211" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:36.211" starttime="20170731 16:40:36.211"></status>
</kw>
<msg timestamp="20170731 16:40:36.212" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:36.212" starttime="20170731 16:40:35.911"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.212" starttime="20170731 16:40:35.911"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:36.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:36.216" starttime="20170731 16:40:36.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:36.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:36.217" starttime="20170731 16:40:36.216"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:36.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:36.217" starttime="20170731 16:40:36.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:36.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:36.218" starttime="20170731 16:40:36.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.453" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:36.453" starttime="20170731 16:40:36.219"></status>
</kw>
<msg timestamp="20170731 16:40:36.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:36.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.454" starttime="20170731 16:40:36.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.454" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.454" starttime="20170731 16:40:36.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.455" starttime="20170731 16:40:36.455"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.455" starttime="20170731 16:40:36.215"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.455" starttime="20170731 16:40:36.214"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.455" starttime="20170731 16:40:36.214"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:36.456" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:36.457" starttime="20170731 16:40:36.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.457" starttime="20170731 16:40:36.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:36.538" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:36.538" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.538" starttime="20170731 16:40:36.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.539" starttime="20170731 16:40:36.538"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:36.539" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:36.539" starttime="20170731 16:40:36.539"></status>
</kw>
<msg timestamp="20170731 16:40:36.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.539" starttime="20170731 16:40:36.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.540" starttime="20170731 16:40:36.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:36.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:36.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:36.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:36.541" starttime="20170731 16:40:36.540"></status>
</kw>
<msg timestamp="20170731 16:40:36.541" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:36.541" starttime="20170731 16:40:36.213"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.541" starttime="20170731 16:40:36.212"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:36.545" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:36.546" starttime="20170731 16:40:36.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:36.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:36.546" starttime="20170731 16:40:36.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:36.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:36.547" starttime="20170731 16:40:36.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:36.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:36.547" starttime="20170731 16:40:36.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:36.734" starttime="20170731 16:40:36.548"></status>
</kw>
<msg timestamp="20170731 16:40:36.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:36.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.734" starttime="20170731 16:40:36.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.735" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.735" starttime="20170731 16:40:36.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.736" starttime="20170731 16:40:36.735"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.736" starttime="20170731 16:40:36.544"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.736" starttime="20170731 16:40:36.544"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.736" starttime="20170731 16:40:36.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:36.737" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:36.737" starttime="20170731 16:40:36.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.738" starttime="20170731 16:40:36.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:36.806" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:36.806" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.806" starttime="20170731 16:40:36.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:36.807" starttime="20170731 16:40:36.806"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:36.807" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:36.807" starttime="20170731 16:40:36.807"></status>
</kw>
<msg timestamp="20170731 16:40:36.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.807" starttime="20170731 16:40:36.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:36.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:36.808" starttime="20170731 16:40:36.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:36.809" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:36.809" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:36.809" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:36.809" starttime="20170731 16:40:36.808"></status>
</kw>
<msg timestamp="20170731 16:40:36.809" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:36.809" starttime="20170731 16:40:36.542"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:36.809" starttime="20170731 16:40:36.542"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:36.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:36.813" starttime="20170731 16:40:36.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:36.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:36.814" starttime="20170731 16:40:36.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:36.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:36.815" starttime="20170731 16:40:36.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:36.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:36.815" starttime="20170731 16:40:36.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:37.012" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:37.013" starttime="20170731 16:40:36.816"></status>
</kw>
<msg timestamp="20170731 16:40:37.013" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:37.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.013" starttime="20170731 16:40:36.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:37.013" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.014" starttime="20170731 16:40:37.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:37.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.014" starttime="20170731 16:40:37.014"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:37.014" starttime="20170731 16:40:36.812"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:37.014" starttime="20170731 16:40:36.812"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:37.015" starttime="20170731 16:40:36.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:37.015" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:37.015" starttime="20170731 16:40:37.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:37.016" starttime="20170731 16:40:37.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:37.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:37.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.080" starttime="20170731 16:40:37.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:37.081" starttime="20170731 16:40:37.081"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:37.082" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:37.082" starttime="20170731 16:40:37.081"></status>
</kw>
<msg timestamp="20170731 16:40:37.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.082" starttime="20170731 16:40:36.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:37.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:37.083" starttime="20170731 16:40:37.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:37.083" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:37.083" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:37.083" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:37.083" starttime="20170731 16:40:37.083"></status>
</kw>
<msg timestamp="20170731 16:40:37.084" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:37.084" starttime="20170731 16:40:36.810"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:37.084" starttime="20170731 16:40:36.809"></status>
</kw>
<msg timestamp="20170731 16:40:37.085" level="FAIL">
#(UTC) 2017/07/31 16:40:37.084582 -   11.176548 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:37.085" starttime="20170731 16:40:35.909"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:47.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:47.092" starttime="20170731 16:40:47.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:47.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:47.092" starttime="20170731 16:40:47.092"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:47.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:47.093" starttime="20170731 16:40:47.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:47.094" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:47.094" starttime="20170731 16:40:47.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:47.273" starttime="20170731 16:40:47.094"></status>
</kw>
<msg timestamp="20170731 16:40:47.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:47.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.273" starttime="20170731 16:40:47.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.274" starttime="20170731 16:40:47.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.274" starttime="20170731 16:40:47.274"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.275" starttime="20170731 16:40:47.090"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.275" starttime="20170731 16:40:47.090"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.275" starttime="20170731 16:40:47.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:47.275" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:47.275" starttime="20170731 16:40:47.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.276" starttime="20170731 16:40:47.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:47.342" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:47.342" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.342" starttime="20170731 16:40:47.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.343" starttime="20170731 16:40:47.343"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:47.343" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:47.344" starttime="20170731 16:40:47.343"></status>
</kw>
<msg timestamp="20170731 16:40:47.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.344" starttime="20170731 16:40:47.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.345" starttime="20170731 16:40:47.344"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:47.345" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:47.345" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:47.345" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:47.345" starttime="20170731 16:40:47.345"></status>
</kw>
<msg timestamp="20170731 16:40:47.346" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:47.346" starttime="20170731 16:40:47.088"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.346" starttime="20170731 16:40:47.088"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:47.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:47.350" starttime="20170731 16:40:47.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:47.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:47.351" starttime="20170731 16:40:47.351"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:47.352" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:47.352" starttime="20170731 16:40:47.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:47.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:47.352" starttime="20170731 16:40:47.352"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:47.546" starttime="20170731 16:40:47.353"></status>
</kw>
<msg timestamp="20170731 16:40:47.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:47.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.546" starttime="20170731 16:40:47.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.547" starttime="20170731 16:40:47.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.547" starttime="20170731 16:40:47.547"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.547" starttime="20170731 16:40:47.349"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.548" starttime="20170731 16:40:47.349"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.548" starttime="20170731 16:40:47.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:47.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:47.548" starttime="20170731 16:40:47.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.549" starttime="20170731 16:40:47.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:47.612" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:47.613" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.613" starttime="20170731 16:40:47.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.613" starttime="20170731 16:40:47.613"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:47.614" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:47.614" starttime="20170731 16:40:47.614"></status>
</kw>
<msg timestamp="20170731 16:40:47.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.614" starttime="20170731 16:40:47.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.615" starttime="20170731 16:40:47.614"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:47.615" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:47.615" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:47.615" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:47.615" starttime="20170731 16:40:47.615"></status>
</kw>
<msg timestamp="20170731 16:40:47.616" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:47.616" starttime="20170731 16:40:47.347"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.616" starttime="20170731 16:40:47.346"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:47.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:47.620" starttime="20170731 16:40:47.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:47.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:47.621" starttime="20170731 16:40:47.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:47.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:47.622" starttime="20170731 16:40:47.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:47.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:47.622" starttime="20170731 16:40:47.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.824" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:47.824" starttime="20170731 16:40:47.623"></status>
</kw>
<msg timestamp="20170731 16:40:47.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:47.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.825" starttime="20170731 16:40:47.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.825" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.825" starttime="20170731 16:40:47.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.826" starttime="20170731 16:40:47.826"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.826" starttime="20170731 16:40:47.619"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.826" starttime="20170731 16:40:47.619"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.826" starttime="20170731 16:40:47.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:47.827" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:47.827" starttime="20170731 16:40:47.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.828" starttime="20170731 16:40:47.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:47.894" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:47.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.894" starttime="20170731 16:40:47.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:47.895" starttime="20170731 16:40:47.894"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:47.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:47.895" starttime="20170731 16:40:47.895"></status>
</kw>
<msg timestamp="20170731 16:40:47.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.896" starttime="20170731 16:40:47.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:47.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:47.896" starttime="20170731 16:40:47.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:47.897" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:47.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:47.897" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:47.897" starttime="20170731 16:40:47.897"></status>
</kw>
<msg timestamp="20170731 16:40:47.897" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:47.897" starttime="20170731 16:40:47.617"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:47.898" starttime="20170731 16:40:47.616"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:47.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:47.902" starttime="20170731 16:40:47.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:47.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:47.902" starttime="20170731 16:40:47.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:47.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:47.903" starttime="20170731 16:40:47.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:47.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:47.904" starttime="20170731 16:40:47.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:48.080" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:48.080" starttime="20170731 16:40:47.904"></status>
</kw>
<msg timestamp="20170731 16:40:48.080" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:48.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.080" starttime="20170731 16:40:47.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:48.081" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.081" starttime="20170731 16:40:48.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:48.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.082" starttime="20170731 16:40:48.082"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:48.082" starttime="20170731 16:40:47.900"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:48.082" starttime="20170731 16:40:47.900"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:48.082" starttime="20170731 16:40:47.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:48.083" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:48.083" starttime="20170731 16:40:48.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:48.084" starttime="20170731 16:40:48.083"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:48.163" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:48.163" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.163" starttime="20170731 16:40:48.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:48.164" starttime="20170731 16:40:48.163"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:48.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:48.164" starttime="20170731 16:40:48.164"></status>
</kw>
<msg timestamp="20170731 16:40:48.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.165" starttime="20170731 16:40:47.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:48.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:48.165" starttime="20170731 16:40:48.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:48.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:48.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:48.166" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:48.166" starttime="20170731 16:40:48.166"></status>
</kw>
<msg timestamp="20170731 16:40:48.166" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:48.166" starttime="20170731 16:40:47.898"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:48.167" starttime="20170731 16:40:47.898"></status>
</kw>
<msg timestamp="20170731 16:40:48.167" level="FAIL">
#(UTC) 2017/07/31 16:40:48.166973 -   11.082391 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:48.168" starttime="20170731 16:40:47.086"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:58.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:58.174" starttime="20170731 16:40:58.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:58.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:58.174" starttime="20170731 16:40:58.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:58.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:58.175" starttime="20170731 16:40:58.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:58.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:58.176" starttime="20170731 16:40:58.175"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:58.368" starttime="20170731 16:40:58.177"></status>
</kw>
<msg timestamp="20170731 16:40:58.368" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:58.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.368" starttime="20170731 16:40:58.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.369" starttime="20170731 16:40:58.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.369" starttime="20170731 16:40:58.369"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.370" starttime="20170731 16:40:58.173"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.370" starttime="20170731 16:40:58.172"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.370" starttime="20170731 16:40:58.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:58.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:40:58.371" starttime="20170731 16:40:58.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:58.371" starttime="20170731 16:40:58.371"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:58.453" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:58.453" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.453" starttime="20170731 16:40:58.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:58.454" starttime="20170731 16:40:58.453"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:58.454" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:58.454" starttime="20170731 16:40:58.454"></status>
</kw>
<msg timestamp="20170731 16:40:58.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.454" starttime="20170731 16:40:58.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.455" starttime="20170731 16:40:58.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:58.456" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:58.456" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:58.456" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:58.456" starttime="20170731 16:40:58.455"></status>
</kw>
<msg timestamp="20170731 16:40:58.456" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:40:58.456" starttime="20170731 16:40:58.170"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.456" starttime="20170731 16:40:58.170"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:58.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:58.461" starttime="20170731 16:40:58.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:58.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:58.461" starttime="20170731 16:40:58.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:58.462" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:58.462" starttime="20170731 16:40:58.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:58.463" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:58.463" starttime="20170731 16:40:58.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.639" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:58.639" starttime="20170731 16:40:58.463"></status>
</kw>
<msg timestamp="20170731 16:40:58.639" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:58.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.640" starttime="20170731 16:40:58.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.640" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.641" starttime="20170731 16:40:58.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.641" starttime="20170731 16:40:58.641"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.641" starttime="20170731 16:40:58.459"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.642" starttime="20170731 16:40:58.459"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.642" starttime="20170731 16:40:58.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:58.642" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:40:58.642" starttime="20170731 16:40:58.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:58.643" starttime="20170731 16:40:58.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:58.709" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:58.709" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.709" starttime="20170731 16:40:58.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:58.710" starttime="20170731 16:40:58.710"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:58.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:58.710" starttime="20170731 16:40:58.710"></status>
</kw>
<msg timestamp="20170731 16:40:58.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.711" starttime="20170731 16:40:58.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.711" starttime="20170731 16:40:58.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:58.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:58.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:58.712" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:40:58.712" starttime="20170731 16:40:58.712"></status>
</kw>
<msg timestamp="20170731 16:40:58.712" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:40:58.712" starttime="20170731 16:40:58.457"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.713" starttime="20170731 16:40:58.457"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:58.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:58.717" starttime="20170731 16:40:58.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:58.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:58.718" starttime="20170731 16:40:58.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:58.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:58.718" starttime="20170731 16:40:58.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:58.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:58.719" starttime="20170731 16:40:58.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:58.941" starttime="20170731 16:40:58.720"></status>
</kw>
<msg timestamp="20170731 16:40:58.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:58.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.942" starttime="20170731 16:40:58.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.942" starttime="20170731 16:40:58.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:58.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:58.943" starttime="20170731 16:40:58.943"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.943" starttime="20170731 16:40:58.716"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.943" starttime="20170731 16:40:58.715"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:58.943" starttime="20170731 16:40:58.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:58.944" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:40:58.944" starttime="20170731 16:40:58.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:58.945" starttime="20170731 16:40:58.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:59.012" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:40:59.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.012" starttime="20170731 16:40:58.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:59.013" starttime="20170731 16:40:59.012"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:59.013" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:59.013" starttime="20170731 16:40:59.013"></status>
</kw>
<msg timestamp="20170731 16:40:59.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.013" starttime="20170731 16:40:58.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:59.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.014" starttime="20170731 16:40:59.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:59.014" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:59.015" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:59.015" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:40:59.015" starttime="20170731 16:40:59.014"></status>
</kw>
<msg timestamp="20170731 16:40:59.015" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:40:59.015" starttime="20170731 16:40:58.713"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:59.015" starttime="20170731 16:40:58.713"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:40:59.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:40:59.019" starttime="20170731 16:40:59.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:40:59.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:40:59.020" starttime="20170731 16:40:59.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:40:59.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:40:59.021" starttime="20170731 16:40:59.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:40:59.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:40:59.021" starttime="20170731 16:40:59.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:40:59.225" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:40:59.225" starttime="20170731 16:40:59.022"></status>
</kw>
<msg timestamp="20170731 16:40:59.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:40:59.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.226" starttime="20170731 16:40:59.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:40:59.226" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.226" starttime="20170731 16:40:59.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:59.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.227" starttime="20170731 16:40:59.227"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:59.227" starttime="20170731 16:40:59.018"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:59.227" starttime="20170731 16:40:59.018"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:59.227" starttime="20170731 16:40:59.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:40:59.228" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:40:59.228" starttime="20170731 16:40:59.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:59.229" starttime="20170731 16:40:59.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:40:59.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:40:59.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.291" starttime="20170731 16:40:59.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:40:59.292" starttime="20170731 16:40:59.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:40:59.292" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:40:59.293" starttime="20170731 16:40:59.292"></status>
</kw>
<msg timestamp="20170731 16:40:59.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.293" starttime="20170731 16:40:59.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:40:59.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:40:59.294" starttime="20170731 16:40:59.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:40:59.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:40:59.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:40:59.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:40:59.294" starttime="20170731 16:40:59.294"></status>
</kw>
<msg timestamp="20170731 16:40:59.295" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:40:59.295" starttime="20170731 16:40:59.016"></status>
</kw>
<status status="PASS" endtime="20170731 16:40:59.295" starttime="20170731 16:40:59.015"></status>
</kw>
<msg timestamp="20170731 16:40:59.296" level="FAIL">
#(UTC) 2017/07/31 16:40:59.295115 -   11.128142 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:40:59.296" starttime="20170731 16:40:58.168"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:09.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:09.302" starttime="20170731 16:41:09.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:09.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:09.303" starttime="20170731 16:41:09.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:09.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:09.303" starttime="20170731 16:41:09.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:09.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:09.304" starttime="20170731 16:41:09.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:09.498" starttime="20170731 16:41:09.305"></status>
</kw>
<msg timestamp="20170731 16:41:09.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:09.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.498" starttime="20170731 16:41:09.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.499" starttime="20170731 16:41:09.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.499" starttime="20170731 16:41:09.499"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.500" starttime="20170731 16:41:09.301"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.500" starttime="20170731 16:41:09.300"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.500" starttime="20170731 16:41:09.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:09.501" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:41:09.501" starttime="20170731 16:41:09.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:09.502" starttime="20170731 16:41:09.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:09.566" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:09.566" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.566" starttime="20170731 16:41:09.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:09.567" starttime="20170731 16:41:09.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:09.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:09.568" starttime="20170731 16:41:09.567"></status>
</kw>
<msg timestamp="20170731 16:41:09.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.568" starttime="20170731 16:41:09.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.569" starttime="20170731 16:41:09.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:09.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:09.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:09.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:09.569" starttime="20170731 16:41:09.569"></status>
</kw>
<msg timestamp="20170731 16:41:09.570" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:41:09.570" starttime="20170731 16:41:09.298"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.570" starttime="20170731 16:41:09.298"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:09.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:09.574" starttime="20170731 16:41:09.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:09.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:09.575" starttime="20170731 16:41:09.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:09.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:09.576" starttime="20170731 16:41:09.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:09.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:09.576" starttime="20170731 16:41:09.576"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:09.770" starttime="20170731 16:41:09.577"></status>
</kw>
<msg timestamp="20170731 16:41:09.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:09.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.770" starttime="20170731 16:41:09.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.771" starttime="20170731 16:41:09.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.771" starttime="20170731 16:41:09.771"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.772" starttime="20170731 16:41:09.573"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.772" starttime="20170731 16:41:09.573"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.772" starttime="20170731 16:41:09.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:09.772" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:41:09.772" starttime="20170731 16:41:09.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:09.773" starttime="20170731 16:41:09.773"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:09.837" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:09.837" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.837" starttime="20170731 16:41:09.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:09.837" starttime="20170731 16:41:09.837"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:09.838" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:09.838" starttime="20170731 16:41:09.838"></status>
</kw>
<msg timestamp="20170731 16:41:09.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.838" starttime="20170731 16:41:09.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:09.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:09.839" starttime="20170731 16:41:09.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:09.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:09.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:09.840" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:41:09.840" starttime="20170731 16:41:09.839"></status>
</kw>
<msg timestamp="20170731 16:41:09.840" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:41:09.840" starttime="20170731 16:41:09.571"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:09.840" starttime="20170731 16:41:09.570"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:09.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:09.845" starttime="20170731 16:41:09.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:09.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:09.846" starttime="20170731 16:41:09.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:09.847" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:09.847" starttime="20170731 16:41:09.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:09.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:09.848" starttime="20170731 16:41:09.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:10.051" starttime="20170731 16:41:09.849"></status>
</kw>
<msg timestamp="20170731 16:41:10.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:10.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.052" starttime="20170731 16:41:09.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.052" starttime="20170731 16:41:10.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.053" starttime="20170731 16:41:10.053"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.053" starttime="20170731 16:41:09.843"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.053" starttime="20170731 16:41:09.843"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.053" starttime="20170731 16:41:09.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:10.054" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:41:10.054" starttime="20170731 16:41:10.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:10.055" starttime="20170731 16:41:10.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:10.120" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:41:10.120" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.120" starttime="20170731 16:41:10.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:10.121" starttime="20170731 16:41:10.121"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:10.122" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:10.122" starttime="20170731 16:41:10.122"></status>
</kw>
<msg timestamp="20170731 16:41:10.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.122" starttime="20170731 16:41:09.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.123" starttime="20170731 16:41:10.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:10.123" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:10.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:10.124" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:41:10.124" starttime="20170731 16:41:10.123"></status>
</kw>
<msg timestamp="20170731 16:41:10.124" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:10.124" starttime="20170731 16:41:09.841"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.124" starttime="20170731 16:41:09.841"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:10.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:10.128" starttime="20170731 16:41:10.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:10.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:10.129" starttime="20170731 16:41:10.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:10.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:10.130" starttime="20170731 16:41:10.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:10.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:10.130" starttime="20170731 16:41:10.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.322" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:10.322" starttime="20170731 16:41:10.131"></status>
</kw>
<msg timestamp="20170731 16:41:10.323" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:10.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.323" starttime="20170731 16:41:10.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.323" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.323" starttime="20170731 16:41:10.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.324" starttime="20170731 16:41:10.324"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.324" starttime="20170731 16:41:10.127"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.325" starttime="20170731 16:41:10.127"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.325" starttime="20170731 16:41:10.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:10.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:10.325" starttime="20170731 16:41:10.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:10.326" starttime="20170731 16:41:10.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:10.402" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:10.402" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.402" starttime="20170731 16:41:10.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:10.403" starttime="20170731 16:41:10.403"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:10.404" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:10.404" starttime="20170731 16:41:10.404"></status>
</kw>
<msg timestamp="20170731 16:41:10.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.404" starttime="20170731 16:41:10.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:10.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:10.405" starttime="20170731 16:41:10.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:10.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:10.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:10.406" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:10.406" starttime="20170731 16:41:10.406"></status>
</kw>
<msg timestamp="20170731 16:41:10.407" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:10.407" starttime="20170731 16:41:10.125"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:10.407" starttime="20170731 16:41:10.124"></status>
</kw>
<msg timestamp="20170731 16:41:10.408" level="FAIL">
#(UTC) 2017/07/31 16:41:10.407374 -   11.112259 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:41:10.408" starttime="20170731 16:41:09.296"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:20.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:20.414" starttime="20170731 16:41:20.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:20.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:20.415" starttime="20170731 16:41:20.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:20.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:20.415" starttime="20170731 16:41:20.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:20.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:20.416" starttime="20170731 16:41:20.416"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.615" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:20.615" starttime="20170731 16:41:20.417"></status>
</kw>
<msg timestamp="20170731 16:41:20.615" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:20.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.616" starttime="20170731 16:41:20.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.616" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.616" starttime="20170731 16:41:20.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.617" starttime="20170731 16:41:20.617"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.617" starttime="20170731 16:41:20.413"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.617" starttime="20170731 16:41:20.412"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.617" starttime="20170731 16:41:20.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:20.618" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:41:20.618" starttime="20170731 16:41:20.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:20.619" starttime="20170731 16:41:20.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:20.682" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:20.682" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.682" starttime="20170731 16:41:20.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:20.683" starttime="20170731 16:41:20.682"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:20.683" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:20.683" starttime="20170731 16:41:20.683"></status>
</kw>
<msg timestamp="20170731 16:41:20.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.684" starttime="20170731 16:41:20.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.684" starttime="20170731 16:41:20.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:20.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:20.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:20.685" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:20.685" starttime="20170731 16:41:20.684"></status>
</kw>
<msg timestamp="20170731 16:41:20.685" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:41:20.685" starttime="20170731 16:41:20.411"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.686" starttime="20170731 16:41:20.410"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:20.689" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:20.690" starttime="20170731 16:41:20.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:20.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:20.690" starttime="20170731 16:41:20.690"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:20.691" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:20.691" starttime="20170731 16:41:20.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:20.692" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:20.692" starttime="20170731 16:41:20.691"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:20.878" starttime="20170731 16:41:20.693"></status>
</kw>
<msg timestamp="20170731 16:41:20.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:20.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.879" starttime="20170731 16:41:20.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.879" starttime="20170731 16:41:20.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.880" starttime="20170731 16:41:20.880"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.880" starttime="20170731 16:41:20.689"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.880" starttime="20170731 16:41:20.688"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.880" starttime="20170731 16:41:20.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:20.881" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:41:20.881" starttime="20170731 16:41:20.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:20.882" starttime="20170731 16:41:20.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:20.945" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:20.945" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.945" starttime="20170731 16:41:20.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:20.946" starttime="20170731 16:41:20.945"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:20.946" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:20.946" starttime="20170731 16:41:20.946"></status>
</kw>
<msg timestamp="20170731 16:41:20.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.946" starttime="20170731 16:41:20.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:20.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:20.947" starttime="20170731 16:41:20.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:20.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:20.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:20.948" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:41:20.948" starttime="20170731 16:41:20.947"></status>
</kw>
<msg timestamp="20170731 16:41:20.948" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:41:20.948" starttime="20170731 16:41:20.686"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:20.948" starttime="20170731 16:41:20.686"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:20.952" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:20.953" starttime="20170731 16:41:20.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:20.953" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:20.953" starttime="20170731 16:41:20.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:20.954" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:20.954" starttime="20170731 16:41:20.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:20.955" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:20.955" starttime="20170731 16:41:20.954"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:21.141" starttime="20170731 16:41:20.955"></status>
</kw>
<msg timestamp="20170731 16:41:21.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:21.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.141" starttime="20170731 16:41:20.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.142" starttime="20170731 16:41:21.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.143" starttime="20170731 16:41:21.142"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.143" starttime="20170731 16:41:20.951"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.143" starttime="20170731 16:41:20.951"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.143" starttime="20170731 16:41:20.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:21.144" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:41:21.144" starttime="20170731 16:41:21.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:21.144" starttime="20170731 16:41:21.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:21.210" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:41:21.210" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.210" starttime="20170731 16:41:21.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:21.211" starttime="20170731 16:41:21.211"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:21.212" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:21.212" starttime="20170731 16:41:21.211"></status>
</kw>
<msg timestamp="20170731 16:41:21.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.212" starttime="20170731 16:41:20.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.213" starttime="20170731 16:41:21.212"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:21.213" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:21.213" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:21.213" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:41:21.213" starttime="20170731 16:41:21.213"></status>
</kw>
<msg timestamp="20170731 16:41:21.214" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:21.214" starttime="20170731 16:41:20.949"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.214" starttime="20170731 16:41:20.949"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:21.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:21.218" starttime="20170731 16:41:21.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:21.219" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:21.219" starttime="20170731 16:41:21.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:21.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:21.219" starttime="20170731 16:41:21.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:21.220" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:21.220" starttime="20170731 16:41:21.220"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:21.406" starttime="20170731 16:41:21.221"></status>
</kw>
<msg timestamp="20170731 16:41:21.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:21.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.406" starttime="20170731 16:41:21.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.407" starttime="20170731 16:41:21.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.408" starttime="20170731 16:41:21.407"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.408" starttime="20170731 16:41:21.217"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.408" starttime="20170731 16:41:21.216"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.408" starttime="20170731 16:41:21.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:21.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:21.409" starttime="20170731 16:41:21.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:21.410" starttime="20170731 16:41:21.410"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:21.477" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:21.477" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.477" starttime="20170731 16:41:21.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:21.478" starttime="20170731 16:41:21.477"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:21.478" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:21.478" starttime="20170731 16:41:21.478"></status>
</kw>
<msg timestamp="20170731 16:41:21.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.479" starttime="20170731 16:41:21.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:21.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:21.479" starttime="20170731 16:41:21.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:21.480" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:21.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:21.480" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:21.480" starttime="20170731 16:41:21.480"></status>
</kw>
<msg timestamp="20170731 16:41:21.480" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:21.480" starttime="20170731 16:41:21.215"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:21.481" starttime="20170731 16:41:21.214"></status>
</kw>
<msg timestamp="20170731 16:41:21.481" level="FAIL">
#(UTC) 2017/07/31 16:41:21.480843 -   11.073469 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:41:21.481" starttime="20170731 16:41:20.409"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:31.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:31.488" starttime="20170731 16:41:31.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:31.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:31.488" starttime="20170731 16:41:31.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:31.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:31.489" starttime="20170731 16:41:31.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:31.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:31.490" starttime="20170731 16:41:31.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.684" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:31.684" starttime="20170731 16:41:31.490"></status>
</kw>
<msg timestamp="20170731 16:41:31.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:31.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.684" starttime="20170731 16:41:31.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.685" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.685" starttime="20170731 16:41:31.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.686" starttime="20170731 16:41:31.685"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.686" starttime="20170731 16:41:31.486"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.686" starttime="20170731 16:41:31.486"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.686" starttime="20170731 16:41:31.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:31.687" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:41:31.687" starttime="20170731 16:41:31.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:31.687" starttime="20170731 16:41:31.687"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:31.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:31.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.753" starttime="20170731 16:41:31.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:31.753" starttime="20170731 16:41:31.753"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:31.754" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:31.754" starttime="20170731 16:41:31.754"></status>
</kw>
<msg timestamp="20170731 16:41:31.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.754" starttime="20170731 16:41:31.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.755" starttime="20170731 16:41:31.754"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:31.756" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:31.756" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:31.756" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:31.756" starttime="20170731 16:41:31.755"></status>
</kw>
<msg timestamp="20170731 16:41:31.756" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:41:31.756" starttime="20170731 16:41:31.484"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.756" starttime="20170731 16:41:31.484"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:31.760" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:31.761" starttime="20170731 16:41:31.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:31.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:31.761" starttime="20170731 16:41:31.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:31.762" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:31.762" starttime="20170731 16:41:31.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:31.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:31.763" starttime="20170731 16:41:31.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:31.948" starttime="20170731 16:41:31.763"></status>
</kw>
<msg timestamp="20170731 16:41:31.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:31.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.948" starttime="20170731 16:41:31.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.949" starttime="20170731 16:41:31.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:31.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:31.950" starttime="20170731 16:41:31.949"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.950" starttime="20170731 16:41:31.759"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.950" starttime="20170731 16:41:31.759"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:31.950" starttime="20170731 16:41:31.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:31.951" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:41:31.951" starttime="20170731 16:41:31.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:31.951" starttime="20170731 16:41:31.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:32.015" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:32.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.015" starttime="20170731 16:41:31.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:32.016" starttime="20170731 16:41:32.016"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:32.016" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:32.017" starttime="20170731 16:41:32.016"></status>
</kw>
<msg timestamp="20170731 16:41:32.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.017" starttime="20170731 16:41:31.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.018" starttime="20170731 16:41:32.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:32.018" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:32.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:32.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:41:32.018" starttime="20170731 16:41:32.018"></status>
</kw>
<msg timestamp="20170731 16:41:32.019" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:41:32.019" starttime="20170731 16:41:31.757"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.019" starttime="20170731 16:41:31.757"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:32.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:32.023" starttime="20170731 16:41:32.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:32.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:32.024" starttime="20170731 16:41:32.023"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:32.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:32.024" starttime="20170731 16:41:32.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:32.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:32.025" starttime="20170731 16:41:32.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:32.260" starttime="20170731 16:41:32.026"></status>
</kw>
<msg timestamp="20170731 16:41:32.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:32.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.260" starttime="20170731 16:41:32.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.261" starttime="20170731 16:41:32.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.262" starttime="20170731 16:41:32.261"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.262" starttime="20170731 16:41:32.022"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.262" starttime="20170731 16:41:32.021"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.262" starttime="20170731 16:41:32.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:32.263" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:41:32.263" starttime="20170731 16:41:32.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:32.264" starttime="20170731 16:41:32.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:32.335" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:41:32.335" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.335" starttime="20170731 16:41:32.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:32.336" starttime="20170731 16:41:32.336"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:32.336" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:32.336" starttime="20170731 16:41:32.336"></status>
</kw>
<msg timestamp="20170731 16:41:32.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.337" starttime="20170731 16:41:32.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.338" starttime="20170731 16:41:32.337"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:32.339" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:32.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:32.339" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:41:32.339" starttime="20170731 16:41:32.338"></status>
</kw>
<msg timestamp="20170731 16:41:32.339" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:32.339" starttime="20170731 16:41:32.020"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.340" starttime="20170731 16:41:32.019"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:32.345" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:32.346" starttime="20170731 16:41:32.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:32.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:32.347" starttime="20170731 16:41:32.346"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:32.347" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:32.348" starttime="20170731 16:41:32.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:32.348" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:32.348" starttime="20170731 16:41:32.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:32.566" starttime="20170731 16:41:32.350"></status>
</kw>
<msg timestamp="20170731 16:41:32.566" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:32.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.566" starttime="20170731 16:41:32.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.567" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.567" starttime="20170731 16:41:32.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.568" starttime="20170731 16:41:32.567"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.568" starttime="20170731 16:41:32.344"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.569" starttime="20170731 16:41:32.343"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.569" starttime="20170731 16:41:32.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:32.569" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:32.569" starttime="20170731 16:41:32.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:32.570" starttime="20170731 16:41:32.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:32.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:32.666" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.666" starttime="20170731 16:41:32.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:32.667" starttime="20170731 16:41:32.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:32.668" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:32.668" starttime="20170731 16:41:32.667"></status>
</kw>
<msg timestamp="20170731 16:41:32.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.668" starttime="20170731 16:41:32.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:32.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:32.669" starttime="20170731 16:41:32.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:32.669" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:32.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:32.670" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:32.670" starttime="20170731 16:41:32.669"></status>
</kw>
<msg timestamp="20170731 16:41:32.670" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:32.670" starttime="20170731 16:41:32.340"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:32.670" starttime="20170731 16:41:32.340"></status>
</kw>
<msg timestamp="20170731 16:41:32.671" level="FAIL">
#(UTC) 2017/07/31 16:41:32.670742 -   11.189899 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:41:32.671" starttime="20170731 16:41:31.482"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:42.677" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:42.678" starttime="20170731 16:41:42.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:42.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:42.678" starttime="20170731 16:41:42.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:42.679" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:42.679" starttime="20170731 16:41:42.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:42.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:42.680" starttime="20170731 16:41:42.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:42.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:42.864" starttime="20170731 16:41:42.681"></status>
</kw>
<msg timestamp="20170731 16:41:42.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:42.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.865" starttime="20170731 16:41:42.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:42.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.866" starttime="20170731 16:41:42.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:42.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.866" starttime="20170731 16:41:42.866"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:42.866" starttime="20170731 16:41:42.676"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:42.867" starttime="20170731 16:41:42.676"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:42.867" starttime="20170731 16:41:42.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:42.867" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:41:42.867" starttime="20170731 16:41:42.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:42.868" starttime="20170731 16:41:42.868"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:42.950" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:42.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.950" starttime="20170731 16:41:42.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:42.951" starttime="20170731 16:41:42.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:42.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:42.951" starttime="20170731 16:41:42.951"></status>
</kw>
<msg timestamp="20170731 16:41:42.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.952" starttime="20170731 16:41:42.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:42.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:42.952" starttime="20170731 16:41:42.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:42.953" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:42.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:42.953" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:42.953" starttime="20170731 16:41:42.953"></status>
</kw>
<msg timestamp="20170731 16:41:42.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:41:42.953" starttime="20170731 16:41:42.674"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:42.954" starttime="20170731 16:41:42.673"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:42.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:42.958" starttime="20170731 16:41:42.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:42.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:42.959" starttime="20170731 16:41:42.958"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:42.959" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:42.959" starttime="20170731 16:41:42.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:42.960" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:42.960" starttime="20170731 16:41:42.960"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:43.155" starttime="20170731 16:41:42.961"></status>
</kw>
<msg timestamp="20170731 16:41:43.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:43.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.155" starttime="20170731 16:41:42.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.156" starttime="20170731 16:41:43.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.156" starttime="20170731 16:41:43.156"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.156" starttime="20170731 16:41:42.957"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.156" starttime="20170731 16:41:42.956"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.157" starttime="20170731 16:41:42.956"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:43.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:41:43.157" starttime="20170731 16:41:43.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.158" starttime="20170731 16:41:43.158"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:43.222" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:43.222" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.222" starttime="20170731 16:41:43.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.223" starttime="20170731 16:41:43.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:43.223" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:43.223" starttime="20170731 16:41:43.223"></status>
</kw>
<msg timestamp="20170731 16:41:43.224" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.224" starttime="20170731 16:41:42.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.224" starttime="20170731 16:41:43.224"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:43.225" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:43.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:43.225" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:41:43.225" starttime="20170731 16:41:43.225"></status>
</kw>
<msg timestamp="20170731 16:41:43.225" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:41:43.225" starttime="20170731 16:41:42.954"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.226" starttime="20170731 16:41:42.954"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:43.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:43.230" starttime="20170731 16:41:43.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:43.231" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:43.231" starttime="20170731 16:41:43.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:43.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:43.231" starttime="20170731 16:41:43.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:43.232" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:43.232" starttime="20170731 16:41:43.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:43.409" starttime="20170731 16:41:43.233"></status>
</kw>
<msg timestamp="20170731 16:41:43.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:43.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.409" starttime="20170731 16:41:43.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.410" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.410" starttime="20170731 16:41:43.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.411" starttime="20170731 16:41:43.410"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.411" starttime="20170731 16:41:43.229"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.411" starttime="20170731 16:41:43.228"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.411" starttime="20170731 16:41:43.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:43.412" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:41:43.412" starttime="20170731 16:41:43.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.412" starttime="20170731 16:41:43.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:43.479" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:41:43.479" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.479" starttime="20170731 16:41:43.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.479" starttime="20170731 16:41:43.479"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:43.480" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:43.480" starttime="20170731 16:41:43.480"></status>
</kw>
<msg timestamp="20170731 16:41:43.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.480" starttime="20170731 16:41:43.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.481" starttime="20170731 16:41:43.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:43.481" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:43.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:43.482" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:41:43.482" starttime="20170731 16:41:43.481"></status>
</kw>
<msg timestamp="20170731 16:41:43.482" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:43.482" starttime="20170731 16:41:43.226"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.482" starttime="20170731 16:41:43.226"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:43.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:43.487" starttime="20170731 16:41:43.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:43.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:43.487" starttime="20170731 16:41:43.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:43.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:43.488" starttime="20170731 16:41:43.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:43.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:43.489" starttime="20170731 16:41:43.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:43.702" starttime="20170731 16:41:43.489"></status>
</kw>
<msg timestamp="20170731 16:41:43.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:43.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.703" starttime="20170731 16:41:43.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.703" starttime="20170731 16:41:43.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.704" starttime="20170731 16:41:43.704"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.704" starttime="20170731 16:41:43.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.704" starttime="20170731 16:41:43.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.704" starttime="20170731 16:41:43.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:43.705" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:43.705" starttime="20170731 16:41:43.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.706" starttime="20170731 16:41:43.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:43.772" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:43.772" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.772" starttime="20170731 16:41:43.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:43.772" starttime="20170731 16:41:43.772"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:43.773" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:43.773" starttime="20170731 16:41:43.773"></status>
</kw>
<msg timestamp="20170731 16:41:43.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.773" starttime="20170731 16:41:43.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:43.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:43.774" starttime="20170731 16:41:43.773"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:43.774" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:43.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:43.775" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:43.775" starttime="20170731 16:41:43.774"></status>
</kw>
<msg timestamp="20170731 16:41:43.775" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:43.775" starttime="20170731 16:41:43.483"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:43.776" starttime="20170731 16:41:43.482"></status>
</kw>
<msg timestamp="20170731 16:41:43.776" level="FAIL">
#(UTC) 2017/07/31 16:41:43.776067 -   11.105325 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:41:43.777" starttime="20170731 16:41:42.672"></status>
</kw>
<msg timestamp="20170731 16:41:43.777" level="FAIL">Keyword 'Check State' failed after retrying for 3 minutes. The last error was: 
#(UTC) 2017/07/31 16:41:43.776067 -   11.105325 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170731 16:41:43.777" starttime="20170731 16:38:32.266"></status>
</kw>
<msg timestamp="20170731 16:41:43.784" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170731 16:41:43.789" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170731 16:41:43.800" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.21.61.170731.164143.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170731 16:41:43.820" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170731 16:41:43.820" starttime="20170731 16:41:43.820"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:41:43.825" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:41:46.830" level="INFO">${RC} = 0</msg>
<msg timestamp="20170731 16:41:46.830" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.593 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170731 16:41:46.831" starttime="20170731 16:41:43.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.834" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.593 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.592 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.609 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.592/0.806/1.430/0.360 ms</msg>
<status status="PASS" endtime="20170731 16:41:46.834" starttime="20170731 16:41:46.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:46.835" starttime="20170731 16:41:46.834"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.835" starttime="20170731 16:41:43.819"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:41:46.852" level="INFO">${cur_time} = 2017-07-31 16:41:46:851321</msg>
<status status="PASS" endtime="20170731 16:41:46.852" starttime="20170731 16:41:46.851"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:41:46.852" level="INFO">${cur_time} = 20170731164146851321</msg>
<status status="PASS" endtime="20170731 16:41:46.852" starttime="20170731 16:41:46.852"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.853" starttime="20170731 16:41:46.850"></status>
</kw>
<msg timestamp="20170731 16:41:46.858" level="INFO">${FFDC_TIME} = 20170731164146851321</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 16:41:46.859" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170731 16:41:46.859" starttime="20170731 16:41:46.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 16:41:46.860" level="INFO">${suite_name} = 20170731164146851321_TestBiosUpdate</msg>
<status status="PASS" endtime="20170731 16:41:46.860" starttime="20170731 16:41:46.860"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 16:41:46.861" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170731 16:41:46.861" starttime="20170731 16:41:46.860"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 16:41:46.861" level="INFO">${test_name} = 20170731164146851321_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170731 16:41:46.861" starttime="20170731 16:41:46.861"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.862" starttime="20170731 16:41:46.859"></status>
</kw>
<msg timestamp="20170731 16:41:46.862" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/</msg>
<msg timestamp="20170731 16:41:46.862" level="INFO">${FFDC_PREFIX} = 9.3.21.61.170731.164143.</msg>
<msg timestamp="20170731 16:41:46.886" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170731 16:41:46.887" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.887" starttime="20170731 16:41:46.886"></status>
</kw>
<msg timestamp="20170731 16:41:46.892" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.906" starttime="20170731 16:41:46.905"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.906" starttime="20170731 16:41:46.905"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.907" starttime="20170731 16:41:46.907"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.907" starttime="20170731 16:41:46.906"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.909" starttime="20170731 16:41:46.908"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.909" starttime="20170731 16:41:46.907"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.910" starttime="20170731 16:41:46.909"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.910" starttime="20170731 16:41:46.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.911" starttime="20170731 16:41:46.911"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.911" starttime="20170731 16:41:46.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.912" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.913" starttime="20170731 16:41:46.912"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.913" starttime="20170731 16:41:46.911"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.914" starttime="20170731 16:41:46.914"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.914" starttime="20170731 16:41:46.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.916" starttime="20170731 16:41:46.915"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.916" starttime="20170731 16:41:46.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.917" starttime="20170731 16:41:46.916"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.917" starttime="20170731 16:41:46.916"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.919" starttime="20170731 16:41:46.918"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.919" starttime="20170731 16:41:46.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.920" starttime="20170731 16:41:46.919"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.920" starttime="20170731 16:41:46.919"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.921" starttime="20170731 16:41:46.921"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.921" starttime="20170731 16:41:46.920"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:46.922" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:46.923" starttime="20170731 16:41:46.922"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:46.923" starttime="20170731 16:41:46.921"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 16:41:46.943" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:46.944" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170731 16:41:47.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 16:41:47.031" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170731 16:41:47.031" level="INFO">${stderr} = </msg>
<msg timestamp="20170731 16:41:47.031" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170731 16:41:47.031" starttime="20170731 16:41:46.923"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.032" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170731 16:41:47.032" starttime="20170731 16:41:47.032"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.032" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170731 16:41:47.033" starttime="20170731 16:41:47.032"></status>
</kw>
<msg timestamp="20170731 16:41:47.033" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170731 16:41:47.033" starttime="20170731 16:41:46.923"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.034" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.034" starttime="20170731 16:41:47.034"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.034" starttime="20170731 16:41:47.033"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.034" starttime="20170731 16:41:46.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.036" starttime="20170731 16:41:47.035"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.036" starttime="20170731 16:41:47.034"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:47.036" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170731 16:41:47.036" starttime="20170731 16:41:47.036"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.038" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.038" starttime="20170731 16:41:47.037"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.038" starttime="20170731 16:41:47.037"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.039" starttime="20170731 16:41:47.039"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.039" starttime="20170731 16:41:47.038"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.039" starttime="20170731 16:41:47.036"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.041" starttime="20170731 16:41:47.040"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.041" starttime="20170731 16:41:47.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.042" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.042" starttime="20170731 16:41:47.042"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.042" starttime="20170731 16:41:47.041"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.042" starttime="20170731 16:41:47.039"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.043" starttime="20170731 16:41:47.043"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.044" starttime="20170731 16:41:47.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.045" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.045" starttime="20170731 16:41:47.044"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.045" starttime="20170731 16:41:47.044"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.045" starttime="20170731 16:41:47.042"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.045" starttime="20170731 16:41:47.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.046" starttime="20170731 16:41:47.046"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.046" starttime="20170731 16:41:47.045"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.046" starttime="20170731 16:41:46.905"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:47.053" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170731 16:41:47.053" starttime="20170731 16:41:47.053"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170731 16:41:47.055" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170731 16:41:47.055" starttime="20170731 16:41:47.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:47.056" starttime="20170731 16:41:47.056"></status>
</kw>
<msg timestamp="20170731 16:41:47.056" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170731 16:41:47.056" starttime="20170731 16:41:47.055"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:47.058" starttime="20170731 16:41:47.058"></status>
</kw>
<msg timestamp="20170731 16:41:47.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:47.058" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:47.058" starttime="20170731 16:41:47.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:47.059" starttime="20170731 16:41:47.059"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:47.077" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170731 16:41:47.077" starttime="20170731 16:41:47.077"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:47.079" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170731 16:41:47.079" starttime="20170731 16:41:47.078"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.084" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170731 16:41:47.084" starttime="20170731 16:41:47.079"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.087" starttime="20170731 16:41:47.087"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.087" starttime="20170731 16:41:47.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.089" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.089" starttime="20170731 16:41:47.088"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.089" starttime="20170731 16:41:47.088"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.090" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.090" starttime="20170731 16:41:47.090"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.090" starttime="20170731 16:41:47.089"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:47.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:47.091" starttime="20170731 16:41:47.091"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.091" starttime="20170731 16:41:47.090"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.092" starttime="20170731 16:41:47.086"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:47.092" starttime="20170731 16:41:47.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:47.092" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:47.092" starttime="20170731 16:41:47.092"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:47.142" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:47.142" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170731 16:41:48.468" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:48.468" starttime="20170731 16:41:47.115"></status>
</kw>
<msg timestamp="20170731 16:41:48.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.469" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170731 16:41:48.469" starttime="20170731 16:41:47.093"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:48.469" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:48.469" starttime="20170731 16:41:48.469"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:48.470" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:48.470" starttime="20170731 16:41:48.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.477" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:48.476"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:48.476"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:48.470"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:47.085"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:47.084"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:47.084"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:47.078"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.477" starttime="20170731 16:41:47.078"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:48.479" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170731 16:41:48.479" starttime="20170731 16:41:48.478"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.479" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170731 16:41:48.479" starttime="20170731 16:41:48.479"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.482" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.482" starttime="20170731 16:41:48.482"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.483" starttime="20170731 16:41:48.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.484" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.484" starttime="20170731 16:41:48.483"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.484" starttime="20170731 16:41:48.483"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.485" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.485" starttime="20170731 16:41:48.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.485" starttime="20170731 16:41:48.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.486" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.486" starttime="20170731 16:41:48.486"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.486" starttime="20170731 16:41:48.485"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.487" starttime="20170731 16:41:48.481"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.487" starttime="20170731 16:41:48.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:48.487" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:48.487" starttime="20170731 16:41:48.487"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:48.539" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:48.540" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170731 16:41:48.587" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:48.587" starttime="20170731 16:41:48.513"></status>
</kw>
<msg timestamp="20170731 16:41:48.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.587" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-115"\nVERSION_ID="v1.99.8-115-g3c9e041"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170731 16:41:48.587" starttime="20170731 16:41:48.488"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:48.588" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-115"
VERSION_ID="v1.99.8-115-g3c9e041"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170731 16:41:48.588" starttime="20170731 16:41:48.588"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:48.589" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:48.589" starttime="20170731 16:41:48.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.596" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.595"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.595"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.589"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.480"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.480"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.479"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.478"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.596" starttime="20170731 16:41:48.478"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:48.597" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170731 16:41:48.598" starttime="20170731 16:41:48.597"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.598" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170731 16:41:48.598" starttime="20170731 16:41:48.598"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.602" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.602" starttime="20170731 16:41:48.601"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.602" starttime="20170731 16:41:48.601"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.603" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.603" starttime="20170731 16:41:48.603"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.603" starttime="20170731 16:41:48.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.604" starttime="20170731 16:41:48.604"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.605" starttime="20170731 16:41:48.603"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.606" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.606" starttime="20170731 16:41:48.605"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.606" starttime="20170731 16:41:48.605"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.606" starttime="20170731 16:41:48.600"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.606" starttime="20170731 16:41:48.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:48.607" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:48.607" starttime="20170731 16:41:48.606"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:48.656" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:48.656" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170731 16:41:48.713" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:48.713" starttime="20170731 16:41:48.630"></status>
</kw>
<msg timestamp="20170731 16:41:48.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.713" level="INFO">${ret_values} = (u' 16:41:52 up 9 min,  load average: 0.44, 1.26, 0.93', u'', 0)</msg>
<status status="PASS" endtime="20170731 16:41:48.713" starttime="20170731 16:41:48.607"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:48.714" level="INFO">${stdout} =  16:41:52 up 9 min,  load average: 0.44, 1.26, 0.93</msg>
<status status="PASS" endtime="20170731 16:41:48.714" starttime="20170731 16:41:48.713"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:48.714" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:48.714" starttime="20170731 16:41:48.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.721" starttime="20170731 16:41:48.721"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.721" starttime="20170731 16:41:48.720"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.721" starttime="20170731 16:41:48.715"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.721" starttime="20170731 16:41:48.599"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.721" starttime="20170731 16:41:48.599"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.725" starttime="20170731 16:41:48.724"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.725" starttime="20170731 16:41:48.724"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.726" starttime="20170731 16:41:48.726"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.726" starttime="20170731 16:41:48.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.727" starttime="20170731 16:41:48.727"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.727" starttime="20170731 16:41:48.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.729" starttime="20170731 16:41:48.728"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.729" starttime="20170731 16:41:48.727"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.729" starttime="20170731 16:41:48.723"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.729" starttime="20170731 16:41:48.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:48.730" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:48.730" starttime="20170731 16:41:48.729"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:48.778" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:48.779" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170731 16:41:48.846" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:48.846" starttime="20170731 16:41:48.751"></status>
</kw>
<msg timestamp="20170731 16:41:48.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.846" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170731 16:41:48.846" starttime="20170731 16:41:48.730"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:48.847" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170731 16:41:48.847" starttime="20170731 16:41:48.847"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:48.847" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:48.848" starttime="20170731 16:41:48.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.857" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.857" starttime="20170731 16:41:48.857"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.857" starttime="20170731 16:41:48.856"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.857" starttime="20170731 16:41:48.848"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.857" starttime="20170731 16:41:48.722"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.858" starttime="20170731 16:41:48.722"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.860" starttime="20170731 16:41:48.860"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.861" starttime="20170731 16:41:48.859"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.862" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.862" starttime="20170731 16:41:48.861"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.862" starttime="20170731 16:41:48.861"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.863" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.863" starttime="20170731 16:41:48.863"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.863" starttime="20170731 16:41:48.862"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.864" starttime="20170731 16:41:48.864"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.865" starttime="20170731 16:41:48.863"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.865" starttime="20170731 16:41:48.859"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.865" starttime="20170731 16:41:48.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:48.865" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:48.865" starttime="20170731 16:41:48.865"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:48.913" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:48.914" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170731 16:41:48.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:48.961" starttime="20170731 16:41:48.887"></status>
</kw>
<msg timestamp="20170731 16:41:48.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.961" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 16:18:56 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170731 16:41:48.961" starttime="20170731 16:41:48.866"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:48.962" level="INFO">${stdout} = Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 16:18:56 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170731 16:41:48.962" starttime="20170731 16:41:48.962"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:48.962" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:48.962" starttime="20170731 16:41:48.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:48.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.969"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.968"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.963"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.858"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.858"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.598"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.597"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:48.596"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.970" starttime="20170731 16:41:47.078"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.971" starttime="20170731 16:41:47.076"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.971" starttime="20170731 16:41:47.059"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.971" starttime="20170731 16:41:47.057"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:48.971" starttime="20170731 16:41:47.056"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:48.973" starttime="20170731 16:41:48.972"></status>
</kw>
<msg timestamp="20170731 16:41:48.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:48.973" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:48.973" starttime="20170731 16:41:48.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:48.974" starttime="20170731 16:41:48.973"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:48.992" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170731 16:41:48.992" starttime="20170731 16:41:48.991"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:48.993" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170731 16:41:48.993" starttime="20170731 16:41:48.993"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:48.994" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_elog.txt</msg>
<status status="PASS" endtime="20170731 16:41:48.994" starttime="20170731 16:41:48.993"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:48.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:48.997" starttime="20170731 16:41:48.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:48.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:48.998" starttime="20170731 16:41:48.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:48.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:48.999" starttime="20170731 16:41:48.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:48.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:48.999" starttime="20170731 16:41:48.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.194" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:49.194" starttime="20170731 16:41:49.000"></status>
</kw>
<msg timestamp="20170731 16:41:49.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:49.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.194" starttime="20170731 16:41:48.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.195" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.195" starttime="20170731 16:41:49.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.196" starttime="20170731 16:41:49.195"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.196" starttime="20170731 16:41:48.996"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.196" starttime="20170731 16:41:48.995"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.196" starttime="20170731 16:41:48.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:49.196" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170731 16:41:49.196" starttime="20170731 16:41:49.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.197" starttime="20170731 16:41:49.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:49.241" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:49.241" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.241" starttime="20170731 16:41:49.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.242" starttime="20170731 16:41:49.241"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:49.242" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:49.242" starttime="20170731 16:41:49.242"></status>
</kw>
<msg timestamp="20170731 16:41:49.242" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.243" starttime="20170731 16:41:48.994"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:41:49.244" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:41:49.244" starttime="20170731 16:41:49.243"></status>
</kw>
<msg timestamp="20170731 16:41:49.244" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:49.244" starttime="20170731 16:41:49.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:41:49.245" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:41:49.245" starttime="20170731 16:41:49.245"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.245" starttime="20170731 16:41:49.244"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.245" starttime="20170731 16:41:48.993"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:49.246" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170731 16:41:49.246" starttime="20170731 16:41:49.246"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:49.249" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:49.249" starttime="20170731 16:41:49.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:49.250" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:49.250" starttime="20170731 16:41:49.250"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:49.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:49.251" starttime="20170731 16:41:49.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:49.251" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:49.251" starttime="20170731 16:41:49.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:49.444" starttime="20170731 16:41:49.252"></status>
</kw>
<msg timestamp="20170731 16:41:49.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:49.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.444" starttime="20170731 16:41:49.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.445" starttime="20170731 16:41:49.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.446" starttime="20170731 16:41:49.445"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.446" starttime="20170731 16:41:49.248"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.446" starttime="20170731 16:41:49.247"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.446" starttime="20170731 16:41:49.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:49.447" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170731 16:41:49.447" starttime="20170731 16:41:49.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.447" starttime="20170731 16:41:49.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:49.642" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:49.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.642" starttime="20170731 16:41:49.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.642" starttime="20170731 16:41:49.642"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:49.643" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:49.643" starttime="20170731 16:41:49.643"></status>
</kw>
<msg timestamp="20170731 16:41:49.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.643" starttime="20170731 16:41:49.246"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.644" starttime="20170731 16:41:49.644"></status>
</kw>
<msg timestamp="20170731 16:41:49.645" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170731 16:41:49.645" starttime="20170731 16:41:49.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.645" starttime="20170731 16:41:49.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 16:41:49.646" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:49.646" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 16:41:49.646" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170731 16:41:49.646" starttime="20170731 16:41:49.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:49.648" starttime="20170731 16:41:49.647"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.648" starttime="20170731 16:41:49.646"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.648" starttime="20170731 16:41:49.245"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:49.649" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_inventory.txt</msg>
<status status="PASS" endtime="20170731 16:41:49.649" starttime="20170731 16:41:49.648"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:49.651" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:49.652" starttime="20170731 16:41:49.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:49.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:49.653" starttime="20170731 16:41:49.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:49.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:49.653" starttime="20170731 16:41:49.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:49.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:49.654" starttime="20170731 16:41:49.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:49.876" starttime="20170731 16:41:49.655"></status>
</kw>
<msg timestamp="20170731 16:41:49.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:49.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.876" starttime="20170731 16:41:49.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.877" starttime="20170731 16:41:49.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:49.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:49.877" starttime="20170731 16:41:49.877"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.878" starttime="20170731 16:41:49.650"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.878" starttime="20170731 16:41:49.650"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:49.878" starttime="20170731 16:41:49.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:49.878" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170731 16:41:49.878" starttime="20170731 16:41:49.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:49.879" starttime="20170731 16:41:49.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:50.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:50.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.051" starttime="20170731 16:41:49.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.051" starttime="20170731 16:41:50.051"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:50.052" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:50.052" starttime="20170731 16:41:50.052"></status>
</kw>
<msg timestamp="20170731 16:41:50.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.052" starttime="20170731 16:41:49.649"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.053" starttime="20170731 16:41:50.053"></status>
</kw>
<msg timestamp="20170731 16:41:50.053" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170731 16:41:50.053" starttime="20170731 16:41:50.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.054" starttime="20170731 16:41:50.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 16:41:50.055" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:50.055" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 16:41:50.055" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170731 16:41:50.055" starttime="20170731 16:41:50.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.056" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_inventory.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:50.056" starttime="20170731 16:41:50.056"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.057" starttime="20170731 16:41:50.055"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.057" starttime="20170731 16:41:49.648"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:50.057" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_led.txt</msg>
<status status="PASS" endtime="20170731 16:41:50.057" starttime="20170731 16:41:50.057"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:50.061" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:50.062" starttime="20170731 16:41:50.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:50.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:50.063" starttime="20170731 16:41:50.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:50.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:50.064" starttime="20170731 16:41:50.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:50.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:50.065" starttime="20170731 16:41:50.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:50.264" starttime="20170731 16:41:50.066"></status>
</kw>
<msg timestamp="20170731 16:41:50.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:50.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.264" starttime="20170731 16:41:50.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.265" starttime="20170731 16:41:50.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.266" starttime="20170731 16:41:50.265"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.266" starttime="20170731 16:41:50.060"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.266" starttime="20170731 16:41:50.059"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.266" starttime="20170731 16:41:50.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:50.267" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170731 16:41:50.267" starttime="20170731 16:41:50.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.268" starttime="20170731 16:41:50.267"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:50.312" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:50.312" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.312" starttime="20170731 16:41:50.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.313" starttime="20170731 16:41:50.312"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:50.313" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:50.313" starttime="20170731 16:41:50.313"></status>
</kw>
<msg timestamp="20170731 16:41:50.313" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.313" starttime="20170731 16:41:50.058"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:41:50.315" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:41:50.315" starttime="20170731 16:41:50.314"></status>
</kw>
<msg timestamp="20170731 16:41:50.315" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:50.315" starttime="20170731 16:41:50.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:41:50.316" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:41:50.316" starttime="20170731 16:41:50.316"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.316" starttime="20170731 16:41:50.315"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.316" starttime="20170731 16:41:50.057"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:50.317" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_record_log.txt</msg>
<status status="PASS" endtime="20170731 16:41:50.317" starttime="20170731 16:41:50.316"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:50.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:50.320" starttime="20170731 16:41:50.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:50.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:50.321" starttime="20170731 16:41:50.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:50.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:50.321" starttime="20170731 16:41:50.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:50.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:50.322" starttime="20170731 16:41:50.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:50.513" starttime="20170731 16:41:50.323"></status>
</kw>
<msg timestamp="20170731 16:41:50.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:50.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.513" starttime="20170731 16:41:50.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.514" starttime="20170731 16:41:50.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.515" starttime="20170731 16:41:50.515"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.515" starttime="20170731 16:41:50.319"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.515" starttime="20170731 16:41:50.318"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.515" starttime="20170731 16:41:50.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:50.516" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170731 16:41:50.516" starttime="20170731 16:41:50.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.517" starttime="20170731 16:41:50.516"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:50.565" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:50.565" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.565" starttime="20170731 16:41:50.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.566" starttime="20170731 16:41:50.565"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:50.566" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:50.566" starttime="20170731 16:41:50.566"></status>
</kw>
<msg timestamp="20170731 16:41:50.567" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:50.567" starttime="20170731 16:41:50.317"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:50.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:41:50.568" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:41:50.568" starttime="20170731 16:41:50.567"></status>
</kw>
<msg timestamp="20170731 16:41:50.568" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:50.568" starttime="20170731 16:41:50.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:41:50.569" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:41:50.569" starttime="20170731 16:41:50.569"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.569" starttime="20170731 16:41:50.568"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.569" starttime="20170731 16:41:50.316"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.569" starttime="20170731 16:41:48.993"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.992"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.992"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.992"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.991"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.974"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.971"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.570" starttime="20170731 16:41:48.971"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.573" starttime="20170731 16:41:50.572"></status>
</kw>
<msg timestamp="20170731 16:41:50.573" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:50.573" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:50.573" starttime="20170731 16:41:50.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.574" starttime="20170731 16:41:50.574"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 16:41:50.615" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:50.616" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170731 16:41:50.663" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170731 16:41:50.675" level="FAIL">#(UTC) 2017/07/31 16:41:50.674293 -    3.643429 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170731 16:41:50.675" starttime="20170731 16:41:50.592"></status>
</kw>
<status status="FAIL" endtime="20170731 16:41:50.675" starttime="20170731 16:41:50.592"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.675" starttime="20170731 16:41:50.575"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.676" starttime="20170731 16:41:50.571"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:50.676" starttime="20170731 16:41:50.570"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.678" starttime="20170731 16:41:50.678"></status>
</kw>
<msg timestamp="20170731 16:41:50.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:50.678" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:50.678" starttime="20170731 16:41:50.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.679" starttime="20170731 16:41:50.679"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:50.703" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170731 16:41:50.703" starttime="20170731 16:41:50.702"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:50.704" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170731 16:41:50.704" starttime="20170731 16:41:50.704"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:50.705" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170731 16:41:50.705" starttime="20170731 16:41:50.705"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:50.707" starttime="20170731 16:41:50.706"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:50.708" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:50.708" starttime="20170731 16:41:50.707"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:50.756" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:50.756" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170731 16:41:51.287" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:51.287" starttime="20170731 16:41:50.729"></status>
</kw>
<msg timestamp="20170731 16:41:51.287" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:51.288" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 31 16:41 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 31 16:41 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170731 16:41:51.288" starttime="20170731 16:41:50.708"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:51.289" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 31 16:41 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 31 16:41 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170731 16:41:51.289" starttime="20170731 16:41:51.289"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:51.290" level="INFO">${stderr} = ls: /proc/1553/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170731 16:41:51.290" starttime="20170731 16:41:51.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:51.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:51.297" starttime="20170731 16:41:51.297"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.298" starttime="20170731 16:41:51.296"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.298" starttime="20170731 16:41:51.290"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.298" starttime="20170731 16:41:50.706"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.298" starttime="20170731 16:41:50.705"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:51.299" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170731 16:41:51.299" starttime="20170731 16:41:51.298"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:51.300" starttime="20170731 16:41:51.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:51.301" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:51.301" starttime="20170731 16:41:51.300"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:51.349" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:51.350" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170731 16:41:51.396" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:51.396" starttime="20170731 16:41:51.323"></status>
</kw>
<msg timestamp="20170731 16:41:51.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:51.396" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170731 16:41:51.397" starttime="20170731 16:41:51.301"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:51.397" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170731 16:41:51.397" starttime="20170731 16:41:51.397"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:51.398" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:51.398" starttime="20170731 16:41:51.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:51.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:51.405" starttime="20170731 16:41:51.404"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.405" starttime="20170731 16:41:51.404"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.405" starttime="20170731 16:41:51.398"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.405" starttime="20170731 16:41:51.299"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.405" starttime="20170731 16:41:51.298"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:51.406" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170731 16:41:51.406" starttime="20170731 16:41:51.406"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:51.407" starttime="20170731 16:41:51.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:51.408" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:51.408" starttime="20170731 16:41:51.408"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:51.460" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:51.460" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170731 16:41:51.507" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:51.507" starttime="20170731 16:41:51.430"></status>
</kw>
<msg timestamp="20170731 16:41:51.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:51.507" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          278820 kB\nMemAvailable:     325036 kB\nBuffers:           11256 kB\nCached:            52000 kB\nSwapCached:            0 kB\nActive:            9817...</msg>
<status status="PASS" endtime="20170731 16:41:51.507" starttime="20170731 16:41:51.408"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:51.508" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          278820 kB
MemAvailable:     325036 kB
Buffers:           11256 kB
Cached:            52000 kB
SwapCached:            0 kB
Active:            98176 kB
Inac...</msg>
<status status="PASS" endtime="20170731 16:41:51.508" starttime="20170731 16:41:51.508"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:51.508" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:51.509" starttime="20170731 16:41:51.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:51.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:51.518" starttime="20170731 16:41:51.517"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.519" starttime="20170731 16:41:51.516"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.519" starttime="20170731 16:41:51.509"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.519" starttime="20170731 16:41:51.406"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.519" starttime="20170731 16:41:51.405"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:51.520" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170731 16:41:51.520" starttime="20170731 16:41:51.519"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:51.522" starttime="20170731 16:41:51.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:51.522" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:51.522" starttime="20170731 16:41:51.522"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:51.571" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:51.571" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170731 16:41:51.882" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:51.882" starttime="20170731 16:41:51.545"></status>
</kw>
<msg timestamp="20170731 16:41:51.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:51.882" level="INFO">${ret_values} = (u'Mem: 153572K used, 278696K free, 14568K shrd, 11256K buff, 52004K cached\nCPU:  16% usr   0% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.49 1.26 0.93 1/148 1556\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170731 16:41:51.882" starttime="20170731 16:41:51.523"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:51.883" level="INFO">${stdout} = Mem: 153572K used, 278696K free, 14568K shrd, 11256K buff, 52004K cached
CPU:  16% usr   0% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.49 1.26 0.93 1/148 1556
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170731 16:41:51.883" starttime="20170731 16:41:51.882"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:51.883" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:51.883" starttime="20170731 16:41:51.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:51.890" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:51.890" starttime="20170731 16:41:51.890"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.891" starttime="20170731 16:41:51.889"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.891" starttime="20170731 16:41:51.884"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.891" starttime="20170731 16:41:51.520"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:51.891" starttime="20170731 16:41:51.519"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:51.892" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170731 16:41:51.892" starttime="20170731 16:41:51.891"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:51.893" starttime="20170731 16:41:51.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:51.894" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:51.894" starttime="20170731 16:41:51.893"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:51.943" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:51.943" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170731 16:41:52.010" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:52.010" starttime="20170731 16:41:51.915"></status>
</kw>
<msg timestamp="20170731 16:41:52.010" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:52.011" level="INFO">${ret_values} = (u'[    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc device\n[    2.060000] ipmi-bt-host 1e789140.ibt: Using IRQ 22\n[    2.060000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled\n[    2...</msg>
<status status="PASS" endtime="20170731 16:41:52.011" starttime="20170731 16:41:51.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:52.011" level="INFO">${stdout} = [    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc device
[    2.060000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    2.060000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    2.06000...</msg>
<status status="PASS" endtime="20170731 16:41:52.011" starttime="20170731 16:41:52.011"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:52.012" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:52.012" starttime="20170731 16:41:52.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:52.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:52.019" starttime="20170731 16:41:52.018"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:52.019" starttime="20170731 16:41:52.018"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:52.019" starttime="20170731 16:41:52.012"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:52.019" starttime="20170731 16:41:51.892"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:52.019" starttime="20170731 16:41:51.891"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:41:52.020" level="INFO">${logpath} = /home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170731 16:41:52.020" starttime="20170731 16:41:52.020"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:52.022" starttime="20170731 16:41:52.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:52.022" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:52.022" starttime="20170731 16:41:52.022"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:52.074" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:52.074" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170731 16:41:53.809" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:41:53.809" starttime="20170731 16:41:52.047"></status>
</kw>
<msg timestamp="20170731 16:41:53.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:53.812" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-07-31 16:32:52 UTC, end at Mon 2017-07-31 16:41:53 UTC. --\nJul 31 16:32:52 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 31 16:32:52 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170731 16:41:53.812" starttime="20170731 16:41:52.023"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:41:53.814" level="INFO">${stdout} = -- Logs begin at Mon 2017-07-31 16:32:52 UTC, end at Mon 2017-07-31 16:41:53 UTC. --
Jul 31 16:32:52 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 31 16:32:52 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170731 16:41:53.814" starttime="20170731 16:41:53.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:41:53.814" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:41:53.814" starttime="20170731 16:41:53.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:53.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170731164146851321_TestBiosUpdate/20170731164146851321_HostBIOSPowerOn/9.3.21.61.170731.164143.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:53.822"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:53.820"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:53.815"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:52.020"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:52.020"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.823" starttime="20170731 16:41:50.704"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.704"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.703"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.703"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.702"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.680"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.676"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:53.824" starttime="20170731 16:41:50.676"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:53.826" starttime="20170731 16:41:53.826"></status>
</kw>
<msg timestamp="20170731 16:41:53.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:53.826" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:53.826" starttime="20170731 16:41:53.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:53.827" starttime="20170731 16:41:53.826"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:53.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:53.848" starttime="20170731 16:41:53.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:53.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:53.848" starttime="20170731 16:41:53.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:53.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:53.849" starttime="20170731 16:41:53.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:53.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:53.850" starttime="20170731 16:41:53.849"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:54.031" starttime="20170731 16:41:53.851"></status>
</kw>
<msg timestamp="20170731 16:41:54.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:54.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.031" starttime="20170731 16:41:53.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.032" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.032" starttime="20170731 16:41:54.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.033" starttime="20170731 16:41:54.032"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.033" starttime="20170731 16:41:53.846"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.033" starttime="20170731 16:41:53.846"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.033" starttime="20170731 16:41:53.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:54.034" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170731 16:41:54.034" starttime="20170731 16:41:54.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.035" starttime="20170731 16:41:54.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:54.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:41:54.078" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.078" starttime="20170731 16:41:54.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.079" starttime="20170731 16:41:54.078"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:54.079" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:54.079" starttime="20170731 16:41:54.079"></status>
</kw>
<msg timestamp="20170731 16:41:54.079" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.079" starttime="20170731 16:41:53.844"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:41:54.081" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:41:54.081" starttime="20170731 16:41:54.080"></status>
</kw>
<msg timestamp="20170731 16:41:54.081" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:54.081" starttime="20170731 16:41:54.080"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170731 16:41:54.082" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:41:54.082" starttime="20170731 16:41:54.082"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.082" starttime="20170731 16:41:53.844"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.083" starttime="20170731 16:41:53.827"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.083" starttime="20170731 16:41:53.824"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.083" starttime="20170731 16:41:53.824"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.085" starttime="20170731 16:41:54.085"></status>
</kw>
<msg timestamp="20170731 16:41:54.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:54.085" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:54.085" starttime="20170731 16:41:54.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.086" starttime="20170731 16:41:54.085"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170731 16:41:54.105" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:41:54.105" starttime="20170731 16:41:54.104"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.105" starttime="20170731 16:41:54.103"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.105" starttime="20170731 16:41:54.086"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.105" starttime="20170731 16:41:54.083"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.105" starttime="20170731 16:41:54.083"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.106" starttime="20170731 16:41:47.056"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.106" starttime="20170731 16:41:47.054"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.106" starttime="20170731 16:41:47.054"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.106" starttime="20170731 16:41:47.054"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170731 16:41:54.117" starttime="20170731 16:41:54.114"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.118" starttime="20170731 16:41:54.106"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.118" starttime="20170731 16:41:47.053"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.118" starttime="20170731 16:41:43.806"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:54.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:54.203" starttime="20170731 16:41:54.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:54.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:54.204" starttime="20170731 16:41:54.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:54.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:54.206" starttime="20170731 16:41:54.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:54.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:54.207" starttime="20170731 16:41:54.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.386" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:54.386" starttime="20170731 16:41:54.208"></status>
</kw>
<msg timestamp="20170731 16:41:54.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:54.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.386" starttime="20170731 16:41:54.208"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.387" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.387" starttime="20170731 16:41:54.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.388" starttime="20170731 16:41:54.387"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.388" starttime="20170731 16:41:54.196"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.388" starttime="20170731 16:41:54.195"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.388" starttime="20170731 16:41:54.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:54.389" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170731 16:41:54.389" starttime="20170731 16:41:54.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.390" starttime="20170731 16:41:54.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:54.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:54.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.454" starttime="20170731 16:41:54.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.455" starttime="20170731 16:41:54.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:54.455" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:54.455" starttime="20170731 16:41:54.455"></status>
</kw>
<msg timestamp="20170731 16:41:54.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.455" starttime="20170731 16:41:54.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.456" starttime="20170731 16:41:54.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:54.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:54.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:54.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:54.457" starttime="20170731 16:41:54.456"></status>
</kw>
<msg timestamp="20170731 16:41:54.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170731 16:41:54.457" starttime="20170731 16:41:54.187"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.457" starttime="20170731 16:41:54.176"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:54.461" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:54.462" starttime="20170731 16:41:54.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:54.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:54.462" starttime="20170731 16:41:54.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:54.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:54.463" starttime="20170731 16:41:54.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:54.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:54.464" starttime="20170731 16:41:54.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:54.649" starttime="20170731 16:41:54.464"></status>
</kw>
<msg timestamp="20170731 16:41:54.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:54.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.649" starttime="20170731 16:41:54.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.650" starttime="20170731 16:41:54.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.650" starttime="20170731 16:41:54.650"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.651" starttime="20170731 16:41:54.460"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.651" starttime="20170731 16:41:54.460"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.651" starttime="20170731 16:41:54.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:54.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170731 16:41:54.651" starttime="20170731 16:41:54.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.652" starttime="20170731 16:41:54.652"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:54.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:54.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.715" starttime="20170731 16:41:54.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.716" starttime="20170731 16:41:54.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:54.716" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:54.716" starttime="20170731 16:41:54.716"></status>
</kw>
<msg timestamp="20170731 16:41:54.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.716" starttime="20170731 16:41:54.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.717" starttime="20170731 16:41:54.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:54.718" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:54.718" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:54.718" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170731 16:41:54.718" starttime="20170731 16:41:54.717"></status>
</kw>
<msg timestamp="20170731 16:41:54.718" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170731 16:41:54.718" starttime="20170731 16:41:54.458"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.718" starttime="20170731 16:41:54.458"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:54.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:54.723" starttime="20170731 16:41:54.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:54.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:54.724" starttime="20170731 16:41:54.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:54.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:54.725" starttime="20170731 16:41:54.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:54.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:54.726" starttime="20170731 16:41:54.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.910" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:54.910" starttime="20170731 16:41:54.727"></status>
</kw>
<msg timestamp="20170731 16:41:54.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:54.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.910" starttime="20170731 16:41:54.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.911" starttime="20170731 16:41:54.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.912" starttime="20170731 16:41:54.911"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.912" starttime="20170731 16:41:54.722"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.912" starttime="20170731 16:41:54.721"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.912" starttime="20170731 16:41:54.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:54.913" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170731 16:41:54.913" starttime="20170731 16:41:54.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.914" starttime="20170731 16:41:54.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:54.994" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 16:41:54.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.994" starttime="20170731 16:41:54.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:54.994" starttime="20170731 16:41:54.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:54.995" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:54.995" starttime="20170731 16:41:54.995"></status>
</kw>
<msg timestamp="20170731 16:41:54.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.995" starttime="20170731 16:41:54.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:54.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:54.996" starttime="20170731 16:41:54.995"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:54.996" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:54.996" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:54.997" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170731 16:41:54.997" starttime="20170731 16:41:54.996"></status>
</kw>
<msg timestamp="20170731 16:41:54.997" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:54.997" starttime="20170731 16:41:54.719"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:54.997" starttime="20170731 16:41:54.719"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:55.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:55.001" starttime="20170731 16:41:55.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:55.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:55.002" starttime="20170731 16:41:55.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:55.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:55.003" starttime="20170731 16:41:55.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:55.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:55.003" starttime="20170731 16:41:55.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.200" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:55.200" starttime="20170731 16:41:55.004"></status>
</kw>
<msg timestamp="20170731 16:41:55.200" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:55.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.200" starttime="20170731 16:41:55.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.201" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.201" starttime="20170731 16:41:55.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.202" starttime="20170731 16:41:55.201"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.202" starttime="20170731 16:41:55.000"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.202" starttime="20170731 16:41:55.000"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.202" starttime="20170731 16:41:54.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:55.203" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:55.203" starttime="20170731 16:41:55.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.203" starttime="20170731 16:41:55.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:55.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:55.293" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.293" starttime="20170731 16:41:55.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.293" starttime="20170731 16:41:55.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:55.294" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:55.294" starttime="20170731 16:41:55.294"></status>
</kw>
<msg timestamp="20170731 16:41:55.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.294" starttime="20170731 16:41:54.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.295" starttime="20170731 16:41:55.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:55.295" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:55.296" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:55.296" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:55.296" starttime="20170731 16:41:55.295"></status>
</kw>
<msg timestamp="20170731 16:41:55.296" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:55.296" starttime="20170731 16:41:54.998"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.296" starttime="20170731 16:41:54.997"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.358" starttime="20170731 16:41:43.794"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:55.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:55.375" starttime="20170731 16:41:55.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:55.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:55.376" starttime="20170731 16:41:55.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:55.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:55.376" starttime="20170731 16:41:55.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:55.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:55.377" starttime="20170731 16:41:55.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.566" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:55.567" starttime="20170731 16:41:55.378"></status>
</kw>
<msg timestamp="20170731 16:41:55.567" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:55.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.567" starttime="20170731 16:41:55.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.567" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.568" starttime="20170731 16:41:55.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.568" starttime="20170731 16:41:55.568"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.568" starttime="20170731 16:41:55.373"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.568" starttime="20170731 16:41:55.372"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.569" starttime="20170731 16:41:55.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:55.569" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170731 16:41:55.569" starttime="20170731 16:41:55.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.570" starttime="20170731 16:41:55.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:55.615" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170731 16:41:55.615" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.615" starttime="20170731 16:41:55.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.616" starttime="20170731 16:41:55.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:55.617" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:55.617" starttime="20170731 16:41:55.616"></status>
</kw>
<msg timestamp="20170731 16:41:55.617" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.617" starttime="20170731 16:41:55.371"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.618" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:41:55.618" starttime="20170731 16:41:55.617"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.618" starttime="20170731 16:41:55.370"></status>
</kw>
<msg timestamp="20170731 16:41:55.623" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170731 16:41:55.629" starttime="20170731 16:41:55.628"></status>
</kw>
<msg timestamp="20170731 16:41:55.640" level="FAIL">#(UTC) 2017/07/31 16:41:55.640076 -    1.522381 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170731 16:41:55.640" starttime="20170731 16:38:29.795"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170731 16:41:55.645" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170731 16:41:55.647" starttime="20170731 16:41:55.641"></status>
</kw>
<status status="FAIL" endtime="20170731 16:41:55.647" starttime="20170731 16:38:29.794"></status>
</kw>
<msg timestamp="20170731 16:41:55.647" level="FAIL">#(UTC) 2017/07/31 16:41:55.640076 -    1.522381 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170731 16:41:55.647" starttime="20170731 16:38:29.789"></status>
</kw>
<kw type="teardown" name="Validate Power On Teardown">
<doc>Teardown after Validate Power On.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Stop SOL Console Logging</arg>
<arg>\ targ_file_path=${EXECDIR}${/}logs${/}SOL.log</arg>
</arguments>
<assign>
<var>${keyword_buf}</var>
</assign>
<msg timestamp="20170731 16:41:55.654" level="INFO">${keyword_buf} = Stop SOL Console Logging  targ_file_path=/home/fspcibld/logs/SOL.log</msg>
<status status="PASS" endtime="20170731 16:41:55.654" starttime="20170731 16:41:55.653"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_buf}</arg>
</arguments>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>targ_file_path=/home/fspcibld/logs/SOL.log</arg>
</arguments>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 16:41:55.664" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:41:55.664" starttime="20170731 16:41:55.663"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 16:41:55.664" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:41:55.665" starttime="20170731 16:41:55.664"></status>
</kw>
<msg timestamp="20170731 16:41:55.665" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" endtime="20170731 16:41:55.665" starttime="20170731 16:41:55.663"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:55.666" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170731 16:41:55.666" starttime="20170731 16:41:55.665"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.666" starttime="20170731 16:41:55.666"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:41:55.670" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:41:55.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:41:55.674" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170731 16:41:55.674" starttime="20170731 16:41:55.666"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.678" starttime="20170731 16:41:55.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.679" starttime="20170731 16:41:55.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:55.680" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:41:55.680" starttime="20170731 16:41:55.679"></status>
</kw>
<msg timestamp="20170731 16:41:55.680" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" endtime="20170731 16:41:55.680" starttime="20170731 16:41:55.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:55.681" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170731 16:41:55.681" starttime="20170731 16:41:55.680"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.682" starttime="20170731 16:41:55.681"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170731 16:41:55.688" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:41:55.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:41:55.700" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170731 16:41:55.700" starttime="20170731 16:41:55.682"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.717" starttime="20170731 16:41:55.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:55.718" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170731 16:41:55.718" starttime="20170731 16:41:55.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.719" starttime="20170731 16:41:55.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:41:55.720" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 16:41:55.720" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170731 16:41:55.720" starttime="20170731 16:41:55.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.721" starttime="20170731 16:41:55.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.724" html="yes" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///home/fspcibld/logs/SOL.log"&gt;/home/fspcibld/logs/SOL.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:55.724" starttime="20170731 16:41:55.722"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.724" starttime="20170731 16:41:55.722"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.724" starttime="20170731 16:41:55.721"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:41:55.725" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170731 16:41:55.725" starttime="20170731 16:41:55.724"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170731 16:41:55.725" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170731 16:41:55.725" starttime="20170731 16:41:55.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.750" starttime="20170731 16:41:55.726"></status>
</kw>
<msg timestamp="20170731 16:41:55.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 16:41:55.751" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
root@9.3.21.61's password: 
</msg>
<status status="PASS" endtime="20170731 16:41:55.751" starttime="20170731 16:41:55.725"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.753" starttime="20170731 16:41:55.662"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.753" starttime="20170731 16:41:55.654"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.753" starttime="20170731 16:41:55.647"></status>
</kw>
<status status="FAIL" endtime="20170731 16:41:55.756" starttime="20170731 16:38:29.622"></status>
</kw>
<status status="FAIL" endtime="20170731 16:41:55.756" starttime="20170731 16:38:29.622"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170731 16:41:55.759" starttime="20170731 16:41:55.759"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:41:55.773" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:41:55.774" starttime="20170731 16:41:55.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:41:55.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:41:55.775" starttime="20170731 16:41:55.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:41:55.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:41:55.776" starttime="20170731 16:41:55.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:41:55.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:41:55.776" starttime="20170731 16:41:55.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.976" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:41:55.976" starttime="20170731 16:41:55.777"></status>
</kw>
<msg timestamp="20170731 16:41:55.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:55.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.976" starttime="20170731 16:41:55.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.977" starttime="20170731 16:41:55.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:55.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:55.978" starttime="20170731 16:41:55.977"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.978" starttime="20170731 16:41:55.772"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.978" starttime="20170731 16:41:55.771"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:55.978" starttime="20170731 16:41:55.770"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:41:55.979" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170731 16:41:55.979" starttime="20170731 16:41:55.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:55.980" starttime="20170731 16:41:55.979"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:41:56.042" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 16:41:56.042" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:56.042" starttime="20170731 16:41:55.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:56.043" starttime="20170731 16:41:56.042"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:41:56.043" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:41:56.043" starttime="20170731 16:41:56.043"></status>
</kw>
<msg timestamp="20170731 16:41:56.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:41:56.044" starttime="20170731 16:41:55.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:41:56.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:41:56.044" starttime="20170731 16:41:56.044"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 16:41:56.045" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:41:56.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 16:41:56.045" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170731 16:41:56.045" starttime="20170731 16:41:56.045"></status>
</kw>
<msg timestamp="20170731 16:41:56.045" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:41:56.045" starttime="20170731 16:41:55.769"></status>
</kw>
<msg timestamp="20170731 16:41:56.046" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170731 16:41:56.046" starttime="20170731 16:41:55.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170731 16:41:56.047" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170731 16:41:56.047" starttime="20170731 16:41:56.046"></status>
</kw>
<msg timestamp="20170731 16:41:56.047" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:56.047" starttime="20170731 16:41:56.046"></status>
</kw>
<msg timestamp="20170731 16:41:56.047" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:41:56.047" starttime="20170731 16:41:55.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170731 16:41:56.059" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170731 16:41:56.059" starttime="20170731 16:41:56.059"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 16:41:56.063" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 16:41:59.067" level="INFO">${RC} = 0</msg>
<msg timestamp="20170731 16:41:59.067" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.49 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.635 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170731 16:41:59.067" starttime="20170731 16:41:56.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.071" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.49 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.635 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.577 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.575 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.575/0.821/1.498/0.391 ms</msg>
<status status="PASS" endtime="20170731 16:41:59.071" starttime="20170731 16:41:59.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:59.071" starttime="20170731 16:41:59.071"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.072" starttime="20170731 16:41:56.058"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:41:59.087" level="INFO">${cur_time} = 2017-07-31 16:41:59:086360</msg>
<status status="PASS" endtime="20170731 16:41:59.087" starttime="20170731 16:41:59.086"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:41:59.088" level="INFO">${cur_time} = 20170731164159086360</msg>
<status status="PASS" endtime="20170731 16:41:59.088" starttime="20170731 16:41:59.087"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.088" starttime="20170731 16:41:59.086"></status>
</kw>
<msg timestamp="20170731 16:41:59.088" level="INFO">${FFDC_TIME} = 20170731164159086360</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 16:41:59.090" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170731 16:41:59.090" starttime="20170731 16:41:59.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 16:41:59.090" level="INFO">${suite_name} = 20170731164159086360_TestBiosUpdate</msg>
<status status="PASS" endtime="20170731 16:41:59.090" starttime="20170731 16:41:59.090"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 16:41:59.091" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170731 16:41:59.091" starttime="20170731 16:41:59.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 16:41:59.092" level="INFO">${test_name} = 20170731164159086360_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170731 16:41:59.092" starttime="20170731 16:41:59.091"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.092" starttime="20170731 16:41:59.089"></status>
</kw>
<msg timestamp="20170731 16:41:59.092" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/</msg>
<msg timestamp="20170731 16:41:59.092" level="INFO">${FFDC_PREFIX} = 20170731164159086360_</msg>
<msg timestamp="20170731 16:41:59.108" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170731 16:41:59.109" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.109" starttime="20170731 16:41:59.109"></status>
</kw>
<msg timestamp="20170731 16:41:59.110" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.121" starttime="20170731 16:41:59.121"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.121" starttime="20170731 16:41:59.120"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.122" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.122" starttime="20170731 16:41:59.122"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.123" starttime="20170731 16:41:59.121"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.125" starttime="20170731 16:41:59.124"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.125" starttime="20170731 16:41:59.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.126" starttime="20170731 16:41:59.125"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.126" starttime="20170731 16:41:59.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.127" starttime="20170731 16:41:59.127"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.127" starttime="20170731 16:41:59.126"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.128" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.129" starttime="20170731 16:41:59.128"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.129" starttime="20170731 16:41:59.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.130" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.130" starttime="20170731 16:41:59.130"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.130" starttime="20170731 16:41:59.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.132" starttime="20170731 16:41:59.131"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.132" starttime="20170731 16:41:59.131"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.133" starttime="20170731 16:41:59.132"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.133" starttime="20170731 16:41:59.132"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.135" starttime="20170731 16:41:59.134"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.135" starttime="20170731 16:41:59.134"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.136" starttime="20170731 16:41:59.135"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.136" starttime="20170731 16:41:59.135"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.137" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.137" starttime="20170731 16:41:59.137"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.137" starttime="20170731 16:41:59.136"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.139" starttime="20170731 16:41:59.138"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.139" starttime="20170731 16:41:59.137"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 16:41:59.157" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:59.157" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170731 16:41:59.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 16:41:59.234" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170731 16:41:59.234" level="INFO">${stderr} = </msg>
<msg timestamp="20170731 16:41:59.234" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170731 16:41:59.234" starttime="20170731 16:41:59.139"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.235" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170731 16:41:59.235" starttime="20170731 16:41:59.235"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.236" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170731 16:41:59.236" starttime="20170731 16:41:59.235"></status>
</kw>
<msg timestamp="20170731 16:41:59.236" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170731 16:41:59.236" starttime="20170731 16:41:59.139"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.237" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.237" starttime="20170731 16:41:59.237"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.237" starttime="20170731 16:41:59.236"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.237" starttime="20170731 16:41:59.133"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.239" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.239" starttime="20170731 16:41:59.238"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.239" starttime="20170731 16:41:59.238"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:59.240" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170731 16:41:59.240" starttime="20170731 16:41:59.239"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.241" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.242" starttime="20170731 16:41:59.241"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.242" starttime="20170731 16:41:59.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.243" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.243" starttime="20170731 16:41:59.242"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.243" starttime="20170731 16:41:59.242"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.243" starttime="20170731 16:41:59.240"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.244" starttime="20170731 16:41:59.244"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.244" starttime="20170731 16:41:59.243"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.246" starttime="20170731 16:41:59.245"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.246" starttime="20170731 16:41:59.245"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.246" starttime="20170731 16:41:59.243"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.247" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.247" starttime="20170731 16:41:59.247"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.247" starttime="20170731 16:41:59.246"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.248" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.249" starttime="20170731 16:41:59.248"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.249" starttime="20170731 16:41:59.248"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.249" starttime="20170731 16:41:59.246"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.249" starttime="20170731 16:41:59.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.250" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.250" starttime="20170731 16:41:59.249"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.250" starttime="20170731 16:41:59.249"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.250" starttime="20170731 16:41:59.119"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:59.256" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170731 16:41:59.256" starttime="20170731 16:41:59.256"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170731 16:41:59.257" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170731 16:41:59.257" starttime="20170731 16:41:59.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:59.258" starttime="20170731 16:41:59.258"></status>
</kw>
<msg timestamp="20170731 16:41:59.259" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170731 16:41:59.259" starttime="20170731 16:41:59.258"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:59.265" starttime="20170731 16:41:59.265"></status>
</kw>
<msg timestamp="20170731 16:41:59.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:41:59.265" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:41:59.265" starttime="20170731 16:41:59.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:41:59.266" starttime="20170731 16:41:59.266"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:41:59.282" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170731 16:41:59.282" starttime="20170731 16:41:59.282"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:41:59.283" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170731 16:41:59.283" starttime="20170731 16:41:59.283"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.284" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170731 16:41:59.284" starttime="20170731 16:41:59.284"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.287" starttime="20170731 16:41:59.287"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.288" starttime="20170731 16:41:59.286"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.289" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.289" starttime="20170731 16:41:59.288"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.289" starttime="20170731 16:41:59.288"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.290" starttime="20170731 16:41:59.290"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.290" starttime="20170731 16:41:59.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:41:59.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:41:59.292" starttime="20170731 16:41:59.291"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.292" starttime="20170731 16:41:59.290"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.292" starttime="20170731 16:41:59.286"></status>
</kw>
<status status="PASS" endtime="20170731 16:41:59.292" starttime="20170731 16:41:59.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:41:59.293" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:41:59.293" starttime="20170731 16:41:59.292"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:41:59.336" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:41:59.336" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170731 16:42:00.632" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:00.633" starttime="20170731 16:41:59.311"></status>
</kw>
<msg timestamp="20170731 16:42:00.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:00.633" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170731 16:42:00.633" starttime="20170731 16:41:59.293"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:00.634" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170731 16:42:00.634" starttime="20170731 16:42:00.634"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:00.634" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:00.635" starttime="20170731 16:42:00.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.642" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:42:00.641"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:42:00.640"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:42:00.635"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:41:59.285"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:41:59.284"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.642" starttime="20170731 16:41:59.284"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.643" starttime="20170731 16:41:59.283"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.643" starttime="20170731 16:41:59.282"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:42:00.644" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170731 16:42:00.644" starttime="20170731 16:42:00.643"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.645" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170731 16:42:00.645" starttime="20170731 16:42:00.644"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.649" starttime="20170731 16:42:00.648"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.649" starttime="20170731 16:42:00.648"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.650" starttime="20170731 16:42:00.650"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.650" starttime="20170731 16:42:00.649"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.652" starttime="20170731 16:42:00.651"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.652" starttime="20170731 16:42:00.651"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.653" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.653" starttime="20170731 16:42:00.652"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.653" starttime="20170731 16:42:00.652"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.653" starttime="20170731 16:42:00.647"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.654" starttime="20170731 16:42:00.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:00.654" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:00.654" starttime="20170731 16:42:00.654"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:00.697" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:00.697" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170731 16:42:00.744" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:00.744" starttime="20170731 16:42:00.673"></status>
</kw>
<msg timestamp="20170731 16:42:00.744" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:00.744" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-115"\nVERSION_ID="v1.99.8-115-g3c9e041"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170731 16:42:00.744" starttime="20170731 16:42:00.655"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:00.745" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-115"
VERSION_ID="v1.99.8-115-g3c9e041"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170731 16:42:00.745" starttime="20170731 16:42:00.744"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:00.745" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:00.745" starttime="20170731 16:42:00.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.752" starttime="20170731 16:42:00.752"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.752" starttime="20170731 16:42:00.751"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.752" starttime="20170731 16:42:00.746"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.753" starttime="20170731 16:42:00.645"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.753" starttime="20170731 16:42:00.645"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.753" starttime="20170731 16:42:00.645"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.753" starttime="20170731 16:42:00.643"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.753" starttime="20170731 16:42:00.643"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:42:00.754" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170731 16:42:00.754" starttime="20170731 16:42:00.754"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.755" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170731 16:42:00.755" starttime="20170731 16:42:00.754"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.758" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.758" starttime="20170731 16:42:00.758"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.758" starttime="20170731 16:42:00.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.759" starttime="20170731 16:42:00.759"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.760" starttime="20170731 16:42:00.758"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.761" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.761" starttime="20170731 16:42:00.760"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.761" starttime="20170731 16:42:00.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.762" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.762" starttime="20170731 16:42:00.762"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.762" starttime="20170731 16:42:00.761"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.763" starttime="20170731 16:42:00.757"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.763" starttime="20170731 16:42:00.756"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:00.763" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:00.764" starttime="20170731 16:42:00.763"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:00.809" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:00.810" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170731 16:42:00.867" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:00.867" starttime="20170731 16:42:00.784"></status>
</kw>
<msg timestamp="20170731 16:42:00.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:00.867" level="INFO">${ret_values} = (u' 16:42:04 up 9 min,  load average: 0.56, 1.25, 0.93', u'', 0)</msg>
<status status="PASS" endtime="20170731 16:42:00.867" starttime="20170731 16:42:00.764"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:00.868" level="INFO">${stdout} =  16:42:04 up 9 min,  load average: 0.56, 1.25, 0.93</msg>
<status status="PASS" endtime="20170731 16:42:00.868" starttime="20170731 16:42:00.868"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:00.869" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:00.869" starttime="20170731 16:42:00.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.876" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.877" starttime="20170731 16:42:00.876"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.877" starttime="20170731 16:42:00.874"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.877" starttime="20170731 16:42:00.869"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.877" starttime="20170731 16:42:00.755"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.877" starttime="20170731 16:42:00.755"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.880" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.880" starttime="20170731 16:42:00.880"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.880" starttime="20170731 16:42:00.879"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.882" starttime="20170731 16:42:00.881"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.882" starttime="20170731 16:42:00.880"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.883" starttime="20170731 16:42:00.883"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.883" starttime="20170731 16:42:00.882"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.884" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.885" starttime="20170731 16:42:00.884"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.885" starttime="20170731 16:42:00.883"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.885" starttime="20170731 16:42:00.878"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.885" starttime="20170731 16:42:00.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:00.886" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:00.886" starttime="20170731 16:42:00.885"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:00.930" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:00.930" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170731 16:42:00.987" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:00.987" starttime="20170731 16:42:00.905"></status>
</kw>
<msg timestamp="20170731 16:42:00.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:00.987" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170731 16:42:00.987" starttime="20170731 16:42:00.886"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:00.988" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170731 16:42:00.988" starttime="20170731 16:42:00.988"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:00.988" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:00.988" starttime="20170731 16:42:00.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.995" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.995" starttime="20170731 16:42:00.995"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.995" starttime="20170731 16:42:00.994"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.996" starttime="20170731 16:42:00.989"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.996" starttime="20170731 16:42:00.877"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.996" starttime="20170731 16:42:00.877"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:00.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:00.999" starttime="20170731 16:42:00.998"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:00.999" starttime="20170731 16:42:00.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.000" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:01.000" starttime="20170731 16:42:01.000"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.000" starttime="20170731 16:42:00.999"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.001" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:01.001" starttime="20170731 16:42:01.001"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.002" starttime="20170731 16:42:01.000"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.003" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:01.003" starttime="20170731 16:42:01.002"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.003" starttime="20170731 16:42:01.002"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.003" starttime="20170731 16:42:00.997"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.003" starttime="20170731 16:42:00.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:01.004" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:01.004" starttime="20170731 16:42:01.003"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:01.046" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:01.047" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170731 16:42:01.106" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:01.106" starttime="20170731 16:42:01.023"></status>
</kw>
<msg timestamp="20170731 16:42:01.106" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:01.106" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 16:18:56 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170731 16:42:01.106" starttime="20170731 16:42:01.004"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:01.107" level="INFO">${stdout} = Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 16:18:56 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170731 16:42:01.107" starttime="20170731 16:42:01.107"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:01.108" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:01.108" starttime="20170731 16:42:01.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:01.115"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:01.114"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:01.108"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:00.996"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:00.996"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:00.755"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.115" starttime="20170731 16:42:00.753"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:42:00.753"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:41:59.282"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:41:59.281"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:41:59.266"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:41:59.259"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.116" starttime="20170731 16:41:59.259"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.118" starttime="20170731 16:42:01.118"></status>
</kw>
<msg timestamp="20170731 16:42:01.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:01.118" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:42:01.118" starttime="20170731 16:42:01.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.119" starttime="20170731 16:42:01.118"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:42:01.134" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170731 16:42:01.134" starttime="20170731 16:42:01.134"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:42:01.135" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170731 16:42:01.135" starttime="20170731 16:42:01.135"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:01.136" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_elog.txt</msg>
<status status="PASS" endtime="20170731 16:42:01.136" starttime="20170731 16:42:01.136"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:01.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:01.140" starttime="20170731 16:42:01.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:01.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:01.140" starttime="20170731 16:42:01.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:01.141" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:01.141" starttime="20170731 16:42:01.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:01.142" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:01.142" starttime="20170731 16:42:01.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:01.329" starttime="20170731 16:42:01.142"></status>
</kw>
<msg timestamp="20170731 16:42:01.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:01.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.329" starttime="20170731 16:42:01.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.330" starttime="20170731 16:42:01.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.330" starttime="20170731 16:42:01.330"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.330" starttime="20170731 16:42:01.138"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.330" starttime="20170731 16:42:01.138"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.331" starttime="20170731 16:42:01.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:01.331" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170731 16:42:01.331" starttime="20170731 16:42:01.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.332" starttime="20170731 16:42:01.332"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:01.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:01.375" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.375" starttime="20170731 16:42:01.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.376" starttime="20170731 16:42:01.375"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:01.376" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:01.376" starttime="20170731 16:42:01.376"></status>
</kw>
<msg timestamp="20170731 16:42:01.376" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.376" starttime="20170731 16:42:01.136"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:42:01.378" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:42:01.378" starttime="20170731 16:42:01.377"></status>
</kw>
<msg timestamp="20170731 16:42:01.378" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:42:01.378" starttime="20170731 16:42:01.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:42:01.380" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:42:01.380" starttime="20170731 16:42:01.380"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.380" starttime="20170731 16:42:01.379"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.380" starttime="20170731 16:42:01.136"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:01.381" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170731 16:42:01.381" starttime="20170731 16:42:01.381"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:01.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:01.385" starttime="20170731 16:42:01.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:01.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:01.385" starttime="20170731 16:42:01.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:01.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:01.386" starttime="20170731 16:42:01.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:01.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:01.387" starttime="20170731 16:42:01.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:01.588" starttime="20170731 16:42:01.388"></status>
</kw>
<msg timestamp="20170731 16:42:01.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:01.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.588" starttime="20170731 16:42:01.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.589" starttime="20170731 16:42:01.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.589" starttime="20170731 16:42:01.589"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.590" starttime="20170731 16:42:01.383"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.590" starttime="20170731 16:42:01.383"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.590" starttime="20170731 16:42:01.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:01.590" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170731 16:42:01.590" starttime="20170731 16:42:01.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.591" starttime="20170731 16:42:01.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:01.762" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:01.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.762" starttime="20170731 16:42:01.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.763" starttime="20170731 16:42:01.762"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:01.763" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:01.763" starttime="20170731 16:42:01.763"></status>
</kw>
<msg timestamp="20170731 16:42:01.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.763" starttime="20170731 16:42:01.381"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.765" starttime="20170731 16:42:01.764"></status>
</kw>
<msg timestamp="20170731 16:42:01.765" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170731 16:42:01.765" starttime="20170731 16:42:01.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.765" starttime="20170731 16:42:01.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 16:42:01.766" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:42:01.766" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 16:42:01.766" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170731 16:42:01.766" starttime="20170731 16:42:01.766"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.768" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:01.768" starttime="20170731 16:42:01.767"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.768" starttime="20170731 16:42:01.766"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.768" starttime="20170731 16:42:01.380"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:01.769" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170731 16:42:01.769" starttime="20170731 16:42:01.768"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:01.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:01.772" starttime="20170731 16:42:01.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:01.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:01.773" starttime="20170731 16:42:01.772"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:01.773" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:01.773" starttime="20170731 16:42:01.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:01.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:01.774" starttime="20170731 16:42:01.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.959" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:01.959" starttime="20170731 16:42:01.775"></status>
</kw>
<msg timestamp="20170731 16:42:01.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:01.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.959" starttime="20170731 16:42:01.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.960" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.960" starttime="20170731 16:42:01.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:01.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:01.961" starttime="20170731 16:42:01.960"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.961" starttime="20170731 16:42:01.771"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.961" starttime="20170731 16:42:01.770"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:01.961" starttime="20170731 16:42:01.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:01.962" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170731 16:42:01.962" starttime="20170731 16:42:01.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:01.962" starttime="20170731 16:42:01.962"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:02.132" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:02.132" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.132" starttime="20170731 16:42:01.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.133" starttime="20170731 16:42:02.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:02.134" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:02.134" starttime="20170731 16:42:02.134"></status>
</kw>
<msg timestamp="20170731 16:42:02.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.134" starttime="20170731 16:42:01.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.135" starttime="20170731 16:42:02.135"></status>
</kw>
<msg timestamp="20170731 16:42:02.135" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170731 16:42:02.135" starttime="20170731 16:42:02.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.136" starttime="20170731 16:42:02.136"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 16:42:02.137" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 16:42:02.137" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 16:42:02.137" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170731 16:42:02.137" starttime="20170731 16:42:02.136"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.138" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:02.138" starttime="20170731 16:42:02.138"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.139" starttime="20170731 16:42:02.137"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.139" starttime="20170731 16:42:01.768"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:02.139" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_led.txt</msg>
<status status="PASS" endtime="20170731 16:42:02.139" starttime="20170731 16:42:02.139"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:02.142" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:02.143" starttime="20170731 16:42:02.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:02.143" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:02.144" starttime="20170731 16:42:02.143"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:02.144" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:02.144" starttime="20170731 16:42:02.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:02.145" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:02.145" starttime="20170731 16:42:02.144"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:02.331" starttime="20170731 16:42:02.146"></status>
</kw>
<msg timestamp="20170731 16:42:02.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:02.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.331" starttime="20170731 16:42:02.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.332" starttime="20170731 16:42:02.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.333" starttime="20170731 16:42:02.333"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.333" starttime="20170731 16:42:02.141"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.333" starttime="20170731 16:42:02.141"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.333" starttime="20170731 16:42:02.140"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:02.334" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170731 16:42:02.334" starttime="20170731 16:42:02.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.335" starttime="20170731 16:42:02.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:02.377" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:02.377" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.377" starttime="20170731 16:42:02.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.378" starttime="20170731 16:42:02.377"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:02.378" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:02.378" starttime="20170731 16:42:02.378"></status>
</kw>
<msg timestamp="20170731 16:42:02.379" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.379" starttime="20170731 16:42:02.140"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:42:02.380" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:42:02.380" starttime="20170731 16:42:02.379"></status>
</kw>
<msg timestamp="20170731 16:42:02.380" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:42:02.380" starttime="20170731 16:42:02.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:42:02.381" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:42:02.381" starttime="20170731 16:42:02.381"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.381" starttime="20170731 16:42:02.380"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.381" starttime="20170731 16:42:02.139"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:02.382" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170731 16:42:02.382" starttime="20170731 16:42:02.382"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:02.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:02.386" starttime="20170731 16:42:02.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:02.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:02.386" starttime="20170731 16:42:02.386"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:02.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:02.387" starttime="20170731 16:42:02.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:02.388" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:02.388" starttime="20170731 16:42:02.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.602" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:02.602" starttime="20170731 16:42:02.388"></status>
</kw>
<msg timestamp="20170731 16:42:02.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:02.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.603" starttime="20170731 16:42:02.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.603" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.603" starttime="20170731 16:42:02.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.604" starttime="20170731 16:42:02.604"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.604" starttime="20170731 16:42:02.384"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.604" starttime="20170731 16:42:02.384"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.604" starttime="20170731 16:42:02.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:02.605" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170731 16:42:02.605" starttime="20170731 16:42:02.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.606" starttime="20170731 16:42:02.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:02.649" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:02.649" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.649" starttime="20170731 16:42:02.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.649" starttime="20170731 16:42:02.649"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:02.650" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:02.650" starttime="20170731 16:42:02.650"></status>
</kw>
<msg timestamp="20170731 16:42:02.650" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:02.650" starttime="20170731 16:42:02.382"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:02.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:42:02.651" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:42:02.652" starttime="20170731 16:42:02.651"></status>
</kw>
<msg timestamp="20170731 16:42:02.652" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:42:02.652" starttime="20170731 16:42:02.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 16:42:02.653" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:02.653"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:02.652"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:02.381"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.135"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.134"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.134"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.134"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.133"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.653" starttime="20170731 16:42:01.119"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.654" starttime="20170731 16:42:01.116"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:02.654" starttime="20170731 16:42:01.116"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.655" starttime="20170731 16:42:02.655"></status>
</kw>
<msg timestamp="20170731 16:42:02.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:02.656" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:42:02.656" starttime="20170731 16:42:02.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.656" starttime="20170731 16:42:02.656"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 16:42:02.691" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:02.692" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170731 16:42:02.740" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170731 16:42:02.751" level="INFO">${core_files} = None</msg>
<msg timestamp="20170731 16:42:02.751" level="INFO">${stderr} = None</msg>
<msg timestamp="20170731 16:42:02.751" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 16:42:02.751" level="FAIL">#(UTC) 2017/07/31 16:42:02.750389 -    3.516492 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170731 16:42:02.751" starttime="20170731 16:42:02.671"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170731 16:42:02.752" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170731 16:42:02.752" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170731 16:42:02.752" starttime="20170731 16:42:02.752"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:02.763" starttime="20170731 16:42:02.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:03.400" starttime="20170731 16:42:02.764"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.400" starttime="20170731 16:42:02.763"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.400" starttime="20170731 16:42:02.761"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.400" starttime="20170731 16:42:02.753"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170731 16:42:03.401" starttime="20170731 16:42:03.400"></status>
</kw>
<status status="FAIL" endtime="20170731 16:42:03.401" starttime="20170731 16:42:02.671"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.401" starttime="20170731 16:42:02.657"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.401" starttime="20170731 16:42:02.654"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.401" starttime="20170731 16:42:02.654"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:03.403" starttime="20170731 16:42:03.403"></status>
</kw>
<msg timestamp="20170731 16:42:03.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:03.403" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:42:03.403" starttime="20170731 16:42:03.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:03.404" starttime="20170731 16:42:03.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 16:42:03.419" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170731 16:42:03.419" starttime="20170731 16:42:03.419"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 16:42:03.421" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170731 16:42:03.421" starttime="20170731 16:42:03.420"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:03.421" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170731 16:42:03.422" starttime="20170731 16:42:03.421"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:03.423" starttime="20170731 16:42:03.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:03.424" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:03.424" starttime="20170731 16:42:03.423"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:03.470" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:03.470" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170731 16:42:03.971" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:03.971" starttime="20170731 16:42:03.443"></status>
</kw>
<msg timestamp="20170731 16:42:03.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:03.972" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 31 16:41 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 31 16:41 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170731 16:42:03.973" starttime="20170731 16:42:03.424"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:03.974" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 31 16:41 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 31 16:41 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170731 16:42:03.974" starttime="20170731 16:42:03.973"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:03.974" level="INFO">${stderr} = ls: /proc/1569/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170731 16:42:03.974" starttime="20170731 16:42:03.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:03.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:03.982" starttime="20170731 16:42:03.981"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.982" starttime="20170731 16:42:03.980"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.982" starttime="20170731 16:42:03.975"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.983" starttime="20170731 16:42:03.422"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:03.983" starttime="20170731 16:42:03.421"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:03.983" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170731 16:42:03.984" starttime="20170731 16:42:03.983"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:03.985" starttime="20170731 16:42:03.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:03.986" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:03.986" starttime="20170731 16:42:03.985"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:04.029" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:04.029" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170731 16:42:04.086" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:04.086" starttime="20170731 16:42:04.005"></status>
</kw>
<msg timestamp="20170731 16:42:04.086" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:04.086" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170731 16:42:04.086" starttime="20170731 16:42:03.986"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:04.087" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170731 16:42:04.087" starttime="20170731 16:42:04.087"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:04.087" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:04.088" starttime="20170731 16:42:04.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:04.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:04.095" starttime="20170731 16:42:04.094"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.095" starttime="20170731 16:42:04.093"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.095" starttime="20170731 16:42:04.088"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.095" starttime="20170731 16:42:03.984"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.095" starttime="20170731 16:42:03.983"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:04.096" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170731 16:42:04.096" starttime="20170731 16:42:04.095"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:04.097" starttime="20170731 16:42:04.097"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:04.098" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:04.098" starttime="20170731 16:42:04.098"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:04.142" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:04.142" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170731 16:42:04.199" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:04.199" starttime="20170731 16:42:04.118"></status>
</kw>
<msg timestamp="20170731 16:42:04.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:04.199" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          278448 kB\nMemAvailable:     324820 kB\nBuffers:           11256 kB\nCached:            52012 kB\nSwapCached:            0 kB\nActive:           10141...</msg>
<status status="PASS" endtime="20170731 16:42:04.199" starttime="20170731 16:42:04.099"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:04.200" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          278448 kB
MemAvailable:     324820 kB
Buffers:           11256 kB
Cached:            52012 kB
SwapCached:            0 kB
Active:           101416 kB
Inac...</msg>
<status status="PASS" endtime="20170731 16:42:04.200" starttime="20170731 16:42:04.200"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:04.201" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:04.201" starttime="20170731 16:42:04.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:04.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:04.209" starttime="20170731 16:42:04.208"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.209" starttime="20170731 16:42:04.208"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.209" starttime="20170731 16:42:04.201"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.209" starttime="20170731 16:42:04.096"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.209" starttime="20170731 16:42:04.095"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:04.210" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170731 16:42:04.210" starttime="20170731 16:42:04.210"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:04.211" starttime="20170731 16:42:04.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:04.212" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:04.212" starttime="20170731 16:42:04.212"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:04.255" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:04.256" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170731 16:42:04.554" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:04.554" starttime="20170731 16:42:04.231"></status>
</kw>
<msg timestamp="20170731 16:42:04.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:04.554" level="INFO">${ret_values} = (u'Mem: 153820K used, 278448K free, 14572K shrd, 11256K buff, 52012K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.60 1.25 0.93 1/148 1572\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170731 16:42:04.554" starttime="20170731 16:42:04.213"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:04.555" level="INFO">${stdout} = Mem: 153820K used, 278448K free, 14572K shrd, 11256K buff, 52012K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.60 1.25 0.93 1/148 1572
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170731 16:42:04.555" starttime="20170731 16:42:04.555"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:04.556" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:04.556" starttime="20170731 16:42:04.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:04.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:04.563" starttime="20170731 16:42:04.562"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.563" starttime="20170731 16:42:04.562"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.563" starttime="20170731 16:42:04.556"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.563" starttime="20170731 16:42:04.210"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.563" starttime="20170731 16:42:04.209"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:04.564" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170731 16:42:04.564" starttime="20170731 16:42:04.564"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:04.565" starttime="20170731 16:42:04.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:04.566" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:04.566" starttime="20170731 16:42:04.566"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:04.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:04.610" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170731 16:42:04.687" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:04.687" starttime="20170731 16:42:04.585"></status>
</kw>
<msg timestamp="20170731 16:42:04.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:04.687" level="INFO">${ret_values} = (u'[    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc device\n[    2.060000] ipmi-bt-host 1e789140.ibt: Using IRQ 22\n[    2.060000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled\n[    2...</msg>
<status status="PASS" endtime="20170731 16:42:04.687" starttime="20170731 16:42:04.566"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:04.688" level="INFO">${stdout} = [    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc device
[    2.060000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    2.060000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    2.06000...</msg>
<status status="PASS" endtime="20170731 16:42:04.688" starttime="20170731 16:42:04.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:04.689" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:04.689" starttime="20170731 16:42:04.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:04.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:04.696" starttime="20170731 16:42:04.695"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.696" starttime="20170731 16:42:04.695"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.696" starttime="20170731 16:42:04.689"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.696" starttime="20170731 16:42:04.564"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:04.696" starttime="20170731 16:42:04.563"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 16:42:04.697" level="INFO">${logpath} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170731 16:42:04.697" starttime="20170731 16:42:04.697"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:04.698" starttime="20170731 16:42:04.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 16:42:04.699" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170731 16:42:04.699" starttime="20170731 16:42:04.699"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 16:42:04.742" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170731 16:42:04.742" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170731 16:42:06.285" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170731 16:42:06.285" starttime="20170731 16:42:04.718"></status>
</kw>
<msg timestamp="20170731 16:42:06.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:06.288" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-07-31 16:32:52 UTC, end at Mon 2017-07-31 16:42:06 UTC. --\nJul 31 16:32:52 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 31 16:32:52 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170731 16:42:06.288" starttime="20170731 16:42:04.699"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 16:42:06.290" level="INFO">${stdout} = -- Logs begin at Mon 2017-07-31 16:32:52 UTC, end at Mon 2017-07-31 16:42:06 UTC. --
Jul 31 16:32:52 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 31 16:32:52 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170731 16:42:06.290" starttime="20170731 16:42:06.289"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 16:42:06.290" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170731 16:42:06.290" starttime="20170731 16:42:06.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.299" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/20170731164159086360_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:06.298"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:06.296"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:06.291"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:04.697"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:04.696"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:03.421"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:03.420"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:03.420"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:03.419"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.299" starttime="20170731 16:42:03.419"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.300" starttime="20170731 16:42:03.404"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.300" starttime="20170731 16:42:03.401"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.300" starttime="20170731 16:42:03.401"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.302" starttime="20170731 16:42:06.301"></status>
</kw>
<msg timestamp="20170731 16:42:06.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:06.302" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:42:06.302" starttime="20170731 16:42:06.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.302" starttime="20170731 16:42:06.302"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 16:42:06.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170731 16:42:06.321" starttime="20170731 16:42:06.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 16:42:06.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170731 16:42:06.322" starttime="20170731 16:42:06.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 16:42:06.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170731 16:42:06.322" starttime="20170731 16:42:06.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 16:42:06.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170731 16:42:06.323" starttime="20170731 16:42:06.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170731 16:42:06.517" starttime="20170731 16:42:06.324"></status>
</kw>
<msg timestamp="20170731 16:42:06.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:06.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:06.517" starttime="20170731 16:42:06.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:06.518" starttime="20170731 16:42:06.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170731 16:42:06.518" starttime="20170731 16:42:06.518"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.518" starttime="20170731 16:42:06.319"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.519" starttime="20170731 16:42:06.319"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.519" starttime="20170731 16:42:06.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 16:42:06.519" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170731 16:42:06.519" starttime="20170731 16:42:06.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.520" starttime="20170731 16:42:06.520"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 16:42:06.575" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170731 16:42:06.575" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:06.575" starttime="20170731 16:42:06.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.576" starttime="20170731 16:42:06.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 16:42:06.576" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170731 16:42:06.576" starttime="20170731 16:42:06.576"></status>
</kw>
<msg timestamp="20170731 16:42:06.576" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170731 16:42:06.577" starttime="20170731 16:42:06.318"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 16:42:06.578" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170731 16:42:06.579" starttime="20170731 16:42:06.578"></status>
</kw>
<msg timestamp="20170731 16:42:06.579" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170731 16:42:06.579" starttime="20170731 16:42:06.577"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170731 16:42:06.580" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:42:06.580" starttime="20170731 16:42:06.579"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.580" starttime="20170731 16:42:06.317"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.580" starttime="20170731 16:42:06.303"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.580" starttime="20170731 16:42:06.300"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.580" starttime="20170731 16:42:06.300"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.583" starttime="20170731 16:42:06.583"></status>
</kw>
<msg timestamp="20170731 16:42:06.583" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 16:42:06.583" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170731 16:42:06.583" starttime="20170731 16:42:06.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.584" starttime="20170731 16:42:06.584"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170731 16:42:06.600" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170731 16:42:06.600" starttime="20170731 16:42:06.600"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.600" starttime="20170731 16:42:06.599"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:42:06.585"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:42:06.581"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:42:06.580"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:41:59.259"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:41:59.256"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:41:59.256"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.601" starttime="20170731 16:41:59.256"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170731 16:42:06.607" starttime="20170731 16:42:06.607"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.608" starttime="20170731 16:42:06.601"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.608" starttime="20170731 16:41:59.255"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.608" starttime="20170731 16:41:56.048"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.608" starttime="20170731 16:41:56.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.609" starttime="20170731 16:42:06.609"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170731 16:42:06.610" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170731 16:42:06.610" starttime="20170731 16:42:06.610"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170731 16:42:06.610" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170731164159086360_TestBiosUpdate/20170731164159086360_HostBIOSPowerOn/</msg>
<status status="PASS" endtime="20170731 16:42:06.611" starttime="20170731 16:42:06.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.611" starttime="20170731 16:42:06.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.612" starttime="20170731 16:42:06.612"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.613" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170731 16:42:06.613" starttime="20170731 16:42:06.613"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.614" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170731 16:42:06.614" starttime="20170731 16:42:06.614"></status>
</kw>
<msg timestamp="20170731 16:42:06.614" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170731 16:42:06.614" starttime="20170731 16:42:06.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.615" starttime="20170731 16:42:06.615"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170731 16:42:06.616" starttime="20170731 16:42:06.615"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:42:06.617" level="INFO">${cur_time} = 2017-07-31 16:42:06:616982</msg>
<status status="PASS" endtime="20170731 16:42:06.617" starttime="20170731 16:42:06.617"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 16:42:06.618" level="INFO">${cur_time} = 20170731164206616982</msg>
<status status="PASS" endtime="20170731 16:42:06.618" starttime="20170731 16:42:06.617"></status>
</kw>
<msg timestamp="20170731 16:42:06.618" level="INFO">${cur_time} = 20170731164206616982</msg>
<status status="PASS" endtime="20170731 16:42:06.618" starttime="20170731 16:42:06.616"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170731 16:42:06.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170731 16:42:06.619" starttime="20170731 16:42:06.618"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.619" starttime="20170731 16:42:06.609"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.619" starttime="20170731 16:41:55.768"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.619" starttime="20170731 16:41:55.760"></status>
</kw>
<status status="PASS" endtime="20170731 16:42:06.619" starttime="20170731 16:41:55.757"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170731 16:42:06.620" critical="yes" starttime="20170731 16:38:29.621">#(UTC) 2017/07/31 16:41:55.640076 -    1.522381 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170731 16:42:06.621" starttime="20170731 16:34:51.375"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="1" pass="0">Host_BIOS_Power_On</stat>
<stat fail="0" pass="1">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
