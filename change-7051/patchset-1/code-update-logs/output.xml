<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171003 17:48:38.924" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:39.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:39.955" starttime="20171003 17:48:39.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:39.956" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:39.956" starttime="20171003 17:48:39.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:39.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:39.957" starttime="20171003 17:48:39.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:39.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:39.957" starttime="20171003 17:48:39.957"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:40.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:40.146" starttime="20171003 17:48:39.958"></status>
</kw>
<msg timestamp="20171003 17:48:40.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:40.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:40.146" starttime="20171003 17:48:39.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:40.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:40.147" starttime="20171003 17:48:40.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:40.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:40.148" starttime="20171003 17:48:40.147"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:40.148" starttime="20171003 17:48:39.953"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:40.148" starttime="20171003 17:48:39.952"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:40.148" starttime="20171003 17:48:39.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:40.148" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171003 17:48:40.149" starttime="20171003 17:48:40.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:40.149" starttime="20171003 17:48:40.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:48:40.221" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171003 17:48:40.221" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:40.221" starttime="20171003 17:48:40.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:40.222" starttime="20171003 17:48:40.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:48:40.223" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:48:40.223" starttime="20171003 17:48:40.223"></status>
</kw>
<msg timestamp="20171003 17:48:40.223" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:40.223" starttime="20171003 17:48:39.951"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 17:48:40.224" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:48:40.224" starttime="20171003 17:48:40.223"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:40.224" starttime="20171003 17:48:39.951"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171003 17:48:40.225" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171003 17:48:40.225" starttime="20171003 17:48:40.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:48:40.226" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171003 17:48:40.226" starttime="20171003 17:48:40.226"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:48:40.229" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171003 17:48:40.229" starttime="20171003 17:48:40.228"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:40.238" starttime="20171003 17:48:40.238"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171003 17:48:40.240" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171003 17:48:40.240" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171003 17:48:40.241" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 17:48:40.351" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:48:40.351" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171003 17:48:41.141" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171003 17:48:41.142" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171003 17:48:41.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171003 17:48:41.226" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171003 17:48:41.226" level="INFO">${stderr} = </msg>
<msg timestamp="20171003 17:48:41.226" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171003 17:48:41.226" starttime="20171003 17:48:40.327"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.227" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171003 17:48:41.227" starttime="20171003 17:48:41.226"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.227" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171003 17:48:41.227" starttime="20171003 17:48:41.227"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.228" starttime="20171003 17:48:40.326"></status>
</kw>
<msg timestamp="20171003 17:48:41.228" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171003 17:48:41.443" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171003 17:48:41.455" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:41.483" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:41.484" starttime="20171003 17:48:41.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:41.484" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:41.484" starttime="20171003 17:48:41.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:41.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:41.485" starttime="20171003 17:48:41.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:41.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:41.486" starttime="20171003 17:48:41.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:41.654" starttime="20171003 17:48:41.487"></status>
</kw>
<msg timestamp="20171003 17:48:41.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:41.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.655" starttime="20171003 17:48:41.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.655" starttime="20171003 17:48:41.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.656" starttime="20171003 17:48:41.656"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.656" starttime="20171003 17:48:41.482"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.656" starttime="20171003 17:48:41.481"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.657" starttime="20171003 17:48:41.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:41.657" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 17:48:41.657" starttime="20171003 17:48:41.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:41.660" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:41.660" starttime="20171003 17:48:41.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:41.661" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:41.661" starttime="20171003 17:48:41.660"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.661" starttime="20171003 17:48:41.660"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.661" starttime="20171003 17:48:41.658"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.661" starttime="20171003 17:48:41.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:48:41.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171003 17:48:41.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.753" starttime="20171003 17:48:41.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:41.755" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:41.755" starttime="20171003 17:48:41.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:41.756" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:41.756" starttime="20171003 17:48:41.756"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.757" starttime="20171003 17:48:41.755"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.757" starttime="20171003 17:48:41.754"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.757" starttime="20171003 17:48:41.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:48:41.758" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:48:41.758" starttime="20171003 17:48:41.757"></status>
</kw>
<msg timestamp="20171003 17:48:41.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.758" starttime="20171003 17:48:41.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.759" starttime="20171003 17:48:41.758"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 17:48:41.760" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:48:41.760" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 17:48:41.760" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 17:48:41.760" starttime="20171003 17:48:41.759"></status>
</kw>
<msg timestamp="20171003 17:48:41.760" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 17:48:41.760" starttime="20171003 17:48:41.478"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.760" starttime="20171003 17:48:41.478"></status>
</kw>
<msg timestamp="20171003 17:48:41.779" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171003 17:48:41.780" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171003 17:48:41.780" starttime="20171003 17:48:41.470"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:41.781" starttime="20171003 17:48:41.781"></status>
</kw>
<msg timestamp="20171003 17:48:41.781" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 17:48:41.781" starttime="20171003 17:48:41.780"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171003 17:48:41.798" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 17:48:41.798" starttime="20171003 17:48:41.797"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:41.799" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171003 17:48:41.799" starttime="20171003 17:48:41.799"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:41.802" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:41.803" starttime="20171003 17:48:41.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:41.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:41.804" starttime="20171003 17:48:41.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:41.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:41.805" starttime="20171003 17:48:41.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:41.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:41.806" starttime="20171003 17:48:41.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.993" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:41.993" starttime="20171003 17:48:41.807"></status>
</kw>
<msg timestamp="20171003 17:48:41.993" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:41.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.994" starttime="20171003 17:48:41.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.994" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.994" starttime="20171003 17:48:41.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:41.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:41.995" starttime="20171003 17:48:41.995"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.995" starttime="20171003 17:48:41.801"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.995" starttime="20171003 17:48:41.801"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:41.996" starttime="20171003 17:48:41.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:41.996" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 17:48:41.996" starttime="20171003 17:48:41.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:41.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:41.997" starttime="20171003 17:48:41.997"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:41.997" starttime="20171003 17:48:41.997"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:41.999" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171003 17:48:41.999" starttime="20171003 17:48:41.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:42.000" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171003 17:48:42.000" starttime="20171003 17:48:42.000"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.001" starttime="20171003 17:48:41.999"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.001" starttime="20171003 17:48:41.998"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:48:42.147" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171003 17:48:42.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.147" starttime="20171003 17:48:42.001"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:42.149" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:42.149" starttime="20171003 17:48:42.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:42.150" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:42.150" starttime="20171003 17:48:42.150"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.150" starttime="20171003 17:48:42.149"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.151" starttime="20171003 17:48:42.148"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:48:42.151" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:48:42.151" starttime="20171003 17:48:42.151"></status>
</kw>
<msg timestamp="20171003 17:48:42.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.152" starttime="20171003 17:48:41.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.152" starttime="20171003 17:48:42.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171003 17:48:42.153" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:48:42.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 17:48:42.153" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171003 17:48:42.153" starttime="20171003 17:48:42.153"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.153" starttime="20171003 17:48:41.798"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.154" starttime="20171003 17:48:41.796"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.154" starttime="20171003 17:48:41.782"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171003 17:48:42.155" starttime="20171003 17:48:42.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:48:42.155" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171003 17:48:42.155" starttime="20171003 17:48:42.155"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:42.160" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:42.161" starttime="20171003 17:48:42.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:42.161" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:42.161" starttime="20171003 17:48:42.161"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:42.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:42.162" starttime="20171003 17:48:42.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:42.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:42.163" starttime="20171003 17:48:42.162"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:42.342" starttime="20171003 17:48:42.163"></status>
</kw>
<msg timestamp="20171003 17:48:42.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:42.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.342" starttime="20171003 17:48:42.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.343" starttime="20171003 17:48:42.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.344" starttime="20171003 17:48:42.343"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.344" starttime="20171003 17:48:42.159"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.344" starttime="20171003 17:48:42.159"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.344" starttime="20171003 17:48:42.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:42.345" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171003 17:48:42.345" starttime="20171003 17:48:42.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:42.347" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:42.347" starttime="20171003 17:48:42.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:42.348" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:42.349" starttime="20171003 17:48:42.348"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.349" starttime="20171003 17:48:42.347"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.349" starttime="20171003 17:48:42.346"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.349" starttime="20171003 17:48:42.345"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:48:42.449" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171003 17:48:42.449" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.449" starttime="20171003 17:48:42.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:42.451" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:42.451" starttime="20171003 17:48:42.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:42.452" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:42.452" starttime="20171003 17:48:42.452"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.453" starttime="20171003 17:48:42.451"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.453" starttime="20171003 17:48:42.450"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.453" starttime="20171003 17:48:42.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:48:42.454" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:48:42.454" starttime="20171003 17:48:42.453"></status>
</kw>
<msg timestamp="20171003 17:48:42.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.454" starttime="20171003 17:48:42.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.455" starttime="20171003 17:48:42.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 17:48:42.455" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:48:42.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 17:48:42.456" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171003 17:48:42.456" starttime="20171003 17:48:42.455"></status>
</kw>
<msg timestamp="20171003 17:48:42.456" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 17:48:42.456" starttime="20171003 17:48:42.157"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.456" starttime="20171003 17:48:42.156"></status>
</kw>
<msg timestamp="20171003 17:48:42.456" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 17:48:42.456" starttime="20171003 17:48:42.156"></status>
</kw>
<msg timestamp="20171003 17:48:42.456" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171003 17:48:42.457" starttime="20171003 17:48:42.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.457" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.457" starttime="20171003 17:48:42.457"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.457" starttime="20171003 17:48:41.469"></status>
</kw>
<msg timestamp="20171003 17:48:42.499" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 17:48:42.541" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 17:48:42.547" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171003 17:48:42.547" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:42.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:42.589" starttime="20171003 17:48:42.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:42.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:42.590" starttime="20171003 17:48:42.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:42.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:42.590" starttime="20171003 17:48:42.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:42.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:42.591" starttime="20171003 17:48:42.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.769" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:42.769" starttime="20171003 17:48:42.592"></status>
</kw>
<msg timestamp="20171003 17:48:42.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:42.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.769" starttime="20171003 17:48:42.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.770" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.770" starttime="20171003 17:48:42.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:42.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:42.771" starttime="20171003 17:48:42.770"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.771" starttime="20171003 17:48:42.585"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.771" starttime="20171003 17:48:42.585"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.771" starttime="20171003 17:48:42.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:42.772" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171003 17:48:42.772" starttime="20171003 17:48:42.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:42.774" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:42.774" starttime="20171003 17:48:42.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:42.775" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171003 17:48:42.775" starttime="20171003 17:48:42.775"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.776" starttime="20171003 17:48:42.774"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.776" starttime="20171003 17:48:42.773"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:42.776" starttime="20171003 17:48:42.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:48:43.015" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:48:43.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:43.015" starttime="20171003 17:48:42.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171003 17:48:43.017" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171003 17:48:43.018" starttime="20171003 17:48:43.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171003 17:48:43.018" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171003 17:48:43.019" starttime="20171003 17:48:43.018"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.019" starttime="20171003 17:48:43.018"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.019" starttime="20171003 17:48:43.016"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.019" starttime="20171003 17:48:43.015"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:48:43.020" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:48:43.021" starttime="20171003 17:48:43.020"></status>
</kw>
<msg timestamp="20171003 17:48:43.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:43.021" starttime="20171003 17:48:42.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:43.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:43.022" starttime="20171003 17:48:43.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171003 17:48:43.022" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:48:43.022" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171003 17:48:43.023" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171003 17:48:43.023" starttime="20171003 17:48:43.022"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.023" starttime="20171003 17:48:42.581"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.085" starttime="20171003 17:48:40.239"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171003 17:48:43.090" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171003 17:48:43.101" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171003 17:48:43.101" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171003 17:48:43.102" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171003 17:48:43.102" starttime="20171003 17:48:43.085"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.102" starttime="20171003 17:48:40.237"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.102" starttime="20171003 17:48:40.229"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.103" starttime="20171003 17:48:40.227"></status>
</kw>
<msg timestamp="20171003 17:48:43.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:43.103" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:48:43.104" starttime="20171003 17:48:40.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171003 17:48:43.105" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:48:43.105" starttime="20171003 17:48:43.105"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.105" starttime="20171003 17:48:43.104"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.105" starttime="20171003 17:48:40.225"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.105" starttime="20171003 17:48:40.224"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:43.105" starttime="20171003 17:48:39.950"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171003 17:48:43.107" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171003 17:48:43.107" starttime="20171003 17:48:43.106"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171003 17:48:43.126" level="INFO">${image_version} = v1.99.10-90-g2d43271</msg>
<status status="PASS" endtime="20171003 17:48:43.126" starttime="20171003 17:48:43.107"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171003 17:48:43.126" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171003 17:48:56.090" level="INFO">${image_data} = image-u-boot0000644000175200017530000113170013161245706013167 0...</msg>
<status status="PASS" endtime="20171003 17:48:56.091" starttime="20171003 17:48:43.126"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:48:56.095" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:48:56.096" starttime="20171003 17:48:56.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:56.097" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:48:56.097" starttime="20171003 17:48:56.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:48:56.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:48:56.098" starttime="20171003 17:48:56.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:48:56.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:48:56.099" starttime="20171003 17:48:56.098"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:48:56.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:48:56.301" starttime="20171003 17:48:56.099"></status>
</kw>
<msg timestamp="20171003 17:48:56.301" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:48:56.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:48:56.301" starttime="20171003 17:48:56.099"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:48:56.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:56.302" starttime="20171003 17:48:56.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:48:56.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:48:56.303" starttime="20171003 17:48:56.302"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:56.303" starttime="20171003 17:48:56.094"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:56.303" starttime="20171003 17:48:56.093"></status>
</kw>
<status status="PASS" endtime="20171003 17:48:56.303" starttime="20171003 17:48:56.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:48:56.304" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171003 17:48:56.304" starttime="20171003 17:48:56.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:48:56.304" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171003 17:48:56.304" starttime="20171003 17:48:56.304"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:56.305" starttime="20171003 17:48:56.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:48:56.306" starttime="20171003 17:48:56.305"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:00.646" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171003 17:49:00.646" level="INFO">${ret} = &lt;Response [413]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:00.646" starttime="20171003 17:48:56.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:00.647" starttime="20171003 17:49:00.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:00.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 17:49:00.648" level="FAIL">413 != 200</msg>
<status status="FAIL" endtime="20171003 17:49:00.648" starttime="20171003 17:49:00.648"></status>
</kw>
<status status="FAIL" endtime="20171003 17:49:00.648" starttime="20171003 17:48:56.091"></status>
</kw>
<status status="FAIL" endtime="20171003 17:49:00.649" starttime="20171003 17:48:43.106"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171003 17:49:00.662" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171003 17:49:00.662" starttime="20171003 17:49:00.662"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171003 17:49:00.667" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171003 17:49:03.676" level="INFO">${RC} = 0</msg>
<msg timestamp="20171003 17:49:03.676" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.39 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20171003 17:49:03.677" starttime="20171003 17:49:00.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.680" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.39 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.79 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.579 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3005ms
rtt min/avg/max/mdev = 0.579/1.360/1.795/0.476 ms</msg>
<status status="PASS" endtime="20171003 17:49:03.680" starttime="20171003 17:49:03.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:03.681" starttime="20171003 17:49:03.681"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.681" starttime="20171003 17:49:00.661"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 17:49:03.695" level="INFO">${cur_time} = 2017-10-03 17:49:03:694730</msg>
<status status="PASS" endtime="20171003 17:49:03.695" starttime="20171003 17:49:03.694"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 17:49:03.696" level="INFO">${cur_time} = 20171003174903694730</msg>
<status status="PASS" endtime="20171003 17:49:03.696" starttime="20171003 17:49:03.695"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.696" starttime="20171003 17:49:03.694"></status>
</kw>
<msg timestamp="20171003 17:49:03.702" level="INFO">${FFDC_TIME} = 20171003174903694730</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171003 17:49:03.703" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171003 17:49:03.703" starttime="20171003 17:49:03.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171003 17:49:03.704" level="INFO">${suite_name} = 20171003174903694730_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171003 17:49:03.704" starttime="20171003 17:49:03.703"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171003 17:49:03.705" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171003 17:49:03.705" starttime="20171003 17:49:03.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171003 17:49:03.705" level="INFO">${test_name} = 20171003174903694730_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171003 17:49:03.705" starttime="20171003 17:49:03.705"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.705" starttime="20171003 17:49:03.702"></status>
</kw>
<msg timestamp="20171003 17:49:03.706" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171003 17:49:03.706" level="INFO">${FFDC_PREFIX} = 20171003174903694730_</msg>
<msg timestamp="20171003 17:49:03.726" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171003 17:49:03.727" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.727" starttime="20171003 17:49:03.726"></status>
</kw>
<msg timestamp="20171003 17:49:03.733" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.747" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.747" starttime="20171003 17:49:03.747"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.747" starttime="20171003 17:49:03.746"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.748" starttime="20171003 17:49:03.748"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.748" starttime="20171003 17:49:03.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.750" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.750" starttime="20171003 17:49:03.749"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.750" starttime="20171003 17:49:03.749"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.752" starttime="20171003 17:49:03.751"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.752" starttime="20171003 17:49:03.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.753" starttime="20171003 17:49:03.752"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.753" starttime="20171003 17:49:03.752"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.754" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.754" starttime="20171003 17:49:03.754"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.754" starttime="20171003 17:49:03.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.756" starttime="20171003 17:49:03.755"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.756" starttime="20171003 17:49:03.755"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.757" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.757" starttime="20171003 17:49:03.757"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.757" starttime="20171003 17:49:03.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.758" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.758" starttime="20171003 17:49:03.758"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.758" starttime="20171003 17:49:03.757"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.760" starttime="20171003 17:49:03.760"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.760" starttime="20171003 17:49:03.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.761" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.761" starttime="20171003 17:49:03.761"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.762" starttime="20171003 17:49:03.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.763" starttime="20171003 17:49:03.762"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.763" starttime="20171003 17:49:03.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.764" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.764" starttime="20171003 17:49:03.764"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.764" starttime="20171003 17:49:03.763"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 17:49:03.782" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:03.783" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171003 17:49:03.880" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171003 17:49:03.889" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171003 17:49:03.889" level="INFO">${stderr} = </msg>
<msg timestamp="20171003 17:49:03.889" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171003 17:49:03.889" starttime="20171003 17:49:03.765"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.890" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171003 17:49:03.890" starttime="20171003 17:49:03.889"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.890" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171003 17:49:03.890" starttime="20171003 17:49:03.890"></status>
</kw>
<msg timestamp="20171003 17:49:03.890" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171003 17:49:03.890" starttime="20171003 17:49:03.765"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.892" starttime="20171003 17:49:03.891"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.892" starttime="20171003 17:49:03.891"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.892" starttime="20171003 17:49:03.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.893" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.893" starttime="20171003 17:49:03.893"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.893" starttime="20171003 17:49:03.892"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 17:49:03.894" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171003 17:49:03.894" starttime="20171003 17:49:03.894"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.895" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.896" starttime="20171003 17:49:03.895"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.896" starttime="20171003 17:49:03.894"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.897" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.897" starttime="20171003 17:49:03.897"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.897" starttime="20171003 17:49:03.896"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.897" starttime="20171003 17:49:03.894"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.898" starttime="20171003 17:49:03.898"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.899" starttime="20171003 17:49:03.897"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.900" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.900" starttime="20171003 17:49:03.899"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.900" starttime="20171003 17:49:03.899"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.900" starttime="20171003 17:49:03.897"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.901" starttime="20171003 17:49:03.901"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.902" starttime="20171003 17:49:03.900"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.903" starttime="20171003 17:49:03.902"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.903" starttime="20171003 17:49:03.902"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.903" starttime="20171003 17:49:03.900"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.903" starttime="20171003 17:49:03.894"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.904" starttime="20171003 17:49:03.904"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.904" starttime="20171003 17:49:03.903"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.904" starttime="20171003 17:49:03.742"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 17:49:03.910" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171003 17:49:03.910" starttime="20171003 17:49:03.910"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171003 17:49:03.912" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171003 17:49:03.912" starttime="20171003 17:49:03.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:03.913" starttime="20171003 17:49:03.913"></status>
</kw>
<msg timestamp="20171003 17:49:03.913" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171003 17:49:03.913" starttime="20171003 17:49:03.912"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:03.915" starttime="20171003 17:49:03.915"></status>
</kw>
<msg timestamp="20171003 17:49:03.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:03.915" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:03.915" starttime="20171003 17:49:03.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:03.916" starttime="20171003 17:49:03.916"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 17:49:03.930" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171003 17:49:03.930" starttime="20171003 17:49:03.930"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 17:49:03.931" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171003 17:49:03.931" starttime="20171003 17:49:03.931"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.941" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171003 17:49:03.941" starttime="20171003 17:49:03.932"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.944" starttime="20171003 17:49:03.944"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.944" starttime="20171003 17:49:03.943"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.945" starttime="20171003 17:49:03.945"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.946" starttime="20171003 17:49:03.944"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.947" starttime="20171003 17:49:03.946"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.947" starttime="20171003 17:49:03.946"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:03.948" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:03.948" starttime="20171003 17:49:03.948"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.948" starttime="20171003 17:49:03.947"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.948" starttime="20171003 17:49:03.942"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:03.948" starttime="20171003 17:49:03.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:03.949" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:03.949" starttime="20171003 17:49:03.949"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:03.990" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:03.991" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171003 17:49:05.308" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.308" starttime="20171003 17:49:03.967"></status>
</kw>
<msg timestamp="20171003 17:49:05.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.308" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171003 17:49:05.308" starttime="20171003 17:49:03.950"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.309" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171003 17:49:05.309" starttime="20171003 17:49:05.309"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.310" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.310" starttime="20171003 17:49:05.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.318" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:05.317"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:05.316"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:05.310"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:03.941"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:03.941"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:03.941"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:03.931"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.318" starttime="20171003 17:49:03.930"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 17:49:05.319" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171003 17:49:05.319" starttime="20171003 17:49:05.319"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.320" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171003 17:49:05.320" starttime="20171003 17:49:05.320"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.323" starttime="20171003 17:49:05.323"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.324" starttime="20171003 17:49:05.322"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.325" starttime="20171003 17:49:05.325"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.325" starttime="20171003 17:49:05.324"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.326" starttime="20171003 17:49:05.326"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.326" starttime="20171003 17:49:05.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.328" starttime="20171003 17:49:05.327"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.328" starttime="20171003 17:49:05.327"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.328" starttime="20171003 17:49:05.322"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.328" starttime="20171003 17:49:05.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:05.329" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:05.329" starttime="20171003 17:49:05.328"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:05.370" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:05.370" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171003 17:49:05.478" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.478" starttime="20171003 17:49:05.347"></status>
</kw>
<msg timestamp="20171003 17:49:05.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.478" level="INFO">${ret_values} = (u'20171003162339', u'', 0)</msg>
<status status="PASS" endtime="20171003 17:49:05.478" starttime="20171003 17:49:05.329"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.479" level="INFO">${stdout} = 20171003162339</msg>
<status status="PASS" endtime="20171003 17:49:05.479" starttime="20171003 17:49:05.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.479" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.479" starttime="20171003 17:49:05.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.488" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.488" starttime="20171003 17:49:05.487"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.488" starttime="20171003 17:49:05.486"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.488" starttime="20171003 17:49:05.480"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.488" starttime="20171003 17:49:05.321"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.488" starttime="20171003 17:49:05.320"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.491" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.491" starttime="20171003 17:49:05.491"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.491" starttime="20171003 17:49:05.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.493" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.493" starttime="20171003 17:49:05.492"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.493" starttime="20171003 17:49:05.492"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.494" starttime="20171003 17:49:05.494"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.494" starttime="20171003 17:49:05.493"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.495" starttime="20171003 17:49:05.495"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.496" starttime="20171003 17:49:05.494"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.496" starttime="20171003 17:49:05.490"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.496" starttime="20171003 17:49:05.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:05.496" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:05.497" starttime="20171003 17:49:05.496"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:05.538" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:05.538" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171003 17:49:05.595" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.595" starttime="20171003 17:49:05.514"></status>
</kw>
<msg timestamp="20171003 17:49:05.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.595" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-34"\nVERSION_ID="v1.99.10-34-g4e109d4"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20171003 17:49:05.595" starttime="20171003 17:49:05.497"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.596" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-34"
VERSION_ID="v1.99.10-34-g4e109d4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20171003 17:49:05.596" starttime="20171003 17:49:05.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.596" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.596" starttime="20171003 17:49:05.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.604"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.603"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.597"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.488"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.488"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.320"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.319"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.605" starttime="20171003 17:49:05.318"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 17:49:05.606" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171003 17:49:05.606" starttime="20171003 17:49:05.606"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.607" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171003 17:49:05.607" starttime="20171003 17:49:05.607"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.611" starttime="20171003 17:49:05.610"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.611" starttime="20171003 17:49:05.610"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.612" starttime="20171003 17:49:05.612"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.612" starttime="20171003 17:49:05.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.614" starttime="20171003 17:49:05.613"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.614" starttime="20171003 17:49:05.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.615" starttime="20171003 17:49:05.614"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.615" starttime="20171003 17:49:05.614"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.615" starttime="20171003 17:49:05.609"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.615" starttime="20171003 17:49:05.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:05.616" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:05.616" starttime="20171003 17:49:05.615"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:05.657" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:05.658" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171003 17:49:05.704" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.704" starttime="20171003 17:49:05.634"></status>
</kw>
<msg timestamp="20171003 17:49:05.704" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.704" level="INFO">${ret_values} = (u' 17:49:20 up  1:13,  load average: 0.26, 0.25, 0.27', u'', 0)</msg>
<status status="PASS" endtime="20171003 17:49:05.704" starttime="20171003 17:49:05.616"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.705" level="INFO">${stdout} =  17:49:20 up  1:13,  load average: 0.26, 0.25, 0.27</msg>
<status status="PASS" endtime="20171003 17:49:05.705" starttime="20171003 17:49:05.705"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.706" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.706" starttime="20171003 17:49:05.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.713" starttime="20171003 17:49:05.713"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.714" starttime="20171003 17:49:05.712"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.714" starttime="20171003 17:49:05.706"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.714" starttime="20171003 17:49:05.608"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.714" starttime="20171003 17:49:05.607"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.717" starttime="20171003 17:49:05.717"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.717" starttime="20171003 17:49:05.716"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.719" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.719" starttime="20171003 17:49:05.718"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.719" starttime="20171003 17:49:05.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.720" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.720" starttime="20171003 17:49:05.720"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.720" starttime="20171003 17:49:05.719"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.721" starttime="20171003 17:49:05.721"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.721" starttime="20171003 17:49:05.720"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.722" starttime="20171003 17:49:05.715"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.722" starttime="20171003 17:49:05.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:05.722" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:05.722" starttime="20171003 17:49:05.722"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:05.763" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:05.764" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171003 17:49:05.825" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.825" starttime="20171003 17:49:05.740"></status>
</kw>
<msg timestamp="20171003 17:49:05.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.826" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.5M     14.5M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171003 17:49:05.826" starttime="20171003 17:49:05.723"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.826" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.5M     14.5M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171003 17:49:05.826" starttime="20171003 17:49:05.826"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.827" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.827" starttime="20171003 17:49:05.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.835" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.835" starttime="20171003 17:49:05.834"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.835" starttime="20171003 17:49:05.833"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.835" starttime="20171003 17:49:05.827"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.835" starttime="20171003 17:49:05.714"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.835" starttime="20171003 17:49:05.714"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.838" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.838" starttime="20171003 17:49:05.838"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.838" starttime="20171003 17:49:05.837"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.840" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.840" starttime="20171003 17:49:05.839"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.840" starttime="20171003 17:49:05.838"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.841" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.841" starttime="20171003 17:49:05.841"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.842" starttime="20171003 17:49:05.840"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.843" starttime="20171003 17:49:05.842"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.843" starttime="20171003 17:49:05.842"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.843" starttime="20171003 17:49:05.837"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.843" starttime="20171003 17:49:05.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:05.844" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:05.844" starttime="20171003 17:49:05.843"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:05.885" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:05.886" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171003 17:49:05.945" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:05.945" starttime="20171003 17:49:05.862"></status>
</kw>
<msg timestamp="20171003 17:49:05.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.945" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171003 17:49:05.945" starttime="20171003 17:49:05.844"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:05.946" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171003 17:49:05.946" starttime="20171003 17:49:05.945"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:05.946" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:05.946" starttime="20171003 17:49:05.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:05.954" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:05.954" starttime="20171003 17:49:05.954"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.954" starttime="20171003 17:49:05.953"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.954" starttime="20171003 17:49:05.947"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.954" starttime="20171003 17:49:05.835"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.954" starttime="20171003 17:49:05.835"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:05.607"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:05.605"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:05.605"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:03.930"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:03.929"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:03.916"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:03.914"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:05.955" starttime="20171003 17:49:03.913"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:05.957" starttime="20171003 17:49:05.957"></status>
</kw>
<msg timestamp="20171003 17:49:05.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:05.957" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:05.957" starttime="20171003 17:49:05.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:05.958" starttime="20171003 17:49:05.957"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 17:49:05.972" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171003 17:49:05.972" starttime="20171003 17:49:05.972"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 17:49:05.974" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171003 17:49:05.974" starttime="20171003 17:49:05.973"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:05.975" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171003 17:49:05.975" starttime="20171003 17:49:05.974"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:05.978" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:05.979" starttime="20171003 17:49:05.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:05.980" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:05.980" starttime="20171003 17:49:05.979"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:05.980" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:05.980" starttime="20171003 17:49:05.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:05.981" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:05.981" starttime="20171003 17:49:05.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:06.196" starttime="20171003 17:49:05.982"></status>
</kw>
<msg timestamp="20171003 17:49:06.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:06.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.196" starttime="20171003 17:49:05.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.197" starttime="20171003 17:49:06.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.198" starttime="20171003 17:49:06.198"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.198" starttime="20171003 17:49:05.977"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.198" starttime="20171003 17:49:05.976"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.198" starttime="20171003 17:49:05.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:06.199" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:06.199" starttime="20171003 17:49:06.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:06.200" starttime="20171003 17:49:06.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:06.730" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:06.730" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.730" starttime="20171003 17:49:06.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:06.731" starttime="20171003 17:49:06.730"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:06.731" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:06.732" starttime="20171003 17:49:06.731"></status>
</kw>
<msg timestamp="20171003 17:49:06.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.732" starttime="20171003 17:49:05.975"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.733" starttime="20171003 17:49:06.733"></status>
</kw>
<msg timestamp="20171003 17:49:06.733" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:06.733" starttime="20171003 17:49:06.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:06.734" starttime="20171003 17:49:06.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:06.735" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 6000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27270
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 206000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:06.735" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:06.735" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171003 17:49:06.735" starttime="20171003 17:49:06.734"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:06.737" starttime="20171003 17:49:06.736"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.737" starttime="20171003 17:49:06.736"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.737" starttime="20171003 17:49:05.974"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:06.738" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_OCC_state.txt</msg>
<status status="PASS" endtime="20171003 17:49:06.738" starttime="20171003 17:49:06.738"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:06.741" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:06.742" starttime="20171003 17:49:06.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:06.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:06.742" starttime="20171003 17:49:06.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:06.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:06.743" starttime="20171003 17:49:06.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:06.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:06.744" starttime="20171003 17:49:06.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:06.907" starttime="20171003 17:49:06.744"></status>
</kw>
<msg timestamp="20171003 17:49:06.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:06.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.907" starttime="20171003 17:49:06.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.908" starttime="20171003 17:49:06.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:06.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:06.909" starttime="20171003 17:49:06.908"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.909" starttime="20171003 17:49:06.740"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.909" starttime="20171003 17:49:06.739"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:06.909" starttime="20171003 17:49:06.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:06.910" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:06.910" starttime="20171003 17:49:06.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:06.910" starttime="20171003 17:49:06.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:07.072" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:07.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.073" starttime="20171003 17:49:06.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.073" starttime="20171003 17:49:07.073"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:07.074" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:07.074" starttime="20171003 17:49:07.074"></status>
</kw>
<msg timestamp="20171003 17:49:07.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.074" starttime="20171003 17:49:06.738"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.075" starttime="20171003 17:49:07.075"></status>
</kw>
<msg timestamp="20171003 17:49:07.075" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:07.075" starttime="20171003 17:49:07.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.076" starttime="20171003 17:49:07.076"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:07.077" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:07.077" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:07.077" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20171003 17:49:07.077" starttime="20171003 17:49:07.076"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.078" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_OCC_state.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:07.078" starttime="20171003 17:49:07.078"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.078" starttime="20171003 17:49:07.077"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.078" starttime="20171003 17:49:06.737"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:07.079" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171003 17:49:07.079" starttime="20171003 17:49:07.079"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:07.082" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:07.083" starttime="20171003 17:49:07.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:07.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:07.083" starttime="20171003 17:49:07.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:07.084" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:07.084" starttime="20171003 17:49:07.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:07.085" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:07.085" starttime="20171003 17:49:07.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:07.257" starttime="20171003 17:49:07.086"></status>
</kw>
<msg timestamp="20171003 17:49:07.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:07.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.257" starttime="20171003 17:49:07.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.258" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.258" starttime="20171003 17:49:07.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.259" starttime="20171003 17:49:07.258"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.259" starttime="20171003 17:49:07.081"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.259" starttime="20171003 17:49:07.081"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.259" starttime="20171003 17:49:07.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:07.260" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:07.260" starttime="20171003 17:49:07.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.260" starttime="20171003 17:49:07.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:07.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:07.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.562" starttime="20171003 17:49:07.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.562" starttime="20171003 17:49:07.562"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:07.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:07.563" starttime="20171003 17:49:07.563"></status>
</kw>
<msg timestamp="20171003 17:49:07.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.563" starttime="20171003 17:49:07.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.564" starttime="20171003 17:49:07.564"></status>
</kw>
<msg timestamp="20171003 17:49:07.564" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:07.564" starttime="20171003 17:49:07.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.565" starttime="20171003 17:49:07.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:07.566" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:07.566" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:07.566" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171003 17:49:07.566" starttime="20171003 17:49:07.565"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:07.568" starttime="20171003 17:49:07.567"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.568" starttime="20171003 17:49:07.566"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.568" starttime="20171003 17:49:07.079"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:07.568" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_led.txt</msg>
<status status="PASS" endtime="20171003 17:49:07.569" starttime="20171003 17:49:07.568"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:07.572" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:07.572" starttime="20171003 17:49:07.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:07.573" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:07.573" starttime="20171003 17:49:07.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:07.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:07.573" starttime="20171003 17:49:07.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:07.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:07.574" starttime="20171003 17:49:07.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:07.787" starttime="20171003 17:49:07.575"></status>
</kw>
<msg timestamp="20171003 17:49:07.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:07.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.787" starttime="20171003 17:49:07.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.788" starttime="20171003 17:49:07.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:07.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:07.789" starttime="20171003 17:49:07.788"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.789" starttime="20171003 17:49:07.571"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.789" starttime="20171003 17:49:07.570"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:07.789" starttime="20171003 17:49:07.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:07.790" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:07.790" starttime="20171003 17:49:07.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:07.790" starttime="20171003 17:49:07.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:09.400" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:09.400" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.400" starttime="20171003 17:49:07.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:09.401" starttime="20171003 17:49:09.401"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:09.401" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:09.402" starttime="20171003 17:49:09.401"></status>
</kw>
<msg timestamp="20171003 17:49:09.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.402" starttime="20171003 17:49:07.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.403" starttime="20171003 17:49:09.403"></status>
</kw>
<msg timestamp="20171003 17:49:09.403" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:09.403" starttime="20171003 17:49:09.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:09.404" starttime="20171003 17:49:09.404"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:09.406" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:09.406" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:09.407" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171003 17:49:09.407" starttime="20171003 17:49:09.404"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_led.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:09.408" starttime="20171003 17:49:09.408"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.408" starttime="20171003 17:49:09.407"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.408" starttime="20171003 17:49:07.568"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:09.409" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171003 17:49:09.409" starttime="20171003 17:49:09.409"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:09.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:09.413" starttime="20171003 17:49:09.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:09.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:09.413" starttime="20171003 17:49:09.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:09.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:09.414" starttime="20171003 17:49:09.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:09.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:09.415" starttime="20171003 17:49:09.414"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:09.591" starttime="20171003 17:49:09.416"></status>
</kw>
<msg timestamp="20171003 17:49:09.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:09.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.591" starttime="20171003 17:49:09.415"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.592" starttime="20171003 17:49:09.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.593" starttime="20171003 17:49:09.592"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.593" starttime="20171003 17:49:09.411"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.593" starttime="20171003 17:49:09.411"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.593" starttime="20171003 17:49:09.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:09.593" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:09.594" starttime="20171003 17:49:09.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:09.594" starttime="20171003 17:49:09.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:09.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:09.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.983" starttime="20171003 17:49:09.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:09.984" starttime="20171003 17:49:09.984"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:09.985" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:09.985" starttime="20171003 17:49:09.984"></status>
</kw>
<msg timestamp="20171003 17:49:09.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.985" starttime="20171003 17:49:09.409"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:09.986" starttime="20171003 17:49:09.986"></status>
</kw>
<msg timestamp="20171003 17:49:09.986" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:09.986" starttime="20171003 17:49:09.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:09.987" starttime="20171003 17:49:09.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:09.988" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/21912c1a": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-87-g8c46ded", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/21912c1a/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/21912c1a/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-34-g4e109d4", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/754aca46/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/21912c1a", 
        "/xyz/openbmc_project/software/754aca46", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:09.988" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:09.988" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/21912c1a": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171003 17:49:09.988" starttime="20171003 17:49:09.987"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:09.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:09.990" starttime="20171003 17:49:09.989"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.990" starttime="20171003 17:49:09.988"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:09.990" starttime="20171003 17:49:09.409"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:09.991" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_elog.txt</msg>
<status status="PASS" endtime="20171003 17:49:09.991" starttime="20171003 17:49:09.990"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:09.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:09.994" starttime="20171003 17:49:09.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:09.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:09.995" starttime="20171003 17:49:09.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:09.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:09.996" starttime="20171003 17:49:09.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:09.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:09.996" starttime="20171003 17:49:09.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:10.208" starttime="20171003 17:49:09.997"></status>
</kw>
<msg timestamp="20171003 17:49:10.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:10.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.208" starttime="20171003 17:49:09.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.209" starttime="20171003 17:49:10.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.210" starttime="20171003 17:49:10.210"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.210" starttime="20171003 17:49:09.993"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.210" starttime="20171003 17:49:09.993"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.210" starttime="20171003 17:49:09.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:10.211" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:10.211" starttime="20171003 17:49:10.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:10.212" starttime="20171003 17:49:10.211"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:10.263" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:10.264" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.264" starttime="20171003 17:49:10.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:10.264" starttime="20171003 17:49:10.264"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:10.265" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:10.265" starttime="20171003 17:49:10.265"></status>
</kw>
<msg timestamp="20171003 17:49:10.265" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.265" starttime="20171003 17:49:09.991"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 17:49:10.266" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171003 17:49:10.267" starttime="20171003 17:49:10.266"></status>
</kw>
<msg timestamp="20171003 17:49:10.267" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171003 17:49:10.267" starttime="20171003 17:49:10.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171003 17:49:10.268" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171003 17:49:10.268" starttime="20171003 17:49:10.267"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.268" starttime="20171003 17:49:10.267"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.268" starttime="20171003 17:49:09.990"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:10.269" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171003 17:49:10.269" starttime="20171003 17:49:10.268"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:10.274" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:10.274" starttime="20171003 17:49:10.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:10.275" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:10.275" starttime="20171003 17:49:10.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:10.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:10.276" starttime="20171003 17:49:10.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:10.276" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:10.276" starttime="20171003 17:49:10.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.446" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:10.446" starttime="20171003 17:49:10.277"></status>
</kw>
<msg timestamp="20171003 17:49:10.447" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:10.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.447" starttime="20171003 17:49:10.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.447" starttime="20171003 17:49:10.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:10.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:10.448" starttime="20171003 17:49:10.448"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.448" starttime="20171003 17:49:10.273"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.448" starttime="20171003 17:49:10.272"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:10.448" starttime="20171003 17:49:10.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:10.449" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171003 17:49:10.449" starttime="20171003 17:49:10.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:10.450" starttime="20171003 17:49:10.449"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:12.633" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:12.633" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:12.633" starttime="20171003 17:49:10.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.634" starttime="20171003 17:49:12.633"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:12.634" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:12.634" starttime="20171003 17:49:12.634"></status>
</kw>
<msg timestamp="20171003 17:49:12.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:12.635" starttime="20171003 17:49:10.269"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:12.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:12.636" starttime="20171003 17:49:12.635"></status>
</kw>
<msg timestamp="20171003 17:49:12.636" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171003 17:49:12.636" starttime="20171003 17:49:12.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.637" starttime="20171003 17:49:12.637"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171003 17:49:12.640" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/21912c1a", 
        "/xyz/openbmc_project/software/754aca46"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171003 17:49:12.641" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171003 17:49:12.641" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171003 17:49:12.641" starttime="20171003 17:49:12.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:12.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:12.642"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:12.641"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:10.268"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.974"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.973"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.972"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.972"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.971"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.958"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.955"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.643" starttime="20171003 17:49:05.955"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.645" starttime="20171003 17:49:12.645"></status>
</kw>
<msg timestamp="20171003 17:49:12.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:12.645" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:12.645" starttime="20171003 17:49:12.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.646" starttime="20171003 17:49:12.646"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.662" starttime="20171003 17:49:12.661"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171003 17:49:12.663" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171003 17:49:12.663" starttime="20171003 17:49:12.663"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.663" starttime="20171003 17:49:12.660"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.663" starttime="20171003 17:49:12.646"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.663" starttime="20171003 17:49:12.644"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:12.664" starttime="20171003 17:49:12.643"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.665" starttime="20171003 17:49:12.665"></status>
</kw>
<msg timestamp="20171003 17:49:12.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:12.666" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:12.666" starttime="20171003 17:49:12.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.666" starttime="20171003 17:49:12.666"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171003 17:49:12.699" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:12.700" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171003 17:49:12.748" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171003 17:49:12.758" level="INFO">${core_files} = None</msg>
<msg timestamp="20171003 17:49:12.758" level="INFO">${stderr} = None</msg>
<msg timestamp="20171003 17:49:12.758" level="INFO">${rc} = None</msg>
<msg timestamp="20171003 17:49:12.758" level="FAIL">#(UTC) 2017/10/03 17:49:12.757241 -    0.058097 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171003 17:49:12.758" starttime="20171003 17:49:12.680"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171003 17:49:12.759" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171003 17:49:12.759" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171003 17:49:12.759" starttime="20171003 17:49:12.759"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:12.775" starttime="20171003 17:49:12.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:13.543" starttime="20171003 17:49:12.776"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.543" starttime="20171003 17:49:12.775"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.543" starttime="20171003 17:49:12.767"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.543" starttime="20171003 17:49:12.759"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171003 17:49:13.543" starttime="20171003 17:49:13.543"></status>
</kw>
<status status="FAIL" endtime="20171003 17:49:13.544" starttime="20171003 17:49:12.680"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.544" starttime="20171003 17:49:12.667"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.544" starttime="20171003 17:49:12.664"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.544" starttime="20171003 17:49:12.664"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:13.546" starttime="20171003 17:49:13.546"></status>
</kw>
<msg timestamp="20171003 17:49:13.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:13.546" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:13.546" starttime="20171003 17:49:13.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:13.547" starttime="20171003 17:49:13.547"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171003 17:49:13.561" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171003 17:49:13.561" starttime="20171003 17:49:13.561"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171003 17:49:13.563" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171003 17:49:13.563" starttime="20171003 17:49:13.562"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:13.564" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171003 17:49:13.564" starttime="20171003 17:49:13.563"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:13.565" starttime="20171003 17:49:13.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:13.566" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:13.566" starttime="20171003 17:49:13.565"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:13.607" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:13.607" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171003 17:49:13.684" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:13.684" starttime="20171003 17:49:13.584"></status>
</kw>
<msg timestamp="20171003 17:49:13.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:13.684" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171003 17:49:13.684" starttime="20171003 17:49:13.566"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:13.685" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171003 17:49:13.685" starttime="20171003 17:49:13.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:13.685" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:13.685" starttime="20171003 17:49:13.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:13.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:13.693" starttime="20171003 17:49:13.693"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.694" starttime="20171003 17:49:13.692"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.694" starttime="20171003 17:49:13.686"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.694" starttime="20171003 17:49:13.564"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:13.694" starttime="20171003 17:49:13.563"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:13.695" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171003 17:49:13.695" starttime="20171003 17:49:13.694"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:13.696" starttime="20171003 17:49:13.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:13.697" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:13.697" starttime="20171003 17:49:13.696"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:13.737" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:13.738" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171003 17:49:14.340" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:14.340" starttime="20171003 17:49:13.714"></status>
</kw>
<msg timestamp="20171003 17:49:14.340" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:14.341" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  3 16:38 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  3 16:38 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171003 17:49:14.341" starttime="20171003 17:49:13.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:14.342" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  3 16:38 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  3 16:38 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171003 17:49:14.342" starttime="20171003 17:49:14.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:14.343" level="INFO">${stderr} = ls: /proc/2563/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171003 17:49:14.343" starttime="20171003 17:49:14.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:14.351" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:14.351" starttime="20171003 17:49:14.351"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:14.351" starttime="20171003 17:49:14.350"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:14.352" starttime="20171003 17:49:14.343"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:14.352" starttime="20171003 17:49:13.695"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:14.352" starttime="20171003 17:49:13.694"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:14.353" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171003 17:49:14.353" starttime="20171003 17:49:14.352"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:14.354" starttime="20171003 17:49:14.354"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:14.355" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:14.355" starttime="20171003 17:49:14.354"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:14.396" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:14.396" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171003 17:49:17.464" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:17.464" starttime="20171003 17:49:14.373"></status>
</kw>
<msg timestamp="20171003 17:49:17.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:17.468" level="INFO">${ret_values} = (u'-- Logs begin at Tue 2017-10-03 16:35:46 UTC, end at Tue 2017-10-03 17:49:28 UTC. --\nOct 03 16:35:46 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 03 16:35:46 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171003 17:49:17.468" starttime="20171003 17:49:14.355"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:17.470" level="INFO">${stdout} = -- Logs begin at Tue 2017-10-03 16:35:46 UTC, end at Tue 2017-10-03 17:49:28 UTC. --
Oct 03 16:35:46 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 03 16:35:46 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171003 17:49:17.470" starttime="20171003 17:49:17.469"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:17.471" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:17.471" starttime="20171003 17:49:17.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:17.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:17.481" starttime="20171003 17:49:17.479"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:17.481" starttime="20171003 17:49:17.478"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:17.481" starttime="20171003 17:49:17.471"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:17.481" starttime="20171003 17:49:14.353"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:17.481" starttime="20171003 17:49:14.352"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:17.482" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171003 17:49:17.482" starttime="20171003 17:49:17.481"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:17.483" starttime="20171003 17:49:17.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:17.484" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:17.484" starttime="20171003 17:49:17.483"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:17.526" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:17.527" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171003 17:49:25.852" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:25.857" starttime="20171003 17:49:17.503"></status>
</kw>
<msg timestamp="20171003 17:49:25.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:25.900" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=2dc276e766e14b7eb568258574de60aa;i=1;b=932dea5a5d1e4e2ea910afda13c99f8b;m=14cdc6c;t=55aa7153eaa4f;x=3b7ae4e13547024f",\n\t"__REALTIME_TIMESTAMP" : "1507048546019919",\n\t"__MON...</msg>
<status status="PASS" endtime="20171003 17:49:25.900" starttime="20171003 17:49:17.484"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:25.910" level="INFO">${stdout} = {
	"__CURSOR" : "s=2dc276e766e14b7eb568258574de60aa;i=1;b=932dea5a5d1e4e2ea910afda13c99f8b;m=14cdc6c;t=55aa7153eaa4f;x=3b7ae4e13547024f",
	"__REALTIME_TIMESTAMP" : "1507048546019919",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20171003 17:49:25.911" starttime="20171003 17:49:25.901"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:25.911" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:25.911" starttime="20171003 17:49:25.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:25.936" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:25.937" starttime="20171003 17:49:25.929"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:25.937" starttime="20171003 17:49:25.918"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:25.937" starttime="20171003 17:49:25.912"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:25.937" starttime="20171003 17:49:17.482"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:25.937" starttime="20171003 17:49:17.481"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:25.938" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171003 17:49:25.938" starttime="20171003 17:49:25.937"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:25.939" starttime="20171003 17:49:25.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:25.940" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:25.940" starttime="20171003 17:49:25.940"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:25.983" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:25.984" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171003 17:49:26.031" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:26.031" starttime="20171003 17:49:25.959"></status>
</kw>
<msg timestamp="20171003 17:49:26.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.031" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221412 kB\nMemAvailable:     324912 kB\nBuffers:           31972 kB\nCached:            82036 kB\nSwapCached:            0 kB\nActive:           16274...</msg>
<status status="PASS" endtime="20171003 17:49:26.031" starttime="20171003 17:49:25.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:26.032" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221412 kB
MemAvailable:     324912 kB
Buffers:           31972 kB
Cached:            82036 kB
SwapCached:            0 kB
Active:           162740 kB
Inac...</msg>
<status status="PASS" endtime="20171003 17:49:26.032" starttime="20171003 17:49:26.031"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:26.032" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:26.032" starttime="20171003 17:49:26.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.040" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:26.040" starttime="20171003 17:49:26.040"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.041" starttime="20171003 17:49:26.039"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.041" starttime="20171003 17:49:26.033"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.041" starttime="20171003 17:49:25.938"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.041" starttime="20171003 17:49:25.937"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:26.042" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171003 17:49:26.042" starttime="20171003 17:49:26.041"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.043" starttime="20171003 17:49:26.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:26.044" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:26.044" starttime="20171003 17:49:26.043"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:26.085" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:26.086" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171003 17:49:26.435" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:26.435" starttime="20171003 17:49:26.062"></status>
</kw>
<msg timestamp="20171003 17:49:26.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.435" level="INFO">${ret_values} = (u'Mem: 210832K used, 221412K free, 8956K shrd, 31972K buff, 82036K cached\nCPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq\nLoad average: 0.48 0.31 0.29 1/156 2567\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171003 17:49:26.435" starttime="20171003 17:49:26.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:26.436" level="INFO">${stdout} = Mem: 210832K used, 221412K free, 8956K shrd, 31972K buff, 82036K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 0.48 0.31 0.29 1/156 2567
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171003 17:49:26.436" starttime="20171003 17:49:26.435"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:26.436" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:26.436" starttime="20171003 17:49:26.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.444" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:26.444" starttime="20171003 17:49:26.444"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.445" starttime="20171003 17:49:26.443"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.445" starttime="20171003 17:49:26.437"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.445" starttime="20171003 17:49:26.042"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.445" starttime="20171003 17:49:26.041"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171003 17:49:26.446" level="INFO">${logpath} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171003 17:49:26.446" starttime="20171003 17:49:26.445"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.447" starttime="20171003 17:49:26.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171003 17:49:26.448" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171003 17:49:26.448" starttime="20171003 17:49:26.447"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171003 17:49:26.489" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171003 17:49:26.490" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171003 17:49:26.547" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171003 17:49:26.547" starttime="20171003 17:49:26.466"></status>
</kw>
<msg timestamp="20171003 17:49:26.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.547" level="INFO">${ret_values} = (u'[    0.260000] ipmi-bt-host 1e789140.ibt: Using IRQ 22\n[    0.260000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled\n[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, ba...</msg>
<status status="PASS" endtime="20171003 17:49:26.547" starttime="20171003 17:49:26.448"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171003 17:49:26.548" level="INFO">${stdout} = [    0.260000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    0.260000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_ba...</msg>
<status status="PASS" endtime="20171003 17:49:26.548" starttime="20171003 17:49:26.548"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171003 17:49:26.549" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171003 17:49:26.549" starttime="20171003 17:49:26.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/20171003174903694730_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:26.557"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:26.556"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:26.549"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:26.446"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:26.445"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.563"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.562"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.562"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.562"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.560"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.558" starttime="20171003 17:49:13.547"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.559" starttime="20171003 17:49:13.544"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.559" starttime="20171003 17:49:13.544"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.561" starttime="20171003 17:49:26.560"></status>
</kw>
<msg timestamp="20171003 17:49:26.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.561" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:26.561" starttime="20171003 17:49:26.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.561" starttime="20171003 17:49:26.561"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:26.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:26.579" starttime="20171003 17:49:26.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:26.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:26.580" starttime="20171003 17:49:26.579"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:26.580" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:26.580" starttime="20171003 17:49:26.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:26.581" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:26.581" starttime="20171003 17:49:26.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:26.789" starttime="20171003 17:49:26.582"></status>
</kw>
<msg timestamp="20171003 17:49:26.789" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:26.789" starttime="20171003 17:49:26.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.790" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:26.790" starttime="20171003 17:49:26.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:26.791" starttime="20171003 17:49:26.790"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.791" starttime="20171003 17:49:26.577"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.791" starttime="20171003 17:49:26.577"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.791" starttime="20171003 17:49:26.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:26.792" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171003 17:49:26.792" starttime="20171003 17:49:26.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.792" starttime="20171003 17:49:26.792"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:26.868" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171003 17:49:26.868" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:26.868" starttime="20171003 17:49:26.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.869" starttime="20171003 17:49:26.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:26.869" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:26.869" starttime="20171003 17:49:26.869"></status>
</kw>
<msg timestamp="20171003 17:49:26.870" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:26.870" starttime="20171003 17:49:26.575"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171003 17:49:26.871" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171003 17:49:26.871" starttime="20171003 17:49:26.871"></status>
</kw>
<msg timestamp="20171003 17:49:26.871" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171003 17:49:26.871" starttime="20171003 17:49:26.870"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171003 17:49:26.872" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:49:26.872" starttime="20171003 17:49:26.872"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.872" starttime="20171003 17:49:26.575"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.872" starttime="20171003 17:49:26.562"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.872" starttime="20171003 17:49:26.559"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.872" starttime="20171003 17:49:26.559"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.874" starttime="20171003 17:49:26.874"></status>
</kw>
<msg timestamp="20171003 17:49:26.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:26.874" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171003 17:49:26.874" starttime="20171003 17:49:26.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.875" starttime="20171003 17:49:26.875"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171003 17:49:26.890" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:26.890"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:26.889"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:26.875"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:26.873"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:26.872"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.890" starttime="20171003 17:49:03.913"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.891" starttime="20171003 17:49:03.910"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.891" starttime="20171003 17:49:03.910"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.891" starttime="20171003 17:49:03.910"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171003 17:49:26.897" starttime="20171003 17:49:26.897"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.897" starttime="20171003 17:49:26.891"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.897" starttime="20171003 17:49:03.909"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.898" starttime="20171003 17:49:00.651"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.898" starttime="20171003 17:49:00.651"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171003 17:49:26.899" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171003 17:49:26.899" starttime="20171003 17:49:26.899"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171003 17:49:26.900" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171003174903694730_BmcCodeUpdate/20171003174903694730_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171003 17:49:26.900" starttime="20171003 17:49:26.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.900" starttime="20171003 17:49:26.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.901" starttime="20171003 17:49:26.901"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.902" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171003 17:49:26.902" starttime="20171003 17:49:26.902"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.903" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171003 17:49:26.903" starttime="20171003 17:49:26.903"></status>
</kw>
<msg timestamp="20171003 17:49:26.903" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171003 17:49:26.903" starttime="20171003 17:49:26.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.904" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:26.905" starttime="20171003 17:49:26.904"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.905" starttime="20171003 17:49:26.904"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:26.905" starttime="20171003 17:49:26.905"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 17:49:26.907" level="INFO">${cur_time} = 2017-10-03 17:49:26:906400</msg>
<status status="PASS" endtime="20171003 17:49:26.907" starttime="20171003 17:49:26.906"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171003 17:49:26.907" level="INFO">${cur_time} = 20171003174926906400</msg>
<status status="PASS" endtime="20171003 17:49:26.907" starttime="20171003 17:49:26.907"></status>
</kw>
<msg timestamp="20171003 17:49:26.907" level="INFO">${cur_time} = 20171003174926906400</msg>
<status status="PASS" endtime="20171003 17:49:26.907" starttime="20171003 17:49:26.906"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171003 17:49:26.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171003 17:49:26.908" starttime="20171003 17:49:26.908"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:26.908" starttime="20171003 17:49:26.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:26.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:26.913" starttime="20171003 17:49:26.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:26.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:26.914" starttime="20171003 17:49:26.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:26.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:26.915" starttime="20171003 17:49:26.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:26.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:26.915" starttime="20171003 17:49:26.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:27.083" starttime="20171003 17:49:26.916"></status>
</kw>
<msg timestamp="20171003 17:49:27.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:27.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.083" starttime="20171003 17:49:26.916"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.084" starttime="20171003 17:49:27.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.084" starttime="20171003 17:49:27.084"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.084" starttime="20171003 17:49:26.912"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.084" starttime="20171003 17:49:26.912"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.085" starttime="20171003 17:49:26.911"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:27.085" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171003 17:49:27.085" starttime="20171003 17:49:27.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:27.086" starttime="20171003 17:49:27.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:27.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171003 17:49:27.138" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.138" starttime="20171003 17:49:27.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:27.139" starttime="20171003 17:49:27.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:27.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:27.139" starttime="20171003 17:49:27.139"></status>
</kw>
<msg timestamp="20171003 17:49:27.140" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.140" starttime="20171003 17:49:26.910"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.140" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:49:27.140" starttime="20171003 17:49:27.140"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.141" starttime="20171003 17:49:26.910"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171003 17:49:27.144" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171003 17:49:27.145" starttime="20171003 17:49:27.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171003 17:49:27.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171003 17:49:27.145" starttime="20171003 17:49:27.145"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171003 17:49:27.146" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171003 17:49:27.146" starttime="20171003 17:49:27.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171003 17:49:27.147" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171003 17:49:27.147" starttime="20171003 17:49:27.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171003 17:49:27.335" starttime="20171003 17:49:27.149"></status>
</kw>
<msg timestamp="20171003 17:49:27.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20171003 17:49:27.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.335" starttime="20171003 17:49:27.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.336" starttime="20171003 17:49:27.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.337" starttime="20171003 17:49:27.336"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.337" starttime="20171003 17:49:27.143"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.337" starttime="20171003 17:49:27.142"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.337" starttime="20171003 17:49:27.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171003 17:49:27.338" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171003 17:49:27.338" starttime="20171003 17:49:27.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:27.339" starttime="20171003 17:49:27.338"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171003 17:49:27.391" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171003 17:49:27.391" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.391" starttime="20171003 17:49:27.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:27.391" starttime="20171003 17:49:27.391"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171003 17:49:27.392" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171003 17:49:27.392" starttime="20171003 17:49:27.392"></status>
</kw>
<msg timestamp="20171003 17:49:27.392" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171003 17:49:27.392" starttime="20171003 17:49:27.141"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171003 17:49:27.393" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171003 17:49:27.393" starttime="20171003 17:49:27.393"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.393" starttime="20171003 17:49:27.141"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.393" starttime="20171003 17:49:26.909"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.393" starttime="20171003 17:49:26.909"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.393" starttime="20171003 17:49:00.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20171003 17:49:27.394" starttime="20171003 17:49:27.394"></status>
</kw>
<status status="PASS" endtime="20171003 17:49:27.394" starttime="20171003 17:49:00.649"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171003 17:49:27.394" critical="yes" starttime="20171003 17:48:39.949">413 != 200</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171003 17:49:27.396" starttime="20171003 17:48:38.926"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
